

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
      var PACKAGE_PATH;
      if (typeof window === 'object') {
        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
      } else if (typeof location !== 'undefined') {
        // worker
        PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
      } else {
        throw 'using preloaded data can only be done on a web page or in a web worker';
      }
      var PACKAGE_NAME = 'build/asmjs.data';
      var REMOTE_PACKAGE_BASE = 'asmjs.data';
      if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
        Module['locateFile'] = Module['locateFilePackage'];
        err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
      }
      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
    
      var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];
      var PACKAGE_UUID = metadata['package_uuid'];
    
      function fetchRemotePackage(packageName, packageSize, callback, errback) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', packageName, true);
        xhr.responseType = 'arraybuffer';
        xhr.onprogress = function(event) {
          var url = packageName;
          var size = packageSize;
          if (event.total) size = event.total;
          if (event.loaded) {
            if (!xhr.addedTotal) {
              xhr.addedTotal = true;
              if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
              Module.dataFileDownloads[url] = {
                loaded: event.loaded,
                total: size
              };
            } else {
              Module.dataFileDownloads[url].loaded = event.loaded;
            }
            var total = 0;
            var loaded = 0;
            var num = 0;
            for (var download in Module.dataFileDownloads) {
            var data = Module.dataFileDownloads[download];
              total += data.total;
              loaded += data.loaded;
              num++;
            }
            total = Math.ceil(total * Module.expectedDataFileDownloads/num);
            if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
          } else if (!Module.dataFileDownloads) {
            if (Module['setStatus']) Module['setStatus']('Downloading data...');
          }
        };
        xhr.onerror = function(event) {
          throw new Error("NetworkError for: " + packageName);
        }
        xhr.onload = function(event) {
          if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            var packageData = xhr.response;
            callback(packageData);
          } else {
            throw new Error(xhr.statusText + " : " + xhr.responseURL);
          }
        };
        xhr.send(null);
      };

      function handleError(error) {
        console.error('package error:', error);
      };
    
        var fetchedCallback = null;
        var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

        if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
          if (fetchedCallback) {
            fetchedCallback(data);
            fetchedCallback = null;
          } else {
            fetched = data;
          }
        }, handleError);
      
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  Module['FS_createPath']("/", "data", true, true);

          /** @constructor */
          function DataRequest(start, end, audio) {
            this.start = start;
            this.end = end;
            this.audio = audio;
          }
          DataRequest.prototype = {
            requests: {},
            open: function(mode, name) {
              this.name = name;
              this.requests[name] = this;
              Module['addRunDependency']('fp ' + this.name);
            },
            send: function() {},
            onload: function() {
              var byteArray = this.byteArray.subarray(this.start, this.end);
              this.finish(byteArray);
            },
            finish: function(byteArray) {
              var that = this;
      
          Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
          Module['removeRunDependency']('fp ' + that.name);
  
              this.requests[this.name] = null;
            }
          };
      
              var files = metadata['files'];
              for (var i = 0; i < files.length; ++i) {
                new DataRequest(files[i]['start'], files[i]['end'], files[i]['audio']).open('GET', files[i]['filename']);
              }
      
        
      function processPackageData(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        
          // Reuse the bytearray from the XHR as the source for file reads.
          DataRequest.prototype.byteArray = byteArray;
    
            var files = metadata['files'];
            for (var i = 0; i < files.length; ++i) {
              DataRequest.prototype.requests[files[i].filename].onload();
            }
                Module['removeRunDependency']('datafile_build/asmjs.data');

      };
      Module['addRunDependency']('datafile_build/asmjs.data');
    
      if (!Module.preloadResults) Module.preloadResults = {};
    
        Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
        if (fetched) {
          processPackageData(fetched);
          fetched = null;
        } else {
          fetchedCallback = processPackageData;
        }
      
    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": [{"filename": "/data/file.txt", "start": 0, "end": 179, "audio": 0}, {"filename": "/data/file.js", "start": 179, "end": 962, "audio": 0}, {"filename": "/data/container.jpg", "start": 962, "end": 185901, "audio": 0}], "remote_package_size": 185901, "package_uuid": "c293a6db-c6c0-4801-882a-2a9bdaa5f269"});
  
  })();
  

    // All the pre-js content up to here must remain later on, we need to run
    // it.
    var necessaryPreJSTasks = Module['preRun'].slice();
  
    if (!Module['preRun']) throw 'Module.preRun should exist because file support used it; did a pre-js delete it?';
    necessaryPreJSTasks.forEach(function(task) {
      if (Module['preRun'].indexOf(task) < 0) throw 'All preRun tasks that exist before user pre-js code should remain after; did you replace Module or modify Module.preRun?';
    });
  

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || true;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "YXR0cmlidXRlIHZlYzMgYVBvczsKYXR0cmlidXRlIHZlYzIgYVRleENvb3JkOwp2YXJ5aW5nIHZlYzIgVGV4Q29vcmQ7CnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChhUG9zLCAxLjApOwogICAgVGV4Q29vcmQgPSBhVGV4Q29vcmQ7Cn0KAABwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKdW5pZm9ybSBzYW1wbGVyMkQgb3VyVGV4dHVyZTsKdmFyeWluZyB2ZWMyIFRleENvb3JkOwp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQob3VyVGV4dHVyZSwgVGV4Q29vcmQpOwp9CgAAAAAAAAAAAHgUAAAjAAAAJAAAACUAAAAlAAAAaW5maW5pdHkARmVicnVhcnkASmFudWFyeQBKdWx5ADEvMi80LzgtYml0IG9ubHkAc3RiaV9fY29tcHV0ZV90cmFuc3BhcmVuY3kAVGh1cnNkYXkAVHVlc2RheQBXZWRuZXNkYXkAU2F0dXJkYXkAU3VuZGF5AE1vbmRheQBGcmlkYXkATWF5ACVtLyVkLyV5AC0rICAgMFgweAAtMFgrMFggMFgtMHgrMHggMHgAaW1nX3dpZHRoX2J5dGVzIDw9IHgARmFpbGVkIHRvIGNyZWF0ZSBHTEZXIHdpbmRvdwBkcmF3AHN0YmlfX2NyZWF0ZV9wbmdfaW1hZ2VfcmF3AE5vdgBUaHUAdW5zdXBwb3J0ZWQgbG9jYWxlIGZvciBzdGFuZGFyZCBpbnB1dAB1bnN1cHBvcnRlZCBkYXRhIGxheW91dABBdWd1c3QAYmFkIGRpc3QAc2V0Vmlld3BvcnQAdW5zaWduZWQgc2hvcnQAemxpYiBjb3JydXB0AGJhZCBjb21wb25lbnQgY291bnQAYmFkIFNPUyBjb21wb25lbnQgY291bnQAd3JvbmcgY2hhbm5lbCBjb3VudAB1bnNpZ25lZCBpbnQAaW1wbGVtZW50AG91dHB1dCBidWZmZXIgbGltaXQAb25seSA4LWJpdABubyBoZWFkZXIgaGVpZ2h0AF9fZGVzdHJ1Y3QAbm8gcHJlc2V0IGRpY3QAT2N0AGZsb2F0AHN0YmlfX2NvbnZlcnRfZm9ybWF0AHdyb25nIGNvbG9yIGZvcm1hdAB1bnN1cHBvcnRlZCBmb3JtYXQAYmFkIGZvcm1hdABTYXQAdWludDY0X3QAc3RiaV9fZmlsbF9iaXRzAG5vdCBlbm91Z2ggcGl4ZWxzAGJhZCBtYXNrcwAuL2RhdGEvZmlsZS5qcwBiYWQgY29kZWxlbmd0aHMAYmFkIGNvZGUgbGVuZ3RocwBiYWQgc2l6ZXMAc3RiaV9fY29tcHV0ZV9odWZmbWFuX2NvZGVzAHRvbyBtYW55IGNvZGVzAHotPnNpemVbYl0gPT0gcwBBcHIAYmFkIEltYWdlIERlc2NyaXB0b3IAdmVjdG9yAGNsZWFyQ29sb3IAaWxsZWdhbCBjb2RlIGluIHJhc3RlcgBpbnZhbGlkIGZpbHRlcgBBcHBsaWNhdGlvbldyYXBwZXIAanVuayBiZWZvcmUgbWFya2VyAGV4cGVjdGVkIG1hcmtlcgByZWFkIHBhc3QgYnVmZmVyAGJhZCB6bGliIGhlYWRlcgBiYWQgREhUIGhlYWRlcgBPY3RvYmVyAE5vdmVtYmVyAFNlcHRlbWJlcgBEZWNlbWJlcgB1bnNpZ25lZCBjaGFyAGlvc19iYXNlOjpjbGVhcgBNYXIAc2V0dXAAbGVycABiYWQgYnBwAGJhZCByZXFfY29tcABTZXAAJUk6JU06JVMgJXAAcnVuAFN1bgBKdW4Abm90aWZ5T25EZXN0cnVjdGlvbgBfX2N4YV9ndWFyZF9hY3F1aXJlIGRldGVjdGVkIHJlY3Vyc2l2ZSBpbml0aWFsaXphdGlvbgBBcHBsaWNhdGlvbgBiYWQgY29tcHJlc3Npb24Ad3JvbmcgdmVyc2lvbgBNb24AY2FuJ3QgZm9wZW4AYmFkIFNPUyBsZW4AYmFkIHRSTlMgbGVuAGJhZCBJSERSIGxlbgBiYWQgRFJJIGxlbgBiYWQgU09GIGxlbgBuYW4ASmFuAGltZ19uKzEgPT0gb3V0X24Ab3V0b2ZtZW0ASnVsAGJvb2wAbGwAQXByaWwAZW1zY3JpcHRlbjo6dmFsAHN0YmlfX3BhcnNlX3VuY29tcGVyc3NlZF9ibG9jawBGcmkAdW5zdXBwb3J0ZWQgYml0IGRlcHRoAGludmFsaWQgZGVjb2RlZCBzY2FubGluZSBsZW5ndGgAMCB3aWR0aABzdGJpX196aHVmZm1hbl9kZWNvZGVfc2xvd3BhdGgATWFyY2gAL2Ivcy93L2lyL2svaW5zdGFsbC9lbXNjcmlwdGVuL3RoaXJkX3BhcnR5L3N0Yl9pbWFnZS5oAEF1ZwBkYXRhL2NvbnRhaW5lci5qcGcAdW5zaWduZWQgbG9uZwBzdGQ6OndzdHJpbmcAYmFzaWNfc3RyaW5nAHN0ZDo6c3RyaW5nAHN0ZDo6dTE2c3RyaW5nAHN0ZDo6dTMyc3RyaW5nAGJhZCBwbmcgc2lnAGluZgBiYWQgREMgaHVmZgBiYWQgQUMgaHVmZgAlLjBMZgAlTGYAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQBzdGJpX19leHRlbmRfcmVjZWl2ZQB0cnVlAFR1ZQBiYWQgcGFsZXR0ZQBzdGJpX19iaXRfcmV2ZXJzZQBmYWxzZQBGYWlsZWQgdG8gbG9hZCB0ZXh0dXJlAGJhZCBjdHlwZQB1bmtub3duIGltYWdlIHR5cGUAYmFkIERRVCB0eXBlAEp1bmUAc3RiaV9fZGVfaXBob25lAG1vbm9jaHJvbWUAdGl0bGUAYmFkIGZpbGUAZG91YmxlAG1pc3NpbmcgY29sb3IgdGFibGUAYmFkIERRVCB0YWJsZQB0b28gbGFyZ2UAMC1waXhlbCBpbWFnZQBzdGJpX19qcGVnX2h1ZmZfZGVjb2RlAG5vIGNsZWFyIGNvZGUAdW5rbm93biBjb2RlAGJhZCBodWZmbWFuIGNvZGUARk9STUFUPTMyLWJpdF9ybGVfcmdiZQBiYWQgZmlsdGVyIG1ldGhvZABiYWQgY29tcCBtZXRob2QAYmFkIGludGVybGFjZSBtZXRob2QAZXh0ZW5kAHZvaWQAaW52YWxpZABjbG9ja19nZXR0aW1lKENMT0NLX01PTk9UT05JQykgZmFpbGVkAFdlZABRdWFkAHN0YmlfX2JtcF9sb2FkAERlYwBjYW4ndCBtZXJnZSBkYyBhbmQgYWMAd2IAcmIARmViAGFiAHcrYgByK2IAYStiAHJ3YQBvdXRvZmRhdGEAdFJOUyB3aXRoIGFscGhhACgoKGotPmNvZGVfYnVmZmVyKSA+PiAoMzIgLSBoLT5zaXplW2NdKSkgJiBzdGJpX19ibWFza1toLT5zaXplW2NdXSkgPT0gaC0+Y29kZVtjXQAlYSAlYiAlZCAlSDolTTolUyAlWQBQT1NJWABiYWQgVgBQSUNUAHRSTlMgYWZ0ZXIgSURBVABubyBJREFUAGJhZCBTT1MAJUg6JU06JVMAZmlyc3Qgbm90IElIRFIAbXVsdGlwbGUgSUhEUgBub3QgSERSAGJhZCBUUQBub3QgQk1QAHVua25vd24gQk1QAGJhZCBCTVAATkFOAFBNAEFNAExDX0FMTABMZWFybk9wZW5HTABubyBTT0kAYmFkIEgATEFORwBubyBTT0YASU5GAG5vdCBHSUYAbm8gUExURQB0Uk5TIGJlZm9yZSBQTFRFAGludmFsaWQgUExURQBCTVAgUkxFACM/UkFESUFOQ0UAbm90IFBTRABiYWQgY29tcG9uZW50IElEAEMAZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8ZmxvYXQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQ4X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDhfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQzMl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQzMl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBjaGFyPgBzdGQ6OmJhc2ljX3N0cmluZzx1bnNpZ25lZCBjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8bG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgbG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8ZG91YmxlPgAwMTIzNDU2Nzg5AGMgPT0gMTgAQy5VVEYtOABiaXRzIDw9IDE2AG1heCB2YWx1ZSA+IDI1NQBTgPY0AGhzeiA9PSAxMDggfHwgaHN6ID09IDEyNABzLT5pbWdfb3V0X24gPT0gNABvdXRfbiA9PSAyIHx8IG91dF9uID09IDQAcmVxX2NvbXAgPj0gMSAmJiByZXFfY29tcCA8PSA0AGltZ19uID09IDMAb3V0X24gPT0gcy0+aW1nX24gfHwgb3V0X24gPT0gcy0+aW1nX24rMQBhLT5udW1fYml0cyA9PSAwAC4AdysAcisAYSsAei0+Y29kZV9idWZmZXIgPCAoMVUgPDwgei0+bnVtX2JpdHMpAChudWxsKQBuID49IDAgJiYgbiA8IChpbnQpIChzaXplb2Yoc3RiaV9fYm1hc2spL3NpemVvZigqc3RiaV9fYm1hc2spKQBDb3VsZCBub3Qgb3BlbiB0aGUgZmlsZSAtICcAUHVyZSB2aXJ0dWFsIGZ1bmN0aW9uIGNhbGxlZCEALVkgACtYIAAjP1JBRElBTkNFCgBFUlJPUjo6U0hBREVSOjpWRVJURVg6OkNPTVBJTEFUSU9OX0ZBSUxFRAoARVJST1I6OlNIQURFUjo6RlJBR01FTlQ6OkNPTVBJTEFUSU9OX0ZBSUxFRAoARVJST1I6OlNIQURFUjo6UFJPR1JBTTo6TElOS0lOR19GQUlMRUQKADExQXBwbGljYXRpb24AAERPAABpFAAAAAAAPwAAAD8AAAAAAACAPwAAgD8AAAA/AAAAvwAAAAAAAIA/AAAAAAAAAL8AAAC/AAAAAAAAAAAAAAAAAAAAvwAAAD8AAAAAAAAAAAAAgD8AAAAAAQAAAAMAAAABAAAAAgAAAAMAAAAAAAAAAAAAAChPAAAoTwAAKE8AAChPAABmaWZmZgAAAAAAAAAAAAAAgE4AAChPAAAoTwAAKE8AAHZpZmZmAAAAAAAAAAAAAACATgAA4E4AAOBOAADgTgAA4E4AAHZpaWlpaQA0UXVhZAAAAABETwAASxUAAFA0UXVhZAAAJFAAAFwVAAAAAAAAVBUAAFBLNFF1YWQAJFAAAHQVAAABAAAAVBUAAGlpAHYAdmkAZBUAAIBOAABkFQAAdmlpAFAxMUFwcGxpY2F0aW9uAAAkUAAApBUAAAAAAAB4FAAAUEsxMUFwcGxpY2F0aW9uACRQAADEFQAAAQAAAHgUAACATgAAtBUAAAAAAABYFgAAIwAAACQAAAAlAAAAJQAAAE4xMGVtc2NyaXB0ZW43d3JhcHBlckkxMUFwcGxpY2F0aW9uRUUATjEwZW1zY3JpcHRlbjhpbnRlcm5hbDExV3JhcHBlckJhc2VFAABETwAAKhYAAMhPAAAEFgAAAAAAAAIAAAB4FAAAAgAAAFAWAAACKAAAgE4AADE4QXBwbGljYXRpb25XcmFwcGVyAAAAAGxPAAB8FgAAWBYAAFAxOEFwcGxpY2F0aW9uV3JhcHBlcgAAACRQAACgFgAAAAAAAJQWAABQSzE4QXBwbGljYXRpb25XcmFwcGVyAAAkUAAAyBYAAAEAAACUFgAAgE4AAJQWAAC4FgAAFBcAAE4xMGVtc2NyaXB0ZW4zdmFsRQAARE8AAAAXAABpaWkAAAAAAJQWAAAjAAAAJAAAACYAAAAnAAAAFBcAALQXAAAUFwAATlN0M19fMjEyYmFzaWNfc3RyaW5nSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUATlN0M19fMjIxX19iYXNpY19zdHJpbmdfY29tbW9uSUxiMUVFRQAAAABETwAAgxcAAMhPAABEFwAAAAAAAAEAAACsFwAAAAAAAGlpaWkAAAAAtBUAALQVAAAAAAAAAAAAAP/////9////+f////H////h////wf///4H///8B////Af7//wH8//8B+P//AfD//wHg//8BwP//AYD//wAAAAAEAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAAIAAAACAAAAAQAAAAEAAAAAgAAAAIAAAABAAAAAAAAAAgAAAAIAAAACAAAAAQAAAAEAAAAAgAAAAIAAABOU3QzX18yMTJiYXNpY19zdHJpbmdJaE5TXzExY2hhcl90cmFpdHNJaEVFTlNfOWFsbG9jYXRvckloRUVFRQAAyE8AAJwYAAAAAAAAAQAAAKwXAAAAAAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSXdOU18xMWNoYXJfdHJhaXRzSXdFRU5TXzlhbGxvY2F0b3JJd0VFRUUAAMhPAAD0GAAAAAAAAAEAAACsFwAAAAAAAE5TdDNfXzIxMmJhc2ljX3N0cmluZ0lEc05TXzExY2hhcl90cmFpdHNJRHNFRU5TXzlhbGxvY2F0b3JJRHNFRUVFAAAAyE8AAEwZAAAAAAAAAQAAAKwXAAAAAAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSURpTlNfMTFjaGFyX3RyYWl0c0lEaUVFTlNfOWFsbG9jYXRvcklEaUVFRUUAAADITwAAqBkAAAAAAAABAAAArBcAAAAAAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0ljRUUAAERPAAAEGgAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJYUVFAABETwAALBoAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWhFRQAARE8AAFQaAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lzRUUAAERPAAB8GgAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJdEVFAABETwAApBoAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWlFRQAARE8AAMwaAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lqRUUAAERPAAD0GgAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJbEVFAABETwAAHBsAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SW1FRQAARE8AAEQbAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lmRUUAAERPAABsGwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJZEVFAABETwAAlBsAAAAAAAAAAAAAAADwPwAAAAAAAPg/AAAAAAAAAAAG0M9D6/1MPgAAAAAAAAAAAAAAQAO44j8AAAAAFBwAADcAAAA4AAAATlN0M19fMjhpb3NfYmFzZUUAAABETwAAABwAAAAAAAARAAoAERERAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABEADwoREREDCgcAAQAJCwsAAAkGCwAACwAGEQAAABEREQAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAARAAoKERERAAoAAAIACQsAAAAJAAsAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAA0AAAAEDQAAAAAJDgAAAAAADgAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAPAAAAAA8AAAAACRAAAAAAABAAABAAABIAAAASEhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAABISEgAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAAAAAAAoAAAAACgAAAAAJCwAAAAAACwAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAwAAAAACQwAAAAAAAwAAAwAADAxMjM0NTY3ODlBQkNERUYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADRdJ4AV529KoBwUg///z4nCgAAAGQAAADoAwAAECcAAKCGAQBAQg8AgJaYAADh9QUYAAAANQAAAHEAAABr////zvv//5K///8AAAAAAAAAAP////////////////////////////////////////////////////////////////8AAQIDBAUGBwgJ/////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAECBAcDBgUAAAAAAAAAAgAAwAMAAMAEAADABQAAwAYAAMAHAADACAAAwAkAAMAKAADACwAAwAwAAMANAADADgAAwA8AAMAQAADAEQAAwBIAAMATAADAFAAAwBUAAMAWAADAFwAAwBgAAMAZAADAGgAAwBsAAMAcAADAHQAAwB4AAMAfAADAAAAAswEAAMMCAADDAwAAwwQAAMMFAADDBgAAwwcAAMMIAADDCQAAwwoAAMMLAADDDAAAww0AANMOAADDDwAAwwAADLsBAAzDAgAMwwMADMMEAAzTAAAAAN4SBJUAAAAA////////////////wCAAABQAAABDLlVURi04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAExDX0NUWVBFAAAAAExDX05VTUVSSUMAAExDX1RJTUUAAAAAAExDX0NPTExBVEUAAExDX01PTkVUQVJZAExDX01FU1NBR0VTAHAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAgACAAIAAgACAAIAAgACAAMgAiACIAIgAiACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgABYATABMAEwATABMAEwATABMAEwATABMAEwATABMAEwAjYCNgI2AjYCNgI2AjYCNgI2AjYBMAEwATABMAEwATABMAI1QjVCNUI1QjVCNUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFBMAEwATABMAEwATACNYI1gjWCNYI1gjWCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgTABMAEwATAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAAEgAAABMAAAAUAAAAFQAAABYAAAAXAAAAGAAAABkAAAAaAAAAGwAAABwAAAAdAAAAHgAAAB8AAAAgAAAAIQAAACIAAAAjAAAAJAAAACUAAAAmAAAAJwAAACgAAAApAAAAKgAAACsAAAAsAAAALQAAAC4AAAAvAAAAMAAAADEAAAAyAAAAMwAAADQAAAA1AAAANgAAADcAAAA4AAAAOQAAADoAAAA7AAAAPAAAAD0AAAA+AAAAPwAAAEAAAABBAAAAQgAAAEMAAABEAAAARQAAAEYAAABHAAAASAAAAEkAAABKAAAASwAAAEwAAABNAAAATgAAAE8AAABQAAAAUQAAAFIAAABTAAAAVAAAAFUAAABWAAAAVwAAAFgAAABZAAAAWgAAAFsAAABcAAAAXQAAAF4AAABfAAAAYAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAewAAAHwAAAB9AAAAfgsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAAKAAAACwAAAAwAAAANAAAADgAAAA8AAAAQAAAAEQAAABIAAAATAAAAFAAAABUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAcAAAAHQAAAB4AAAAfAAAAIAAAACEAAAAiAAAAIwAAACQAAAAlAAAAJgAAACcAAAAoAAAAKQAAACoAAAArAAAALAAAAC0AAAAuAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAANQAAADYAAAA3AAAAOAAAADkAAAA6AAAAOwAAADwAAAA9AAAAPgAAAD8AAABAAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAABbAAAAXAAAAF0AAABeAAAAXwAAAGAAAABhAAAAYgAAAGMAAABkAAAAZQAAAGYAAABnAAAAaAAAAGkAAABqAAAAawAAAGwAAABtAAAAbgAAAG8AAABwAAAAcQAAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAAB5AAAAegAAAHsAAAB8AAAAfwDAAAD0AAAA+AAAAJQAAAE5TdDNfXzIxNF9fc2hhcmVkX2NvdW50RQAAAABETwAApDAAAAAAAAAAAAAAMDEyMzQ1Njc4OWFiY2RlZkFCQ0RFRnhYKy1wUGlJbk4AJQAAAAAAJXAAAAAAJUk6JU06JVMgJXAlSDolTQAAACUAAABtAAAALwAAACUAAABkAAAALwAAACUAAAB5AAAAJQAAAFkAAAAtAAAAJQAAAG0AAAAtAAAAJQAAAGQAAAAlAAAASQAAADoAAAAlAAAATQAAADoAAAAlAAAAUwAAACAAAAAlAAAAcAAAAAAAAAAlAAAASAAAADoAAAAlAAAATQAAAAAAAAAAAAAAAAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAAAAAACQ2AABRAAAAUgAAAFMAAAAAAAAAhDYAAFQAAABVAAAAUwAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAAAAAAOw1AABeAAAAXwAAAFMAAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAAAAAALw2AABnAAAAaAAAAFMAAABpAAAAagAAAGsAAABsAAAAbQAAAAAAAADgNgAAbgAAAG8AAABTAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB0AAAAcgAAAHUAAABlAAAAAAAAAGYAAABhAAAAbAAAAHMAAABlAAAAAAAAACUAAABtAAAALwAAACUAAABkAAAALwAAACUAAAB5AAAAAAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAAAAAACUAAABhAAAAIAAAACUAAABiAAAAIAAAACUAAABkAAAAIAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABZAAAAAAAAACUAAABJAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABwAAAAAAAAAAAAAACsMwAAdQAAAHYAAABTAAAATlN0M19fMjZsb2NhbGU1ZmFjZXRFAAAAbE8AAJQzAADAMAAAAAAAACw0AAB1AAAAdwAAAFMAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfwAAAIAAAACBAAAAggAAAIMAAABOU3QzX18yNWN0eXBlSXdFRQBOU3QzX18yMTBjdHlwZV9iYXNlRQAARE8AAA40AADITwAA/DMAAAAAAAACAAAArDMAAAIAAAAkNAAAAgAAAAAAAADANAAAdQAAAIQAAABTAAAAhQAAAIYAAACHAAAAiAAAAIkAAACKAAAAiwAAAE5TdDNfXzI3Y29kZWN2dEljYzExX19tYnN0YXRlX3RFRQBOU3QzX18yMTJjb2RlY3Z0X2Jhc2VFAAAAAERPAACeNAAAyE8AAHw0AAAAAAAAAgAAAKwzAAACAAAAuDQAAAIAAAAAAAAANDUAAHUAAACMAAAAUwAAAI0AAACOAAAAjwAAAJAAAACRAAAAkgAAAJMAAABOU3QzX18yN2NvZGVjdnRJRHNjMTFfX21ic3RhdGVfdEVFAADITwAAEDUAAAAAAAACAAAArDMAAAIAAAC4NAAAAgAAAAAAAACoNQAAdQAAAJQAAABTAAAAlQAAAJYAAACXAAAAmAAAAJkAAACaAAAAmwAAAE5TdDNfXzI3Y29kZWN2dElEaWMxMV9fbWJzdGF0ZV90RUUAAMhPAACENQAAAAAAAAIAAACsMwAAAgAAALg0AAACAAAATlN0M19fMjdjb2RlY3Z0SXdjMTFfX21ic3RhdGVfdEVFAAAAyE8AAMg1AAAAAAAAAgAAAKwzAAACAAAAuDQAAAIAAABOU3QzX18yNmxvY2FsZTVfX2ltcEUAAABsTwAADDYAAKwzAABOU3QzX18yN2NvbGxhdGVJY0VFAGxPAAAwNgAArDMAAE5TdDNfXzI3Y29sbGF0ZUl3RUUAbE8AAFA2AACsMwAATlN0M19fMjVjdHlwZUljRUUAAADITwAAcDYAAAAAAAACAAAArDMAAAIAAAAkNAAAAgAAAE5TdDNfXzI4bnVtcHVuY3RJY0VFAAAAAGxPAACkNgAArDMAAE5TdDNfXzI4bnVtcHVuY3RJd0VFAAAAAGxPAADINgAArDMAAAAAAABENgAAnAAAAJ0AAABTAAAAngAAAJ8AAACgAAAAAAAAAGQ2AAChAAAAogAAAFMAAACjAAAApAAAAKUAAAAAAAAAADgAAHUAAACmAAAAUwAAAKcAAACoAAAAqQAAAKoAAACrAAAArAAAAK0AAACuAAAArwAAALAAAACxAAAATlN0M19fMjdudW1fZ2V0SWNOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOV9fbnVtX2dldEljRUUATlN0M19fMjE0X19udW1fZ2V0X2Jhc2VFAABETwAAxjcAAMhPAACwNwAAAAAAAAEAAADgNwAAAAAAAMhPAABsNwAAAAAAAAIAAACsMwAAAgAAAOg3AAAAAAAAAAAAANQ4AAB1AAAAsgAAAFMAAACzAAAAtAAAALUAAAC2AAAAtwAAALgAAAC5AAAAugAAALsAAAC8AAAAvQAAAE5TdDNfXzI3bnVtX2dldEl3TlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFRUUATlN0M19fMjlfX251bV9nZXRJd0VFAAAAyE8AAKQ4AAAAAAAAAQAAAOA3AAAAAAAAyE8AAGA4AAAAAAAAAgAAAKwzAAACAAAAvDgAAAAAAAAAAAAAvDkAAHUAAAC+AAAAUwAAAL8AAADAAAAAwQAAAMIAAADDAAAAxAAAAMUAAADGAAAATlN0M19fMjdudW1fcHV0SWNOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEljRUUATlN0M19fMjE0X19udW1fcHV0X2Jhc2VFAABETwAAgjkAAMhPAABsOQAAAAAAAAEAAACcOQAAAAAAAMhPAAAoOQAAAAAAAAIAAACsMwAAAgAAAKQ5AAAAAAAAAAAAAIQ6AAB1AAAAxwAAAFMAAADIAAAAyQAAAMoAAADLAAAAzAAAAM0AAADOAAAAzwAAAE5TdDNfXzI3bnVtX3B1dEl3TlNfMTlvc3RyZWFtYnVmX2l0ZXJhdG9ySXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFRUUATlN0M19fMjlfX251bV9wdXRJd0VFAAAAyE8AAFQ6AAAAAAAAAQAAAJw5AAAAAAAAyE8AABA6AAAAAAAAAgAAAKwzAAACAAAAbDoAAAAAAAAAAAAAhDsAANAAAADRAAAAUwAAANIAAADTAAAA1AAAANUAAADWAAAA1wAAANgAAAD4////hDsAANkAAADaAAAA2wAAANwAAADdAAAA3gAAAN8AAABOU3QzX18yOHRpbWVfZ2V0SWNOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOXRpbWVfYmFzZUUARE8AAD07AABOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUljRUUAAABETwAAWDsAAMhPAAD4OgAAAAAAAAMAAACsMwAAAgAAAFA7AAACAAAAfDsAAAAIAAAAAAAAcDwAAOAAAADhAAAAUwAAAOIAAADjAAAA5AAAAOUAAADmAAAA5wAAAOgAAAD4////cDwAAOkAAADqAAAA6wAAAOwAAADtAAAA7gAAAO8AAABOU3QzX18yOHRpbWVfZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUl3RUUAAERPAABFPAAAyE8AAAA8AAAAAAAAAwAAAKwzAAACAAAAUDsAAAIAAABoPAAAAAgAAAAAAAAUPQAA8AAAAPEAAABTAAAA8gAAAE5TdDNfXzI4dGltZV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMF9fdGltZV9wdXRFAAAARE8AAPU8AADITwAAsDwAAAAAAAACAAAArDMAAAIAAAAMPQAAAAgAAAAAAACUPQAA8wAAAPQAAABTAAAA9QAAAE5TdDNfXzI4dGltZV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAAAAAMhPAABMPQAAAAAAAAIAAACsMwAAAgAAAAw9AAAACAAAAAAAACg+AAB1AAAA9gAAAFMAAAD3AAAA+AAAAPkAAAD6AAAA+wAAAPwAAAD9AAAA/gAAAP8AAABOU3QzX18yMTBtb25leXB1bmN0SWNMYjBFRUUATlN0M19fMjEwbW9uZXlfYmFzZUUAAAAARE8AAAg+AADITwAA7D0AAAAAAAACAAAArDMAAAIAAAAgPgAAAgAAAAAAAACcPgAAdQAAAAABAABTAAAAAQEAAAIBAAADAQAABAEAAAUBAAAGAQAABwEAAAgBAAAJAQAATlN0M19fMjEwbW9uZXlwdW5jdEljTGIxRUVFAMhPAACAPgAAAAAAAAIAAACsMwAAAgAAACA+AAACAAAAAAAAABA/AAB1AAAACgEAAFMAAAALAQAADAEAAA0BAAAOAQAADwEAABABAAARAQAAEgEAABMBAABOU3QzX18yMTBtb25leXB1bmN0SXdMYjBFRUUAyE8AAPQ+AAAAAAAAAgAAAKwzAAACAAAAID4AAAIAAAAAAAAAhD8AAHUAAAAUAQAAUwAAABUBAAAWAQAAFwEAABgBAAAZAQAAGgEAABsBAAAcAQAAHQEAAE5TdDNfXzIxMG1vbmV5cHVuY3RJd0xiMUVFRQDITwAAaD8AAAAAAAACAAAArDMAAAIAAAAgPgAAAgAAAAAAAAAoQAAAdQAAAB4BAABTAAAAHwEAACABAABOU3QzX18yOW1vbmV5X2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjExX19tb25leV9nZXRJY0VFAABETwAABkAAAMhPAADAPwAAAAAAAAIAAACsMwAAAgAAACBAAAAAAAAAAAAAAMxAAAB1AAAAIQEAAFMAAAAiAQAAIwEAAE5TdDNfXzI5bW9uZXlfZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yMTFfX21vbmV5X2dldEl3RUUAAERPAACqQAAAyE8AAGRAAAAAAAAAAgAAAKwzAAACAAAAxEAAAAAAAAAAAAAAcEEAAHUAAAAkAQAAUwAAACUBAAAmAQAATlN0M19fMjltb25leV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SWNFRQAARE8AAE5BAADITwAACEEAAAAAAAACAAAArDMAAAIAAABoQQAAAAAAAAAAAAAUQgAAdQAAACcBAABTAAAAKAEAACkBAABOU3QzX18yOW1vbmV5X3B1dEl3TlNfMTlvc3RyZWFtYnVmX2l0ZXJhdG9ySXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFRUUATlN0M19fMjExX19tb25leV9wdXRJd0VFAABETwAA8kEAAMhPAACsQQAAAAAAAAIAAACsMwAAAgAAAAxCAAAAAAAAAAAAAIxCAAB1AAAAKgEAAFMAAAArAQAALAEAAC0BAABOU3QzX18yOG1lc3NhZ2VzSWNFRQBOU3QzX18yMTNtZXNzYWdlc19iYXNlRQAAAABETwAAaUIAAMhPAABUQgAAAAAAAAIAAACsMwAAAgAAAIRCAAACAAAAAAAAAORCAAB1AAAALgEAAFMAAAAvAQAAMAEAADEBAABOU3QzX18yOG1lc3NhZ2VzSXdFRQAAAADITwAAzEIAAAAAAAACAAAArDMAAAIAAACEQgAAAgAAAFMAAAB1AAAAbgAAAGQAAABhAAAAeQAAAAAAAABNAAAAbwAAAG4AAABkAAAAYQAAAHkAAAAAAAAAVAAAAHUAAABlAAAAcwAAAGQAAABhAAAAeQAAAAAAAABXAAAAZQAAAGQAAABuAAAAZQAAAHMAAABkAAAAYQAAAHkAAAAAAAAAVAAAAGgAAAB1AAAAcgAAAHMAAABkAAAAYQAAAHkAAAAAAAAARgAAAHIAAABpAAAAZAAAAGEAAAB5AAAAAAAAAFMAAABhAAAAdAAAAHUAAAByAAAAZAAAAGEAAAB5AAAAAAAAAFMAAAB1AAAAbgAAAAAAAABNAAAAbwAAAG4AAAAAAAAAVAAAAHUAAABlAAAAAAAAAFcAAABlAAAAZAAAAAAAAABUAAAAaAAAAHUAAAAAAAAARgAAAHIAAABpAAAAAAAAAFMAAABhAAAAdAAAAAAAAABKAAAAYQAAAG4AAAB1AAAAYQAAAHIAAAB5AAAAAAAAAEYAAABlAAAAYgAAAHIAAAB1AAAAYQAAAHIAAAB5AAAAAAAAAE0AAABhAAAAcgAAAGMAAABoAAAAAAAAAEEAAABwAAAAcgAAAGkAAABsAAAAAAAAAE0AAABhAAAAeQAAAAAAAABKAAAAdQAAAG4AAABlAAAAAAAAAEoAAAB1AAAAbAAAAHkAAAAAAAAAQQAAAHUAAABnAAAAdQAAAHMAAAB0AAAAAAAAAFMAAABlAAAAcAAAAHQAAABlAAAAbQAAAGIAAABlAAAAcgAAAAAAAABPAAAAYwAAAHQAAABvAAAAYgAAAGUAAAByAAAAAAAAAE4AAABvAAAAdgAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEQAAABlAAAAYwAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEoAAABhAAAAbgAAAAAAAABGAAAAZQAAAGIAAAAAAAAATQAAAGEAAAByAAAAAAAAAEEAAABwAAAAcgAAAAAAAABKAAAAdQAAAG4AAAAAAAAASgAAAHUAAABsAAAAAAAAAEEAAAB1AAAAZwAAAAAAAABTAAAAZQAAAHAAAAAAAAAATwAAAGMAAAB0AAAAAAAAAE4AAABvAAAAdgAAAAAAAABEAAAAZQAAAGMAAAAAAAAAQQAAAE0AAAAAAAAAUAAAAE0AAAAAAAAAAAAAAHw7AADZAAAA2gAAANsAAADcAAAA3QAAAN4AAADfAAAAAAAAAGg8AADpAAAA6gAAAOsAAADsAAAA7QAAAO4AAADvAAAAAAAAAARJAAAzAQAANAEAADUBAAA2AQAANwEAADgBAAA5AQAAOgEAADsBAAA8AQAAPQEAAD4BAAA/AQAAQAEAAAAAAABASQAAQQEAAEIBAABDAQAARAEAAEUBAABGAQAARwEAAEgBAABJAQAASgEAAEsBAABMAQAATQEAAE4BAAAIAAAAAAAAAHhJAABPAQAAUAEAAPj////4////eEkAAFEBAABSAQAATEcAAGBHAAAIAAAAAAAAAMBJAABTAQAAVAEAAPj////4////wEkAAFUBAABWAQAAfEcAAJBHAAAEAAAAAAAAAAhKAABXAQAAWAEAAPz////8////CEoAAFkBAABaAQAArEcAAMBHAAAEAAAAAAAAAFBKAABbAQAAXAEAAPz////8////UEoAAF0BAABeAQAA3EcAAPBHAAAAAAAANEsAAF8BAABgAQAAYQEAAGIBAABjAQAAZAEAAGUBAAA6AQAAOwEAAGYBAAA9AQAAZwEAAD8BAABoAQAAAAAAAHxIAABpAQAAagEAAE5TdDNfXzI5YmFzaWNfaW9zSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAAAAbE8AAFBIAAAUHAAAAAAAAMRIAABrAQAAbAEAAE5TdDNfXzI5YmFzaWNfaW9zSXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFAAAAbE8AAJhIAAAUHAAATlN0M19fMjE1YmFzaWNfc3RyZWFtYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAAAAAERPAADQSAAATlN0M19fMjE1YmFzaWNfc3RyZWFtYnVmSXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFAAAAAERPAAAMSQAATlN0M19fMjEzYmFzaWNfaXN0cmVhbUljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAyE8AAEhJAAAAAAAAAQAAAHxIAAAD9P//TlN0M19fMjEzYmFzaWNfaXN0cmVhbUl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAyE8AAJBJAAAAAAAAAQAAAMRIAAAD9P//TlN0M19fMjEzYmFzaWNfb3N0cmVhbUljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAyE8AANhJAAAAAAAAAQAAAHxIAAAD9P//TlN0M19fMjEzYmFzaWNfb3N0cmVhbUl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAyE8AACBKAAAAAAAAAQAAAMRIAAAD9P//bAAAAAAAAAD4SgAAbQEAAG4BAACU////lP////hKAABvAQAAcAEAAHRKAACsSgAAwEoAAIhKAABsAAAAAAAAAHhJAABPAQAAUAEAAJT///+U////eEkAAFEBAABSAQAATlN0M19fMjE0YmFzaWNfaWZzdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAbE8AAMhKAAB4SQAATlN0M19fMjEzYmFzaWNfZmlsZWJ1ZkljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAbE8AAARLAAAESQAASFQAANhUAABwVQAAAAAAAKRLAAAzAQAAdAEAAHUBAAA2AQAANwEAADgBAAA5AQAAOgEAADsBAAB2AQAAdwEAAHgBAAA/AQAAQAEAAE5TdDNfXzIxMF9fc3RkaW5idWZJY0VFAGxPAACMSwAABEkAAAAAAAAITAAAQQEAAHkBAAB6AQAARAEAAEUBAABGAQAARwEAAEgBAABJAQAAewEAAHwBAAB9AQAATQEAAE4BAABOU3QzX18yMTBfX3N0ZGluYnVmSXdFRQBsTwAA8EsAAEBJAAAAAAAAcEwAADMBAAB+AQAAfwEAADYBAAA3AQAAOAEAAIABAAA6AQAAOwEAADwBAAA9AQAAPgEAAIEBAACCAQAATlN0M19fMjExX19zdGRvdXRidWZJY0VFAAAAAGxPAABUTAAABEkAAAAAAADYTAAAQQEAAIMBAACEAQAARAEAAEUBAABGAQAAhQEAAEgBAABJAQAASgEAAEsBAABMAQAAhgEAAIcBAABOU3QzX18yMTFfX3N0ZG91dGJ1Zkl3RUUAAAAAbE8AALxMAABASQAAU3Q5dHlwZV9pbmZvAAAAAERPAADkTAAATjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAAbE8AAPxMAAD0TAAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAAbE8AACxNAAAgTQAATjEwX19jeHhhYml2MTE3X19wYmFzZV90eXBlX2luZm9FAAAAbE8AAFxNAAAgTQAATjEwX19jeHhhYml2MTE5X19wb2ludGVyX3R5cGVfaW5mb0UAbE8AAIxNAACATQAATjEwX19jeHhhYml2MTIwX19mdW5jdGlvbl90eXBlX2luZm9FAAAAAGxPAAC8TQAAIE0AAE4xMF9fY3h4YWJpdjEyOV9fcG9pbnRlcl90b19tZW1iZXJfdHlwZV9pbmZvRQAAAGxPAADwTQAAgE0AAAAAAABwTgAAiAEAAIkBAACKAQAAiwEAAIwBAABOMTBfX2N4eGFiaXYxMjNfX2Z1bmRhbWVudGFsX3R5cGVfaW5mb0UAbE8AAEhOAAAgTQAAdgAAADROAAB8TgAARG4AADROAACITgAAYgAAADROAACUTgAAYwAAADROAACgTgAAaAAAADROAACsTgAAYQAAADROAAC4TgAAcwAAADROAADETgAAdAAAADROAADQTgAAaQAAADROAADcTgAAagAAADROAADoTgAAbAAAADROAAD0TgAAbQAAADROAAAATwAAeAAAADROAAAMTwAAeQAAADROAAAYTwAAZgAAADROAAAkTwAAZAAAADROAAAwTwAAAAAAAFBNAACIAQAAjQEAAIoBAACLAQAAjgEAAI8BAACQAQAAkQEAAAAAAAC0TwAAiAEAAJIBAACKAQAAiwEAAI4BAACTAQAAlAEAAJUBAABOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UAAAAAbE8AAIxPAABQTQAAAAAAABBQAACIAQAAlgEAAIoBAACLAQAAjgEAAJcBAACYAQAAmQEAAE4xMF9fY3h4YWJpdjEyMV9fdm1pX2NsYXNzX3R5cGVfaW5mb0UAAABsTwAA6E8AAFBNAAAAAAAAsE0AAIgBAACaAQAAigEAAIsBAACbAQAA");
  base64DecodeToExistingUint8Array(bufferView, 20544, "AAQAAJUEAAAgAwAAWAIAAC666D4AAIA/LwAAADAAAAAxAAAAAAAAAAAAAAAAAAAAAAEIEAkCAwoRGCAZEgsEBQwTGiEoMCkiGxQNBgcOFRwjKjE4OTIrJB0WDxceJSwzOjs0LSYfJy41PD02Lzc+Pz8/Pz8/Pz8/Pz8/Pz8/PwAAAAAAAQAAAAMAAAAHAAAADwAAAB8AAAA/AAAAfwAAAP8AAAD/AQAA/wMAAP8HAAD/DwAA/x8AAP8/AAD/fwAA//8AAIlQTkcNChoKAP9VABEAAAABAAAAAAAAAAAAAABYWFhYIFBORyBjaHVuayBub3Qga25vd24AAAEABQYAABAREgAIBwkGCgULBAwDDQIOAQ8AAAAAAAAAAAAAAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADQAAAA8AAAARAAAAEwAAABcAAAAbAAAAHwAAACMAAAArAAAAMwAAADsAAABDAAAAUwAAAGMAAABzAAAAgwAAAKMAAADDAAAA4wAAAAIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAEAAAACAAAAAgAAAAIAAAACAAAAAwAAAAMAAAADAAAAAwAAAAQAAAAEAAAABAAAAAQAAAAFAAAABQAAAAUAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABwAAAAkAAAANAAAAEQAAABkAAAAhAAAAMQAAAEEAAABhAAAAgQAAAMEAAAABAQAAgQEAAAECAAABAwAAAQQAAAEGAAABCAAAAQwAAAEQAAABGAAAASAAAAEwAAABQAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAgAAAAIAAAADAAAAAwAAAAQAAAAEAAAABQAAAAUAAAAGAAAABgAAAAcAAAAHAAAACAAAAAgAAAAJAAAACQAAAAoAAAAKAAAACwAAAAsAAAAMAAAADAAAAA0AAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6FcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAANgAAAAAAAAAAAAAAAAAAAAAAAAA1AAAAAAAAADMAAAD4XwAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAcQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAHIBAAAIZAAAAAQAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAACv////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2FQAAAAAAAAFAAAAAAAAAAAAAAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAAMwAAABBoAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwblAA");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.__cxa_atexit;
 var fimport$1 = env.glfwInit;
 var fimport$2 = env.glfwWindowHint;
 var fimport$3 = env.glfwGetCurrentContext;
 var fimport$4 = env.glfwCreateWindow;
 var fimport$5 = env.glfwTerminate;
 var fimport$6 = env.glfwMakeContextCurrent;
 var fimport$7 = env.glfwSetCursorPosCallback;
 var fimport$8 = env.glfwGetMouseButton;
 var fimport$9 = env.glClearColor;
 var fimport$10 = env.glfwGetKey;
 var fimport$11 = env.glfwSetWindowShouldClose;
 var fimport$12 = env.glClear;
 var fimport$13 = env.glfwSwapBuffers;
 var fimport$14 = env.glfwPollEvents;
 var fimport$15 = env.glViewport;
 var fimport$16 = env._embind_register_class;
 var fimport$17 = env._embind_register_class_class_function;
 var fimport$18 = env._embind_register_function;
 var fimport$19 = env.glCreateShader;
 var fimport$20 = env.glShaderSource;
 var fimport$21 = env.glCompileShader;
 var fimport$22 = env.glGetShaderiv;
 var fimport$23 = env.glGetShaderInfoLog;
 var fimport$24 = env.glCreateProgram;
 var fimport$25 = env.glAttachShader;
 var fimport$26 = env.glLinkProgram;
 var fimport$27 = env.glGetProgramiv;
 var fimport$28 = env.glGetProgramInfoLog;
 var fimport$29 = env.glDeleteShader;
 var fimport$30 = env.glGenVertexArrays;
 var fimport$31 = env.glGenBuffers;
 var fimport$32 = env.glBindVertexArray;
 var fimport$33 = env.glBindBuffer;
 var fimport$34 = env.glBufferData;
 var fimport$35 = env.glVertexAttribPointer;
 var fimport$36 = env.glEnableVertexAttribArray;
 var fimport$37 = env.glGenTextures;
 var fimport$38 = env.glBindTexture;
 var fimport$39 = env.glTexImage2D;
 var fimport$40 = env.glGenerateMipmap;
 var fimport$41 = env.glUseProgram;
 var fimport$42 = env.glDrawElements;
 var fimport$43 = env.exit;
 var fimport$44 = env.time;
 var fimport$45 = env.emscripten_run_script;
 var fimport$46 = env.emscripten_set_main_loop;
 var fimport$47 = env._embind_register_class_constructor;
 var fimport$48 = env._embind_register_class_function;
 var fimport$49 = env._embind_create_inheriting_constructor;
 var fimport$50 = env._emval_decref;
 var fimport$51 = env._emval_call_void_method;
 var fimport$52 = env._emval_get_method_caller;
 var fimport$53 = env._emval_incref;
 var fimport$54 = env.__assert_fail;
 var fimport$55 = env._embind_register_void;
 var fimport$56 = env._embind_register_bool;
 var fimport$57 = env._embind_register_std_string;
 var fimport$58 = env._embind_register_std_wstring;
 var fimport$59 = env._embind_register_emval;
 var fimport$60 = env._embind_register_integer;
 var fimport$61 = env._embind_register_float;
 var fimport$62 = env._embind_register_memory_view;
 var fimport$63 = env.__sys_open;
 var fimport$64 = env.fd_close;
 var fimport$65 = env.__sys_fcntl64;
 var fimport$66 = env.__sys_ioctl;
 var fimport$67 = env.fd_write;
 var fimport$68 = env.fd_read;
 var fimport$69 = env.abort;
 var fimport$70 = env.environ_sizes_get;
 var fimport$71 = env.environ_get;
 var fimport$72 = env.strftime_l;
 var fimport$73 = env.clock_gettime;
 var fimport$74 = env.emscripten_resize_heap;
 var fimport$75 = env.emscripten_memcpy_big;
 var fimport$76 = env.setTempRet0;
 var fimport$77 = env._embind_register_bigint;
 var fimport$78 = env.fd_seek;
 var global$0 = 5271152;
 var global$1 = 0;
 var global$2 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $711();
  $689();
  $1904();
  $289();
  $566();
  $1905();
 }
 
 function $1() {
  $2(22032 | 0) | 0;
  fimport$0(1 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $4($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $3($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5(22032 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $6($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $21_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) == ($4_1 | 0) & 1 | 0)) {
     break label$2
    }
    $11_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$11_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($11_1);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $21_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$21_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($21_1);
   }
  }
  $24_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $24_1 | 0;
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 1324 + 8 | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
  $8($4_1 + 24 | 0 | 0, 2532 | 0) | 0;
  $8($3_1 | 0, 3295 | 0) | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0]($4_1, $3_1, HEAP32[(0 + 20552 | 0) >> 2] | 0, HEAP32[(0 + 20556 | 0) >> 2] | 0, 0 & 1 | 0) | 0;
  $1911($3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $8($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $9($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  $1914($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $10(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $9($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $139(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $140($6_1 | 0) | 0;
  $139(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $141($6_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2022(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $11($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $19_1 = 0, $21_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $81_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  $13($12(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  $14($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (($15(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $19_1 = $16(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $20_1 = $17($5_1 | 0) | 0;
    i64toi32_i32$0 = HEAP32[$19_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($19_1 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $20_1;
    HEAP32[i64toi32_i32$0 >> 2] = $81_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $21_1 = 8;
    HEAP32[(i64toi32_i32$0 + $21_1 | 0) >> 2] = HEAP32[($19_1 + $21_1 | 0) >> 2] | 0;
    break label$1;
   }
   $1915($5_1 | 0, $19($18(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, $20(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  $30_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $30_1 | 0;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $144(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $14($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $139(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $140($6_1 | 0) | 0;
  $146($6_1 | 0, $145(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($16(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $147(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $143(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($16(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $20($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[(($16(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $21($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $26_1 = 0, $44_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP8[($7_1 + 15 | 0) >> 0] = $4_1;
  $9_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  fimport$1() | 0;
  fimport$2(139266 | 0, 3 | 0);
  fimport$2(139267 | 0, 3 | 0);
  fimport$2(139272 | 0, 204801 | 0);
  label$1 : {
   label$2 : {
    if (!((fimport$3() | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $26_1 = 0;
    HEAP32[($9_1 + 36 | 0) >> 2] = fimport$4(800 | 0, 600 | 0, 3933 | 0, $26_1 | 0, $26_1 | 0) | 0;
    label$3 : {
     if (!((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$3
     }
     $24($22(26816 | 0, 1543 | 0) | 0 | 0, 2 | 0) | 0;
     fimport$5();
     HEAP32[($7_1 + 28 | 0) >> 2] = -1;
     break label$1;
    }
    fimport$6(HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0);
    fimport$7(HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, 3 | 0) | 0;
   }
   HEAP32[($7_1 + 28 | 0) >> 2] = 0;
  }
  $44_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $44_1 | 0;
 }
 
 function $22($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $26(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $10(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $12_1 = 0, $16_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $12_1 = 24;
  $16_1 = 24;
  $1778(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, (($27($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, (10 << $12_1 | 0) >> $12_1 | 0 | 0) | 0) << $16_1 | 0) >> $16_1 | 0 | 0) | 0;
  $1752(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $20_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $24($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $25($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = fimport$8(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   fimport$9(Math_fround(Math_fround(Math_fround((($608() | 0 | 0) % (255 | 0) | 0) + 1 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(Math_fround((($608() | 0 | 0) % (255 | 0) | 0) + 1 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(Math_fround((($608() | 0 | 0) % (255 | 0) | 0) + 1 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(1.0)));
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0, $39_1 = 0, $45_1 = 0, $51_1 = 0, $59_1 = 0, $69_1 = 0, $20_1 = 0, $44_1 = 0, $50_1 = 0, $57_1 = 0, $79_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $1754($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(($174($5_1 + 24 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $175($5_1 + 8 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   $20_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   $21_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((($176($21_1 + (HEAP32[((HEAP32[$21_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$3
     }
     $39_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
     break label$2;
    }
    $39_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   }
   $44_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
   $45_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $50_1 = $45_1 + (HEAP32[((HEAP32[$45_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $51_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $57_1 = $177($51_1 + (HEAP32[((HEAP32[$51_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $59_1 = 24;
   HEAP32[($5_1 + 16 | 0) >> 2] = $178(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $20_1 | 0, $39_1 | 0, $44_1 | 0, $50_1 | 0, ($57_1 << $59_1 | 0) >> $59_1 | 0 | 0) | 0;
   label$4 : {
    if (!(($179($5_1 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    $69_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $119($69_1 + (HEAP32[((HEAP32[$69_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
   }
  }
  $1756($5_1 + 24 | 0 | 0) | 0;
  $79_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $79_1 | 0;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $15_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $614($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $10_1 = 24;
  $13_1 = $192($191($4_1 | 0) | 0 | 0, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $10_1 | 0) >> $10_1 | 0 | 0) | 0;
  $750($4_1 | 0) | 0;
  $15_1 = 24;
  global$0 = $4_1 + 16 | 0;
  return ($13_1 << $15_1 | 0) >> $15_1 | 0 | 0;
 }
 
 function $28($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $34_1 = 0, $42_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  i64toi32_i32$0 = $29() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $34_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $34_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $30(i64toi32_i32$0 + 8 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $42_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $31(i64toi32_i32$1 + 16 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0)) / Math_fround(1.0e9));
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $29() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $65_1 = 0, $69_1 = 0, $78_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!((((HEAPU8[(0 + 22088 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!($1953(22088 | 0) | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1947() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $65_1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$0 + 22080 | 0) >> 2] = $65_1;
   HEAP32[(i64toi32_i32$0 + 22084 | 0) >> 2] = i64toi32_i32$1;
   $1961(22088 | 0);
  }
  i64toi32_i32$1 = $1947() | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $69_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $69_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $32(i64toi32_i32$1 + 8 | 0 | 0, 22080 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $78_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $78_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  $33(i64toi32_i32$0 + 24 | 0 | 0, i64toi32_i32$0 + 16 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $30($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  i64toi32_i32$2 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $25_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  i64toi32_i32$2 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $32($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $31_1 = 0, $37_1 = 0, $47_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = $135(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $31_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $31_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $135(HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $37_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $136(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $47_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $47_1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $33($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $23_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  i64toi32_i32$2 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((fimport$10(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, 256 | 0) | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   fimport$11(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  fimport$12(16384 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($4_1);
  fimport$13(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
  fimport$14();
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $35($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAPF32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])) * Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))));
 }
 
 function $36($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAPF32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  fimport$9(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])), Math_fround(Math_fround(1.0)));
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $37($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  fimport$15(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $38($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 22056 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $39() {
  FUNCTION_TABLE[4 | 0](22060) | 0;
  return;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $41_1 = 0, $45_1 = 0, $55_1 = 0, $85_1 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $23_1 = 0, $24_1 = 0, $26_1 = 0, $27_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $39_1 = 0, $291_1 = 0, $43_1 = 0, $44_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $319_1 = 0, $332_1 = 0, $53_1 = 0, $54_1 = 0, $56_1 = 0, $57_1 = 0, $358_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $73_1 = 0, $74_1 = 0, $76_1 = 0, $77_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $435_1 = 0, $87_1 = 0, $88_1 = 0, $91_1 = 0, $92_1 = 0, $93_1 = 0, $466_1 = 0, $476_1 = 0, $96_1 = 0, $97_1 = 0, $98_1 = 0, $99_1 = 0, $100_1 = 0, $504_1 = 0, $105_1 = 0, $106_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $119_1 = 0, $120_1 = 0, $122_1 = 0, $123_1 = 0, $125_1 = 0, $126_1 = 0, $127_1 = 0, $135_1 = 0, $144_1 = 0, $146_1 = 0, $147_1 = 0, $151_1 = 0, $155_1 = 0, $163_1 = 0, $164_1 = 0, $168_1 = 0, $172_1 = 0;
  $3_1 = global$0 - 464 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 112 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
  $41(2404 | 0, 5 | 0);
  $42(2177 | 0, 6 | 0);
  $43(1690 | 0, 7 | 0);
  HEAP32[($3_1 + 136 | 0) >> 2] = $3_1 + 104 | 0;
  HEAP32[($3_1 + 132 | 0) >> 2] = 3582;
  $44();
  HEAP32[($3_1 + 128 | 0) >> 2] = 8;
  HEAP32[($3_1 + 124 | 0) >> 2] = $46() | 0;
  HEAP32[($3_1 + 120 | 0) >> 2] = $47() | 0;
  HEAP32[($3_1 + 116 | 0) >> 2] = 9;
  $18_1 = $49() | 0;
  $19_1 = $50() | 0;
  $20_1 = $51() | 0;
  $21_1 = $52() | 0;
  HEAP32[($3_1 + 320 | 0) >> 2] = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
  $23_1 = $53() | 0;
  $24_1 = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
  HEAP32[($3_1 + 336 | 0) >> 2] = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  $26_1 = $54() | 0;
  $27_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  HEAP32[($3_1 + 332 | 0) >> 2] = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
  $29_1 = $54() | 0;
  $30_1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
  $31_1 = HEAP32[($3_1 + 132 | 0) >> 2] | 0;
  HEAP32[($3_1 + 340 | 0) >> 2] = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
  fimport$16($18_1 | 0, $19_1 | 0, $20_1 | 0, $21_1 | 0, $23_1 | 0, $24_1 | 0, $26_1 | 0, $27_1 | 0, $29_1 | 0, $30_1 | 0, $31_1 | 0, $55() | 0 | 0, HEAP32[($3_1 + 116 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 140 | 0) >> 2] = $3_1 + 104 | 0;
  HEAP32[($3_1 + 348 | 0) >> 2] = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
  HEAP32[($3_1 + 344 | 0) >> 2] = 10;
  $39_1 = HEAP32[($3_1 + 348 | 0) >> 2] | 0;
  $57(HEAP32[($3_1 + 344 | 0) >> 2] | 0 | 0);
  $41_1 = 0;
  HEAP32[($3_1 + 100 | 0) >> 2] = $41_1;
  HEAP32[($3_1 + 96 | 0) >> 2] = 11;
  i64toi32_i32$0 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
  $291_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 176 | 0) >> 2] = $291_1;
  HEAP32[($3_1 + 180 | 0) >> 2] = i64toi32_i32$1;
  $43_1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
  $44_1 = HEAP32[($3_1 + 180 | 0) >> 2] | 0;
  HEAP32[($3_1 + 204 | 0) >> 2] = $39_1;
  $45_1 = 2398;
  HEAP32[($3_1 + 200 | 0) >> 2] = $45_1;
  HEAP32[($3_1 + 196 | 0) >> 2] = $44_1;
  HEAP32[($3_1 + 192 | 0) >> 2] = $43_1;
  $46_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
  $47_1 = HEAP32[($3_1 + 200 | 0) >> 2] | 0;
  $48_1 = HEAP32[($3_1 + 192 | 0) >> 2] | 0;
  HEAP32[($3_1 + 188 | 0) >> 2] = HEAP32[($3_1 + 196 | 0) >> 2] | 0;
  HEAP32[($3_1 + 184 | 0) >> 2] = $48_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
  $319_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $319_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $59($47_1 | 0, $3_1 + 16 | 0 | 0);
  HEAP32[($3_1 + 92 | 0) >> 2] = $41_1;
  HEAP32[($3_1 + 88 | 0) >> 2] = 12;
  i64toi32_i32$0 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  $332_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 144 | 0) >> 2] = $332_1;
  HEAP32[($3_1 + 148 | 0) >> 2] = i64toi32_i32$1;
  $53_1 = HEAP32[($3_1 + 144 | 0) >> 2] | 0;
  $54_1 = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
  HEAP32[($3_1 + 172 | 0) >> 2] = $46_1;
  $55_1 = 1572;
  HEAP32[($3_1 + 168 | 0) >> 2] = $55_1;
  HEAP32[($3_1 + 164 | 0) >> 2] = $54_1;
  HEAP32[($3_1 + 160 | 0) >> 2] = $53_1;
  $56_1 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
  $57_1 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
  HEAP32[($3_1 + 156 | 0) >> 2] = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
  HEAP32[($3_1 + 152 | 0) >> 2] = $57_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
  $358_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $358_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $59($56_1 | 0, $3_1 + 8 | 0 | 0);
  HEAP32[($3_1 + 228 | 0) >> 2] = $3_1 + 80 | 0;
  HEAP32[($3_1 + 224 | 0) >> 2] = 2532;
  $61();
  HEAP32[($3_1 + 220 | 0) >> 2] = 13;
  HEAP32[($3_1 + 216 | 0) >> 2] = $63() | 0;
  HEAP32[($3_1 + 212 | 0) >> 2] = $64() | 0;
  HEAP32[($3_1 + 208 | 0) >> 2] = 14;
  $68_1 = $66() | 0;
  $69_1 = $67() | 0;
  $70_1 = $68() | 0;
  $71_1 = $52() | 0;
  HEAP32[($3_1 + 352 | 0) >> 2] = HEAP32[($3_1 + 220 | 0) >> 2] | 0;
  $73_1 = $53() | 0;
  $74_1 = HEAP32[($3_1 + 220 | 0) >> 2] | 0;
  HEAP32[($3_1 + 328 | 0) >> 2] = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
  $76_1 = $54() | 0;
  $77_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
  HEAP32[($3_1 + 324 | 0) >> 2] = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
  $79_1 = $54() | 0;
  $80_1 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
  $81_1 = HEAP32[($3_1 + 224 | 0) >> 2] | 0;
  HEAP32[($3_1 + 356 | 0) >> 2] = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
  fimport$16($68_1 | 0, $69_1 | 0, $70_1 | 0, $71_1 | 0, $73_1 | 0, $74_1 | 0, $76_1 | 0, $77_1 | 0, $79_1 | 0, $80_1 | 0, $81_1 | 0, $55() | 0 | 0, HEAP32[($3_1 + 208 | 0) >> 2] | 0 | 0);
  $85_1 = 1;
  HEAP32[($3_1 + 68 | 0) >> 2] = $85_1;
  HEAP32[($3_1 + 64 | 0) >> 2] = 12;
  i64toi32_i32$0 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
  $435_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 264 | 0) >> 2] = $435_1;
  HEAP32[($3_1 + 268 | 0) >> 2] = i64toi32_i32$1;
  $87_1 = HEAP32[($3_1 + 264 | 0) >> 2] | 0;
  $88_1 = HEAP32[($3_1 + 268 | 0) >> 2] | 0;
  HEAP32[($3_1 + 292 | 0) >> 2] = $3_1 + 80 | 0;
  HEAP32[($3_1 + 288 | 0) >> 2] = $45_1;
  HEAP32[($3_1 + 284 | 0) >> 2] = $88_1;
  HEAP32[($3_1 + 280 | 0) >> 2] = $87_1;
  $91_1 = HEAP32[($3_1 + 292 | 0) >> 2] | 0;
  $92_1 = HEAP32[($3_1 + 288 | 0) >> 2] | 0;
  $93_1 = HEAP32[($3_1 + 280 | 0) >> 2] | 0;
  HEAP32[($3_1 + 276 | 0) >> 2] = HEAP32[($3_1 + 284 | 0) >> 2] | 0;
  HEAP32[($3_1 + 272 | 0) >> 2] = $93_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 272 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 276 | 0) >> 2] | 0;
  $466_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $466_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $69($92_1 | 0, $3_1 | 0);
  HEAP32[($3_1 + 52 | 0) >> 2] = $85_1;
  HEAP32[($3_1 + 48 | 0) >> 2] = 8;
  i64toi32_i32$0 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
  $476_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 232 | 0) >> 2] = $476_1;
  HEAP32[($3_1 + 236 | 0) >> 2] = i64toi32_i32$1;
  $96_1 = HEAP32[($3_1 + 232 | 0) >> 2] | 0;
  $97_1 = HEAP32[($3_1 + 236 | 0) >> 2] | 0;
  HEAP32[($3_1 + 260 | 0) >> 2] = $91_1;
  HEAP32[($3_1 + 256 | 0) >> 2] = $55_1;
  HEAP32[($3_1 + 252 | 0) >> 2] = $97_1;
  HEAP32[($3_1 + 248 | 0) >> 2] = $96_1;
  $98_1 = HEAP32[($3_1 + 260 | 0) >> 2] | 0;
  $99_1 = HEAP32[($3_1 + 256 | 0) >> 2] | 0;
  $100_1 = HEAP32[($3_1 + 248 | 0) >> 2] | 0;
  HEAP32[($3_1 + 244 | 0) >> 2] = HEAP32[($3_1 + 252 | 0) >> 2] | 0;
  HEAP32[($3_1 + 240 | 0) >> 2] = $100_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 240 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 244 | 0) >> 2] | 0;
  $504_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $504_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $69($99_1 | 0, $3_1 + 24 | 0 | 0);
  HEAP32[($3_1 + 316 | 0) >> 2] = $98_1;
  HEAP32[($3_1 + 312 | 0) >> 2] = 2226;
  $105_1 = HEAP32[($3_1 + 316 | 0) >> 2] | 0;
  $106_1 = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
  HEAP32[($3_1 + 380 | 0) >> 2] = $3_1 + 304 | 0;
  HEAP32[($3_1 + 376 | 0) >> 2] = $106_1;
  $70();
  HEAP32[($3_1 + 372 | 0) >> 2] = 15;
  HEAP32[($3_1 + 368 | 0) >> 2] = $72() | 0;
  HEAP32[($3_1 + 364 | 0) >> 2] = $73() | 0;
  HEAP32[($3_1 + 360 | 0) >> 2] = 16;
  $114_1 = $75() | 0;
  $115_1 = $76() | 0;
  $116_1 = $77() | 0;
  $117_1 = $78() | 0;
  HEAP32[($3_1 + 440 | 0) >> 2] = HEAP32[($3_1 + 372 | 0) >> 2] | 0;
  $119_1 = $53() | 0;
  $120_1 = HEAP32[($3_1 + 372 | 0) >> 2] | 0;
  HEAP32[($3_1 + 444 | 0) >> 2] = HEAP32[($3_1 + 368 | 0) >> 2] | 0;
  $122_1 = $53() | 0;
  $123_1 = HEAP32[($3_1 + 368 | 0) >> 2] | 0;
  HEAP32[($3_1 + 448 | 0) >> 2] = HEAP32[($3_1 + 364 | 0) >> 2] | 0;
  $125_1 = $53() | 0;
  $126_1 = HEAP32[($3_1 + 364 | 0) >> 2] | 0;
  $127_1 = HEAP32[($3_1 + 376 | 0) >> 2] | 0;
  HEAP32[($3_1 + 452 | 0) >> 2] = HEAP32[($3_1 + 360 | 0) >> 2] | 0;
  fimport$16($114_1 | 0, $115_1 | 0, $116_1 | 0, $117_1 | 0, $119_1 | 0, $120_1 | 0, $122_1 | 0, $123_1 | 0, $125_1 | 0, $126_1 | 0, $127_1 | 0, $55() | 0 | 0, HEAP32[($3_1 + 360 | 0) >> 2] | 0 | 0);
  $135_1 = $80($79($3_1 + 296 | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 392 | 0) >> 2] = $3_1 + 304 | 0;
  HEAP32[($3_1 + 388 | 0) >> 2] = 2458;
  HEAP32[($3_1 + 384 | 0) >> 2] = $135_1;
  $81(HEAP32[($3_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 384 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 416 | 0) >> 2] = $105_1;
  HEAP32[($3_1 + 412 | 0) >> 2] = 1807;
  HEAP32[($3_1 + 408 | 0) >> 2] = 17;
  $144_1 = HEAP32[($3_1 + 416 | 0) >> 2] | 0;
  HEAP32[($3_1 + 396 | 0) >> 2] = 18;
  $146_1 = $66() | 0;
  $147_1 = HEAP32[($3_1 + 412 | 0) >> 2] | 0;
  $151_1 = $84($3_1 + 400 | 0 | 0) | 0;
  $155_1 = $85($3_1 + 400 | 0 | 0) | 0;
  HEAP32[($3_1 + 456 | 0) >> 2] = HEAP32[($3_1 + 396 | 0) >> 2] | 0;
  fimport$17($146_1 | 0, $147_1 | 0, $151_1 | 0, $155_1 | 0, $86() | 0 | 0, HEAP32[($3_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 408 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 436 | 0) >> 2] = $144_1;
  HEAP32[($3_1 + 432 | 0) >> 2] = 3520;
  HEAP32[($3_1 + 428 | 0) >> 2] = 19;
  HEAP32[($3_1 + 420 | 0) >> 2] = 20;
  $163_1 = $66() | 0;
  $164_1 = HEAP32[($3_1 + 432 | 0) >> 2] | 0;
  $168_1 = $89($3_1 + 424 | 0 | 0) | 0;
  $172_1 = $90($3_1 + 424 | 0 | 0) | 0;
  HEAP32[($3_1 + 460 | 0) >> 2] = HEAP32[($3_1 + 420 | 0) >> 2] | 0;
  fimport$17($163_1 | 0, $164_1 | 0, $168_1 | 0, $172_1 | 0, $91() | 0 | 0, HEAP32[($3_1 + 420 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 428 | 0) >> 2] | 0 | 0);
  $92(2446 | 0, 21 | 0);
  global$0 = $3_1 + 464 | 0;
  return $4_1 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 22;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $94($4_1 + 16 | 0 | 0) | 0;
  $14_1 = $95($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$18($6_1 | 0, $10_1 | 0, $14_1 | 0, $96() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 23;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $98($4_1 + 16 | 0 | 0) | 0;
  $14_1 = $99($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$18($6_1 | 0, $10_1 | 0, $14_1 | 0, $100() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 24;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $102($4_1 + 16 | 0 | 0) | 0;
  $14_1 = $103($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$18($6_1 | 0, $10_1 | 0, $14_1 | 0, $104() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $44() {
  return;
 }
 
 function $45($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $199(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $46() {
  return 0 | 0;
 }
 
 function $47() {
  return 0 | 0;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $1844($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $49() {
  return $200() | 0 | 0;
 }
 
 function $50() {
  return $201() | 0 | 0;
 }
 
 function $51() {
  return $202() | 0 | 0;
 }
 
 function $52() {
  return 0 | 0;
 }
 
 function $53() {
  return 5516 | 0;
 }
 
 function $54() {
  return 5519 | 0;
 }
 
 function $55() {
  return 5521 | 0;
 }
 
 function $56() {
  var $1_1 = 0;
  $1_1 = $1842(20 | 0) | 0;
  $203($1_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = 25;
  $5_1 = $49() | 0;
  $9_1 = $205($3_1 + 16 | 0 | 0) | 0;
  $13_1 = $206($3_1 + 16 | 0 | 0) | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$47($5_1 | 0, $9_1 | 0, $13_1 | 0, $53() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $94_1 = 0, $126_1 = 0, $174_1 = 0, $175_1 = 0, $370_1 = 0, $377_1 = 0, $381_1 = 0;
  $3_1 = global$0 - 672 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 668 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 668 | 0) >> 2] | 0;
  HEAP32[($3_1 + 664 | 0) >> 2] = fimport$19(35633 | 0) | 0;
  fimport$20(HEAP32[($3_1 + 664 | 0) >> 2] | 0 | 0, 1 | 0, 20544 | 0, 0 | 0);
  fimport$21(HEAP32[($3_1 + 664 | 0) >> 2] | 0 | 0);
  fimport$22(HEAP32[($3_1 + 664 | 0) >> 2] | 0 | 0, 35713 | 0, $3_1 + 660 | 0 | 0);
  label$1 : {
   if (HEAP32[($3_1 + 660 | 0) >> 2] | 0) {
    break label$1
   }
   fimport$23(HEAP32[($3_1 + 664 | 0) >> 2] | 0 | 0, 512 | 0, 0 | 0, $3_1 + 144 | 0 | 0);
   $24($22($22(26816 | 0, 5097 | 0) | 0 | 0, $3_1 + 144 | 0 | 0) | 0 | 0, 2 | 0) | 0;
  }
  HEAP32[($3_1 + 140 | 0) >> 2] = fimport$19(35632 | 0) | 0;
  fimport$20(HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0, 1 | 0, 20548 | 0, 0 | 0);
  fimport$21(HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0);
  fimport$22(HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0, 35713 | 0, $3_1 + 660 | 0 | 0);
  label$2 : {
   if (HEAP32[($3_1 + 660 | 0) >> 2] | 0) {
    break label$2
   }
   fimport$23(HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0, 512 | 0, 0 | 0, $3_1 + 144 | 0 | 0);
   $24($22($22(26816 | 0, 5140 | 0) | 0 | 0, $3_1 + 144 | 0 | 0) | 0 | 0, 2 | 0) | 0;
  }
  HEAP32[$4_1 >> 2] = fimport$24() | 0;
  fimport$25(HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($3_1 + 664 | 0) >> 2] | 0 | 0);
  fimport$25(HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0);
  fimport$26(HEAP32[$4_1 >> 2] | 0 | 0);
  fimport$27(HEAP32[$4_1 >> 2] | 0 | 0, 35714 | 0, $3_1 + 660 | 0 | 0);
  label$3 : {
   if (HEAP32[($3_1 + 660 | 0) >> 2] | 0) {
    break label$3
   }
   fimport$28(HEAP32[$4_1 >> 2] | 0 | 0, 512 | 0, 0 | 0, $3_1 + 144 | 0 | 0);
   $24($22($22(26816 | 0, 5185 | 0) | 0 | 0, $3_1 + 144 | 0 | 0) | 0 | 0, 2 | 0) | 0;
  }
  fimport$29(HEAP32[($3_1 + 664 | 0) >> 2] | 0 | 0);
  fimport$29(HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0);
  $2014($3_1 + 48 | 0 | 0, 5248 | 0, 80 | 0) | 0;
  $94_1 = $3_1 + 16 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 5344 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 5348 | 0) >> 2] | 0;
  $370_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $94_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $370_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 5336 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 5340 | 0) >> 2] | 0;
  $377_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $94_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $377_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 5328 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 5332 | 0) >> 2] | 0;
  $381_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $94_1;
  HEAP32[i64toi32_i32$0 >> 2] = $381_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  fimport$30(1 | 0, $4_1 + 8 | 0 | 0);
  fimport$31(1 | 0, $4_1 + 4 | 0 | 0);
  fimport$31(1 | 0, $4_1 + 12 | 0 | 0);
  fimport$32(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  fimport$33(34962 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  fimport$34(34962 | 0, 80 | 0, $3_1 + 48 | 0 | 0, 35044 | 0);
  fimport$33(34963 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  fimport$34(34963 | 0, 24 | 0, $3_1 + 16 | 0 | 0, 35044 | 0);
  $126_1 = 0;
  fimport$35($126_1 | 0, 3 | 0, 5126 | 0, 0 & 255 | 0 | 0, 20 | 0, $126_1 | 0);
  fimport$36(0 | 0);
  fimport$35(1 | 0, 2 | 0, 5126 | 0, 0 & 255 | 0 | 0, 20 | 0, 12 | 0);
  fimport$36(1 | 0);
  fimport$33(34962 | 0, 0 | 0);
  fimport$32(0 | 0);
  HEAP32[$3_1 >> 2] = $291(2913 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0, 0 | 0) | 0;
  fimport$37(1 | 0, $4_1 + 16 | 0 | 0);
  fimport$38(3553 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
  label$4 : {
   label$5 : {
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    $174_1 = 0;
    $175_1 = 6407;
    fimport$39(3553 | 0, $174_1 | 0, $175_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $174_1 | 0, $175_1 | 0, 5121 | 0, HEAP32[$3_1 >> 2] | 0 | 0);
    fimport$40(3553 | 0);
    break label$4;
   }
   $24($22(26816 | 0, 3198 | 0) | 0 | 0, 2 | 0) | 0;
  }
  $290(HEAP32[$3_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 672 | 0;
  return;
 }
 
 function $59($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 26;
  $8_1 = $49() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $210($4_1 + 8 | 0 | 0) | 0;
  $17_1 = $211($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$48($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $212() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $213($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $60($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$41(HEAP32[$4_1 >> 2] | 0 | 0);
  fimport$38(3553 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
  fimport$32(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  fimport$42(4 | 0, 6 | 0, 5125 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $61() {
  return;
 }
 
 function $62($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $216(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $63() {
  return 0 | 0;
 }
 
 function $64() {
  return 0 | 0;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $217($4_1 | 0) | 0;
   $1844($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $66() {
  return $218() | 0 | 0;
 }
 
 function $67() {
  return $219() | 0 | 0;
 }
 
 function $68() {
  return $220() | 0 | 0;
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 27;
  $8_1 = $66() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $222($4_1 + 8 | 0 | 0) | 0;
  $17_1 = $223($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$48($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $212() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $224($4_1 + 16 | 0 | 0) | 0 | 0, 1 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $70() {
  return;
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $232(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $72() {
  return 28 | 0;
 }
 
 function $73() {
  return 29 | 0;
 }
 
 function $74($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $235($4_1 | 0) | 0;
   $1844($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $75() {
  return $236() | 0 | 0;
 }
 
 function $76() {
  return $237() | 0 | 0;
 }
 
 function $77() {
  return $238() | 0 | 0;
 }
 
 function $78() {
  return $66() | 0 | 0;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 30 | 0;
 }
 
 function $80($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $81($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 31;
  $6_1 = $75() | 0;
  $7_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $11_1 = $255($4_1 + 16 | 0 | 0) | 0;
  $15_1 = $256($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$48($6_1 | 0, $7_1 | 0, $11_1 | 0, $15_1 | 0, $212() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $257($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1842(48 | 0) | 0;
  $229($5_1 | 0, $228(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $83($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $262($4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $10_1 = $263(FUNCTION_TABLE[$5_1 | 0]($4_1) | 0 | 0) | 0;
  $241($4_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $264() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $86() {
  return 5916 | 0;
 }
 
 function $87($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $231($0_1 | 0, fimport$49($133(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $75() | 0 | 0, $230(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $88($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $27_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $272($5_1 + 16 | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0);
  $265($5_1 + 8 | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
  FUNCTION_TABLE[$6_1 | 0]($5_1 + 32 | 0, $5_1 + 16 | 0, $5_1 + 8 | 0);
  $27_1 = $273($5_1 + 32 | 0 | 0) | 0;
  $241($5_1 + 32 | 0 | 0) | 0;
  $241($5_1 + 8 | 0 | 0) | 0;
  $1911($5_1 + 16 | 0 | 0) | 0;
  global$0 = $5_1 + 48 | 0;
  return $27_1 | 0;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $274() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $91() {
  return 6092 | 0;
 }
 
 function $92($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 32;
  $6_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $10_1 = $106($4_1 + 8 | 0 | 0) | 0;
  $14_1 = $107($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  fimport$18($6_1 | 0, $10_1 | 0, $14_1 | 0, $86() | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $93($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0, $20_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(FUNCTION_TABLE[$7_1 | 0](Math_fround($193(Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2])))), Math_fround($193(Math_fround(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2])))), Math_fround($193(Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]))))));
  $20_1 = Math_fround($194($6_1 + 12 | 0 | 0));
  global$0 = $6_1 + 32 | 0;
  return Math_fround($20_1);
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $95($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $195() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $96() {
  return 5376 | 0;
 }
 
 function $97($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[$7_1 | 0](Math_fround($193(Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2])))), Math_fround($193(Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2])))), Math_fround($193(Math_fround(Math_fround(HEAPF32[$6_1 >> 2])))));
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $196() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $100() {
  return 5408 | 0;
 }
 
 function $101($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  FUNCTION_TABLE[$8_1 | 0]($197(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0, $197(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0, $197(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0, $197(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 5 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $198() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $104() {
  return 5444 | 0;
 }
 
 function $105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = $276(FUNCTION_TABLE[$5_1 | 0]($225(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $107($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $277() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 224 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 220 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 216 | 0) >> 2] = $1_1;
  $109($4_1 + 24 | 0 | 0, HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0, 8 | 0) | 0;
  label$1 : {
   if (($110($4_1 + 24 | 0 | 0) | 0) & 1 | 0) {
    break label$1
   }
   $24($22($111($22(26984 | 0, 5019 | 0) | 0 | 0, HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0) | 0 | 0, 5045 | 0) | 0 | 0, 2 | 0) | 0;
   fimport$43(1 | 0);
   abort();
  }
  $112($4_1 + 16 | 0 | 0, $4_1 + 24 | 0 | 0) | 0;
  $113($4_1 + 8 | 0 | 0) | 0;
  $114($0_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $115($4_1 + 24 | 0 | 0) | 0;
  global$0 = $4_1 + 224 | 0;
  return;
 }
 
 function $109($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0, $51_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $116($6_1 + 108 | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 19048 + 12 | 0;
  HEAP32[($6_1 + 108 | 0) >> 2] = 19048 + 32 | 0;
  $117($6_1 | 0, 19088 + 4 | 0 | 0, $6_1 + 8 | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 19048 + 12 | 0;
  HEAP32[($6_1 + 108 | 0) >> 2] = 19048 + 32 | 0;
  $1798($6_1 + 8 | 0 | 0) | 0;
  label$1 : {
   if (!(($118($6_1 + 8 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 8 | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$1
   }
   $119($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 4 | 0);
  }
  $51_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $51_1 | 0;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $9_1 = ($120((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $10_1 = $26(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $121(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $122(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $123($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $113($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $114($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $9($6_1 | 0, $5_1 + 24 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  $124($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
  global$0 = $5_1 + 48 | 0;
  return $6_1 | 0;
 }
 
 function $115($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $125($4_1 | 0, 19088 | 0) | 0;
  $1702($4_1 + 108 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $278($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 18496 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $117($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = 0;
  $279($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $118($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $10_1 = $1796(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $133(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $187(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0 | 0;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $19($170(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($15($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $20($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $280($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $190(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $124($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $20_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $129($6_1 | 0);
  label$1 : {
   label$2 : while (1) {
    if (!(($281($5_1 + 24 | 0 | 0, $5_1 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $20_1 = 24;
    $1920($6_1 | 0, (($282($5_1 + 24 | 0 | 0) | 0) << $20_1 | 0) >> $20_1 | 0 | 0);
    $283($5_1 + 24 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $125($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $1802($5_1 + 8 | 0 | 0) | 0;
  $1745($5_1 | 0, $6_1 + 4 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $126() {
  $127(22064 | 0) | 0;
  fimport$0(33 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $127($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $9($4_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $129($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1911(22064 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $129($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $17(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 < 3 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $130() {
  $34(HEAP32[(0 + 22056 | 0) >> 2] | 0 | 0);
  return;
 }
 
 function $131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  $8($4_1 + 24 | 0 | 0, 2028 | 0) | 0;
  $108($4_1 + 8 | 0 | 0, $4_1 + 24 | 0 | 0);
  $132(22064 | 0, $4_1 + 8 | 0 | 0) | 0;
  $1911($4_1 + 8 | 0 | 0) | 0;
  $607(fimport$44($4_1 + 4 | 0 | 0) | 0 | 0);
  fimport$45($133(22064 | 0) | 0 | 0);
  fimport$46(34 | 0, 0 | 0, 1 | 0);
  fimport$5();
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  $1911($4_1 + 24 | 0 | 0) | 0;
  $36_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $36_1 | 0;
 }
 
 function $132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $134($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $133($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $121(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, i64toi32_i32$1 = 0, $71_1 = 0, $23_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   if (!(($15($5_1 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $152($149($5_1 | 0) | 0 | 0, $150($5_1 | 0) | 0 | 0, $151($5_1 | 0) | 0 | 0);
  }
  $153($5_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
  $14_1 = $17(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $17($5_1 | 0) | 0;
  i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
  $71_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $15_1;
  HEAP32[i64toi32_i32$0 >> 2] = $71_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $16_1 = 8;
  HEAP32[(i64toi32_i32$0 + $16_1 | 0) >> 2] = HEAP32[($14_1 + $16_1 | 0) >> 2] | 0;
  $154(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0);
  $23_1 = $155(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($4_1 + 15 | 0) >> 0] = 0;
  $156($23_1 | 0, $4_1 + 15 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  i64toi32_i32$2 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $25_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $29$hi = 0, $31$hi = 0, i64toi32_i32$3 = 0, $52_1 = 0, $29_1 = 0, $68_1 = 0, $76_1 = 0, $79_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $1_1;
  i64toi32_i32$2 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $31($4_1 + 16 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $29_1 = i64toi32_i32$1;
  $29$hi = i64toi32_i32$0;
  i64toi32_i32$2 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $68_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $31($4_1 + 8 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $31$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $29$hi;
  i64toi32_i32$0 = $31$hi;
  $76_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $29$hi;
  i64toi32_i32$2 = $29_1;
  i64toi32_i32$1 = $31$hi;
  i64toi32_i32$3 = $76_1;
  i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
  $79_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $79_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$5;
  $137($4_1 + 40 | 0 | 0, $4_1 + 24 | 0 | 0, 0 | 0) | 0;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$5 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $137($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $26_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  i64toi32_i32$2 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $26_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $10_1 = $115($4_1 + (HEAP32[((HEAP32[$4_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $141($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $142($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $148(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $145(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $147($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $158(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $150($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($17(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = (HEAP32[(($16(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $152($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $157(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $159(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP8[(($17(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] = $6_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $160($17(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
  return;
 }
 
 function $157($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $161(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 0 | 0 | 0, 1 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $158($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $167(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $168($149(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0) | 0;
  $149($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $169(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $161($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!(($162(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $163(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
    break label$1;
   }
   $164(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 > 16 >>> 0 & 1 | 0 | 0;
 }
 
 function $163($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $165(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $166(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $165($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $1846(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $166($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1844(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($15($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $18($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $171($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $172($16(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $173(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $123($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($186($185() | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $11_1 = 24;
   $15_1 = 24;
   HEAP32[($4_1 + 76 | 0) >> 2] = (($27($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0;
  }
  $19_1 = 24;
  $21_1 = ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << $19_1 | 0) >> $19_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $178($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $79_1 = 0, $145_1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 47 | 0) >> 0] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 36 | 0) >> 2] = $180(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0;
     break label$3;
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = 0;
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   label$5 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!(($181(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$7 : {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$7
    }
    $79_1 = 24;
    $182($8_1 + 16 | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 47 | 0) >> 0] | 0) << $79_1 | 0) >> $79_1 | 0 | 0) | 0;
    label$8 : {
     label$9 : {
      if (!(($181(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, $183($8_1 + 16 | 0 | 0) | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($8_1 + 64 | 0) >> 2] = 0;
      HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = 1;
      break label$8;
     }
     HEAP32[($8_1 + 12 | 0) >> 2] = 0;
    }
    $1911($8_1 + 16 | 0 | 0) | 0;
    label$10 : {
     switch (HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) {
     case 1:
      break label$1;
     default:
      break label$10;
     };
    }
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 56 | 0) >> 2] | 0) | 0;
   label$11 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!(($181(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   $184(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
  }
  $145_1 = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
  global$0 = $8_1 + 80 | 0;
  return $145_1 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $181($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 23 | 0) >> 0] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $9($6_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $15_1 = 24;
  $1919($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 23 | 0) >> 0] | 0) << $15_1 | 0) >> $15_1 | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $183($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $189($188(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $185() {
  return -1 | 0;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $616($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($15($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $150($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $155($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $189($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $190($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $755(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 22772 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = 24;
  $13_1 = 24;
  $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $193($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2]));
 }
 
 function $195() {
  return 5360 | 0;
 }
 
 function $196() {
  return 5392 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $198() {
  return 5424 | 0;
 }
 
 function $199($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 5460 | 0;
 }
 
 function $200() {
  return 5460 | 0;
 }
 
 function $201() {
  return 5476 | 0;
 }
 
 function $202() {
  return 5500 | 0;
 }
 
 function $203($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $207(FUNCTION_TABLE[HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0]() | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $205($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1 | 0;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $208() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $208() {
  return 5524 | 0;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $18_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $214(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[$7_1 >> 2] | 0;
  $12_1 = $6_1 + ($8_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($8_1 & 1 | 0)) {
     break label$2
    }
    $18_1 = HEAP32[((HEAP32[$12_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0;
    break label$1;
   }
   $18_1 = $9_1;
  }
  FUNCTION_TABLE[$18_1 | 0]($12_1);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $210($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $215() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $212() {
  return 5536 | 0;
 }
 
 function $213($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1842(8 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $8_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $215() {
  return 5528 | 0;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + -4 | 0) >> 2] | 0 | 0;
 }
 
 function $217($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 1324 + 8 | 0;
  $1911($4_1 + 24 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $218() {
  return 5240 | 0;
 }
 
 function $219() {
  return 5556 | 0;
 }
 
 function $220() {
  return 5588 | 0;
 }
 
 function $221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $18_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $225(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[$7_1 >> 2] | 0;
  $12_1 = $6_1 + ($8_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($8_1 & 1 | 0)) {
     break label$2
    }
    $18_1 = HEAP32[((HEAP32[$12_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0;
    break label$1;
   }
   $18_1 = $9_1;
  }
  FUNCTION_TABLE[$18_1 | 0]($12_1);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $222($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $226() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $224($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1842(8 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $8_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $226() {
  return 5604 | 0;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $260($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $229($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $267($5_1 | 0, $228(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 5920 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $266($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $232($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + -4 | 0) >> 2] | 0 | 0;
 }
 
 function $233($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $239($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $236() {
  return 5780 | 0;
 }
 
 function $237() {
  return 5816 | 0;
 }
 
 function $238() {
  return 5856 | 0;
 }
 
 function $239($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 5612 + 8 | 0;
  label$1 : {
   if (!((HEAPU8[($4_1 + 40 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $240($4_1 | 0, 1865 | 0);
  }
  $241($4_1 + 44 | 0 | 0) | 0;
  $217($4_1 | 0) | 0;
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $242((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 44 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $241($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$50(HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $243(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $243($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $244() | 0;
  $245($4_1 + 8 | 0 | 0) | 0;
  fimport$51(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $246($4_1 + 8 | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $244() {
  label$1 : {
   if (!((((HEAPU8[(0 + 22096 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!($1953(22096 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 22092 | 0) >> 2] = $247() | 0;
   $1961(22096 | 0);
  }
  return HEAP32[(0 + 22092 | 0) >> 2] | 0 | 0;
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $248($4_1 | 0) | 0;
  $249($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $246($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $250(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $247() {
  var $2_1 = 0, $11_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $11_1 = fimport$52($251($2_1 + 8 | 0 | 0) | 0 | 0, $252($2_1 + 8 | 0 | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $248($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 0 | 0;
 }
 
 function $249($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $250($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 0 | 0;
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1 | 0;
 }
 
 function $252($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $253() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $253() {
  return 5752 | 0;
 }
 
 function $254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  FUNCTION_TABLE[$6_1 | 0]($258(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $255($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $259() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $257($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1842(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $258($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $259() {
  return 5872 | 0;
 }
 
 function $260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $261((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 40 | 0 | 0, 1 & 1 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $265($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $264() {
  return 5880 | 0;
 }
 
 function $265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $231($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $7($5_1 | 0) | 0;
  $268($5_1 + 40 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 5612 + 8 | 0;
  $269($5_1 + 44 | 0 | 0, $228(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[$4_1 >> 0] = 0;
  return $4_1 | 0;
 }
 
 function $269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $270($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $240(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1572 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $271($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $240(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2398 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $272($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $275($0_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $273($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$53(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $7_1 = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $274() {
  return 5944 | 0;
 }
 
 function $275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $9($6_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $1914($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $277() {
  return 6100 | 0;
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 7152 + 8 | 0;
  return $4_1 | 0;
 }
 
 function $279($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $621($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 72 | 0) >> 2] = 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = $185() | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $280($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = (HEAPU8[(($16(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($284(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $9_1 = (($285(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) << $7_1 | 0) >> $7_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $286(HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $17_1 = (($287(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0 | 0) == (($287(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $285($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($4_1) | 0;
    break label$1;
   }
   $17_1 = 24;
   HEAP32[($3_1 + 12 | 0) >> 2] = $288(((HEAPU8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $17_1 | 0) >> $17_1 | 0 | 0) | 0;
  }
  $21_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $286($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0, $19_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($4_1) | 0;
    break label$1;
   }
   $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = $15_1 + 1 | 0;
   $19_1 = 24;
   HEAP32[($3_1 + 12 | 0) >> 2] = $288(((HEAPU8[$15_1 >> 0] | 0) << $19_1 | 0) >> $19_1 | 0 | 0) | 0;
  }
  $23_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $23_1 | 0;
 }
 
 function $287($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!(($186($285(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, $185() | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = 0;
  }
  $25_1 = (HEAP32[$4_1 >> 2] | 0 | 0) == (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $288($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0 | 0;
 }
 
 function $289() {
  $1();
  $39();
  $126();
  return;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $2005(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $291($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $20_1 = 0, $30_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $292(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, 3631 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    $20_1 = 0;
    HEAP32[($7_1 + 28 | 0) >> 2] = $293(2578 | 0) | 0 ? $20_1 : $20_1;
    break label$1;
   }
   HEAP32[$7_1 >> 2] = $294(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $574(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
  }
  $30_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $30_1 | 0;
 }
 
 function $292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $567(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $293($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 22100 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return 0 | 0;
 }
 
 function $294($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $30_1 = 0;
  $7_1 = global$0 - 208 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 196 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 192 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 188 | 0) >> 2] = $4_1;
  $295($7_1 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
  HEAP32[($7_1 + 184 | 0) >> 2] = $296($7_1 | 0, HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $570(HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, 0 - ((HEAP32[($7_1 + 172 | 0) >> 2] | 0) - (HEAP32[($7_1 + 168 | 0) >> 2] | 0) | 0) | 0 | 0, 1 | 0) | 0;
  }
  $30_1 = HEAP32[($7_1 + 184 | 0) >> 2] | 0;
  global$0 = $7_1 + 208 | 0;
  return $30_1 | 0;
 }
 
 function $295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $297(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 20568 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $296($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $29_1 = 0, $123_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $298(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 22104 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 56 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!(HEAP32[($7_1 + 44 | 0) >> 2] | 0)) {
      break label$3
     }
     $29_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
     break label$2;
    }
    $29_1 = HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 28 | 0) >> 2] = $29_1;
   HEAP32[($7_1 + 24 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 1 | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[($7_1 + 16 | 0) >> 2] = 0;
       label$8 : {
        label$9 : while (1) {
         if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$8
         }
         HEAP8[($7_1 + 15 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (Math_imul(Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0;
         HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (Math_imul(Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (Math_imul(Math_imul(((HEAP32[($7_1 + 32 | 0) >> 2] | 0) - (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) - 1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0;
         HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (Math_imul(Math_imul(((HEAP32[($7_1 + 32 | 0) >> 2] | 0) - (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) - 1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) | 0) >> 0] = HEAPU8[($7_1 + 15 | 0) >> 0] | 0;
         HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0;
         continue label$9;
        };
       }
       HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$7;
      };
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
  }
  $123_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
  global$0 = $7_1 + 64 | 0;
  return $123_1 | 0;
 }
 
 function $297($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $52_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$9_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$0;
  i64toi32_i32$0 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $10_1 = 8;
  HEAP32[(i64toi32_i32$0 + $10_1 | 0) >> 2] = HEAP32[($9_1 + $10_1 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] = 128;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] = 1;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 176 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 40 | 0;
  $301(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 180 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $298($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $79_1 = 0, $94_1 = 0, $72_1 = 0, $74_1 = 0, $76_1 = 0, $96_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!($314(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $315(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!($316(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $317(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (!($318(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $319(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    if (!($320(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$5
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $321(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$6 : {
    if (!($322(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $323(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$7 : {
    if (!($324(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $325(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$8 : {
    if (!($326(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$8
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $327(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$9 : {
    if (!($302(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$9
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $303(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $72_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $74_1 = HEAP32[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    $76_1 = HEAP32[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 2] | 0;
    label$10 : {
     label$11 : {
      if (!(HEAP32[($7_1 + 8 | 0) >> 2] | 0)) {
       break label$11
      }
      $79_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
      break label$10;
     }
     $79_1 = HEAP32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $328($72_1 | 0, $74_1 | 0, $76_1 | 0, $79_1 | 0) | 0;
    break label$1;
   }
   label$12 : {
    if (!($329(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
     break label$12
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $330(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $94_1 = 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = $293(3231 | 0) | 0 ? $94_1 : $94_1;
  }
  $96_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $96_1 | 0;
 }
 
 function $299($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $17_1 = 0;
  $8_1 = global$0 - 208 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 196 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 192 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 188 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 184 | 0) >> 2] = $5_1;
  $300($8_1 | 0, HEAP32[($8_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0);
  $17_1 = $296($8_1 | 0, HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $8_1 + 208 | 0;
  return $17_1 | 0;
 }
 
 function $300($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $10_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
  $10_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 176 | 0) >> 2] = $10_1;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] = $10_1;
  $15_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 180 | 0) >> 2] = $15_1;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2] = $15_1;
  return;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0, (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0, HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($3_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
    HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0;
    HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) + 1 | 0;
    HEAP8[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0;
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $302($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $304(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $305(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $303($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $128_1 = 0, $18_1 = 0, $27_1 = 0, $37_1 = 0, $50_1 = 0, $63_1 = 0, $81_1 = 0, $198_1 = 0, $257_1 = 0, $281_1 = 0, $184_1 = 0, $255_1 = 0, $256_1 = 0, $279_1 = 0, $280_1 = 0, $373_1 = 0;
  $7_1 = global$0 - 1120 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 1112 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 1108 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 1104 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 1100 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 1096 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!($595($353(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0, $7_1 + 64 | 0 | 0) | 0 | 0, 4028 | 0) | 0)) {
     break label$2
    }
    $18_1 = 0;
    HEAP32[($7_1 + 1116 | 0) >> 2] = $293(3873 | 0) | 0 ? $18_1 : $18_1;
    break label$1;
   }
   label$3 : {
    label$4 : while (1) {
     HEAP32[($7_1 + 60 | 0) >> 2] = $353(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0, $7_1 + 64 | 0 | 0) | 0;
     $27_1 = 24;
     label$5 : {
      if (((HEAPU8[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 0] | 0) << $27_1 | 0) >> $27_1 | 0) {
       break label$5
      }
      break label$3;
     }
     label$6 : {
      if ($595(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, 3442 | 0) | 0) {
       break label$6
      }
      HEAP32[($7_1 + 56 | 0) >> 2] = 1;
     }
     continue label$4;
    };
   }
   label$7 : {
    if (HEAP32[($7_1 + 56 | 0) >> 2] | 0) {
     break label$7
    }
    $37_1 = 0;
    HEAP32[($7_1 + 1116 | 0) >> 2] = $293(1941 | 0) | 0 ? $37_1 : $37_1;
    break label$1;
   }
   HEAP32[($7_1 + 60 | 0) >> 2] = $353(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0, $7_1 + 64 | 0 | 0) | 0;
   label$8 : {
    if (!($594(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, 5077 | 0, 3 | 0) | 0)) {
     break label$8
    }
    $50_1 = 0;
    HEAP32[($7_1 + 1116 | 0) >> 2] = $293(1650 | 0) | 0 ? $50_1 : $50_1;
    break label$1;
   }
   HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 3 | 0;
   HEAP32[($7_1 + 48 | 0) >> 2] = $603(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, $7_1 + 60 | 0 | 0, 10 | 0) | 0;
   label$9 : {
    label$10 : while (1) {
     $63_1 = 24;
     if (!((((HEAPU8[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 0] | 0) << $63_1 | 0) >> $63_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     continue label$10;
    };
   }
   label$11 : {
    if (!($594(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, 5081 | 0, 3 | 0) | 0)) {
     break label$11
    }
    $81_1 = 0;
    HEAP32[($7_1 + 1116 | 0) >> 2] = $293(1650 | 0) | 0 ? $81_1 : $81_1;
    break label$1;
   }
   HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 3 | 0;
   HEAP32[($7_1 + 52 | 0) >> 2] = $603(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, 0 | 0, 10 | 0) | 0;
   HEAP32[(HEAP32[($7_1 + 1108 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 1104 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
   label$12 : {
    if (!((HEAP32[($7_1 + 1100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$12
    }
    HEAP32[(HEAP32[($7_1 + 1100 | 0) >> 2] | 0) >> 2] = 3;
   }
   label$13 : {
    if (HEAP32[($7_1 + 1096 | 0) >> 2] | 0) {
     break label$13
    }
    HEAP32[($7_1 + 1096 | 0) >> 2] = 3;
   }
   HEAP32[($7_1 + 40 | 0) >> 2] = $306(Math_imul(Math_imul(HEAP32[($7_1 + 48 | 0) >> 2] | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0), HEAP32[($7_1 + 1096 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   label$14 : {
    label$15 : {
     label$16 : {
      label$17 : {
       if ((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0) {
        break label$17
       }
       if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) >= (32768 | 0) & 1 | 0)) {
        break label$16
       }
      }
      HEAP32[($7_1 + 24 | 0) >> 2] = 0;
      $128_1 = 0;
      break label$15;
     }
     HEAP32[($7_1 + 44 | 0) >> 2] = 0;
     HEAP32[($7_1 + 24 | 0) >> 2] = 0;
     label$18 : {
      label$19 : {
       label$20 : while (1) {
        if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$19
        }
        HEAP32[($7_1 + 16 | 0) >> 2] = ($337(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
        HEAP32[($7_1 + 12 | 0) >> 2] = ($337(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = ($337(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
        label$21 : {
         label$22 : {
          if ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0) {
           break label$22
          }
          if ((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0) {
           break label$22
          }
          if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0) & 128 | 0)) {
           break label$21
          }
         }
         HEAP8[$7_1 >> 0] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
         HEAP8[($7_1 + 3 | 0) >> 0] = $337(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0) | 0;
         $354(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, $7_1 | 0, HEAP32[($7_1 + 1096 | 0) >> 2] | 0 | 0);
         HEAP32[($7_1 + 28 | 0) >> 2] = 1;
         HEAP32[($7_1 + 24 | 0) >> 2] = 0;
         $2005(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
         break label$18;
        }
        HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 8 | 0;
        $184_1 = ($337(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0 | $184_1 | 0;
        label$23 : {
         if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$23
         }
         $2005(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0);
         $2005(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
         $198_1 = 0;
         HEAP32[($7_1 + 1116 | 0) >> 2] = $293(2777 | 0) | 0 ? $198_1 : $198_1;
         break label$1;
        }
        label$24 : {
         if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
          break label$24
         }
         HEAP32[($7_1 + 44 | 0) >> 2] = $306((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
        }
        HEAP32[($7_1 + 20 | 0) >> 2] = 0;
        label$25 : {
         label$26 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
           break label$25
          }
          HEAP32[($7_1 + 28 | 0) >> 2] = 0;
          label$27 : {
           label$28 : while (1) {
            if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$27
            }
            HEAP8[($7_1 + 35 | 0) >> 0] = $337(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0) | 0;
            label$29 : {
             label$30 : {
              if (!(((HEAPU8[($7_1 + 35 | 0) >> 0] | 0) & 255 | 0 | 0) > (128 | 0) & 1 | 0)) {
               break label$30
              }
              HEAP8[($7_1 + 34 | 0) >> 0] = $337(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0) | 0;
              HEAP8[($7_1 + 35 | 0) >> 0] = ((HEAPU8[($7_1 + 35 | 0) >> 0] | 0) & 255 | 0) - 128 | 0;
              HEAP32[($7_1 + 8 | 0) >> 2] = 0;
              label$31 : {
               label$32 : while (1) {
                if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < ((HEAPU8[($7_1 + 35 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
                 break label$31
                }
                $255_1 = HEAPU8[($7_1 + 34 | 0) >> 0] | 0;
                $256_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
                $257_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
                HEAP32[($7_1 + 28 | 0) >> 2] = $257_1 + 1 | 0;
                HEAP8[($256_1 + (($257_1 << 2 | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0) | 0) >> 0] = $255_1;
                HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
                continue label$32;
               };
              }
              break label$29;
             }
             HEAP32[($7_1 + 8 | 0) >> 2] = 0;
             label$33 : {
              label$34 : while (1) {
               if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < ((HEAPU8[($7_1 + 35 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
                break label$33
               }
               $279_1 = $337(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0) | 0;
               $280_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
               $281_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
               HEAP32[($7_1 + 28 | 0) >> 2] = $281_1 + 1 | 0;
               HEAP8[($280_1 + (($281_1 << 2 | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0) | 0) >> 0] = $279_1;
               HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
               continue label$34;
              };
             }
            }
            continue label$28;
           };
          }
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
          continue label$26;
         };
        }
        HEAP32[($7_1 + 28 | 0) >> 2] = 0;
        label$35 : {
         label$36 : while (1) {
          if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$35
          }
          $354((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (Math_imul(Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0, HEAP32[($7_1 + 1096 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($7_1 + 1096 | 0) >> 2] | 0 | 0);
          HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0;
          continue label$36;
         };
        }
        HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
        continue label$20;
       };
      }
      $2005(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
      break label$14;
     }
     $128_1 = 1;
    }
    label$37 : while (1) {
     label$38 : {
      label$39 : {
       label$40 : {
        label$41 : {
         switch ($128_1 | 0) {
         case 0:
          if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$39
          }
          HEAP32[($7_1 + 28 | 0) >> 2] = 0;
          break label$40;
         default:
          break label$41;
         };
        }
        $352(HEAP32[($7_1 + 1112 | 0) >> 2] | 0 | 0, $7_1 + 4 | 0 | 0, 4 | 0) | 0;
        $354(((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (Math_imul(Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0), HEAP32[($7_1 + 1096 | 0) >> 2] | 0) << 2 | 0) | 0) + (Math_imul(HEAP32[($7_1 + 28 | 0) >> 2] | 0, HEAP32[($7_1 + 1096 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, $7_1 + 4 | 0 | 0, HEAP32[($7_1 + 1096 | 0) >> 2] | 0 | 0);
        HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       }
       label$43 : {
        if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$43
        }
        $128_1 = 1;
        continue label$37;
       }
       HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       break label$38;
      }
      break label$14;
     }
     $128_1 = 0;
     continue label$37;
    };
   }
   HEAP32[($7_1 + 1116 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
  }
  $373_1 = HEAP32[($7_1 + 1116 | 0) >> 2] | 0;
  global$0 = $7_1 + 1120 | 0;
  return $373_1 | 0;
 }
 
 function $304($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 5085;
  HEAP32[$3_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!(((HEAPU8[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + (HEAP32[$3_1 >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $26_1 = 24;
     label$4 : {
      if (!((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (((HEAPU8[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + (HEAP32[$3_1 >> 2] | 0) | 0) >> 0] | 0) << $26_1 | 0) >> $26_1 | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  }
  $39_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $39_1 | 0;
 }
 
 function $305($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 176 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 180 | 0) >> 2] | 0;
  return;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $2004(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $307($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $20_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
  $20_1 = $308(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $7_1 + 32 | 0;
  return $20_1 | 0;
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $78_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($4_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     if ($404(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = 0;
     break label$1;
    }
   }
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
   label$4 : while (1) {
    HEAP32[($4_1 + 16 | 0) >> 2] = $405(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $405(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 2 | 0) | 0;
    label$5 : {
     label$6 : {
      if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
       break label$6
      }
      label$7 : {
       if ($406(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) {
        break label$7
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = 0;
       break label$1;
      }
      break label$5;
     }
     label$8 : {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     label$9 : {
      label$10 : {
       if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$10
       }
       label$11 : {
        if (((HEAPU8[(0 + 22159 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
         break label$11
        }
        $407();
       }
       label$12 : {
        if ($408((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 32 | 0 | 0, 22160 | 0, 288 | 0) | 0) {
         break label$12
        }
        HEAP32[($4_1 + 28 | 0) >> 2] = 0;
        break label$1;
       }
       label$13 : {
        if ($408((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 2052 | 0 | 0, 22128 | 0, 32 | 0) | 0) {
         break label$13
        }
        HEAP32[($4_1 + 28 | 0) >> 2] = 0;
        break label$1;
       }
       break label$9;
      }
      label$14 : {
       if ($409(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) {
        break label$14
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = 0;
       break label$1;
      }
     }
     label$15 : {
      if ($410(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) {
       break label$15
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
    }
    if (((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0) {
     continue label$4
    }
    break label$4;
   };
   HEAP32[($4_1 + 28 | 0) >> 2] = 1;
  }
  $78_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $78_1 | 0;
 }
 
 function $309($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $44_1 = 0;
  $7_1 = global$0 - 4112 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 4104 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 4100 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 4096 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 4092 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 4088 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $306(HEAP32[($7_1 + 4096 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 4108 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 4104 | 0) >> 2] | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 4104 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4100 | 0) >> 2] | 0) | 0;
   label$3 : {
    if (!($307($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4096 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($7_1 + 4088 | 0) >> 2] | 0 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     if (!((HEAP32[($7_1 + 4092 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[(HEAP32[($7_1 + 4092 | 0) >> 2] | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) - (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($7_1 + 4108 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    break label$1;
   }
   $2005(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0);
   HEAP32[($7_1 + 4108 | 0) >> 2] = 0;
  }
  $44_1 = HEAP32[($7_1 + 4108 | 0) >> 2] | 0;
  global$0 = $7_1 + 4112 | 0;
  return $44_1 | 0;
 }
 
 function $310($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $13_1 = 0, $23_1 = 0, $33_1 = 0, $45_1 = 0, $68_1 = 0, $78_1 = 0, $99_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $305(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP8[($6_1 + 6 | 0) >> 0] = $337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($6_1 + 5 | 0) >> 0] = $337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $13_1 = 24;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((((HEAPU8[($6_1 + 6 | 0) >> 0] | 0) << $13_1 | 0) >> $13_1 | 0 | 0) != (80 | 0) & 1 | 0) {
      break label$3
     }
     $23_1 = 24;
     if (!((((HEAPU8[($6_1 + 5 | 0) >> 0] | 0) << $23_1 | 0) >> $23_1 | 0 | 0) != (53 | 0) & 1 | 0)) {
      break label$2
     }
     $33_1 = 24;
     if (!((((HEAPU8[($6_1 + 5 | 0) >> 0] | 0) << $33_1 | 0) >> $33_1 | 0 | 0) != (54 | 0) & 1 | 0)) {
      break label$2
     }
    }
    $305(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   $45_1 = 24;
   HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] = (((HEAPU8[($6_1 + 5 | 0) >> 0] | 0) << $45_1 | 0) >> $45_1 | 0 | 0) == (54 | 0) & 1 | 0 ? 3 : 1;
   HEAP8[($6_1 + 7 | 0) >> 0] = $337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   $400(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $6_1 + 7 | 0 | 0);
   $68_1 = $401(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $6_1 + 7 | 0 | 0) | 0;
   HEAP32[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 2] = $68_1;
   $400(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $6_1 + 7 | 0 | 0);
   $78_1 = $401(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $6_1 + 7 | 0 | 0) | 0;
   HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] = $78_1;
   $400(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $6_1 + 7 | 0 | 0);
   HEAP32[($6_1 + 8 | 0) >> 2] = $401(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $6_1 + 7 | 0 | 0) | 0;
   label$4 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) > (255 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = $293(4712 | 0) | 0;
    break label$1;
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 1;
  }
  $99_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $99_1 | 0;
 }
 
 function $311($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $10_1 = $577(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $312($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $570(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $580(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 18208 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 18204 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 18204 | 0) >> 2] | 0;
  $331($3_1 + 8 | 0 | 0);
  HEAP32[($3_1 + 18200 | 0) >> 2] = $332($3_1 + 8 | 0 | 0, 1 | 0) | 0;
  $305(HEAP32[($3_1 + 18204 | 0) >> 2] | 0 | 0);
  $14_1 = HEAP32[($3_1 + 18200 | 0) >> 2] | 0;
  global$0 = $3_1 + 18208 | 0;
  return $14_1 | 0;
 }
 
 function $315($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 18208 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 18204 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 18200 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 18196 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 18192 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 18188 | 0) >> 2] = $4_1;
  HEAP32[$7_1 >> 2] = HEAP32[($7_1 + 18204 | 0) >> 2] | 0;
  $331($7_1 | 0);
  $15_1 = $333($7_1 | 0, HEAP32[($7_1 + 18200 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 18196 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 18192 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 18188 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $7_1 + 18208 | 0;
  return $15_1 | 0;
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $334(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $305(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $317($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $16_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  $16_1 = $335($7_1 + 8 | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $7_1 + 48 | 0;
  return $16_1 | 0;
 }
 
 function $318($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $336(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $305(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $319($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $37_1 = 0, $83_1 = 0, $114_1 = 0, $127_1 = 0, $180_1 = 0, $274_1 = 0, $278_1 = 0, $377_1 = 0, $398_1 = 0, $498_1 = 0, $550_1 = 0, $563_1 = 0, $576_1 = 0, $588_1 = 0, $614_1 = 0, $626_1 = 0, $639_1 = 0, $652_1 = 0, $664_1 = 0, $772_1 = 0, $852_1 = 0, $869_1 = 0, $894_1 = 0, $907_1 = 0, $920_1 = 0, $933_1 = 0, $944_1 = 0, $961_1 = 0, $93_1 = 0, $96_1 = 0, $99_1 = 0, $102_1 = 0, $139_1 = 0, $409_1 = 0, $418_1 = 0, $427_1 = 0, $548_1 = 0, $549_1 = 0, $561_1 = 0, $562_1 = 0, $574_1 = 0, $575_1 = 0, $587_1 = 0, $624_1 = 0, $625_1 = 0, $637_1 = 0, $638_1 = 0, $650_1 = 0, $651_1 = 0, $663_1 = 0, $818_1 = 0, $825_1 = 0, $832_1 = 0, $867_1 = 0, $868_1 = 0, $905_1 = 0, $906_1 = 0, $918_1 = 0, $919_1 = 0, $931_1 = 0, $932_1 = 0, $959_1 = 0, $960_1 = 0, $1110_1 = 0;
  $7_1 = global$0 - 1200 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 1192 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 1188 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 1184 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 1180 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 1176 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 1168 | 0) >> 2] = 0;
  HEAP32[($7_1 + 1164 | 0) >> 2] = 0;
  HEAP32[($7_1 + 1160 | 0) >> 2] = 0;
  HEAP32[($7_1 + 1156 | 0) >> 2] = 0;
  HEAP32[($7_1 + 1152 | 0) >> 2] = 255;
  HEAP32[($7_1 + 124 | 0) >> 2] = 0;
  HEAP32[($7_1 + 112 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((($337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (66 | 0) & 1 | 0) {
      break label$3
     }
     if (!((($337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (77 | 0) & 1 | 0)) {
      break label$2
     }
    }
    $37_1 = 0;
    HEAP32[($7_1 + 1196 | 0) >> 2] = $293(3888 | 0) | 0 ? $37_1 : $37_1;
    break label$1;
   }
   $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
   $339(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
   $339(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($7_1 + 88 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($7_1 + 84 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) != (12 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) != (40 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) != (56 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) != (108 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) != (124 | 0) & 1 | 0)) {
     break label$4
    }
    $83_1 = 0;
    HEAP32[($7_1 + 1196 | 0) >> 2] = $293(3896 | 0) | 0 ? $83_1 : $83_1;
    break label$1;
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
      break label$6
     }
     $93_1 = $339(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] = $93_1;
     $96_1 = $339(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] = $96_1;
     break label$5;
    }
    $99_1 = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] = $99_1;
    $102_1 = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] = $102_1;
   }
   label$7 : {
    if (!(($339(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$7
    }
    $114_1 = 0;
    HEAP32[($7_1 + 1196 | 0) >> 2] = $293(3908 | 0) | 0 ? $114_1 : $114_1;
    break label$1;
   }
   HEAP32[($7_1 + 104 | 0) >> 2] = $339(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
   label$8 : {
    if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$8
    }
    $127_1 = 0;
    HEAP32[($7_1 + 1196 | 0) >> 2] = $293(3284 | 0) | 0 ? $127_1 : $127_1;
    break label$1;
   }
   HEAP32[($7_1 + 100 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0;
   $139_1 = $604(HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] = $139_1;
   label$9 : {
    label$10 : {
     if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
      break label$10
     }
     label$11 : {
      if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) < (24 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($7_1 + 124 | 0) >> 2] = (((HEAP32[($7_1 + 88 | 0) >> 2] | 0) - 14 | 0) - 24 | 0 | 0) / (3 | 0) | 0;
     }
     break label$9;
    }
    HEAP32[($7_1 + 112 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
    label$12 : {
     label$13 : {
      if ((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
       break label$13
      }
      if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$12
      }
     }
     $180_1 = 0;
     HEAP32[($7_1 + 1196 | 0) >> 2] = $293(4020 | 0) | 0 ? $180_1 : $180_1;
     break label$1;
    }
    $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
    $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
    $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
    $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
    $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
    label$14 : {
     label$15 : {
      label$16 : {
       if ((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (40 | 0) & 1 | 0) {
        break label$16
       }
       if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (56 | 0) & 1 | 0)) {
        break label$15
       }
      }
      label$17 : {
       if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (56 | 0) & 1 | 0)) {
        break label$17
       }
       $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
       $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
       $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
       $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
      }
      label$18 : {
       label$19 : {
        if ((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (16 | 0) & 1 | 0) {
         break label$19
        }
        if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (32 | 0) & 1 | 0)) {
         break label$18
        }
       }
       HEAP32[($7_1 + 1160 | 0) >> 2] = 0;
       HEAP32[($7_1 + 1164 | 0) >> 2] = 0;
       HEAP32[($7_1 + 1168 | 0) >> 2] = 0;
       label$20 : {
        label$21 : {
         if (HEAP32[($7_1 + 112 | 0) >> 2] | 0) {
          break label$21
         }
         label$22 : {
          label$23 : {
           if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (32 | 0) & 1 | 0)) {
            break label$23
           }
           HEAP32[($7_1 + 1168 | 0) >> 2] = 16711680;
           HEAP32[($7_1 + 1164 | 0) >> 2] = 65280;
           HEAP32[($7_1 + 1160 | 0) >> 2] = 255;
           HEAP32[($7_1 + 1156 | 0) >> 2] = -16777216;
           HEAP32[($7_1 + 1152 | 0) >> 2] = 0;
           break label$22;
          }
          HEAP32[($7_1 + 1168 | 0) >> 2] = 31744;
          HEAP32[($7_1 + 1164 | 0) >> 2] = 992;
          HEAP32[($7_1 + 1160 | 0) >> 2] = 31;
         }
         break label$20;
        }
        label$24 : {
         label$25 : {
          if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
           break label$25
          }
          HEAP32[($7_1 + 1168 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($7_1 + 1164 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($7_1 + 1160 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
          label$26 : {
           if (!((HEAP32[($7_1 + 1168 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 1164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$26
           }
           if (!((HEAP32[($7_1 + 1164 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 1160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$26
           }
           $274_1 = 0;
           HEAP32[($7_1 + 1196 | 0) >> 2] = $293(3908 | 0) | 0 ? $274_1 : $274_1;
           break label$1;
          }
          break label$24;
         }
         $278_1 = 0;
         HEAP32[($7_1 + 1196 | 0) >> 2] = $293(3908 | 0) | 0 ? $278_1 : $278_1;
         break label$1;
        }
       }
      }
      break label$14;
     }
     label$27 : {
      if ((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (108 | 0) & 1 | 0) {
       break label$27
      }
      if ((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (124 | 0) & 1 | 0) {
       break label$27
      }
      fimport$54(4733 | 0, 2854 | 0, 4672 | 0, 3587 | 0);
      abort();
     }
     HEAP32[($7_1 + 1168 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 1164 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 1160 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 1156 | 0) >> 2] = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
     $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 120 | 0) >> 2] = 0;
     label$28 : {
      label$29 : while (1) {
       if (!((HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) < (12 | 0) & 1 | 0)) {
        break label$28
       }
       $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($7_1 + 120 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 1 | 0;
       continue label$29;
      };
     }
     label$30 : {
      if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (124 | 0) & 1 | 0)) {
       break label$30
      }
      $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
      $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
      $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
      $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
     }
    }
    label$31 : {
     if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
      break label$31
     }
     HEAP32[($7_1 + 124 | 0) >> 2] = (((HEAP32[($7_1 + 88 | 0) >> 2] | 0) - 14 | 0) - (HEAP32[($7_1 + 84 | 0) >> 2] | 0) | 0) >> 2 | 0;
    }
   }
   HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($7_1 + 1156 | 0) >> 2] | 0 ? 4 : 3;
   label$32 : {
    label$33 : {
     if (!(HEAP32[($7_1 + 1176 | 0) >> 2] | 0)) {
      break label$33
     }
     if (!((HEAP32[($7_1 + 1176 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
      break label$33
     }
     HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 1176 | 0) >> 2] | 0;
     break label$32;
    }
    HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 1172 | 0) >> 2] = $306(Math_imul(Math_imul(HEAP32[($7_1 + 92 | 0) >> 2] | 0, HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0), HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) | 0;
   label$34 : {
    if ((HEAP32[($7_1 + 1172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$34
    }
    $377_1 = 0;
    HEAP32[($7_1 + 1196 | 0) >> 2] = $293(2677 | 0) | 0 ? $377_1 : $377_1;
    break label$1;
   }
   label$35 : {
    label$36 : {
     if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
      break label$36
     }
     HEAP32[($7_1 + 80 | 0) >> 2] = 0;
     label$37 : {
      label$38 : {
       if (!(HEAP32[($7_1 + 124 | 0) >> 2] | 0)) {
        break label$38
       }
       if (!((HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0) > (256 | 0) & 1 | 0)) {
        break label$37
       }
      }
      $2005(HEAP32[($7_1 + 1172 | 0) >> 2] | 0 | 0);
      $398_1 = 0;
      HEAP32[($7_1 + 1196 | 0) >> 2] = $293(3532 | 0) | 0 ? $398_1 : $398_1;
      break label$1;
     }
     HEAP32[($7_1 + 120 | 0) >> 2] = 0;
     label$39 : {
      label$40 : while (1) {
       if (!((HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$39
       }
       $409_1 = $337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[((($7_1 + 128 | 0) + ((HEAP32[($7_1 + 120 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = $409_1;
       $418_1 = $337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[((($7_1 + 128 | 0) + ((HEAP32[($7_1 + 120 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] = $418_1;
       $427_1 = $337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[(($7_1 + 128 | 0) + ((HEAP32[($7_1 + 120 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] = $427_1;
       label$41 : {
        if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) != (12 | 0) & 1 | 0)) {
         break label$41
        }
        $337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
       }
       HEAP8[((($7_1 + 128 | 0) + ((HEAP32[($7_1 + 120 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 255;
       HEAP32[($7_1 + 120 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 1 | 0;
       continue label$40;
      };
     }
     $340(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0, (((HEAP32[($7_1 + 88 | 0) >> 2] | 0) - 14 | 0) - (HEAP32[($7_1 + 84 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($7_1 + 124 | 0) >> 2] | 0, (HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0 ? 3 : 4) | 0 | 0);
     label$42 : {
      label$43 : {
       if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$43
       }
       HEAP32[($7_1 + 108 | 0) >> 2] = ((HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0) >>> 1 | 0;
       break label$42;
      }
      label$44 : {
       label$45 : {
        if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
         break label$45
        }
        HEAP32[($7_1 + 108 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0;
        break label$44;
       }
       $2005(HEAP32[($7_1 + 1172 | 0) >> 2] | 0 | 0);
       $498_1 = 0;
       HEAP32[($7_1 + 1196 | 0) >> 2] = $293(2409 | 0) | 0 ? $498_1 : $498_1;
       break label$1;
      }
     }
     HEAP32[($7_1 + 96 | 0) >> 2] = (0 - (HEAP32[($7_1 + 108 | 0) >> 2] | 0) | 0) & 3 | 0;
     HEAP32[($7_1 + 116 | 0) >> 2] = 0;
     label$46 : {
      label$47 : while (1) {
       if (!((HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$46
       }
       HEAP32[($7_1 + 120 | 0) >> 2] = 0;
       label$48 : {
        label$49 : while (1) {
         if (!((HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$48
         }
         HEAP32[($7_1 + 76 | 0) >> 2] = ($337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
         HEAP32[($7_1 + 72 | 0) >> 2] = 0;
         label$50 : {
          if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
           break label$50
          }
          HEAP32[($7_1 + 72 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) & 15 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 4 | 0;
         }
         $548_1 = HEAPU8[(($7_1 + 128 | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] | 0;
         $549_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $550_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
         HEAP32[($7_1 + 80 | 0) >> 2] = $550_1 + 1 | 0;
         HEAP8[($549_1 + $550_1 | 0) >> 0] = $548_1;
         $561_1 = HEAPU8[((($7_1 + 128 | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] | 0;
         $562_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $563_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
         HEAP32[($7_1 + 80 | 0) >> 2] = $563_1 + 1 | 0;
         HEAP8[($562_1 + $563_1 | 0) >> 0] = $561_1;
         $574_1 = HEAPU8[((($7_1 + 128 | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] | 0;
         $575_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $576_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
         HEAP32[($7_1 + 80 | 0) >> 2] = $576_1 + 1 | 0;
         HEAP8[($575_1 + $576_1 | 0) >> 0] = $574_1;
         label$51 : {
          if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
           break label$51
          }
          $587_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
          $588_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
          HEAP32[($7_1 + 80 | 0) >> 2] = $588_1 + 1 | 0;
          HEAP8[($587_1 + $588_1 | 0) >> 0] = 255;
         }
         label$52 : {
          if (!(((HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 1 | 0 | 0) == (HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$52
          }
          break label$48;
         }
         label$53 : {
          label$54 : {
           if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
            break label$54
           }
           $614_1 = ($337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
           break label$53;
          }
          $614_1 = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
         }
         HEAP32[($7_1 + 76 | 0) >> 2] = $614_1;
         $624_1 = HEAPU8[(($7_1 + 128 | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] | 0;
         $625_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $626_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
         HEAP32[($7_1 + 80 | 0) >> 2] = $626_1 + 1 | 0;
         HEAP8[($625_1 + $626_1 | 0) >> 0] = $624_1;
         $637_1 = HEAPU8[((($7_1 + 128 | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] | 0;
         $638_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $639_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
         HEAP32[($7_1 + 80 | 0) >> 2] = $639_1 + 1 | 0;
         HEAP8[($638_1 + $639_1 | 0) >> 0] = $637_1;
         $650_1 = HEAPU8[((($7_1 + 128 | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] | 0;
         $651_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $652_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
         HEAP32[($7_1 + 80 | 0) >> 2] = $652_1 + 1 | 0;
         HEAP8[($651_1 + $652_1 | 0) >> 0] = $650_1;
         label$55 : {
          if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
           break label$55
          }
          $663_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
          $664_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
          HEAP32[($7_1 + 80 | 0) >> 2] = $664_1 + 1 | 0;
          HEAP8[($663_1 + $664_1 | 0) >> 0] = 255;
         }
         HEAP32[($7_1 + 120 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 2 | 0;
         continue label$49;
        };
       }
       $340(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0);
       HEAP32[($7_1 + 116 | 0) >> 2] = (HEAP32[($7_1 + 116 | 0) >> 2] | 0) + 1 | 0;
       continue label$47;
      };
     }
     break label$35;
    }
    HEAP32[($7_1 + 68 | 0) >> 2] = 0;
    HEAP32[($7_1 + 64 | 0) >> 2] = 0;
    HEAP32[($7_1 + 60 | 0) >> 2] = 0;
    HEAP32[($7_1 + 56 | 0) >> 2] = 0;
    HEAP32[($7_1 + 52 | 0) >> 2] = 0;
    HEAP32[($7_1 + 48 | 0) >> 2] = 0;
    HEAP32[($7_1 + 44 | 0) >> 2] = 0;
    HEAP32[($7_1 + 40 | 0) >> 2] = 0;
    HEAP32[($7_1 + 36 | 0) >> 2] = 0;
    HEAP32[($7_1 + 32 | 0) >> 2] = 0;
    $340(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0, ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) - 14 | 0) - (HEAP32[($7_1 + 84 | 0) >> 2] | 0) | 0 | 0);
    label$56 : {
     label$57 : {
      if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (24 | 0) & 1 | 0)) {
       break label$57
      }
      HEAP32[($7_1 + 108 | 0) >> 2] = Math_imul(HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0, 3);
      break label$56;
     }
     label$58 : {
      label$59 : {
       if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (16 | 0) & 1 | 0)) {
        break label$59
       }
       HEAP32[($7_1 + 108 | 0) >> 2] = (HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0) << 1 | 0;
       break label$58;
      }
      HEAP32[($7_1 + 108 | 0) >> 2] = 0;
     }
    }
    HEAP32[($7_1 + 96 | 0) >> 2] = (0 - (HEAP32[($7_1 + 108 | 0) >> 2] | 0) | 0) & 3 | 0;
    label$60 : {
     label$61 : {
      if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (24 | 0) & 1 | 0)) {
       break label$61
      }
      HEAP32[($7_1 + 32 | 0) >> 2] = 1;
      break label$60;
     }
     label$62 : {
      if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (32 | 0) & 1 | 0)) {
       break label$62
      }
      label$63 : {
       if (!((HEAP32[($7_1 + 1160 | 0) >> 2] | 0 | 0) == (255 | 0) & 1 | 0)) {
        break label$63
       }
       if (!((HEAP32[($7_1 + 1164 | 0) >> 2] | 0 | 0) == (65280 | 0) & 1 | 0)) {
        break label$63
       }
       if (!((HEAP32[($7_1 + 1168 | 0) >> 2] | 0 | 0) == (16711680 | 0) & 1 | 0)) {
        break label$63
       }
       if (!((HEAP32[($7_1 + 1156 | 0) >> 2] | 0 | 0) == (-16777216 | 0) & 1 | 0)) {
        break label$63
       }
       HEAP32[($7_1 + 32 | 0) >> 2] = 2;
      }
     }
    }
    label$64 : {
     if (HEAP32[($7_1 + 32 | 0) >> 2] | 0) {
      break label$64
     }
     label$65 : {
      label$66 : {
       if (!(HEAP32[($7_1 + 1168 | 0) >> 2] | 0)) {
        break label$66
       }
       if (!(HEAP32[($7_1 + 1164 | 0) >> 2] | 0)) {
        break label$66
       }
       if (HEAP32[($7_1 + 1160 | 0) >> 2] | 0) {
        break label$65
       }
      }
      $2005(HEAP32[($7_1 + 1172 | 0) >> 2] | 0 | 0);
      $772_1 = 0;
      HEAP32[($7_1 + 1196 | 0) >> 2] = $293(2018 | 0) | 0 ? $772_1 : $772_1;
      break label$1;
     }
     HEAP32[($7_1 + 68 | 0) >> 2] = ($341(HEAP32[($7_1 + 1168 | 0) >> 2] | 0 | 0) | 0) - 7 | 0;
     HEAP32[($7_1 + 52 | 0) >> 2] = $342(HEAP32[($7_1 + 1168 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 64 | 0) >> 2] = ($341(HEAP32[($7_1 + 1164 | 0) >> 2] | 0 | 0) | 0) - 7 | 0;
     HEAP32[($7_1 + 48 | 0) >> 2] = $342(HEAP32[($7_1 + 1164 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 60 | 0) >> 2] = ($341(HEAP32[($7_1 + 1160 | 0) >> 2] | 0 | 0) | 0) - 7 | 0;
     HEAP32[($7_1 + 44 | 0) >> 2] = $342(HEAP32[($7_1 + 1160 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 56 | 0) >> 2] = ($341(HEAP32[($7_1 + 1156 | 0) >> 2] | 0 | 0) | 0) - 7 | 0;
     HEAP32[($7_1 + 40 | 0) >> 2] = $342(HEAP32[($7_1 + 1156 | 0) >> 2] | 0 | 0) | 0;
    }
    HEAP32[($7_1 + 116 | 0) >> 2] = 0;
    label$67 : {
     label$68 : while (1) {
      if (!((HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$67
      }
      label$69 : {
       label$70 : {
        if (!(HEAP32[($7_1 + 32 | 0) >> 2] | 0)) {
         break label$70
        }
        HEAP32[($7_1 + 120 | 0) >> 2] = 0;
        label$71 : {
         label$72 : while (1) {
          if (!((HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$71
          }
          $818_1 = $337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
          HEAP8[((HEAP32[($7_1 + 1172 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 2 | 0) | 0) >> 0] = $818_1;
          $825_1 = $337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
          HEAP8[((HEAP32[($7_1 + 1172 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] = $825_1;
          $832_1 = $337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
          HEAP8[((HEAP32[($7_1 + 1172 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 0 | 0) | 0) >> 0] = $832_1;
          HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 3 | 0;
          label$73 : {
           label$74 : {
            if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
             break label$74
            }
            $852_1 = ($337(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
            break label$73;
           }
           $852_1 = 255;
          }
          HEAP8[($7_1 + 31 | 0) >> 0] = $852_1;
          HEAP32[($7_1 + 1152 | 0) >> 2] = HEAP32[($7_1 + 1152 | 0) >> 2] | 0 | ((HEAPU8[($7_1 + 31 | 0) >> 0] | 0) & 255 | 0) | 0;
          label$75 : {
           if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
            break label$75
           }
           $867_1 = HEAPU8[($7_1 + 31 | 0) >> 0] | 0;
           $868_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
           $869_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
           HEAP32[($7_1 + 36 | 0) >> 2] = $869_1 + 1 | 0;
           HEAP8[($868_1 + $869_1 | 0) >> 0] = $867_1;
          }
          HEAP32[($7_1 + 120 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 1 | 0;
          continue label$72;
         };
        }
        break label$69;
       }
       HEAP32[($7_1 + 120 | 0) >> 2] = 0;
       label$76 : {
        label$77 : while (1) {
         if (!((HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$76
         }
         label$78 : {
          label$79 : {
           if (!((HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) == (16 | 0) & 1 | 0)) {
            break label$79
           }
           $894_1 = $339(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
           break label$78;
          }
          $894_1 = $338(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0) | 0;
         }
         HEAP32[($7_1 + 24 | 0) >> 2] = $894_1;
         $905_1 = ($343((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & (HEAP32[($7_1 + 1168 | 0) >> 2] | 0) | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
         $906_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $907_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
         HEAP32[($7_1 + 36 | 0) >> 2] = $907_1 + 1 | 0;
         HEAP8[($906_1 + $907_1 | 0) >> 0] = $905_1;
         $918_1 = ($343((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & (HEAP32[($7_1 + 1164 | 0) >> 2] | 0) | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
         $919_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $920_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
         HEAP32[($7_1 + 36 | 0) >> 2] = $920_1 + 1 | 0;
         HEAP8[($919_1 + $920_1 | 0) >> 0] = $918_1;
         $931_1 = ($343((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & (HEAP32[($7_1 + 1160 | 0) >> 2] | 0) | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
         $932_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
         $933_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
         HEAP32[($7_1 + 36 | 0) >> 2] = $933_1 + 1 | 0;
         HEAP8[($932_1 + $933_1 | 0) >> 0] = $931_1;
         label$80 : {
          label$81 : {
           if (!(HEAP32[($7_1 + 1156 | 0) >> 2] | 0)) {
            break label$81
           }
           $944_1 = $343((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & (HEAP32[($7_1 + 1156 | 0) >> 2] | 0) | 0 | 0, HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0;
           break label$80;
          }
          $944_1 = 255;
         }
         HEAP32[($7_1 + 20 | 0) >> 2] = $944_1;
         HEAP32[($7_1 + 1152 | 0) >> 2] = HEAP32[($7_1 + 1152 | 0) >> 2] | 0 | (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0;
         label$82 : {
          if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
           break label$82
          }
          $959_1 = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) & 255 | 0;
          $960_1 = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
          $961_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
          HEAP32[($7_1 + 36 | 0) >> 2] = $961_1 + 1 | 0;
          HEAP8[($960_1 + $961_1 | 0) >> 0] = $959_1;
         }
         HEAP32[($7_1 + 120 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 1 | 0;
         continue label$77;
        };
       }
      }
      $340(HEAP32[($7_1 + 1192 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0);
      HEAP32[($7_1 + 116 | 0) >> 2] = (HEAP32[($7_1 + 116 | 0) >> 2] | 0) + 1 | 0;
      continue label$68;
     };
    }
   }
   label$83 : {
    if (!((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
     break label$83
    }
    if (HEAP32[($7_1 + 1152 | 0) >> 2] | 0) {
     break label$83
    }
    HEAP32[($7_1 + 120 | 0) >> 2] = Math_imul((HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0, HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - 1 | 0;
    label$84 : {
     label$85 : while (1) {
      if (!((HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
       break label$84
      }
      HEAP8[((HEAP32[($7_1 + 1172 | 0) >> 2] | 0) + (HEAP32[($7_1 + 120 | 0) >> 2] | 0) | 0) >> 0] = 255;
      HEAP32[($7_1 + 120 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) - 4 | 0;
      continue label$85;
     };
    }
   }
   label$86 : {
    if (!(HEAP32[($7_1 + 100 | 0) >> 2] | 0)) {
     break label$86
    }
    HEAP32[($7_1 + 116 | 0) >> 2] = 0;
    label$87 : {
     label$88 : while (1) {
      if (!((HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0) < ((HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 1 | 0 | 0) & 1 | 0)) {
       break label$87
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[($7_1 + 1172 | 0) >> 2] | 0) + Math_imul(Math_imul(HEAP32[($7_1 + 116 | 0) >> 2] | 0, HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0), HEAP32[($7_1 + 92 | 0) >> 2] | 0) | 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 1172 | 0) >> 2] | 0) + Math_imul(Math_imul(((HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($7_1 + 116 | 0) >> 2] | 0) | 0, HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0), HEAP32[($7_1 + 92 | 0) >> 2] | 0) | 0;
      HEAP32[($7_1 + 120 | 0) >> 2] = 0;
      label$89 : {
       label$90 : while (1) {
        if (!((HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0, HEAP32[($7_1 + 92 | 0) >> 2] | 0) | 0) & 1 | 0)) {
         break label$89
        }
        HEAP8[($7_1 + 19 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 120 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 120 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + (HEAP32[($7_1 + 120 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + (HEAP32[($7_1 + 120 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[($7_1 + 19 | 0) >> 0] | 0;
        HEAP32[($7_1 + 120 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) + 1 | 0;
        continue label$90;
       };
      }
      HEAP32[($7_1 + 116 | 0) >> 2] = (HEAP32[($7_1 + 116 | 0) >> 2] | 0) + 1 | 0;
      continue label$88;
     };
    }
   }
   label$91 : {
    if (!(HEAP32[($7_1 + 1176 | 0) >> 2] | 0)) {
     break label$91
    }
    if (!((HEAP32[($7_1 + 1176 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$91
    }
    HEAP32[($7_1 + 1172 | 0) >> 2] = $344(HEAP32[($7_1 + 1172 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 1176 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
    label$92 : {
     if (!((HEAP32[($7_1 + 1172 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$92
     }
     HEAP32[($7_1 + 1196 | 0) >> 2] = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
     break label$1;
    }
   }
   HEAP32[(HEAP32[($7_1 + 1188 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 1192 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 1184 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   label$93 : {
    if (!((HEAP32[($7_1 + 1180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$93
    }
    HEAP32[(HEAP32[($7_1 + 1180 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 1192 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 1196 | 0) >> 2] = HEAP32[($7_1 + 1172 | 0) >> 2] | 0;
  }
  $1110_1 = HEAP32[($7_1 + 1196 | 0) >> 2] | 0;
  global$0 = $7_1 + 1200 | 0;
  return $1110_1 | 0;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $345(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $305(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $321($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $58_1 = 0;
  $7_1 = global$0 - 18544 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 18540 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 18536 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 18532 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 18528 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 18524 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 18520 | 0) >> 2] = 0;
  $2015($7_1 | 0, 0 | 0, 18516 | 0) | 0;
  HEAP32[($7_1 + 18520 | 0) >> 2] = $346(HEAP32[($7_1 + 18540 | 0) >> 2] | 0 | 0, $7_1 | 0, HEAP32[($7_1 + 18528 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 18524 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($7_1 + 18520 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 18540 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 18520 | 0) >> 2] = 0;
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[($7_1 + 18520 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(HEAP32[($7_1 + 18536 | 0) >> 2] | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
    HEAP32[(HEAP32[($7_1 + 18532 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    label$4 : {
     if (!(HEAP32[($7_1 + 18524 | 0) >> 2] | 0)) {
      break label$4
     }
     if (!((HEAP32[($7_1 + 18524 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($7_1 + 18520 | 0) >> 2] = $344(HEAP32[($7_1 + 18520 | 0) >> 2] | 0 | 0, 4 | 0, HEAP32[($7_1 + 18524 | 0) >> 2] | 0 | 0, HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    }
    break label$2;
   }
   label$5 : {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    $2005(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   }
  }
  $58_1 = HEAP32[($7_1 + 18520 | 0) >> 2] | 0;
  global$0 = $7_1 + 18544 | 0;
  return $58_1 | 0;
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($347(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (943870035 | 0) & 1 | 0;
  $305(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $13_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $323($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $18_1 = 0, $30_1 = 0, $52_1 = 0, $76_1 = 0, $88_1 = 0, $110_1 = 0, $127_1 = 0, $216_1 = 0, $316_1 = 0, $333_1 = 0, $380_1 = 0;
  $7_1 = global$0 - 96 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 80 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!(($347(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0 | 0) != (943870035 | 0) & 1 | 0)) {
     break label$2
    }
    $18_1 = 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $293(4039 | 0) | 0 ? $18_1 : $18_1;
    break label$1;
   }
   label$3 : {
    if (!(($348(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$3
    }
    $30_1 = 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $293(2560 | 0) | 0 ? $30_1 : $30_1;
    break label$1;
   }
   $340(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0, 6 | 0);
   HEAP32[($7_1 + 64 | 0) >> 2] = $348(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     if ((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$5
     }
     if (!((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) > (16 | 0) & 1 | 0)) {
      break label$4
     }
    }
    $52_1 = 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $293(1774 | 0) | 0 ? $52_1 : $52_1;
    break label$1;
   }
   HEAP32[($7_1 + 32 | 0) >> 2] = $347(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($7_1 + 36 | 0) >> 2] = $347(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($7_1 + 40 | 0) >> 2] = $348(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) != (8 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) != (16 | 0) & 1 | 0)) {
     break label$6
    }
    $76_1 = 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $293(2755 | 0) | 0 ? $76_1 : $76_1;
    break label$1;
   }
   label$7 : {
    if (!(($348(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$7
    }
    $88_1 = 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $293(1922 | 0) | 0 ? $88_1 : $88_1;
    break label$1;
   }
   $340(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0, $347(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0 | 0);
   $340(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0, $347(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0 | 0);
   $340(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0, $347(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP32[($7_1 + 60 | 0) >> 2] = $348(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
   label$8 : {
    if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$8
    }
    $110_1 = 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $293(2544 | 0) | 0 ? $110_1 : $110_1;
    break label$1;
   }
   HEAP32[($7_1 + 28 | 0) >> 2] = $306(Math_imul((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 2 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0) | 0;
   label$9 : {
    if ((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$9
    }
    $127_1 = 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $293(2677 | 0) | 0 ? $127_1 : $127_1;
    break label$1;
   }
   HEAP32[($7_1 + 68 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 36 | 0) >> 2] | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0);
   label$10 : {
    label$11 : {
     if (!(HEAP32[($7_1 + 60 | 0) >> 2] | 0)) {
      break label$11
     }
     $340(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 1 | 0 | 0);
     HEAP32[($7_1 + 56 | 0) >> 2] = 0;
     label$12 : {
      label$13 : while (1) {
       if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 56 | 0) >> 2] | 0) | 0;
       label$14 : {
        label$15 : {
         if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$15
         }
         HEAP32[($7_1 + 52 | 0) >> 2] = 0;
         label$16 : {
          label$17 : while (1) {
           if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$16
           }
           HEAP8[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 0] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0 ? 255 : 0;
           HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0;
           continue label$17;
          };
         }
         break label$14;
        }
        HEAP32[($7_1 + 48 | 0) >> 2] = 0;
        label$18 : {
         label$19 : while (1) {
          if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$18
          }
          HEAP32[($7_1 + 44 | 0) >> 2] = ($337(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          label$20 : {
           label$21 : {
            if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) == (128 | 0) & 1 | 0)) {
             break label$21
            }
            break label$20;
           }
           label$22 : {
            label$23 : {
             if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
              break label$23
             }
             HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
             HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0;
             label$24 : {
              label$25 : while (1) {
               if (!(HEAP32[($7_1 + 44 | 0) >> 2] | 0)) {
                break label$24
               }
               $216_1 = $337(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
               HEAP8[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 0] = $216_1;
               HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0;
               HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + -1 | 0;
               continue label$25;
              };
             }
             break label$22;
            }
            label$26 : {
             if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
              break label$26
             }
             HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) ^ 255 | 0;
             HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 2 | 0;
             HEAP8[($7_1 + 23 | 0) >> 0] = $337(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
             HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0;
             label$27 : {
              label$28 : while (1) {
               if (!(HEAP32[($7_1 + 44 | 0) >> 2] | 0)) {
                break label$27
               }
               HEAP8[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 0] = HEAPU8[($7_1 + 23 | 0) >> 0] | 0;
               HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0;
               HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + -1 | 0;
               continue label$28;
              };
             }
            }
           }
          }
          continue label$19;
         };
        }
       }
       HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
       continue label$13;
      };
     }
     break label$10;
    }
    HEAP32[($7_1 + 56 | 0) >> 2] = 0;
    label$29 : {
     label$30 : while (1) {
      if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 56 | 0) >> 2] | 0) | 0;
      label$31 : {
       label$32 : {
        if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$32
        }
        HEAP8[($7_1 + 15 | 0) >> 0] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0 ? 255 : 0;
        HEAP32[($7_1 + 52 | 0) >> 2] = 0;
        label$33 : {
         label$34 : while (1) {
          if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$33
          }
          HEAP8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] = HEAPU8[($7_1 + 15 | 0) >> 0] | 0;
          HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 4 | 0;
          continue label$34;
         };
        }
        break label$31;
       }
       label$35 : {
        label$36 : {
         if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) == (16 | 0) & 1 | 0)) {
          break label$36
         }
         HEAP32[($7_1 + 52 | 0) >> 2] = 0;
         label$37 : {
          label$38 : while (1) {
           if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$37
           }
           $316_1 = ($348(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 8 | 0;
           HEAP8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] = $316_1;
           HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 4 | 0;
           continue label$38;
          };
         }
         break label$35;
        }
        HEAP32[($7_1 + 52 | 0) >> 2] = 0;
        label$39 : {
         label$40 : while (1) {
          if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$39
          }
          $333_1 = $337(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
          HEAP8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] = $333_1;
          HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 4 | 0;
          continue label$40;
         };
        }
       }
      }
      HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      continue label$30;
     };
    }
   }
   label$41 : {
    if (!(HEAP32[($7_1 + 72 | 0) >> 2] | 0)) {
     break label$41
    }
    if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0)) {
     break label$41
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = $344(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, 4 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    label$42 : {
     if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$42
     }
     HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$43 : {
    if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$43
    }
    HEAP32[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 2] = 4;
   }
   HEAP32[(HEAP32[($7_1 + 80 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 84 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
   HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  }
  $380_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
  global$0 = $7_1 + 96 | 0;
  return $380_1 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $349(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $305(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $325($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $28_1 = 0, $41_1 = 0, $87_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (92 | 0) & 1 | 0)) {
     break label$1
    }
    $337(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($7_1 + 12 | 0) >> 2] = $348(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $348(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!($350(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0)) {
     break label$4
    }
    $28_1 = 0;
    HEAP32[($7_1 + 44 | 0) >> 2] = $293(3301 | 0) | 0 ? $28_1 : $28_1;
    break label$3;
   }
   label$5 : {
    if (!(((268435456 | 0) / (HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) < (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $41_1 = 0;
    HEAP32[($7_1 + 44 | 0) >> 2] = $293(3351 | 0) | 0 ? $41_1 : $41_1;
    break label$3;
   }
   $347(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   $348(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   $348(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = $306(Math_imul(HEAP32[($7_1 + 12 | 0) >> 2] | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   $2015(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, 255 | 0, Math_imul(HEAP32[($7_1 + 12 | 0) >> 2] | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   label$6 : {
    if (($351(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$6
    }
    $2005(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
    HEAP32[($7_1 + 20 | 0) >> 2] = 0;
   }
   HEAP32[(HEAP32[($7_1 + 36 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
   label$7 : {
    if (HEAP32[($7_1 + 24 | 0) >> 2] | 0) {
     break label$7
    }
    HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = $344(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, 4 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
  }
  $87_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  global$0 = $7_1 + 48 | 0;
  return $87_1 | 0;
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $19_1 = 0, $29_1 = 0, $41_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP8[($3_1 + 7 | 0) >> 0] = $337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($3_1 + 6 | 0) >> 0] = $337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = 24;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((((HEAPU8[($3_1 + 7 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0 | 0) != (80 | 0) & 1 | 0) {
      break label$3
     }
     $19_1 = 24;
     if (!((((HEAPU8[($3_1 + 6 | 0) >> 0] | 0) << $19_1 | 0) >> $19_1 | 0 | 0) != (53 | 0) & 1 | 0)) {
      break label$2
     }
     $29_1 = 24;
     if (!((((HEAPU8[($3_1 + 6 | 0) >> 0] | 0) << $29_1 | 0) >> $29_1 | 0 | 0) != (54 | 0) & 1 | 0)) {
      break label$2
     }
    }
    $305(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  }
  $41_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $41_1 | 0;
 }
 
 function $327($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $45_1 = 0, $84_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if ($310(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0, (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0 | 0) | 0) {
     break label$2
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   HEAP32[($7_1 + 4 | 0) >> 2] = $306(Math_imul(Math_imul(HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0), HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) | 0;
   label$3 : {
    if ((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    $45_1 = 0;
    HEAP32[($7_1 + 28 | 0) >> 2] = $293(2677 | 0) | 0 ? $45_1 : $45_1;
    break label$1;
   }
   $352(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, Math_imul(Math_imul(HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0), HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) | 0;
   label$4 : {
    if (!(HEAP32[($7_1 + 8 | 0) >> 2] | 0)) {
     break label$4
    }
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $344(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
    label$5 : {
     if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
     break label$1;
    }
   }
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  }
  $84_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $84_1 | 0;
 }
 
 function $328($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $23_1 = 0, $59_1 = 0, $144_1 = Math_fround(0), $71_1 = 0, $158_1 = Math_fround(0), $111_1 = 0, $126_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $306(Math_imul(Math_imul(HEAP32[($6_1 + 36 | 0) >> 2] | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0), HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $2005(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0);
    $23_1 = 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = $293(2677 | 0) | 0 ? $23_1 : $23_1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
     break label$3;
    }
    HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) - 1 | 0;
   }
   HEAP32[($6_1 + 24 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($6_1 + 36 | 0) >> 2] | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       $59_1 = 0;
       HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(+$590(+(+Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($6_1 + 24 | 0) >> 2] | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($59_1 + 20564 | 0) >> 2]))), +(+Math_fround(HEAPF32[($59_1 + 20560 | 0) >> 2])))) * Math_fround(255.0)) + Math_fround(.5));
       label$9 : {
        if (!(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
         break label$9
        }
        HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
       }
       label$10 : {
        if (!(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) > Math_fround(255.0) & 1 | 0)) {
         break label$10
        }
        HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(255.0);
       }
       $144_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
       label$11 : {
        label$12 : {
         if (!(Math_fround(Math_abs($144_1)) < Math_fround(2147483648.0))) {
          break label$12
         }
         $71_1 = ~~$144_1;
         break label$11;
        }
        $71_1 = -2147483648;
       }
       HEAP8[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + (Math_imul(HEAP32[($6_1 + 24 | 0) >> 2] | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) | 0) >> 0] = $71_1;
       HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      };
     }
     label$13 : {
      if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($6_1 + 24 | 0) >> 2] | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]) * Math_fround(255.0)) + Math_fround(.5));
      label$14 : {
       if (!(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
        break label$14
       }
       HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
      }
      label$15 : {
       if (!(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) > Math_fround(255.0) & 1 | 0)) {
        break label$15
       }
       HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(255.0);
      }
      $158_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
      label$16 : {
       label$17 : {
        if (!(Math_fround(Math_abs($158_1)) < Math_fround(2147483648.0))) {
         break label$17
        }
        $111_1 = ~~$158_1;
        break label$16;
       }
       $111_1 = -2147483648;
      }
      HEAP8[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + (Math_imul(HEAP32[($6_1 + 24 | 0) >> 2] | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) | 0) >> 0] = $111_1;
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $2005(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  }
  $126_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $126_1 | 0;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $123_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = ($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[$3_1 >> 2] = ($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   label$3 : {
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (9 | 0) & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (10 | 0) & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (11 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   $348(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $348(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $348(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $348(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    if (!(($348(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) < (1 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   label$5 : {
    if (!(($348(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) < (1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[$3_1 >> 2] = ($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (8 | 0) & 1 | 0)) {
      break label$7
     }
     if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (16 | 0) & 1 | 0)) {
      break label$7
     }
     if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (24 | 0) & 1 | 0)) {
      break label$7
     }
     if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (32 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = 0;
     break label$6;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = 1;
   }
   $305(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  $123_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $123_1 | 0;
 }
 
 function $330($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $159_1 = 0, $179_1 = 0, $216_1 = 0, $230_1 = 0, $314_1 = 0, $475_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 148 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 140 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 136 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 132 | 0) >> 2] = ($337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($7_1 + 128 | 0) >> 2] = ($337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($7_1 + 124 | 0) >> 2] = ($337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($7_1 + 120 | 0) >> 2] = 0;
  HEAP32[($7_1 + 116 | 0) >> 2] = $339(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 112 | 0) >> 2] = $339(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 108 | 0) >> 2] = ($337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($7_1 + 104 | 0) >> 2] = $339(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 100 | 0) >> 2] = $339(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 96 | 0) >> 2] = $339(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 92 | 0) >> 2] = $339(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 88 | 0) >> 2] = ($337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) / (8 | 0) | 0;
  HEAP32[($7_1 + 80 | 0) >> 2] = ($337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($7_1 + 72 | 0) >> 2] = 0;
  HEAP32[($7_1 + 56 | 0) >> 2] = 0;
  HEAP32[($7_1 + 52 | 0) >> 2] = 0;
  HEAP32[($7_1 + 48 | 0) >> 2] = 1;
  label$1 : {
   if (!((HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0) >= (8 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 124 | 0) >> 2] = (HEAP32[($7_1 + 124 | 0) >> 2] | 0) - 8 | 0;
   HEAP32[($7_1 + 120 | 0) >> 2] = 1;
  }
  HEAP32[($7_1 + 80 | 0) >> 2] = 1 - (((HEAP32[($7_1 + 80 | 0) >> 2] | 0) >> 5 | 0) & 1 | 0) | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if ((HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0) {
      break label$4
     }
     if ((HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0) {
      break label$4
     }
     if ((HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0) {
      break label$4
     }
     if ((HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0) {
      break label$4
     }
     if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) != (8 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) != (16 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) != (24 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) != (32 | 0) & 1 | 0)) {
      break label$3
     }
    }
    HEAP32[($7_1 + 156 | 0) >> 2] = 0;
    break label$2;
   }
   label$5 : {
    if (!(HEAP32[($7_1 + 128 | 0) >> 2] | 0)) {
     break label$5
    }
    HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) / (8 | 0) | 0;
   }
   HEAP32[(HEAP32[($7_1 + 148 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 144 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
   label$6 : {
    if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[(HEAP32[($7_1 + 140 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 84 | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 76 | 0) >> 2] = $306(Math_imul(Math_imul(HEAP32[($7_1 + 96 | 0) >> 2] | 0, HEAP32[($7_1 + 92 | 0) >> 2] | 0), HEAP32[($7_1 + 84 | 0) >> 2] | 0) | 0) | 0;
   label$7 : {
    if ((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$7
    }
    $159_1 = 0;
    HEAP32[($7_1 + 156 | 0) >> 2] = $293(2677 | 0) | 0 ? $159_1 : $159_1;
    break label$2;
   }
   $340(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0);
   label$8 : {
    label$9 : {
     if (HEAP32[($7_1 + 128 | 0) >> 2] | 0) {
      break label$9
     }
     if (HEAP32[($7_1 + 120 | 0) >> 2] | 0) {
      break label$9
     }
     HEAP32[($7_1 + 68 | 0) >> 2] = 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       label$12 : {
        label$13 : {
         if (!(HEAP32[($7_1 + 80 | 0) >> 2] | 0)) {
          break label$13
         }
         $179_1 = ((HEAP32[($7_1 + 92 | 0) >> 2] | 0) - (HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) - 1 | 0;
         break label$12;
        }
        $179_1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
       }
       HEAP32[($7_1 + 44 | 0) >> 2] = $179_1;
       HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + Math_imul(Math_imul(HEAP32[($7_1 + 44 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0), HEAP32[($7_1 + 84 | 0) >> 2] | 0) | 0;
       $352(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($7_1 + 96 | 0) >> 2] | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0) | 0) | 0;
       HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     break label$8;
    }
    label$14 : {
     if (!(HEAP32[($7_1 + 128 | 0) >> 2] | 0)) {
      break label$14
     }
     $340(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0);
     HEAP32[($7_1 + 72 | 0) >> 2] = $306((Math_imul(HEAP32[($7_1 + 112 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) | 0) / (8 | 0) | 0 | 0) | 0;
     label$15 : {
      if ((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$15
      }
      $2005(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0);
      $216_1 = 0;
      HEAP32[($7_1 + 156 | 0) >> 2] = $293(2677 | 0) | 0 ? $216_1 : $216_1;
      break label$2;
     }
     label$16 : {
      if ($352(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, (Math_imul(HEAP32[($7_1 + 112 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) | 0) / (8 | 0) | 0 | 0) | 0) {
       break label$16
      }
      $2005(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0);
      $2005(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0);
      $230_1 = 0;
      HEAP32[($7_1 + 156 | 0) >> 2] = $293(3162 | 0) | 0 ? $230_1 : $230_1;
      break label$2;
     }
    }
    HEAP32[($7_1 + 68 | 0) >> 2] = 0;
    label$17 : {
     label$18 : while (1) {
      if (!((HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($7_1 + 96 | 0) >> 2] | 0, HEAP32[($7_1 + 92 | 0) >> 2] | 0) | 0) & 1 | 0)) {
       break label$17
      }
      label$19 : {
       label$20 : {
        if (!(HEAP32[($7_1 + 120 | 0) >> 2] | 0)) {
         break label$20
        }
        label$21 : {
         label$22 : {
          if (HEAP32[($7_1 + 56 | 0) >> 2] | 0) {
           break label$22
          }
          HEAP32[($7_1 + 36 | 0) >> 2] = ($337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          HEAP32[($7_1 + 56 | 0) >> 2] = ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) & 127 | 0) + 1 | 0;
          HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) >> 7 | 0;
          HEAP32[($7_1 + 48 | 0) >> 2] = 1;
          break label$21;
         }
         label$23 : {
          if (HEAP32[($7_1 + 52 | 0) >> 2] | 0) {
           break label$23
          }
          HEAP32[($7_1 + 48 | 0) >> 2] = 1;
         }
        }
        break label$19;
       }
       HEAP32[($7_1 + 48 | 0) >> 2] = 1;
      }
      label$24 : {
       if (!(HEAP32[($7_1 + 48 | 0) >> 2] | 0)) {
        break label$24
       }
       label$25 : {
        label$26 : {
         if (!(HEAP32[($7_1 + 128 | 0) >> 2] | 0)) {
          break label$26
         }
         HEAP32[($7_1 + 32 | 0) >> 2] = ($337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
         label$27 : {
          if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$27
          }
          HEAP32[($7_1 + 32 | 0) >> 2] = 0;
         }
         HEAP32[($7_1 + 32 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, (HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) / (8 | 0) | 0);
         HEAP32[($7_1 + 64 | 0) >> 2] = 0;
         label$28 : {
          label$29 : while (1) {
           if (!(((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) < (HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$28
           }
           HEAP8[(($7_1 + 60 | 0) + (HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0;
           HEAP32[($7_1 + 64 | 0) >> 2] = (HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 1 | 0;
           continue label$29;
          };
         }
         break label$25;
        }
        HEAP32[($7_1 + 64 | 0) >> 2] = 0;
        label$30 : {
         label$31 : while (1) {
          if (!(((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) < (HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$30
          }
          $314_1 = $337(HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) | 0;
          HEAP8[(($7_1 + 60 | 0) + (HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0) >> 0] = $314_1;
          HEAP32[($7_1 + 64 | 0) >> 2] = (HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 1 | 0;
          continue label$31;
         };
        }
       }
       HEAP32[($7_1 + 48 | 0) >> 2] = 0;
      }
      HEAP32[($7_1 + 64 | 0) >> 2] = 0;
      label$32 : {
       label$33 : while (1) {
        if (!((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$32
        }
        HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (Math_imul(HEAP32[($7_1 + 68 | 0) >> 2] | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0) + (HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0) | 0) >> 0] = HEAPU8[(($7_1 + 60 | 0) + (HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP32[($7_1 + 64 | 0) >> 2] = (HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 1 | 0;
        continue label$33;
       };
      }
      HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 1 | 0;
      continue label$18;
     };
    }
    label$34 : {
     if (!(HEAP32[($7_1 + 80 | 0) >> 2] | 0)) {
      break label$34
     }
     HEAP32[($7_1 + 64 | 0) >> 2] = 0;
     label$35 : {
      label$36 : while (1) {
       if (!(((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 1 | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$35
       }
       HEAP32[($7_1 + 28 | 0) >> 2] = Math_imul(Math_imul(HEAP32[($7_1 + 64 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0), HEAP32[($7_1 + 84 | 0) >> 2] | 0);
       HEAP32[($7_1 + 24 | 0) >> 2] = Math_imul(Math_imul(((HEAP32[($7_1 + 92 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0), HEAP32[($7_1 + 84 | 0) >> 2] | 0);
       HEAP32[($7_1 + 68 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 96 | 0) >> 2] | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0);
       label$37 : {
        label$38 : while (1) {
         if (!((HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
          break label$37
         }
         HEAP8[($7_1 + 23 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[($7_1 + 23 | 0) >> 0] | 0;
         HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       HEAP32[($7_1 + 64 | 0) >> 2] = (HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 1 | 0;
       continue label$36;
      };
     }
    }
    label$39 : {
     if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$39
     }
     $2005(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0);
    }
   }
   label$40 : {
    if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
     break label$40
    }
    HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    HEAP32[($7_1 + 68 | 0) >> 2] = 0;
    label$41 : {
     label$42 : while (1) {
      if (!((HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($7_1 + 96 | 0) >> 2] | 0, HEAP32[($7_1 + 92 | 0) >> 2] | 0) | 0) & 1 | 0)) {
       break label$41
      }
      HEAP8[($7_1 + 15 | 0) >> 0] = HEAPU8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0;
      HEAP8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[($7_1 + 15 | 0) >> 0] | 0;
      HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (HEAP32[($7_1 + 84 | 0) >> 2] | 0) | 0;
      HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 1 | 0;
      continue label$42;
     };
    }
   }
   label$43 : {
    if (!(HEAP32[($7_1 + 136 | 0) >> 2] | 0)) {
     break label$43
    }
    if (!((HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$43
    }
    HEAP32[($7_1 + 76 | 0) >> 2] = $344(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($7_1 + 100 | 0) >> 2] = 0;
   HEAP32[($7_1 + 104 | 0) >> 2] = 0;
   HEAP32[($7_1 + 108 | 0) >> 2] = 0;
   HEAP32[($7_1 + 112 | 0) >> 2] = 0;
   HEAP32[($7_1 + 116 | 0) >> 2] = 0;
   HEAP32[($7_1 + 156 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
  }
  $475_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
  global$0 = $7_1 + 160 | 0;
  return $475_1 | 0;
 }
 
 function $331($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18176 | 0) >> 2] = 40;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18180 | 0) >> 2] = 41;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18184 | 0) >> 2] = 42;
  return;
 }
 
 function $332($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $40_1 = 0, $96_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 18116 | 0) >> 0] = 255;
  HEAP32[$4_1 >> 2] = ($358(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (216 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $293(3945 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[$4_1 >> 2] = ($358(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   label$4 : while (1) {
    $40_1 = 1;
    label$5 : {
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == (192 | 0) & 1 | 0) {
      break label$5
     }
     $40_1 = 1;
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == (193 | 0) & 1 | 0) {
      break label$5
     }
     $40_1 = (HEAP32[$4_1 >> 2] | 0 | 0) == (194 | 0);
    }
    label$6 : {
     if (!(($40_1 ^ -1 | 0) & 1 | 0)) {
      break label$6
     }
     label$7 : {
      if ($359(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) {
       break label$7
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = ($358(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
     label$8 : {
      label$9 : while (1) {
       if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (255 | 0) & 1 | 0)) {
        break label$8
       }
       label$10 : {
        if (!($350(HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
         break label$10
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = $293(3963 | 0) | 0;
        break label$1;
       }
       HEAP32[$4_1 >> 2] = ($358(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
       continue label$9;
      };
     }
     continue label$4;
    }
    break label$4;
   };
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 18124 | 0) >> 2] = (HEAP32[$4_1 >> 2] | 0 | 0) == (194 | 0) & 1 | 0;
   label$11 : {
    if ($360(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) {
     break label$11
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 1;
  }
  $96_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $96_1 | 0;
 }
 
 function $333($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $430_1 = 0, $27_1 = 0, $35_1 = 0, $105_1 = 0, $157_1 = 0, $260_1 = 0, $320_1 = 0, $327_1 = 0, $343_1 = 0, $346_1 = 0, $359_1 = 0, $362_1 = 0, $384_1 = 0, $484_1 = 0, $487_1 = 0, $80_1 = 0, $308_1 = 0, $316_1 = 0, $323_1 = 0, $335_1 = 0, $483_1 = 0, $518_1 = 0;
  $7_1 = global$0 - 224 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 216 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 212 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 208 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 204 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 200 | 0) >> 2] = $4_1;
  HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
      break label$2
     }
    }
    $27_1 = 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = $293(2417 | 0) | 0 ? $27_1 : $27_1;
    break label$1;
   }
   label$4 : {
    if ($364(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0) {
     break label$4
    }
    $365(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0);
    HEAP32[($7_1 + 220 | 0) >> 2] = 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     if (!(HEAP32[($7_1 + 200 | 0) >> 2] | 0)) {
      break label$6
     }
     $35_1 = HEAP32[($7_1 + 200 | 0) >> 2] | 0;
     break label$5;
    }
    $35_1 = HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 196 | 0) >> 2] = $35_1;
   label$7 : {
    label$8 : {
     if (!((HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$8
     }
     if (!((HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($7_1 + 192 | 0) >> 2] = 1;
     break label$7;
    }
    HEAP32[($7_1 + 192 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 188 | 0) >> 2] = 0;
   label$9 : {
    label$10 : while (1) {
     if (!((HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($7_1 + 28 | 0) >> 2] = ($7_1 + 32 | 0) + ((HEAP32[($7_1 + 188 | 0) >> 2] | 0) << 5 | 0) | 0;
     $80_1 = $306((HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 3 | 0 | 0) | 0;
     HEAP32[((((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($7_1 + 188 | 0) >> 2] | 0, 72) | 0) + 56 | 0) >> 2] = $80_1;
     label$11 : {
      if ((HEAP32[((((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($7_1 + 188 | 0) >> 2] | 0, 72) | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$11
      }
      $365(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0);
      $105_1 = 0;
      HEAP32[($7_1 + 220 | 0) >> 2] = $293(2677 | 0) | 0 ? $105_1 : $105_1;
      break label$1;
     }
     HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17796 | 0) >> 2] | 0 | 0) / (HEAP32[((((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($7_1 + 188 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17800 | 0) >> 2] | 0 | 0) / (HEAP32[((((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($7_1 + 188 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 1 | 0;
     HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 20 | 0) >> 2] = ((((HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) / ((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >>> 0) | 0;
     HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 28 | 0) >> 2] = 0;
     $157_1 = HEAP32[((((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($7_1 + 188 | 0) >> 2] | 0, 72) | 0) + 44 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] = $157_1;
     HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] = $157_1;
     label$12 : {
      label$13 : {
       if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$13
       }
       if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$13
       }
       HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] = 43;
       break label$12;
      }
      label$14 : {
       label$15 : {
        if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$15
        }
        if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] = 44;
        break label$14;
       }
       label$16 : {
        label$17 : {
         if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
          break label$17
         }
         if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
          break label$17
         }
         HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] = 45;
         break label$16;
        }
        label$18 : {
         label$19 : {
          if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
           break label$19
          }
          if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
           break label$19
          }
          HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 18184 | 0) >> 2] | 0;
          break label$18;
         }
         HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] = 46;
        }
       }
      }
     }
     HEAP32[($7_1 + 188 | 0) >> 2] = (HEAP32[($7_1 + 188 | 0) >> 2] | 0) + 1 | 0;
     continue label$10;
    };
   }
   HEAP32[($7_1 + 176 | 0) >> 2] = $306(Math_imul(Math_imul(HEAP32[($7_1 + 196 | 0) >> 2] | 0, HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0), HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
   label$20 : {
    if ((HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$20
    }
    $365(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0);
    $260_1 = 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = $293(2677 | 0) | 0 ? $260_1 : $260_1;
    break label$1;
   }
   HEAP32[($7_1 + 180 | 0) >> 2] = 0;
   label$21 : {
    label$22 : while (1) {
     if (!((HEAP32[($7_1 + 180 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$21
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 176 | 0) >> 2] | 0) + Math_imul(Math_imul(HEAP32[($7_1 + 196 | 0) >> 2] | 0, HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0), HEAP32[($7_1 + 180 | 0) >> 2] | 0) | 0;
     HEAP32[($7_1 + 188 | 0) >> 2] = 0;
     label$23 : {
      label$24 : while (1) {
       if (!((HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$23
       }
       HEAP32[($7_1 + 20 | 0) >> 2] = ($7_1 + 32 | 0) + ((HEAP32[($7_1 + 188 | 0) >> 2] | 0) << 5 | 0) | 0;
       HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) >= ((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 1 | 0 | 0) & 1 | 0;
       $308_1 = HEAP32[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
       $316_1 = HEAP32[((((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($7_1 + 188 | 0) >> 2] | 0, 72) | 0) + 56 | 0) >> 2] | 0;
       label$25 : {
        label$26 : {
         if (!(HEAP32[($7_1 + 16 | 0) >> 2] | 0)) {
          break label$26
         }
         $320_1 = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         break label$25;
        }
        $320_1 = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       }
       $323_1 = $320_1;
       label$27 : {
        label$28 : {
         if (!(HEAP32[($7_1 + 16 | 0) >> 2] | 0)) {
          break label$28
         }
         $327_1 = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         break label$27;
        }
        $327_1 = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       }
       $335_1 = FUNCTION_TABLE[$308_1 | 0]($316_1, $323_1, $327_1, HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0, HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0;
       HEAP32[(($7_1 + 160 | 0) + ((HEAP32[($7_1 + 188 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $335_1;
       $343_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
       $346_1 = (HEAP32[($343_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($343_1 + 24 | 0) >> 2] = $346_1;
       label$29 : {
        if (!(($346_1 | 0) >= (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$29
        }
        HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = 0;
        HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        $359_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
        $362_1 = (HEAP32[($359_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($359_1 + 28 | 0) >> 2] = $362_1;
        label$30 : {
         if (!(($362_1 | 0) < (HEAP32[((((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($7_1 + 188 | 0) >> 2] | 0, 72) | 0) + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$30
         }
         $384_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
         HEAP32[($384_1 + 8 | 0) >> 2] = (HEAP32[($384_1 + 8 | 0) >> 2] | 0) + (HEAP32[((((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($7_1 + 188 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0) | 0;
        }
       }
       HEAP32[($7_1 + 188 | 0) >> 2] = (HEAP32[($7_1 + 188 | 0) >> 2] | 0) + 1 | 0;
       continue label$24;
      };
     }
     label$31 : {
      label$32 : {
       if (!((HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
        break label$32
       }
       HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
       label$33 : {
        label$34 : {
         if (!((HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
          break label$34
         }
         FUNCTION_TABLE[HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 18180 | 0) >> 2] | 0 | 0](HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0, HEAP32[($7_1 + 164 | 0) >> 2] | 0, HEAP32[($7_1 + 168 | 0) >> 2] | 0, HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0, HEAP32[($7_1 + 196 | 0) >> 2] | 0);
         break label$33;
        }
        HEAP32[($7_1 + 184 | 0) >> 2] = 0;
        label$35 : {
         label$36 : while (1) {
          if (!((HEAP32[($7_1 + 184 | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$35
          }
          $430_1 = HEAPU8[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 184 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 2 | 0) >> 0] = $430_1;
          HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0) >> 0] = $430_1;
          HEAP8[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 0] = $430_1;
          HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 3 | 0) >> 0] = 255;
          HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 196 | 0) >> 2] | 0) | 0;
          HEAP32[($7_1 + 184 | 0) >> 2] = (HEAP32[($7_1 + 184 | 0) >> 2] | 0) + 1 | 0;
          continue label$36;
         };
        }
       }
       break label$31;
      }
      HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
      label$37 : {
       label$38 : {
        if (!((HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$38
        }
        HEAP32[($7_1 + 184 | 0) >> 2] = 0;
        label$39 : {
         label$40 : while (1) {
          if (!((HEAP32[($7_1 + 184 | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$39
          }
          HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 184 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + (HEAP32[($7_1 + 184 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP32[($7_1 + 184 | 0) >> 2] = (HEAP32[($7_1 + 184 | 0) >> 2] | 0) + 1 | 0;
          continue label$40;
         };
        }
        break label$37;
       }
       HEAP32[($7_1 + 184 | 0) >> 2] = 0;
       label$41 : {
        label$42 : while (1) {
         if (!((HEAP32[($7_1 + 184 | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$41
         }
         $483_1 = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + (HEAP32[($7_1 + 184 | 0) >> 2] | 0) | 0) >> 0] | 0;
         $484_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
         HEAP32[($7_1 + 24 | 0) >> 2] = $484_1 + 1 | 0;
         HEAP8[$484_1 >> 0] = $483_1;
         $487_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
         HEAP32[($7_1 + 24 | 0) >> 2] = $487_1 + 1 | 0;
         HEAP8[$487_1 >> 0] = 255;
         HEAP32[($7_1 + 184 | 0) >> 2] = (HEAP32[($7_1 + 184 | 0) >> 2] | 0) + 1 | 0;
         continue label$42;
        };
       }
      }
     }
     HEAP32[($7_1 + 180 | 0) >> 2] = (HEAP32[($7_1 + 180 | 0) >> 2] | 0) + 1 | 0;
     continue label$22;
    };
   }
   $365(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0);
   HEAP32[(HEAP32[($7_1 + 212 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   label$43 : {
    if (!((HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$43
    }
    HEAP32[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($7_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 220 | 0) >> 2] = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
  }
  $518_1 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
  global$0 = $7_1 + 224 | 0;
  return $518_1 | 0;
 }
 
 function $334($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $31_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != ((HEAPU8[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 20740 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $293(3014 | 0) | 0;
      break label$1;
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  }
  $31_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $335($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $25_1 = 0, $100_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
      break label$2
     }
    }
    $25_1 = 0;
    HEAP32[($7_1 + 28 | 0) >> 2] = $293(2417 | 0) | 0 ? $25_1 : $25_1;
    break label$1;
   }
   label$4 : {
    if (!($383(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
    label$5 : {
     if (!(HEAP32[($7_1 + 8 | 0) >> 2] | 0)) {
      break label$5
     }
     if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($7_1 + 4 | 0) >> 2] = $344(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
     label$6 : {
      if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      break label$1;
     }
    }
    HEAP32[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    label$7 : {
     if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    }
   }
   $2005(HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
   $2005(HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
   $2005(HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  }
  $100_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $100_1 | 0;
 }
 
 function $336($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $40_1 = 0, $74_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (66 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    if (!((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (77 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   $338(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $339(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $339(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $338(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$3_1 >> 2] = $338(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $40_1 = 1;
   label$4 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (12 | 0) & 1 | 0) {
     break label$4
    }
    $40_1 = 1;
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (40 | 0) & 1 | 0) {
     break label$4
    }
    $40_1 = 1;
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (56 | 0) & 1 | 0) {
     break label$4
    }
    $40_1 = 1;
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (108 | 0) & 1 | 0) {
     break label$4
    }
    $40_1 = (HEAP32[$3_1 >> 2] | 0 | 0) == (124 | 0);
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $40_1 & 1 | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  $74_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $74_1 | 0;
 }
 
 function $337($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0, $14_1 = 0, $21_1 = 0, $22_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $13_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $14_1 = HEAP32[($13_1 + 168 | 0) >> 2] | 0;
    HEAP32[($13_1 + 168 | 0) >> 2] = $14_1 + 1 | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = HEAPU8[$14_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (!(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0)) {
     break label$3
    }
    $301(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    $21_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $22_1 = HEAP32[($21_1 + 168 | 0) >> 2] | 0;
    HEAP32[($21_1 + 168 | 0) >> 2] = $22_1 + 1 | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = HEAPU8[$22_1 >> 0] | 0;
    break label$1;
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
  }
  $29_1 = (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $29_1 | 0;
 }
 
 function $338($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $339(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $11_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + (($339(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) << 16 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $339($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($337(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  $15_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + ((($337(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 255 | 0) << 8 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $340($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $46_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0) | 0;
    label$4 : {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0](HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0);
     break label$1;
    }
   }
   $46_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[($46_1 + 168 | 0) >> 2] = (HEAP32[($46_1 + 168 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $341($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($3_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = -1;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 >= 65536 >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 16 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 16 | 0;
   }
   label$4 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 >= 256 >>> 0 & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 8 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 8 | 0;
   }
   label$5 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 >= 16 >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 4 | 0;
   }
   label$6 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 >= 4 >>> 0 & 1 | 0)) {
     break label$6
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 2 | 0;
   }
   label$7 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 >= 2 >>> 0 & 1 | 0)) {
     break label$7
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 1 | 0;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 1431655765 | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 1 | 0) & 1431655765 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 858993459 | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 2 | 0) & 858993459 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 4 | 0) | 0) & 252645135 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 8 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 16 | 0) | 0;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 255 | 0 | 0;
 }
 
 function $343($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) << (0 - (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0) | 0;
    break label$1;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0;
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
    continue label$4;
   };
  }
  return HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $344($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $117_1 = 0, $141_1 = 0, $189_1 = 0, $213_1 = 0, $50_1 = 0, $80_1 = 0, $281_1 = 0, $314_1 = 0, $349_1 = 0, $382_1 = 0, $433_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
      break label$4
     }
     if ((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) <= (4 | 0) & 1 | 0) {
      break label$3
     }
    }
    fimport$54(4801 | 0, 2854 | 0, 1348 | 0, 1901 | 0);
    abort();
   }
   HEAP32[($7_1 + 12 | 0) >> 2] = $306(Math_imul(Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0), HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) | 0;
   label$5 : {
    if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$5
    }
    $2005(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0);
    $50_1 = 0;
    HEAP32[($7_1 + 44 | 0) >> 2] = $293(2677 | 0) | 0 ? $50_1 : $50_1;
    break label$1;
   }
   HEAP32[($7_1 + 16 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + Math_imul(Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0), HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + Math_imul(Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0), HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0;
     $80_1 = (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) + (HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0) + -10 | 0;
     label$8 : {
      label$9 : {
       switch ($80_1 | 0) {
       case 0:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$22 : {
         label$23 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$22
          }
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = 255;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0;
          continue label$23;
         };
        }
        break label$8;
       case 1:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$24 : {
         label$25 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$24
          }
          $117_1 = HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] = $117_1;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = $117_1;
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = $117_1;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 3 | 0;
          continue label$25;
         };
        }
        break label$8;
       case 2:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$26 : {
         label$27 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$26
          }
          $141_1 = HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] = $141_1;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = $141_1;
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = $141_1;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 3 | 0) >> 0] = 255;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 4 | 0;
          continue label$27;
         };
        }
        break label$8;
       case 7:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$28 : {
         label$29 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$28
          }
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
          continue label$29;
         };
        }
        break label$8;
       case 9:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$30 : {
         label$31 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$30
          }
          $189_1 = HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] = $189_1;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = $189_1;
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = $189_1;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 3 | 0;
          continue label$31;
         };
        }
        break label$8;
       case 10:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$32 : {
         label$33 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$32
          }
          $213_1 = HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] = $213_1;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = $213_1;
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = $213_1;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 3 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 4 | 0;
          continue label$33;
         };
        }
        break label$8;
       case 18:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$34 : {
         label$35 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$34
          }
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 3 | 0) >> 0] = 255;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 3 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 4 | 0;
          continue label$35;
         };
        }
        break label$8;
       case 15:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$36 : {
         label$37 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$36
          }
          $281_1 = $389((HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = $281_1;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 3 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
          continue label$37;
         };
        }
        break label$8;
       case 16:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$38 : {
         label$39 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$38
          }
          $314_1 = $389((HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = $314_1;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = 255;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 3 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0;
          continue label$39;
         };
        }
        break label$8;
       case 23:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$40 : {
         label$41 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$40
          }
          $349_1 = $389((HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = $349_1;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 4 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
          continue label$41;
         };
        }
        break label$8;
       case 24:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$42 : {
         label$43 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$42
          }
          $382_1 = $389((HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = $382_1;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 3 | 0) >> 0] | 0;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 4 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0;
          continue label$43;
         };
        }
        break label$8;
       case 25:
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        label$44 : {
         label$45 : while (1) {
          if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$44
          }
          HEAP8[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
          HEAP8[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0;
          HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 4 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 3 | 0;
          continue label$45;
         };
        }
        break label$8;
       default:
        break label$9;
       };
      }
      fimport$54(4899 | 0, 2854 | 0, 1377 | 0, 1901 | 0);
      abort();
     }
     HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   $2005(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0);
   HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  }
  $433_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  global$0 = $7_1 + 48 | 0;
  return $433_1 | 0;
 }
 
 function $345($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $76_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (71 | 0) & 1 | 0) {
      break label$3
     }
     if ((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (73 | 0) & 1 | 0) {
      break label$3
     }
     if ((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (70 | 0) & 1 | 0) {
      break label$3
     }
     if (!((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (56 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = ($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   label$4 : {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (57 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (55 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   label$5 : {
    if (!((($337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (97 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  }
  $76_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $76_1 | 0;
 }
 
 function $346($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $43_1 = 0, $50_1 = 0, $64_1 = 0, $156_1 = 0, $189_1 = 0, $267_1 = 0, $316_1 = 0, $385_1 = 0, $391_1 = 0, $31_1 = 0, $229_1 = 0, $251_1 = 0, $254_1 = 0, $260_1 = 0, $370_1 = 0, $373_1 = 0, $378_1 = 0, $393_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    if ($392(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$2
    }
    HEAP32[($6_1 + 60 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   $31_1 = $306(Math_imul((HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = $31_1;
   label$3 : {
    if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$3
    }
    $43_1 = 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = $293(2677 | 0) | 0 ? $43_1 : $43_1;
    break label$1;
   }
   $50_1 = ((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) & 28 | 0) >>> 2 | 0;
   label$4 : {
    label$5 : {
     switch ($50_1 | 0) {
     case 0:
      $64_1 = 0;
      $393(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, $64_1 | 0, $64_1 | 0, (HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0 | 0, Math_imul((HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0);
      break label$4;
     case 1:
      label$9 : {
       if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$9
       }
       $2014(HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) | 0;
      }
      HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
      break label$4;
     case 2:
      label$10 : {
       if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       $2014(HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) | 0;
      }
      $393(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18488 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18492 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18496 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18500 | 0) >> 2] | 0 | 0);
      break label$4;
     case 3:
      break label$5;
     default:
      break label$4;
     };
    }
    label$11 : {
     if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18492 | 0) >> 2] | 0;
     label$12 : {
      label$13 : while (1) {
       if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18500 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       $2014((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18488 | 0) >> 2] | 0) | 0) | 0 | 0, (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18488 | 0) >> 2] | 0) | 0) | 0 | 0, (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18496 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18488 | 0) >> 2] | 0) | 0 | 0) | 0;
       HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
       continue label$13;
      };
     }
    }
   }
   label$14 : while (1) {
    $156_1 = ($337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) + -33 | 0;
    label$15 : {
     label$16 : {
      switch ($156_1 | 0) {
      case 11:
       HEAP32[($6_1 + 32 | 0) >> 2] = -1;
       HEAP32[($6_1 + 28 | 0) >> 2] = $339(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 24 | 0) >> 2] = $339(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 20 | 0) >> 2] = $339(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 16 | 0) >> 2] = $339(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
       label$20 : {
        label$21 : {
         if (((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0 | 0) > (HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0) {
          break label$21
         }
         if (!(((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + (HEAP32[($6_1 + 16 | 0) >> 2] | 0) | 0 | 0) > (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$20
         }
        }
        $189_1 = 0;
        HEAP32[($6_1 + 60 | 0) >> 2] = $293(2149 | 0) | 0 ? $189_1 : $189_1;
        break label$1;
       }
       HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18512 | 0) >> 2] = (HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0;
       HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18488 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 2 | 0;
       HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18492 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 24 | 0) >> 2] | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18512 | 0) >> 2] | 0);
       HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18496 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18488 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
       HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18500 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18492 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18512 | 0) >> 2] | 0) | 0;
       HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18504 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18488 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18508 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18492 | 0) >> 2] | 0;
       $229_1 = ($337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
       HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18484 | 0) >> 2] = $229_1;
       label$22 : {
        label$23 : {
         if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18484 | 0) >> 2] | 0) & 64 | 0)) {
          break label$23
         }
         HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18480 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18512 | 0) >> 2] | 0) << 3 | 0;
         HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18476 | 0) >> 2] = 3;
         break label$22;
        }
        HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18480 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18512 | 0) >> 2] | 0;
        HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18476 | 0) >> 2] = 0;
       }
       label$24 : {
        label$25 : {
         if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18484 | 0) >> 2] | 0) & 128 | 0)) {
          break label$25
         }
         $251_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
         $254_1 = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1064 | 0;
         $260_1 = 2 << ((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18484 | 0) >> 2] | 0) & 7 | 0) | 0;
         label$26 : {
          label$27 : {
           if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) & 1 | 0)) {
            break label$27
           }
           $267_1 = HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
           break label$26;
          }
          $267_1 = -1;
         }
         $394($251_1 | 0, $254_1 | 0, $260_1 | 0, $267_1 | 0);
         HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18472 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1064 | 0;
         break label$24;
        }
        label$28 : {
         label$29 : {
          if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & 128 | 0)) {
           break label$29
          }
          label$30 : {
           if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
            break label$30
           }
           if (!((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) & 1 | 0)) {
            break label$30
           }
           HEAP32[($6_1 + 32 | 0) >> 2] = (HEAPU8[((((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 40 | 0) + ((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] | 0) & 255 | 0;
           HEAP8[((((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 40 | 0) + ((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 0;
          }
          HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 18472 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 40 | 0;
          break label$28;
         }
         $316_1 = 0;
         HEAP32[($6_1 + 60 | 0) >> 2] = $293(3317 | 0) | 0 ? $316_1 : $316_1;
         break label$1;
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $395(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0;
       label$31 : {
        if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
         break label$31
        }
        HEAP32[($6_1 + 60 | 0) >> 2] = 0;
        break label$1;
       }
       label$32 : {
        if (!((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
         break label$32
        }
        HEAP8[((((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 40 | 0) + ((HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
       }
       HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
       break label$1;
      case 0:
       label$33 : {
        if (!((($337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) == (249 | 0) & 1 | 0)) {
         break label$33
        }
        HEAP32[($6_1 + 8 | 0) >> 2] = ($337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
        label$34 : {
         label$35 : {
          if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
           break label$35
          }
          $370_1 = ($337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 32 | 0) >> 2] = $370_1;
          $373_1 = $339(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 36 | 0) >> 2] = $373_1;
          $378_1 = ($337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          HEAP32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 28 | 0) >> 2] = $378_1;
          break label$34;
         }
         $340(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
         break label$15;
        }
       }
       label$36 : {
        label$37 : while (1) {
         $385_1 = ($337(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
         HEAP32[($6_1 + 8 | 0) >> 2] = $385_1;
         if (!$385_1) {
          break label$36
         }
         $340(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
         continue label$37;
        };
       }
       break label$15;
      case 26:
       HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
       break label$1;
      default:
       break label$16;
      };
     }
     $391_1 = 0;
     HEAP32[($6_1 + 60 | 0) >> 2] = $293(3412 | 0) | 0 ? $391_1 : $391_1;
     break label$1;
    }
    continue label$14;
   };
  }
  $393_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  global$0 = $6_1 + 64 | 0;
  return $393_1 | 0;
 }
 
 function $347($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $348(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $11_1 = ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 16 | 0) + ($348(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ($337(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  $15_1 = ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 8 | 0) + (($337(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 255 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ($397(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, 4728 | 0) | 0) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (84 | 0) & 1 | 0)) {
      break label$3
     }
     $337(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   label$5 : {
    if ($397(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, 3798 | 0) | 0) {
     break label$5
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  }
  $25_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0](HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) | 0) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     break label$1;
    }
    label$4 : {
     if (HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) {
      break label$4
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 1;
     break label$1;
    }
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0) >>> 0 >= (HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0) >>> 0 & 1 | 0;
  }
  $30_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $30_1 | 0;
 }
 
 function $351($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $19_1 = 0, $21_1 = 0, $53_1 = 0, $67_1 = 0, $103_1 = 0, $107_1 = 0, $110_1 = 0, $154_1 = 0, $227_1 = 0, $257_1 = 0, $309_1 = 0, $35_1 = 0, $38_1 = 0, $41_1 = 0, $349_1 = 0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 136 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 128 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 124 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 116 | 0) >> 2] = 0;
  HEAP32[($7_1 + 112 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
      break label$3
     }
     $19_1 = 0;
     HEAP32[($7_1 + 140 | 0) >> 2] = $293(1960 | 0) | 0 ? $19_1 : $19_1;
     break label$1;
    }
    $21_1 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
    HEAP32[($7_1 + 112 | 0) >> 2] = $21_1 + 1 | 0;
    HEAP32[($7_1 + 60 | 0) >> 2] = ($7_1 + 64 | 0) + Math_imul($21_1, 3) | 0;
    HEAP32[($7_1 + 104 | 0) >> 2] = ($337(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
    $35_1 = $337(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 0] = $35_1;
    $38_1 = $337(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0) >> 0] = $38_1;
    $41_1 = $337(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 2 | 0) >> 0] = $41_1;
    HEAP32[($7_1 + 116 | 0) >> 2] = HEAP32[($7_1 + 116 | 0) >> 2] | 0 | ((HEAPU8[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0) | 0;
    label$4 : {
     if (!($350(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0)) {
      break label$4
     }
     $53_1 = 0;
     HEAP32[($7_1 + 140 | 0) >> 2] = $293(3301 | 0) | 0 ? $53_1 : $53_1;
     break label$1;
    }
    label$5 : {
     if (!(((HEAPU8[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (8 | 0) & 1 | 0)) {
      break label$5
     }
     $67_1 = 0;
     HEAP32[($7_1 + 140 | 0) >> 2] = $293(1960 | 0) | 0 ? $67_1 : $67_1;
     break label$1;
    }
    if (HEAP32[($7_1 + 104 | 0) >> 2] | 0) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[(HEAP32[($7_1 + 124 | 0) >> 2] | 0) >> 2] = (HEAP32[($7_1 + 116 | 0) >> 2] | 0) & 16 | 0 ? 4 : 3;
   HEAP32[($7_1 + 108 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 128 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($7_1 + 56 | 0) >> 2] = 0;
     label$8 : {
      label$9 : while (1) {
       if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[($7_1 + 52 | 0) >> 2] = ($7_1 + 64 | 0) + Math_imul(HEAP32[($7_1 + 56 | 0) >> 2] | 0, 3) | 0;
       $103_1 = 2;
       HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) + (Math_imul(HEAP32[($7_1 + 108 | 0) >> 2] | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0) << $103_1 | 0) | 0;
       $107_1 = HEAPU8[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
       label$10 : {
        label$11 : {
         switch ($107_1 | 0) {
         default:
          $110_1 = 0;
          HEAP32[($7_1 + 140 | 0) >> 2] = $293(1960 | 0) | 0 ? $110_1 : $110_1;
          break label$1;
         case 0:
          HEAP32[($7_1 + 44 | 0) >> 2] = 0;
          label$15 : {
           label$16 : while (1) {
            if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$15
            }
            label$17 : {
             if (($398(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
              break label$17
             }
             HEAP32[($7_1 + 140 | 0) >> 2] = 0;
             break label$1;
            }
            HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
            HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 4 | 0;
            continue label$16;
           };
          }
          break label$10;
         case 1:
          HEAP32[($7_1 + 40 | 0) >> 2] = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
          label$18 : {
           label$19 : while (1) {
            if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
             break label$18
            }
            HEAP8[($7_1 + 35 | 0) >> 0] = $337(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0;
            label$20 : {
             if (!($350(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0)) {
              break label$20
             }
             $154_1 = 0;
             HEAP32[($7_1 + 140 | 0) >> 2] = $293(3301 | 0) | 0 ? $154_1 : $154_1;
             break label$1;
            }
            label$21 : {
             if (!(((HEAPU8[($7_1 + 35 | 0) >> 0] | 0) & 255 | 0 | 0) > (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$21
             }
             HEAP8[($7_1 + 35 | 0) >> 0] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
            }
            label$22 : {
             if (($398(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0, $7_1 + 31 | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
              break label$22
             }
             HEAP32[($7_1 + 140 | 0) >> 2] = 0;
             break label$1;
            }
            HEAP32[($7_1 + 36 | 0) >> 2] = 0;
            label$23 : {
             label$24 : while (1) {
              if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < ((HEAPU8[($7_1 + 35 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
               break label$23
              }
              $399((HEAPU8[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0, $7_1 + 31 | 0 | 0);
              HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
              HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 4 | 0;
              continue label$24;
             };
            }
            HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) - ((HEAPU8[($7_1 + 35 | 0) >> 0] | 0) & 255 | 0) | 0;
            continue label$19;
           };
          }
          break label$10;
         case 2:
          break label$11;
         };
        }
        HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
           break label$25
          }
          HEAP32[($7_1 + 20 | 0) >> 2] = ($337(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          label$27 : {
           if (!($350(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0)) {
            break label$27
           }
           $227_1 = 0;
           HEAP32[($7_1 + 140 | 0) >> 2] = $293(3301 | 0) | 0 ? $227_1 : $227_1;
           break label$1;
          }
          label$28 : {
           label$29 : {
            if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (128 | 0) & 1 | 0)) {
             break label$29
            }
            label$30 : {
             label$31 : {
              if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) == (128 | 0) & 1 | 0)) {
               break label$31
              }
              HEAP32[($7_1 + 20 | 0) >> 2] = $348(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) | 0;
              break label$30;
             }
             HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) - 127 | 0;
            }
            label$32 : {
             if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$32
             }
             $257_1 = 0;
             HEAP32[($7_1 + 140 | 0) >> 2] = $293(3301 | 0) | 0 ? $257_1 : $257_1;
             break label$1;
            }
            label$33 : {
             if (($398(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0, $7_1 + 12 | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
              break label$33
             }
             HEAP32[($7_1 + 140 | 0) >> 2] = 0;
             break label$1;
            }
            HEAP32[($7_1 + 16 | 0) >> 2] = 0;
            label$34 : {
             label$35 : while (1) {
              if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$34
              }
              $399((HEAPU8[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0, $7_1 + 12 | 0 | 0);
              HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0;
              HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 4 | 0;
              continue label$35;
             };
            }
            break label$28;
           }
           HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
           label$36 : {
            if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$36
            }
            $309_1 = 0;
            HEAP32[($7_1 + 140 | 0) >> 2] = $293(3301 | 0) | 0 ? $309_1 : $309_1;
            break label$1;
           }
           HEAP32[($7_1 + 16 | 0) >> 2] = 0;
           label$37 : {
            label$38 : while (1) {
             if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$37
             }
             label$39 : {
              if (($398(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
               break label$39
              }
              HEAP32[($7_1 + 140 | 0) >> 2] = 0;
              break label$1;
             }
             HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0;
             HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 4 | 0;
             continue label$38;
            };
           }
          }
          HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) - (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0;
          continue label$26;
         };
        }
       }
       HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
       continue label$9;
      };
     }
     HEAP32[($7_1 + 108 | 0) >> 2] = (HEAP32[($7_1 + 108 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 120 | 0) >> 2] | 0;
  }
  $349_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
  global$0 = $7_1 + 144 | 0;
  return $349_1 | 0;
 }
 
 function $352($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $70_1 = 0, $75_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0) | 0;
    label$3 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     $2014(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0, (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0, (HEAP32[($5_1 + 16 | 0) >> 2] | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0 | 0) & 1 | 0;
     HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 168 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$4 : {
    if (!(((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0) + (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0) >>> 0 <= (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$4
    }
    $2014(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    $70_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($70_1 + 168 | 0) >> 2] = (HEAP32[($70_1 + 168 | 0) >> 2] | 0) + (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  }
  $75_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $75_1 | 0;
 }
 
 function $353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $14_1 = 0, $26_1 = 0, $40_1 = 0, $24_1 = 0, $25_1 = 0, $58_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP8[($4_1 + 3 | 0) >> 0] = 0;
  HEAP8[($4_1 + 3 | 0) >> 0] = $337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : while (1) {
   $12_1 = 0;
   label$2 : {
    if ($350(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $14_1 = 24;
    $12_1 = (((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $14_1 | 0) >> $14_1 | 0 | 0) != (10 | 0);
   }
   label$3 : {
    if (!($12_1 & 1 | 0)) {
     break label$3
    }
    $24_1 = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
    $25_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $26_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $26_1 + 1 | 0;
    HEAP8[($25_1 + $26_1 | 0) >> 0] = $24_1;
    label$4 : {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) == (1023 | 0) & 1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      $40_1 = 0;
      label$6 : {
       if ($350(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
        break label$6
       }
       $40_1 = (($337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (10 | 0);
      }
      label$7 : {
       if (!($40_1 & 1 | 0)) {
        break label$7
       }
       continue label$5;
      }
      break label$5;
     };
     break label$3;
    }
    HEAP8[($4_1 + 3 | 0) >> 0] = $337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    continue label$1;
   }
   break label$1;
  };
  HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) >> 0] = 0;
  $58_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $58_1 | 0;
 }
 
 function $354($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $69_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 3 | 0) >> 0] | 0) & 255 | 0)) {
     break label$2
    }
    HEAPF32[$5_1 >> 2] = Math_fround(+$591(+(1.0), (HEAPU8[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 3 | 0) >> 0] | 0) + -136 | 0 | 0));
    label$3 : {
     label$4 : {
      if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) <= (2 | 0) & 1 | 0)) {
       break label$4
      }
      HEAPF32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround((((HEAPU8[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0) | 0) + ((HEAPU8[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0) | 0 | 0) * Math_fround(HEAPF32[$5_1 >> 2])) / Math_fround(3.0));
      break label$3;
     }
     HEAPF32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround((HEAPU8[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) * Math_fround(HEAPF32[$5_1 >> 2]));
     HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround((HEAPU8[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) * Math_fround(HEAPF32[$5_1 >> 2]));
     HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround((HEAPU8[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) * Math_fround(HEAPF32[$5_1 >> 2]));
    }
    label$5 : {
     if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(1.0);
    }
    label$6 : {
     if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(1.0);
    }
    break label$1;
   }
   $69_1 = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   label$7 : {
    label$8 : {
     switch ($69_1 | 0) {
     case 3:
      HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(1.0);
     case 2:
      HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(0 | 0);
      HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(0 | 0);
      HEAPF32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(0 | 0);
      break label$7;
     case 1:
      HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(1.0);
      break;
     case 0:
      break label$8;
     default:
      break label$7;
     };
    }
    HEAPF32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(0 | 0);
   }
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $355($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $60_1 = 0, $20_1 = 0, $25_1 = 0, $30_1 = 0, $35_1 = 0, $40_1 = 0, $45_1 = 0, $50_1 = 0, $55_1 = 0, $71_1 = 0, $76_1 = 0, $96_1 = 0, $101_1 = 0, $128_1 = 0, $133_1 = 0, $138_1 = 0, $143_1 = 0, $427_1 = 0, $434_1 = 0, $441_1 = 0, $448_1 = 0, $455_1 = 0, $462_1 = 0, $469_1 = 0, $476_1 = 0;
  $5_1 = global$0 - 400 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 396 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 392 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 388 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 124 | 0) >> 2] = $5_1 + 128 | 0;
  HEAP32[($5_1 + 116 | 0) >> 2] = HEAP32[($5_1 + 388 | 0) >> 2] | 0;
  HEAP32[($5_1 + 384 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 384 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
     break label$1
    }
    $20_1 = 16;
    label$3 : {
     label$4 : {
      if (((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 16 | 0) >> 1] | 0) << $20_1 | 0) >> $20_1 | 0) {
       break label$4
      }
      $25_1 = 16;
      if (((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 32 | 0) >> 1] | 0) << $25_1 | 0) >> $25_1 | 0) {
       break label$4
      }
      $30_1 = 16;
      if (((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 48 | 0) >> 1] | 0) << $30_1 | 0) >> $30_1 | 0) {
       break label$4
      }
      $35_1 = 16;
      if (((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 64 | 0) >> 1] | 0) << $35_1 | 0) >> $35_1 | 0) {
       break label$4
      }
      $40_1 = 16;
      if (((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 80 | 0) >> 1] | 0) << $40_1 | 0) >> $40_1 | 0) {
       break label$4
      }
      $45_1 = 16;
      if (((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 96 | 0) >> 1] | 0) << $45_1 | 0) >> $45_1 | 0) {
       break label$4
      }
      $50_1 = 16;
      if (((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 112 | 0) >> 1] | 0) << $50_1 | 0) >> $50_1 | 0) {
       break label$4
      }
      $55_1 = 16;
      HEAP32[($5_1 + 112 | 0) >> 2] = (((HEAPU16[(HEAP32[($5_1 + 116 | 0) >> 2] | 0) >> 1] | 0) << $55_1 | 0) >> $55_1 | 0) << 2 | 0;
      $60_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
      HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 224 | 0) >> 2] = $60_1;
      HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 192 | 0) >> 2] = $60_1;
      HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 160 | 0) >> 2] = $60_1;
      HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 128 | 0) >> 2] = $60_1;
      HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 96 | 0) >> 2] = $60_1;
      HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 64 | 0) >> 2] = $60_1;
      HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 32 | 0) >> 2] = $60_1;
      HEAP32[(HEAP32[($5_1 + 124 | 0) >> 2] | 0) >> 2] = $60_1;
      break label$3;
     }
     $71_1 = 16;
     HEAP32[($5_1 + 88 | 0) >> 2] = ((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 32 | 0) >> 1] | 0) << $71_1 | 0) >> $71_1 | 0;
     $76_1 = 16;
     HEAP32[($5_1 + 84 | 0) >> 2] = ((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 96 | 0) >> 1] | 0) << $76_1 | 0) >> $76_1 | 0;
     HEAP32[($5_1 + 92 | 0) >> 2] = Math_imul((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0, 2217);
     HEAP32[($5_1 + 100 | 0) >> 2] = (HEAP32[($5_1 + 92 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 84 | 0) >> 2] | 0, -7567) | 0;
     HEAP32[($5_1 + 96 | 0) >> 2] = (HEAP32[($5_1 + 92 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 88 | 0) >> 2] | 0, 3135) | 0;
     $96_1 = 16;
     HEAP32[($5_1 + 88 | 0) >> 2] = ((HEAPU16[(HEAP32[($5_1 + 116 | 0) >> 2] | 0) >> 1] | 0) << $96_1 | 0) >> $96_1 | 0;
     $101_1 = 16;
     HEAP32[($5_1 + 84 | 0) >> 2] = ((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 64 | 0) >> 1] | 0) << $101_1 | 0) >> $101_1 | 0;
     HEAP32[($5_1 + 108 | 0) >> 2] = ((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0) << 12 | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = ((HEAP32[($5_1 + 88 | 0) >> 2] | 0) - (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0) << 12 | 0;
     HEAP32[($5_1 + 72 | 0) >> 2] = (HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 108 | 0) >> 2] | 0) - (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[($5_1 + 104 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 64 | 0) >> 2] = (HEAP32[($5_1 + 104 | 0) >> 2] | 0) - (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0;
     $128_1 = 16;
     HEAP32[($5_1 + 108 | 0) >> 2] = ((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 112 | 0) >> 1] | 0) << $128_1 | 0) >> $128_1 | 0;
     $133_1 = 16;
     HEAP32[($5_1 + 104 | 0) >> 2] = ((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 80 | 0) >> 1] | 0) << $133_1 | 0) >> $133_1 | 0;
     $138_1 = 16;
     HEAP32[($5_1 + 100 | 0) >> 2] = ((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 48 | 0) >> 1] | 0) << $138_1 | 0) >> $138_1 | 0;
     $143_1 = 16;
     HEAP32[($5_1 + 96 | 0) >> 2] = ((HEAPU16[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 16 | 0) >> 1] | 0) << $143_1 | 0) >> $143_1 | 0;
     HEAP32[($5_1 + 84 | 0) >> 2] = (HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 80 | 0) >> 2] = (HEAP32[($5_1 + 104 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 92 | 0) >> 2] = (HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 88 | 0) >> 2] = (HEAP32[($5_1 + 104 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 76 | 0) >> 2] = Math_imul((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0, 4816);
     HEAP32[($5_1 + 108 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 108 | 0) >> 2] | 0, 1223);
     HEAP32[($5_1 + 104 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 104 | 0) >> 2] | 0, 8410);
     HEAP32[($5_1 + 100 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 100 | 0) >> 2] | 0, 12586);
     HEAP32[($5_1 + 96 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 96 | 0) >> 2] | 0, 6149);
     HEAP32[($5_1 + 92 | 0) >> 2] = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 92 | 0) >> 2] | 0, -3685) | 0;
     HEAP32[($5_1 + 88 | 0) >> 2] = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 88 | 0) >> 2] | 0, -10497) | 0;
     HEAP32[($5_1 + 84 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 84 | 0) >> 2] | 0, -8034);
     HEAP32[($5_1 + 80 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 80 | 0) >> 2] | 0, -1597);
     HEAP32[($5_1 + 96 | 0) >> 2] = (HEAP32[($5_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($5_1 + 100 | 0) >> 2] = (HEAP32[($5_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = (HEAP32[($5_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($5_1 + 108 | 0) >> 2] = (HEAP32[($5_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 92 | 0) >> 2] | 0) + (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($5_1 + 72 | 0) >> 2] = (HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 512 | 0;
     HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 512 | 0;
     HEAP32[($5_1 + 64 | 0) >> 2] = (HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 512 | 0;
     HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 512 | 0;
     HEAP32[(HEAP32[($5_1 + 124 | 0) >> 2] | 0) >> 2] = ((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) >> 10 | 0;
     HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 224 | 0) >> 2] = ((HEAP32[($5_1 + 72 | 0) >> 2] | 0) - (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) >> 10 | 0;
     HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 32 | 0) >> 2] = ((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) >> 10 | 0;
     HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 192 | 0) >> 2] = ((HEAP32[($5_1 + 68 | 0) >> 2] | 0) - (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) >> 10 | 0;
     HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 64 | 0) >> 2] = ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) + (HEAP32[($5_1 + 104 | 0) >> 2] | 0) | 0) >> 10 | 0;
     HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 160 | 0) >> 2] = ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) - (HEAP32[($5_1 + 104 | 0) >> 2] | 0) | 0) >> 10 | 0;
     HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 96 | 0) >> 2] = ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + (HEAP32[($5_1 + 108 | 0) >> 2] | 0) | 0) >> 10 | 0;
     HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 128 | 0) >> 2] = ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) - (HEAP32[($5_1 + 108 | 0) >> 2] | 0) | 0) >> 10 | 0;
    }
    HEAP32[($5_1 + 384 | 0) >> 2] = (HEAP32[($5_1 + 384 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($5_1 + 116 | 0) >> 2] = (HEAP32[($5_1 + 116 | 0) >> 2] | 0) + 2 | 0;
    HEAP32[($5_1 + 124 | 0) >> 2] = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  HEAP32[($5_1 + 384 | 0) >> 2] = 0;
  HEAP32[($5_1 + 124 | 0) >> 2] = $5_1 + 128 | 0;
  HEAP32[($5_1 + 120 | 0) >> 2] = HEAP32[($5_1 + 396 | 0) >> 2] | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($5_1 + 384 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 40 | 0) >> 2] = Math_imul((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0, 2217);
    HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, -7567) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 36 | 0) >> 2] | 0, 3135) | 0;
    HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 124 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 56 | 0) >> 2] = ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) << 12 | 0;
    HEAP32[($5_1 + 52 | 0) >> 2] = ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) - (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) << 12 | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) - (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
    HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = Math_imul((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0, 4816);
    HEAP32[($5_1 + 56 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 56 | 0) >> 2] | 0, 1223);
    HEAP32[($5_1 + 52 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 52 | 0) >> 2] | 0, 8410);
    HEAP32[($5_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 48 | 0) >> 2] | 0, 12586);
    HEAP32[($5_1 + 44 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 44 | 0) >> 2] | 0, 6149);
    HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, -3685) | 0;
    HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 36 | 0) >> 2] | 0, -10497) | 0;
    HEAP32[($5_1 + 32 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, -8034);
    HEAP32[($5_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, -1597);
    HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[($5_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 16842752 | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 16842752 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16842752 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 16842752 | 0;
    $427_1 = $361(((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0) >> 17 | 0 | 0) | 0;
    HEAP8[(HEAP32[($5_1 + 120 | 0) >> 2] | 0) >> 0] = $427_1;
    $434_1 = $361(((HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0) >> 17 | 0 | 0) | 0;
    HEAP8[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 7 | 0) >> 0] = $434_1;
    $441_1 = $361(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0) >> 17 | 0 | 0) | 0;
    HEAP8[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 1 | 0) >> 0] = $441_1;
    $448_1 = $361(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) - (HEAP32[($5_1 + 48 | 0) >> 2] | 0) | 0) >> 17 | 0 | 0) | 0;
    HEAP8[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 6 | 0) >> 0] = $448_1;
    $455_1 = $361(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($5_1 + 52 | 0) >> 2] | 0) | 0) >> 17 | 0 | 0) | 0;
    HEAP8[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 2 | 0) >> 0] = $455_1;
    $462_1 = $361(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 52 | 0) >> 2] | 0) | 0) >> 17 | 0 | 0) | 0;
    HEAP8[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 5 | 0) >> 0] = $462_1;
    $469_1 = $361(((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) >> 17 | 0 | 0) | 0;
    HEAP8[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 3 | 0) >> 0] = $469_1;
    $476_1 = $361(((HEAP32[($5_1 + 8 | 0) >> 2] | 0) - (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) >> 17 | 0 | 0) | 0;
    HEAP8[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + 4 | 0) >> 0] = $476_1;
    HEAP32[($5_1 + 384 | 0) >> 2] = (HEAP32[($5_1 + 384 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($5_1 + 124 | 0) >> 2] = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 32 | 0;
    HEAP32[($5_1 + 120 | 0) >> 2] = (HEAP32[($5_1 + 120 | 0) >> 2] | 0) + (HEAP32[($5_1 + 392 | 0) >> 2] | 0) | 0;
    continue label$6;
   };
  }
  global$0 = $5_1 + 400 | 0;
  return;
 }
 
 function $356($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 64 | 0;
  HEAP32[($8_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($8_1 + 32 | 0) >> 2] = (((HEAPU8[((HEAP32[($8_1 + 56 | 0) >> 2] | 0) + (HEAP32[($8_1 + 36 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) << 20 | 0) + 524288 | 0;
    HEAP32[($8_1 + 16 | 0) >> 2] = ((HEAPU8[((HEAP32[($8_1 + 48 | 0) >> 2] | 0) + (HEAP32[($8_1 + 36 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - 128 | 0;
    HEAP32[($8_1 + 12 | 0) >> 2] = ((HEAPU8[((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + (HEAP32[($8_1 + 36 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - 128 | 0;
    HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($8_1 + 16 | 0) >> 2] | 0, 1470208) | 0;
    HEAP32[($8_1 + 24 | 0) >> 2] = ((HEAP32[($8_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($8_1 + 16 | 0) >> 2] | 0, -748800) | 0) + (Math_imul(HEAP32[($8_1 + 12 | 0) >> 2] | 0, -360960) & -65536 | 0) | 0;
    HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($8_1 + 12 | 0) >> 2] | 0, 1858048) | 0;
    HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) >> 20 | 0;
    HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 24 | 0) >> 2] | 0) >> 20 | 0;
    HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) >> 20 | 0;
    label$3 : {
     if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0) >>> 0 > 255 >>> 0 & 1 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($8_1 + 28 | 0) >> 2] = 0;
       break label$4;
      }
      HEAP32[($8_1 + 28 | 0) >> 2] = 255;
     }
    }
    label$6 : {
     if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0) >>> 0 > 255 >>> 0 & 1 | 0)) {
      break label$6
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = 0;
       break label$7;
      }
      HEAP32[($8_1 + 24 | 0) >> 2] = 255;
     }
    }
    label$9 : {
     if (!((HEAP32[($8_1 + 20 | 0) >> 2] | 0) >>> 0 > 255 >>> 0 & 1 | 0)) {
      break label$9
     }
     label$10 : {
      label$11 : {
       if (!((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($8_1 + 20 | 0) >> 2] = 0;
       break label$10;
      }
      HEAP32[($8_1 + 20 | 0) >> 2] = 255;
     }
    }
    HEAP8[(HEAP32[($8_1 + 60 | 0) >> 2] | 0) >> 0] = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
    HEAP8[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
    HEAP8[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
    HEAP8[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 3 | 0) >> 0] = 255;
    HEAP32[($8_1 + 60 | 0) >> 2] = (HEAP32[($8_1 + 60 | 0) >> 2] | 0) + (HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0;
    HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $357($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $29_1 = 0;
  $7_1 = global$0 - 48 | 0;
  HEAP32[($7_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    $29_1 = ((Math_imul((HEAPU8[(HEAP32[($7_1 + 36 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0, 3) + ((HEAPU8[(HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) | 0) + 2 | 0) >> 2 | 0;
    HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0) >> 0] = $29_1;
    HEAP8[(HEAP32[($7_1 + 40 | 0) >> 2] | 0) >> 0] = $29_1;
    HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($7_1 + 12 | 0) >> 2] = Math_imul((HEAPU8[(HEAP32[($7_1 + 36 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0, 3) + ((HEAPU8[(HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) | 0;
   HEAP8[(HEAP32[($7_1 + 40 | 0) >> 2] | 0) >> 0] = ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 2 | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = 1;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = Math_imul((HEAPU8[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0, 3) + ((HEAPU8[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) | 0;
     HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 1 | 0) - 1 | 0) | 0) >> 0] = ((Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, 3) + (HEAP32[($7_1 + 12 | 0) >> 2] | 0) | 0) + 8 | 0) >> 4 | 0;
     HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 1 | 0) | 0) >> 0] = ((Math_imul(HEAP32[($7_1 + 12 | 0) >> 2] | 0, 3) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + 8 | 0) >> 4 | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 28 | 0) >> 2] | 0) << 1 | 0) - 1 | 0) | 0) >> 0] = ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 2 | 0;
   HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
  }
  return HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0;
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $47_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!(((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) != (255 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[($3_1 + 7 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0;
    HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18116 | 0) >> 0] = 255;
    HEAP8[($3_1 + 15 | 0) >> 0] = HEAPU8[($3_1 + 7 | 0) >> 0] | 0;
    break label$1;
   }
   HEAP8[($3_1 + 7 | 0) >> 0] = $337(HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    if (!(((HEAPU8[($3_1 + 7 | 0) >> 0] | 0) & 255 | 0 | 0) != (255 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP8[($3_1 + 15 | 0) >> 0] = 255;
    break label$1;
   }
   label$4 : {
    label$5 : while (1) {
     if (!(((HEAPU8[($3_1 + 7 | 0) >> 0] | 0) & 255 | 0 | 0) == (255 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP8[($3_1 + 7 | 0) >> 0] = $337(HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = HEAPU8[($3_1 + 7 | 0) >> 0] | 0;
  }
  $47_1 = (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $47_1 | 0;
 }
 
 function $359($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $29_1 = 0, $77_1 = 0, $155_1 = 0, $232_1 = 0, $294_1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 136 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 132 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 132 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($5_1 | 0) == (196 | 0)) {
      break label$3
     }
     label$4 : {
      if (($5_1 | 0) == (219 | 0)) {
       break label$4
      }
      label$5 : {
       if (($5_1 | 0) == (221 | 0)) {
        break label$5
       }
       if (($5_1 | 0) != (255 | 0)) {
        break label$2
       }
       HEAP32[($4_1 + 140 | 0) >> 2] = $293(2264 | 0) | 0;
       break label$1;
      }
      label$6 : {
       if (!(($348(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0 | 0) != (4 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[($4_1 + 140 | 0) >> 2] = $293(2628 | 0) | 0;
       break label$1;
      }
      $29_1 = $348(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
      HEAP32[((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 18168 | 0) >> 2] = $29_1;
      HEAP32[($4_1 + 140 | 0) >> 2] = 1;
      break label$1;
     }
     HEAP32[($4_1 + 128 | 0) >> 2] = ($348(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) - 2 | 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$7
       }
       HEAP32[($4_1 + 124 | 0) >> 2] = ($337(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
       HEAP32[($4_1 + 120 | 0) >> 2] = (HEAP32[($4_1 + 124 | 0) >> 2] | 0) >> 4 | 0;
       HEAP32[($4_1 + 116 | 0) >> 2] = (HEAP32[($4_1 + 124 | 0) >> 2] | 0) & 15 | 0;
       label$9 : {
        if (!(HEAP32[($4_1 + 120 | 0) >> 2] | 0)) {
         break label$9
        }
        HEAP32[($4_1 + 140 | 0) >> 2] = $293(3250 | 0) | 0;
        break label$1;
       }
       label$10 : {
        if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0)) {
         break label$10
        }
        HEAP32[($4_1 + 140 | 0) >> 2] = $293(3337 | 0) | 0;
        break label$1;
       }
       HEAP32[($4_1 + 112 | 0) >> 2] = 0;
       label$11 : {
        label$12 : while (1) {
         if (!((HEAP32[($4_1 + 112 | 0) >> 2] | 0 | 0) < (64 | 0) & 1 | 0)) {
          break label$11
         }
         $77_1 = $337(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
         HEAP8[((((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 13444 | 0) + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 6 | 0) | 0) + ((HEAPU8[((HEAP32[($4_1 + 112 | 0) >> 2] | 0) + 20592 | 0) >> 0] | 0) & 255 | 0) | 0) >> 0] = $77_1;
         HEAP32[($4_1 + 112 | 0) >> 2] = (HEAP32[($4_1 + 112 | 0) >> 2] | 0) + 1 | 0;
         continue label$12;
        };
       }
       HEAP32[($4_1 + 128 | 0) >> 2] = (HEAP32[($4_1 + 128 | 0) >> 2] | 0) - 65 | 0;
       continue label$8;
      };
     }
     HEAP32[($4_1 + 140 | 0) >> 2] = (HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0;
     break label$1;
    }
    HEAP32[($4_1 + 128 | 0) >> 2] = ($348(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) - 2 | 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[($4_1 + 24 | 0) >> 2] = 0;
      HEAP32[($4_1 + 20 | 0) >> 2] = ($337(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 4 | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) & 15 | 0;
      label$15 : {
       label$16 : {
        if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0) {
         break label$16
        }
        if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0)) {
         break label$15
        }
       }
       HEAP32[($4_1 + 140 | 0) >> 2] = $293(2313 | 0) | 0;
       break label$1;
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      label$17 : {
       label$18 : while (1) {
        if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
         break label$17
        }
        $155_1 = ($337(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
        HEAP32[(($4_1 + 32 | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $155_1;
        HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + (HEAP32[(($4_1 + 32 | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
        HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$18;
       };
      }
      HEAP32[($4_1 + 128 | 0) >> 2] = (HEAP32[($4_1 + 128 | 0) >> 2] | 0) - 17 | 0;
      label$19 : {
       label$20 : {
        if (HEAP32[($4_1 + 16 | 0) >> 2] | 0) {
         break label$20
        }
        label$21 : {
         if ($362(((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 4 | 0) + Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, 1680) | 0 | 0, $4_1 + 32 | 0 | 0) | 0) {
          break label$21
         }
         HEAP32[($4_1 + 140 | 0) >> 2] = 0;
         break label$1;
        }
        HEAP32[($4_1 + 108 | 0) >> 2] = (((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 4 | 0) + Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, 1680) | 0) + 1024 | 0;
        break label$19;
       }
       label$22 : {
        if ($362(((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 6724 | 0) + Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, 1680) | 0 | 0, $4_1 + 32 | 0 | 0) | 0) {
         break label$22
        }
        HEAP32[($4_1 + 140 | 0) >> 2] = 0;
        break label$1;
       }
       HEAP32[($4_1 + 108 | 0) >> 2] = (((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 6724 | 0) + Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, 1680) | 0) + 1024 | 0;
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      label$23 : {
       label$24 : while (1) {
        if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$23
        }
        $232_1 = $337(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
        HEAP8[((HEAP32[($4_1 + 108 | 0) >> 2] | 0) + (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $232_1;
        HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$24;
       };
      }
      label$25 : {
       if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
        break label$25
       }
       $363(((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 13700 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 10 | 0) | 0 | 0, ((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 6724 | 0) + Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, 1680) | 0 | 0);
      }
      HEAP32[($4_1 + 128 | 0) >> 2] = (HEAP32[($4_1 + 128 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
      continue label$14;
     };
    }
    HEAP32[($4_1 + 140 | 0) >> 2] = (HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0;
    break label$1;
   }
   label$26 : {
    label$27 : {
     label$28 : {
      if (!((HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) >= (224 | 0) & 1 | 0)) {
       break label$28
      }
      if ((HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) <= (239 | 0) & 1 | 0) {
       break label$27
      }
     }
     if (!((HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) == (254 | 0) & 1 | 0)) {
      break label$26
     }
    }
    $340(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0, ($348(HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) - 2 | 0 | 0);
    HEAP32[($4_1 + 140 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($4_1 + 140 | 0) >> 2] = 0;
  }
  $294_1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
  global$0 = $4_1 + 144 | 0;
  return $294_1 | 0;
 }
 
 function $360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $34_1 = 0, $41_1 = 0, $122_1 = 0, $237_1 = 0, $488_1 = 0, $631_1 = 0, $678_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 40 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 1;
  HEAP32[($4_1 + 8 | 0) >> 2] = 1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $348(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (11 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = $293(2640 | 0) | 0;
    break label$1;
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = ($337(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   label$3 : {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (8 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = $293(1837 | 0) | 0;
    break label$1;
   }
   $34_1 = $348(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] = $34_1;
   label$4 : {
    if (HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) {
     break label$4
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = $293(1848 | 0) | 0;
    break label$1;
   }
   $41_1 = $348(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 2] = $41_1;
   label$5 : {
    if (HEAP32[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 2] | 0) {
     break label$5
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = $293(2809 | 0) | 0;
    break label$1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = ($337(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   label$6 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = $293(1730 | 0) | 0;
    break label$1;
   }
   HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 44 | 0) >> 2] = 0;
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 56 | 0) >> 2] = 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   label$9 : {
    if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != (Math_imul(HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, 3) + 8 | 0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = $293(2640 | 0) | 0;
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   label$10 : {
    label$11 : while (1) {
     if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$10
     }
     $122_1 = ($337(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
     HEAP32[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) >> 2] = $122_1;
     label$12 : {
      if (!((HEAP32[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) >> 2] | 0 | 0) != ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
       break label$12
      }
      label$13 : {
       if (!((HEAP32[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$13
       }
       HEAP32[($4_1 + 44 | 0) >> 2] = $293(4047 | 0) | 0;
       break label$1;
      }
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = ($337(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 4 | 0;
     label$14 : {
      label$15 : {
       if (!(HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0)) {
        break label$15
       }
       if (!((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
        break label$14
       }
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = $293(3952 | 0) | 0;
      break label$1;
     }
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) & 15 | 0;
     label$16 : {
      label$17 : {
       if (!(HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0)) {
        break label$17
       }
       if (!((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
        break label$16
       }
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = $293(3792 | 0) | 0;
      break label$1;
     }
     $237_1 = ($337(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 12 | 0) >> 2] = $237_1;
     label$18 : {
      if (!((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 12 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0)) {
       break label$18
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = $293(3881 | 0) | 0;
      break label$1;
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$11;
    };
   }
   label$19 : {
    if (!(HEAP32[($4_1 + 36 | 0) >> 2] | 0)) {
     break label$19
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = 1;
    break label$1;
   }
   label$20 : {
    if (!(((((1073741824 >>> 0) / ((HEAP32[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 2] | 0) >>> 0) | 0) >>> 0) / ((HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0) | 0) >>> 0 < (HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$20
    }
    HEAP32[($4_1 + 44 | 0) >> 2] = $293(3351 | 0) | 0;
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   label$21 : {
    label$22 : while (1) {
     if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$21
     }
     label$23 : {
      if (!((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$23
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0;
     }
     label$24 : {
      if (!((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$24
      }
      HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0;
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$22;
    };
   }
   HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17796 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17800 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17812 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 3 | 0;
   HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17816 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0;
   HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17804 | 0) >> 2] = ((((HEAP32[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17812 | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) / ((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17812 | 0) >> 2] | 0) >>> 0) | 0;
   HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17808 | 0) >> 2] = ((((HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17816 | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) / ((HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17816 | 0) >> 2] | 0) >>> 0) | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   label$25 : {
    label$26 : while (1) {
     if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$25
     }
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 28 | 0) >> 2] = (((Math_imul(HEAP32[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 2] | 0, HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) / ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) | 0;
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 32 | 0) >> 2] = (((Math_imul(HEAP32[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) / ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0) | 0;
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] = Math_imul(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17804 | 0) >> 2] | 0, HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0) << 3 | 0;
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 40 | 0) >> 2] = Math_imul(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17808 | 0) >> 2] | 0, HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0) << 3 | 0;
     $488_1 = $306(Math_imul(HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0, HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 40 | 0) >> 2] | 0) + 15 | 0 | 0) | 0;
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] = $488_1;
     label$27 : {
      if (!((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$27
      }
      HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0;
      label$28 : {
       label$29 : while (1) {
        if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$28
        }
        $2005(HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] | 0 | 0);
        HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] = 0;
        HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0;
        continue label$29;
       };
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = $293(2677 | 0) | 0;
      break label$1;
     }
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 44 | 0) >> 2] = ((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] | 0) + 15 | 0) & -16 | 0;
     HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 56 | 0) >> 2] = 0;
     label$30 : {
      label$31 : {
       if (!(HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 18124 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 64 | 0) >> 2] = ((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
       HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 68 | 0) >> 2] = ((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 40 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
       $631_1 = $2004(((Math_imul(HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 64 | 0) >> 2] | 0, HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 68 | 0) >> 2] | 0) << 6 | 0) << 1 | 0) + 15 | 0 | 0) | 0;
       HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 52 | 0) >> 2] = $631_1;
       HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 60 | 0) >> 2] = ((HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 52 | 0) >> 2] | 0) + 15 | 0) & -16 | 0;
       break label$30;
      }
      HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 60 | 0) >> 2] = 0;
      HEAP32[((((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 72) | 0) + 52 | 0) >> 2] = 0;
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$26;
    };
   }
   HEAP32[($4_1 + 44 | 0) >> 2] = 1;
  }
  $678_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $678_1 | 0;
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 > 255 >>> 0 & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP8[($3_1 + 15 | 0) >> 0] = 0;
     break label$1;
    }
    label$4 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) > (255 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP8[($3_1 + 15 | 0) >> 0] = 255;
     break label$1;
    }
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0 | 0;
 }
 
 function $362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $33_1 = 0, $97_1 = 0, $103_1 = 0, $29_1 = 0, $32_1 = 0, $102_1 = 0, $214_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 32 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $29_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      $32_1 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1280 | 0;
      $33_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      HEAP32[($4_1 + 24 | 0) >> 2] = $33_1 + 1 | 0;
      HEAP8[($32_1 + $33_1 | 0) >> 0] = $29_1;
      HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP8[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1280 | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0) >> 0] = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = 1;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) <= (16 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1612 | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) - (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0;
     label$8 : {
      if (!(((HEAPU8[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1280 | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      label$9 : {
       label$10 : while (1) {
        if (!(((HEAPU8[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1280 | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$9
        }
        $97_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
        HEAP32[($4_1 + 20 | 0) >> 2] = $97_1 + 1 | 0;
        $102_1 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 512 | 0;
        $103_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
        HEAP32[($4_1 + 24 | 0) >> 2] = $103_1 + 1 | 0;
        HEAP16[($102_1 + ($103_1 << 1 | 0) | 0) >> 1] = $97_1;
        continue label$10;
       };
      }
      label$11 : {
       if (!(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - 1 | 0 | 0) >= (1 << (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($4_1 + 44 | 0) >> 2] = $293(2059 | 0) | 0;
       break label$5;
      }
     }
     HEAP32[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1540 | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) << (16 - (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 1 | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1540 | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
   $2015(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, 255 | 0, 512 | 0) | 0;
   HEAP32[($4_1 + 32 | 0) >> 2] = 0;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAPU8[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1280 | 0) + (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0;
     label$14 : {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) <= (9 | 0) & 1 | 0)) {
       break label$14
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = ((HEAPU16[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 512 | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) << (9 - (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = 1 << (9 - (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      label$15 : {
       label$16 : while (1) {
        if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP8[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0) | 0) >> 0] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
        HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$16;
       };
      }
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
   HEAP32[($4_1 + 44 | 0) >> 2] = 1;
  }
  $214_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $214_1 | 0;
 }
 
 function $363($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 48 | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) < (512 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP8[($4_1 + 35 | 0) >> 0] = HEAPU8[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + (HEAP32[($4_1 + 36 | 0) >> 2] | 0) | 0) >> 0] | 0;
    HEAP16[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
    label$3 : {
     if (!(((HEAPU8[($4_1 + 35 | 0) >> 0] | 0) & 255 | 0 | 0) < (255 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = (HEAPU8[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1024 | 0) + ((HEAPU8[($4_1 + 35 | 0) >> 0] | 0) & 255 | 0) | 0) >> 0] | 0) & 255 | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 4 | 0) & 15 | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) & 15 | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAPU8[(((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1280 | 0) + ((HEAPU8[($4_1 + 35 | 0) >> 0] | 0) & 255 | 0) | 0) >> 0] | 0) & 255 | 0;
     label$4 : {
      if (!(HEAP32[($4_1 + 20 | 0) >> 2] | 0)) {
       break label$4
      }
      if (!(((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0 | 0) <= (9 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = (((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0) & 511 | 0) >> (9 - (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = 1 << ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - 1 | 0) | 0;
      label$5 : {
       if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((-1 << (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0) + 1 | 0) | 0;
      }
      label$6 : {
       if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) >= (-128 | 0) & 1 | 0)) {
        break label$6
       }
       if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) <= (127 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP16[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = (((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 8 | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 4 | 0) | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0) | 0;
      }
     }
    }
    HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $98_1 = 0, $115_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[((((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] = 0;
    HEAP32[((((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 72) | 0) + 52 | 0) >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18168 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    if ($332(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$4
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = ($358(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   label$5 : {
    label$6 : while (1) {
     if (!(((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (217 | 0) ^ -1 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (218 | 0) & 1 | 0)) {
        break label$8
       }
       label$9 : {
        if ($370(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
         break label$9
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 0;
        break label$3;
       }
       label$10 : {
        if ($371(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
         break label$10
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 0;
        break label$3;
       }
       label$11 : {
        if (!(((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) == (255 | 0) & 1 | 0)) {
         break label$11
        }
        label$12 : {
         label$13 : while (1) {
          if (!((($350(HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
           break label$12
          }
          HEAP32[$3_1 >> 2] = ($337(HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          label$14 : {
           if (!((HEAP32[$3_1 >> 2] | 0 | 0) == (255 | 0) & 1 | 0)) {
            break label$14
           }
           $98_1 = $337(HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
           HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18116 | 0) >> 0] = $98_1;
           break label$12;
          }
          label$15 : {
           if (!(HEAP32[$3_1 >> 2] | 0)) {
            break label$15
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $293(2245 | 0) | 0;
           break label$3;
          }
          continue label$13;
         };
        }
       }
       break label$7;
      }
      label$16 : {
       if ($359(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) {
        break label$16
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = 0;
       break label$3;
      }
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = ($358(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
     continue label$6;
    };
   }
   label$17 : {
    if (!(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18124 | 0) >> 2] | 0)) {
     break label$17
    }
    $372(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  }
  $115_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $115_1 | 0;
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $2005(HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] | 0 | 0);
     HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 48 | 0) >> 2] = 0;
     HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 44 | 0) >> 2] = 0;
    }
    label$4 : {
     if (!((HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $2005(HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 52 | 0) >> 2] | 0 | 0);
     HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 52 | 0) >> 2] = 0;
     HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 60 | 0) >> 2] = 0;
    }
    label$5 : {
     if (!((HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $2005(HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 56 | 0) >> 2] | 0 | 0);
     HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 56 | 0) >> 2] = 0;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $366($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $367($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP8[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = ((Math_imul((HEAPU8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0, 3) + ((HEAPU8[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) | 0) + 2 | 0) >> 2 | 0;
    HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $368($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $17_1 = 0;
  $7_1 = global$0 - 48 | 0;
  HEAP32[($7_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    $17_1 = HEAPU8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] | 0;
    HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0) >> 0] = $17_1;
    HEAP8[(HEAP32[($7_1 + 40 | 0) >> 2] | 0) >> 0] = $17_1;
    HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP8[(HEAP32[($7_1 + 40 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] | 0;
   HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0) >> 0] = ((Math_imul((HEAPU8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0, 3) + ((HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0) | 0) + 2 | 0) >> 2 | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = 1;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($7_1 + 12 | 0) >> 2] = Math_imul((HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0, 3) + 2 | 0;
     HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 1 | 0) + 0 | 0) | 0) >> 0] = ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) & 255 | 0) | 0) >> 2 | 0;
     HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) | 0) >> 0] = ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0) & 255 | 0) | 0) >> 2 | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 1 | 0) + 0 | 0) | 0) >> 0] = ((Math_imul((HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 2 | 0) | 0) >> 0] | 0) & 255 | 0, 3) + ((HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) & 255 | 0) | 0) + 2 | 0) >> 2 | 0;
   HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 28 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0;
   HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
  }
  return HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0;
 }
 
 function $369($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP8[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0) | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $178_1 = 0, $184_1 = 0, $257_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $348(HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  $11_1 = ($337(HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18148 | 0) >> 2] = $11_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0) {
      break label$3
     }
     if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0 | 0) > (HEAP32[((HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = $293(1750 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) != (((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0) << 1 | 0) + 6 | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = $293(2590 | 0) | 0;
    break label$1;
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = ($337(HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = ($337(HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       label$9 : {
        if (!((HEAP32[(((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$9
        }
        break label$7;
       }
       HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      };
     }
     label$10 : {
      if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 16 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 4 | 0;
     label$11 : {
      if (!((HEAP32[((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 16 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = $293(3030 | 0) | 0;
      break label$1;
     }
     HEAP32[((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 20 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & 15 | 0;
     label$12 : {
      if (!((HEAP32[((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 72) | 0) + 20 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0)) {
       break label$12
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = $293(3042 | 0) | 0;
      break label$1;
     }
     HEAP32[(((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18152 | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $178_1 = ($337(HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18128 | 0) >> 2] = $178_1;
   $184_1 = ($337(HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18132 | 0) >> 2] = $184_1;
   HEAP32[$3_1 >> 2] = ($337(HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18136 | 0) >> 2] = (HEAP32[$3_1 >> 2] | 0) >> 4 | 0;
   HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18140 | 0) >> 2] = (HEAP32[$3_1 >> 2] | 0) & 15 | 0;
   label$13 : {
    label$14 : {
     if (!(HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18124 | 0) >> 2] | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : {
       if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18128 | 0) >> 2] | 0 | 0) > (63 | 0) & 1 | 0) {
        break label$16
       }
       if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18132 | 0) >> 2] | 0 | 0) > (63 | 0) & 1 | 0) {
        break label$16
       }
       if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18128 | 0) >> 2] | 0 | 0) > (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18132 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$16
       }
       if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18136 | 0) >> 2] | 0 | 0) > (13 | 0) & 1 | 0) {
        break label$16
       }
       if (!((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18140 | 0) >> 2] | 0 | 0) > (13 | 0) & 1 | 0)) {
        break label$15
       }
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = $293(3827 | 0) | 0;
      break label$1;
     }
     break label$13;
    }
    label$17 : {
     if (!(HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18128 | 0) >> 2] | 0)) {
      break label$17
     }
     HEAP32[($3_1 + 28 | 0) >> 2] = $293(3827 | 0) | 0;
     break label$1;
    }
    label$18 : {
     label$19 : {
      if (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18136 | 0) >> 2] | 0) {
       break label$19
      }
      if (!(HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18140 | 0) >> 2] | 0)) {
       break label$18
      }
     }
     HEAP32[($3_1 + 28 | 0) >> 2] = $293(3827 | 0) | 0;
     break label$1;
    }
    HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 18132 | 0) >> 2] = 63;
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = 1;
  }
  $257_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $257_1 | 0;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $152_1 = 0, $155_1 = 0, $393_1 = 0, $396_1 = 0, $563_1 = 0, $566_1 = 0, $753_1 = 0, $756_1 = 0, $801_1 = 0;
  $3_1 = global$0 - 400 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 392 | 0) >> 2] = $0_1;
  $373(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : {
    if (HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18124 | 0) >> 2] | 0) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 252 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18152 | 0) >> 2] | 0;
     HEAP32[($3_1 + 248 | 0) >> 2] = ((HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 252 | 0) >> 2] | 0, 72) | 0) + 28 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
     HEAP32[($3_1 + 244 | 0) >> 2] = ((HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 252 | 0) >> 2] | 0, 72) | 0) + 32 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
     HEAP32[($3_1 + 384 | 0) >> 2] = 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($3_1 + 384 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 388 | 0) >> 2] = 0;
       label$6 : {
        label$7 : while (1) {
         if (!((HEAP32[($3_1 + 388 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 248 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$6
         }
         HEAP32[($3_1 + 240 | 0) >> 2] = HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 252 | 0) >> 2] | 0, 72) | 0) + 20 | 0) >> 2] | 0;
         label$8 : {
          if ($374(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0, $3_1 + 256 | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 4 | 0) + Math_imul(HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 252 | 0) >> 2] | 0, 72) | 0) + 16 | 0) >> 2] | 0, 1680) | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 6724 | 0) + Math_imul(HEAP32[($3_1 + 240 | 0) >> 2] | 0, 1680) | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 13700 | 0) + ((HEAP32[($3_1 + 240 | 0) >> 2] | 0) << 10 | 0) | 0 | 0, HEAP32[($3_1 + 252 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 13444 | 0) + ((HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 252 | 0) >> 2] | 0, 72) | 0) + 12 | 0) >> 2] | 0) << 6 | 0) | 0 | 0) | 0) {
           break label$8
          }
          HEAP32[($3_1 + 396 | 0) >> 2] = 0;
          break label$1;
         }
         FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18176 | 0) >> 2] | 0 | 0](((HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 252 | 0) >> 2] | 0, 72) | 0) + 44 | 0) >> 2] | 0) + (Math_imul(HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 252 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0, HEAP32[($3_1 + 384 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($3_1 + 388 | 0) >> 2] | 0) << 3 | 0) | 0, HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 252 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0, $3_1 + 256 | 0);
         $152_1 = HEAP32[($3_1 + 392 | 0) >> 2] | 0;
         $155_1 = (HEAP32[($152_1 + 18172 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($152_1 + 18172 | 0) >> 2] = $155_1;
         label$9 : {
          if (!(($155_1 | 0) <= (0 | 0) & 1 | 0)) {
           break label$9
          }
          label$10 : {
           if (!((HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (24 | 0) & 1 | 0)) {
            break label$10
           }
           $375(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
          }
          label$11 : {
           label$12 : {
            if (!(((HEAPU8[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) >= (208 | 0) & 1 | 0)) {
             break label$12
            }
            if (((HEAPU8[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) <= (215 | 0) & 1 | 0) {
             break label$11
            }
           }
           HEAP32[($3_1 + 396 | 0) >> 2] = 1;
           break label$1;
          }
          $373(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
         }
         HEAP32[($3_1 + 388 | 0) >> 2] = (HEAP32[($3_1 + 388 | 0) >> 2] | 0) + 1 | 0;
         continue label$7;
        };
       }
       HEAP32[($3_1 + 384 | 0) >> 2] = (HEAP32[($3_1 + 384 | 0) >> 2] | 0) + 1 | 0;
       continue label$5;
      };
     }
     HEAP32[($3_1 + 396 | 0) >> 2] = 1;
     break label$1;
    }
    HEAP32[($3_1 + 232 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($3_1 + 232 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17808 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[($3_1 + 236 | 0) >> 2] = 0;
      label$15 : {
       label$16 : while (1) {
        if (!((HEAP32[($3_1 + 236 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17804 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[($3_1 + 228 | 0) >> 2] = 0;
        label$17 : {
         label$18 : while (1) {
          if (!((HEAP32[($3_1 + 228 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$17
          }
          HEAP32[($3_1 + 76 | 0) >> 2] = HEAP32[(((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18152 | 0) + ((HEAP32[($3_1 + 228 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
          HEAP32[($3_1 + 220 | 0) >> 2] = 0;
          label$19 : {
           label$20 : while (1) {
            if (!((HEAP32[($3_1 + 220 | 0) >> 2] | 0 | 0) < (HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$19
            }
            HEAP32[($3_1 + 224 | 0) >> 2] = 0;
            label$21 : {
             label$22 : while (1) {
              if (!((HEAP32[($3_1 + 224 | 0) >> 2] | 0 | 0) < (HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$21
              }
              HEAP32[($3_1 + 72 | 0) >> 2] = (Math_imul(HEAP32[($3_1 + 236 | 0) >> 2] | 0, HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($3_1 + 224 | 0) >> 2] | 0) | 0) << 3 | 0;
              HEAP32[($3_1 + 68 | 0) >> 2] = (Math_imul(HEAP32[($3_1 + 232 | 0) >> 2] | 0, HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0) + (HEAP32[($3_1 + 220 | 0) >> 2] | 0) | 0) << 3 | 0;
              HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 20 | 0) >> 2] | 0;
              label$23 : {
               if ($374(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0, $3_1 + 80 | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 4 | 0) + Math_imul(HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 16 | 0) >> 2] | 0, 1680) | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 6724 | 0) + Math_imul(HEAP32[($3_1 + 64 | 0) >> 2] | 0, 1680) | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 13700 | 0) + ((HEAP32[($3_1 + 64 | 0) >> 2] | 0) << 10 | 0) | 0 | 0, HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 13444 | 0) + ((HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 12 | 0) >> 2] | 0) << 6 | 0) | 0 | 0) | 0) {
                break label$23
               }
               HEAP32[($3_1 + 396 | 0) >> 2] = 0;
               break label$1;
              }
              FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18176 | 0) >> 2] | 0 | 0](((HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 44 | 0) >> 2] | 0) + Math_imul(HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0, HEAP32[($3_1 + 68 | 0) >> 2] | 0) | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0, HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 76 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0, $3_1 + 80 | 0);
              HEAP32[($3_1 + 224 | 0) >> 2] = (HEAP32[($3_1 + 224 | 0) >> 2] | 0) + 1 | 0;
              continue label$22;
             };
            }
            HEAP32[($3_1 + 220 | 0) >> 2] = (HEAP32[($3_1 + 220 | 0) >> 2] | 0) + 1 | 0;
            continue label$20;
           };
          }
          HEAP32[($3_1 + 228 | 0) >> 2] = (HEAP32[($3_1 + 228 | 0) >> 2] | 0) + 1 | 0;
          continue label$18;
         };
        }
        $393_1 = HEAP32[($3_1 + 392 | 0) >> 2] | 0;
        $396_1 = (HEAP32[($393_1 + 18172 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($393_1 + 18172 | 0) >> 2] = $396_1;
        label$24 : {
         if (!(($396_1 | 0) <= (0 | 0) & 1 | 0)) {
          break label$24
         }
         label$25 : {
          if (!((HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (24 | 0) & 1 | 0)) {
           break label$25
          }
          $375(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
         }
         label$26 : {
          label$27 : {
           if (!(((HEAPU8[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) >= (208 | 0) & 1 | 0)) {
            break label$27
           }
           if (((HEAPU8[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) <= (215 | 0) & 1 | 0) {
            break label$26
           }
          }
          HEAP32[($3_1 + 396 | 0) >> 2] = 1;
          break label$1;
         }
         $373(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
        }
        HEAP32[($3_1 + 236 | 0) >> 2] = (HEAP32[($3_1 + 236 | 0) >> 2] | 0) + 1 | 0;
        continue label$16;
       };
      }
      HEAP32[($3_1 + 232 | 0) >> 2] = (HEAP32[($3_1 + 232 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    HEAP32[($3_1 + 396 | 0) >> 2] = 1;
    break label$1;
   }
   label$28 : {
    if (!((HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$28
    }
    HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18152 | 0) >> 2] | 0;
    HEAP32[($3_1 + 48 | 0) >> 2] = ((HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 52 | 0) >> 2] | 0, 72) | 0) + 28 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
    HEAP32[($3_1 + 44 | 0) >> 2] = ((HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 52 | 0) >> 2] | 0, 72) | 0) + 32 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = 0;
    label$29 : {
     label$30 : while (1) {
      if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[($3_1 + 60 | 0) >> 2] = 0;
      label$31 : {
       label$32 : while (1) {
        if (!((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$31
        }
        HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 52 | 0) >> 2] | 0, 72) | 0) + 60 | 0) >> 2] | 0) + ((((HEAP32[($3_1 + 60 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 56 | 0) >> 2] | 0, HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 52 | 0) >> 2] | 0, 72) | 0) + 64 | 0) >> 2] | 0) | 0) << 6 | 0) << 1 | 0) | 0;
        label$33 : {
         label$34 : {
          if (HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18128 | 0) >> 2] | 0) {
           break label$34
          }
          label$35 : {
           if ($376(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 4 | 0) + Math_imul(HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 52 | 0) >> 2] | 0, 72) | 0) + 16 | 0) >> 2] | 0, 1680) | 0 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) | 0) {
            break label$35
           }
           HEAP32[($3_1 + 396 | 0) >> 2] = 0;
           break label$1;
          }
          break label$33;
         }
         HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 52 | 0) >> 2] | 0, 72) | 0) + 20 | 0) >> 2] | 0;
         label$36 : {
          if ($377(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 6724 | 0) + Math_imul(HEAP32[($3_1 + 36 | 0) >> 2] | 0, 1680) | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 13700 | 0) + ((HEAP32[($3_1 + 36 | 0) >> 2] | 0) << 10 | 0) | 0 | 0) | 0) {
           break label$36
          }
          HEAP32[($3_1 + 396 | 0) >> 2] = 0;
          break label$1;
         }
        }
        $563_1 = HEAP32[($3_1 + 392 | 0) >> 2] | 0;
        $566_1 = (HEAP32[($563_1 + 18172 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($563_1 + 18172 | 0) >> 2] = $566_1;
        label$37 : {
         if (!(($566_1 | 0) <= (0 | 0) & 1 | 0)) {
          break label$37
         }
         label$38 : {
          if (!((HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (24 | 0) & 1 | 0)) {
           break label$38
          }
          $375(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
         }
         label$39 : {
          label$40 : {
           if (!(((HEAPU8[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) >= (208 | 0) & 1 | 0)) {
            break label$40
           }
           if (((HEAPU8[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) <= (215 | 0) & 1 | 0) {
            break label$39
           }
          }
          HEAP32[($3_1 + 396 | 0) >> 2] = 1;
          break label$1;
         }
         $373(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
        }
        HEAP32[($3_1 + 60 | 0) >> 2] = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 1 | 0;
        continue label$32;
       };
      }
      HEAP32[($3_1 + 56 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      continue label$30;
     };
    }
    HEAP32[($3_1 + 396 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = 0;
   label$41 : {
    label$42 : while (1) {
     if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17808 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$41
     }
     HEAP32[($3_1 + 32 | 0) >> 2] = 0;
     label$43 : {
      label$44 : while (1) {
       if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17804 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$43
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = 0;
       label$45 : {
        label$46 : while (1) {
         if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18148 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$45
         }
         HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18152 | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
         HEAP32[($3_1 + 16 | 0) >> 2] = 0;
         label$47 : {
          label$48 : while (1) {
           if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$47
           }
           HEAP32[($3_1 + 20 | 0) >> 2] = 0;
           label$49 : {
            label$50 : while (1) {
             if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$49
             }
             HEAP32[($3_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($3_1 + 32 | 0) >> 2] | 0, HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 72) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($3_1 + 20 | 0) >> 2] | 0) | 0;
             HEAP32[($3_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($3_1 + 28 | 0) >> 2] | 0, HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 72) | 0) + 8 | 0) >> 2] | 0) + (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0;
             HEAP32[$3_1 >> 2] = (HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 72) | 0) + 60 | 0) >> 2] | 0) + ((((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 72) | 0) + 64 | 0) >> 2] | 0) | 0) << 6 | 0) << 1 | 0) | 0;
             label$51 : {
              if ($376(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0, ((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 4 | 0) + Math_imul(HEAP32[((((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 72) | 0) + 16 | 0) >> 2] | 0, 1680) | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
               break label$51
              }
              HEAP32[($3_1 + 396 | 0) >> 2] = 0;
              break label$1;
             }
             HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
             continue label$50;
            };
           }
           HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
           continue label$48;
          };
         }
         HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
         continue label$46;
        };
       }
       $753_1 = HEAP32[($3_1 + 392 | 0) >> 2] | 0;
       $756_1 = (HEAP32[($753_1 + 18172 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($753_1 + 18172 | 0) >> 2] = $756_1;
       label$52 : {
        if (!(($756_1 | 0) <= (0 | 0) & 1 | 0)) {
         break label$52
        }
        label$53 : {
         if (!((HEAP32[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (24 | 0) & 1 | 0)) {
          break label$53
         }
         $375(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
        }
        label$54 : {
         label$55 : {
          if (!(((HEAPU8[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) >= (208 | 0) & 1 | 0)) {
           break label$55
          }
          if (((HEAPU8[((HEAP32[($3_1 + 392 | 0) >> 2] | 0) + 18116 | 0) >> 0] | 0) & 255 | 0 | 0) <= (215 | 0) & 1 | 0) {
           break label$54
          }
         }
         HEAP32[($3_1 + 396 | 0) >> 2] = 1;
         break label$1;
        }
        $373(HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$44;
      };
     }
     HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$42;
    };
   }
   HEAP32[($3_1 + 396 | 0) >> 2] = 1;
  }
  $801_1 = HEAP32[($3_1 + 396 | 0) >> 2] | 0;
  global$0 = $3_1 + 400 | 0;
  return $801_1 | 0;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$1 : {
   if (!(HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 18124 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, 72) | 0) + 28 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, 72) | 0) + 32 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = 0;
       label$6 : {
        label$7 : while (1) {
         if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$6
         }
         HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, 72) | 0) + 60 | 0) >> 2] | 0) + ((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 20 | 0) >> 2] | 0, HEAP32[((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, 72) | 0) + 64 | 0) >> 2] | 0) | 0) << 6 | 0) << 1 | 0) | 0;
         $378(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 13444 | 0) + ((HEAP32[((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, 72) | 0) + 12 | 0) >> 2] | 0) << 6 | 0) | 0 | 0);
         FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 18176 | 0) >> 2] | 0 | 0](((HEAP32[((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, 72) | 0) + 44 | 0) >> 2] | 0) + (Math_imul(HEAP32[((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0, HEAP32[((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, 72) | 0) + 36 | 0) >> 2] | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0);
         HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
         continue label$7;
        };
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$5;
      };
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18112 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18120 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17988 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17916 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 17844 | 0) >> 2] = 0;
  HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18116 | 0) >> 0] = 255;
  label$1 : {
   label$2 : {
    if (!(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18168 | 0) >> 2] | 0)) {
     break label$2
    }
    $22_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18168 | 0) >> 2] | 0;
    break label$1;
   }
   $22_1 = 2147483647;
  }
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18172 | 0) >> 2] = $22_1;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18144 | 0) >> 2] = 0;
  return;
 }
 
 function $374($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $38_1 = 0, $88_1 = 0, $103_1 = 0, $107_1 = 0, $110_1 = 0, $163_1 = 0, $171_1 = 0, $192_1 = 0;
  $9_1 = global$0 - 80 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 64 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 60 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 52 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 48 | 0) >> 2] = $6_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
    break label$1
   }
   $375(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($9_1 + 32 | 0) >> 2] = $379(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 64 | 0) >> 2] | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($9_1 + 76 | 0) >> 2] = $293(3425 | 0) | 0;
    break label$2;
   }
   $2015(HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0, 0 | 0, 128 | 0) | 0;
   label$4 : {
    label$5 : {
     if (!(HEAP32[($9_1 + 32 | 0) >> 2] | 0)) {
      break label$5
     }
     $38_1 = $380(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) | 0;
     break label$4;
    }
    $38_1 = 0;
   }
   HEAP32[($9_1 + 44 | 0) >> 2] = $38_1;
   HEAP32[($9_1 + 40 | 0) >> 2] = (HEAP32[((((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($9_1 + 52 | 0) >> 2] | 0, 72) | 0) + 24 | 0) >> 2] | 0) + (HEAP32[($9_1 + 44 | 0) >> 2] | 0) | 0;
   HEAP32[((((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($9_1 + 52 | 0) >> 2] | 0, 72) | 0) + 24 | 0) >> 2] = HEAP32[($9_1 + 40 | 0) >> 2] | 0;
   HEAP16[(HEAP32[($9_1 + 68 | 0) >> 2] | 0) >> 1] = Math_imul(HEAP32[($9_1 + 40 | 0) >> 2] | 0, (HEAPU8[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0);
   HEAP32[($9_1 + 36 | 0) >> 2] = 1;
   label$6 : while (1) {
    label$7 : {
     if (!((HEAP32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
      break label$7
     }
     $375(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($9_1 + 24 | 0) >> 2] = ((HEAP32[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >>> 23 | 0) & 511 | 0;
    $88_1 = 16;
    HEAP32[($9_1 + 20 | 0) >> 2] = ((HEAPU16[((HEAP32[($9_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 24 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $88_1 | 0) >> $88_1 | 0;
    label$8 : {
     label$9 : {
      label$10 : {
       if (!(HEAP32[($9_1 + 20 | 0) >> 2] | 0)) {
        break label$10
       }
       HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 20 | 0) >> 2] | 0) >> 4 | 0) & 15 | 0) | 0;
       HEAP32[($9_1 + 16 | 0) >> 2] = (HEAP32[($9_1 + 20 | 0) >> 2] | 0) & 15 | 0;
       $103_1 = HEAP32[($9_1 + 72 | 0) >> 2] | 0;
       HEAP32[($103_1 + 18108 | 0) >> 2] = (HEAP32[($103_1 + 18108 | 0) >> 2] | 0) << (HEAP32[($9_1 + 16 | 0) >> 2] | 0) | 0;
       $107_1 = HEAP32[($9_1 + 72 | 0) >> 2] | 0;
       HEAP32[($107_1 + 18112 | 0) >> 2] = (HEAP32[($107_1 + 18112 | 0) >> 2] | 0) - (HEAP32[($9_1 + 16 | 0) >> 2] | 0) | 0;
       $110_1 = HEAP32[($9_1 + 36 | 0) >> 2] | 0;
       HEAP32[($9_1 + 36 | 0) >> 2] = $110_1 + 1 | 0;
       HEAP32[($9_1 + 28 | 0) >> 2] = (HEAPU8[($110_1 + 20592 | 0) >> 0] | 0) & 255 | 0;
       HEAP16[((HEAP32[($9_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 28 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = Math_imul((HEAP32[($9_1 + 20 | 0) >> 2] | 0) >> 8 | 0, (HEAPU8[((HEAP32[($9_1 + 48 | 0) >> 2] | 0) + (HEAP32[($9_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0);
       break label$9;
      }
      HEAP32[($9_1 + 12 | 0) >> 2] = $379(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) | 0;
      label$11 : {
       if (!((HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($9_1 + 76 | 0) >> 2] = $293(3425 | 0) | 0;
       break label$2;
      }
      HEAP32[($9_1 + 16 | 0) >> 2] = (HEAP32[($9_1 + 12 | 0) >> 2] | 0) & 15 | 0;
      HEAP32[($9_1 + 20 | 0) >> 2] = (HEAP32[($9_1 + 12 | 0) >> 2] | 0) >> 4 | 0;
      label$12 : {
       label$13 : {
        if (HEAP32[($9_1 + 16 | 0) >> 2] | 0) {
         break label$13
        }
        label$14 : {
         if (!((HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0) != (240 | 0) & 1 | 0)) {
          break label$14
         }
         break label$8;
        }
        HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 16 | 0;
        break label$12;
       }
       HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + (HEAP32[($9_1 + 20 | 0) >> 2] | 0) | 0;
       $163_1 = HEAP32[($9_1 + 36 | 0) >> 2] | 0;
       HEAP32[($9_1 + 36 | 0) >> 2] = $163_1 + 1 | 0;
       HEAP32[($9_1 + 28 | 0) >> 2] = (HEAPU8[($163_1 + 20592 | 0) >> 0] | 0) & 255 | 0;
       $171_1 = $380(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) | 0;
       HEAP16[((HEAP32[($9_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 28 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = Math_imul($171_1, (HEAPU8[((HEAP32[($9_1 + 48 | 0) >> 2] | 0) + (HEAP32[($9_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0);
      }
     }
     if ((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) < (64 | 0) & 1 | 0) {
      continue label$6
     }
    }
    break label$6;
   };
   HEAP32[($9_1 + 76 | 0) >> 2] = 1;
  }
  $192_1 = HEAP32[($9_1 + 76 | 0) >> 2] | 0;
  global$0 = $9_1 + 80 | 0;
  return $192_1 | 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $37_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (!(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18120 | 0) >> 2] | 0)) {
      break label$3
     }
     $7_1 = 0;
     break label$2;
    }
    $7_1 = ($337(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
   label$4 : {
    label$5 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (255 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = ($337(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
     label$6 : {
      if (!(HEAP32[($3_1 + 4 | 0) >> 2] | 0)) {
       break label$6
      }
      HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18116 | 0) >> 0] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18120 | 0) >> 2] = 1;
      break label$4;
     }
    }
    $37_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($37_1 + 18108 | 0) >> 2] = HEAP32[($37_1 + 18108 | 0) >> 2] | 0 | ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << (24 - (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0) | 0) | 0) | 0;
    $40_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($40_1 + 18112 | 0) >> 2] = (HEAP32[($40_1 + 18112 | 0) >> 2] | 0) + 8 | 0;
    if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) <= (24 | 0) & 1 | 0) {
     continue label$1
    }
   }
   break label$1;
  };
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $376($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $32_1 = 0, $64_1 = 0, $67_1 = 0, $69_1 = 0, $74_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 18132 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = $293(3606 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
     break label$3
    }
    $375(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
   }
   label$4 : {
    label$5 : {
     if (HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 18136 | 0) >> 2] | 0) {
      break label$5
     }
     $2015(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, 0 | 0, 128 | 0) | 0;
     HEAP32[$6_1 >> 2] = $379(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
     label$6 : {
      label$7 : {
       if (!(HEAP32[$6_1 >> 2] | 0)) {
        break label$7
       }
       $32_1 = $380(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
       break label$6;
      }
      $32_1 = 0;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $32_1;
     HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($6_1 + 12 | 0) >> 2] | 0, 72) | 0) + 24 | 0) >> 2] | 0) + (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 17820 | 0) + Math_imul(HEAP32[($6_1 + 12 | 0) >> 2] | 0, 72) | 0) + 24 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     HEAP16[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 1] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) << (HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 18140 | 0) >> 2] | 0) | 0;
     break label$4;
    }
    label$8 : {
     if (!($381(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
      break label$8
     }
     $64_1 = 16;
     $67_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     $69_1 = 16;
     HEAP16[$67_1 >> 1] = (((HEAPU16[$67_1 >> 1] | 0) << $69_1 | 0) >> $69_1 | 0) + (((1 << (HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 18140 | 0) >> 2] | 0) | 0) << $64_1 | 0) >> $64_1 | 0) | 0;
    }
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 1;
  }
  $74_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $74_1 | 0;
 }
 
 function $377($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $17_1 = 0, $45_1 = 0, $60_1 = 0, $64_1 = 0, $67_1 = 0, $117_1 = 0, $120_1 = 0, $130_1 = 0, $160_1 = 0, $184_1 = 0, $191_1 = 0, $195_1 = 0, $201_1 = 0, $211_1 = 0, $214_1 = 0, $216_1 = 0, $221_1 = 0, $224_1 = 0, $226_1 = 0, $271_1 = 0, $287_1 = 0, $291_1 = 0, $305_1 = 0, $316_1 = 0, $323_1 = 0, $327_1 = 0, $333_1 = 0, $343_1 = 0, $346_1 = 0, $348_1 = 0, $353_1 = 0, $356_1 = 0, $358_1 = 0, $116_1 = 0, $138_1 = 0, $270_1 = 0, $304_1 = 0, $377_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18128 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($6_1 + 76 | 0) >> 2] = $293(3606 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18136 | 0) >> 2] | 0) {
      break label$4
     }
     HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18140 | 0) >> 2] | 0;
     label$5 : {
      if (!(HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18144 | 0) >> 2] | 0)) {
       break label$5
      }
      $17_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
      HEAP32[($17_1 + 18144 | 0) >> 2] = (HEAP32[($17_1 + 18144 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($6_1 + 76 | 0) >> 2] = 1;
      break label$1;
     }
     HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18128 | 0) >> 2] | 0;
     label$6 : while (1) {
      label$7 : {
       if (!((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
        break label$7
       }
       $375(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0);
      }
      HEAP32[($6_1 + 44 | 0) >> 2] = ((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >>> 23 | 0) & 511 | 0;
      $45_1 = 16;
      HEAP32[($6_1 + 40 | 0) >> 2] = ((HEAPU16[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $45_1 | 0) >> $45_1 | 0;
      label$8 : {
       label$9 : {
        label$10 : {
         if (!(HEAP32[($6_1 + 40 | 0) >> 2] | 0)) {
          break label$10
         }
         HEAP32[($6_1 + 56 | 0) >> 2] = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 4 | 0) & 15 | 0) | 0;
         HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) & 15 | 0;
         $60_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
         HEAP32[($60_1 + 18108 | 0) >> 2] = (HEAP32[($60_1 + 18108 | 0) >> 2] | 0) << (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0;
         $64_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
         HEAP32[($64_1 + 18112 | 0) >> 2] = (HEAP32[($64_1 + 18112 | 0) >> 2] | 0) - (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0;
         $67_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
         HEAP32[($6_1 + 56 | 0) >> 2] = $67_1 + 1 | 0;
         HEAP32[($6_1 + 48 | 0) >> 2] = (HEAPU8[($67_1 + 20592 | 0) >> 0] | 0) & 255 | 0;
         HEAP16[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 8 | 0) << (HEAP32[($6_1 + 52 | 0) >> 2] | 0) | 0;
         break label$9;
        }
        HEAP32[($6_1 + 32 | 0) >> 2] = $379(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) | 0;
        label$11 : {
         if (!((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
          break label$11
         }
         HEAP32[($6_1 + 76 | 0) >> 2] = $293(3425 | 0) | 0;
         break label$1;
        }
        HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 32 | 0) >> 2] | 0) & 15 | 0;
        HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 4 | 0;
        label$12 : {
         label$13 : {
          if (HEAP32[($6_1 + 36 | 0) >> 2] | 0) {
           break label$13
          }
          label$14 : {
           if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (15 | 0) & 1 | 0)) {
            break label$14
           }
           HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18144 | 0) >> 2] = 1 << (HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0;
           label$15 : {
            if (!(HEAP32[($6_1 + 40 | 0) >> 2] | 0)) {
             break label$15
            }
            $116_1 = $382(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0;
            $117_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
            HEAP32[($117_1 + 18144 | 0) >> 2] = (HEAP32[($117_1 + 18144 | 0) >> 2] | 0) + $116_1 | 0;
           }
           $120_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
           HEAP32[($120_1 + 18144 | 0) >> 2] = (HEAP32[($120_1 + 18144 | 0) >> 2] | 0) + -1 | 0;
           break label$8;
          }
          HEAP32[($6_1 + 56 | 0) >> 2] = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 16 | 0;
          break label$12;
         }
         HEAP32[($6_1 + 56 | 0) >> 2] = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + (HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0;
         $130_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
         HEAP32[($6_1 + 56 | 0) >> 2] = $130_1 + 1 | 0;
         HEAP32[($6_1 + 48 | 0) >> 2] = (HEAPU8[($130_1 + 20592 | 0) >> 0] | 0) & 255 | 0;
         $138_1 = $380(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0;
         HEAP16[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = $138_1 << (HEAP32[($6_1 + 52 | 0) >> 2] | 0) | 0;
        }
       }
       if ((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18132 | 0) >> 2] | 0 | 0) & 1 | 0) {
        continue label$6
       }
      }
      break label$6;
     };
     break label$3;
    }
    HEAP16[($6_1 + 30 | 0) >> 1] = 1 << (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18140 | 0) >> 2] | 0) | 0;
    label$16 : {
     label$17 : {
      if (!(HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18144 | 0) >> 2] | 0)) {
       break label$17
      }
      $160_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
      HEAP32[($160_1 + 18144 | 0) >> 2] = (HEAP32[($160_1 + 18144 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18128 | 0) >> 2] | 0;
      label$18 : {
       label$19 : while (1) {
        if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$18
        }
        HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 68 | 0) >> 2] | 0) + (((HEAPU8[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 20592 | 0) >> 0] | 0) & 255 | 0) << 1 | 0) | 0;
        $184_1 = 16;
        label$20 : {
         if (!(((HEAPU16[(HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 1] | 0) << $184_1 | 0) >> $184_1 | 0)) {
          break label$20
         }
         label$21 : {
          if (!($381(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0)) {
           break label$21
          }
          $191_1 = 16;
          $195_1 = 16;
          label$22 : {
           if ((((HEAPU16[(HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 1] | 0) << $191_1 | 0) >> $191_1 | 0) & (((HEAPU16[($6_1 + 30 | 0) >> 1] | 0) << $195_1 | 0) >> $195_1 | 0) | 0) {
            break label$22
           }
           $201_1 = 16;
           label$23 : {
            label$24 : {
             if (!((((HEAPU16[(HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 1] | 0) << $201_1 | 0) >> $201_1 | 0 | 0) > (0 | 0) & 1 | 0)) {
              break label$24
             }
             $211_1 = 16;
             $214_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
             $216_1 = 16;
             HEAP16[$214_1 >> 1] = (((HEAPU16[$214_1 >> 1] | 0) << $216_1 | 0) >> $216_1 | 0) + (((HEAPU16[($6_1 + 30 | 0) >> 1] | 0) << $211_1 | 0) >> $211_1 | 0) | 0;
             break label$23;
            }
            $221_1 = 16;
            $224_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
            $226_1 = 16;
            HEAP16[$224_1 >> 1] = (((HEAPU16[$224_1 >> 1] | 0) << $226_1 | 0) >> $226_1 | 0) - (((HEAPU16[($6_1 + 30 | 0) >> 1] | 0) << $221_1 | 0) >> $221_1 | 0) | 0;
           }
          }
         }
        }
        HEAP32[($6_1 + 56 | 0) >> 2] = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 1 | 0;
        continue label$19;
       };
      }
      break label$16;
     }
     HEAP32[($6_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18128 | 0) >> 2] | 0;
     label$25 : while (1) {
      HEAP32[($6_1 + 12 | 0) >> 2] = $379(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) | 0;
      label$26 : {
       if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$26
       }
       HEAP32[($6_1 + 76 | 0) >> 2] = $293(3425 | 0) | 0;
       break label$1;
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) & 15 | 0;
      HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 4 | 0;
      label$27 : {
       label$28 : {
        if (HEAP32[($6_1 + 16 | 0) >> 2] | 0) {
         break label$28
        }
        label$29 : {
         label$30 : {
          if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (15 | 0) & 1 | 0)) {
           break label$30
          }
          HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18144 | 0) >> 2] = (1 << (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) - 1 | 0;
          label$31 : {
           if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
            break label$31
           }
           $270_1 = $382(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
           $271_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
           HEAP32[($271_1 + 18144 | 0) >> 2] = (HEAP32[($271_1 + 18144 | 0) >> 2] | 0) + $270_1 | 0;
          }
          HEAP32[($6_1 + 20 | 0) >> 2] = 64;
          break label$29;
         }
        }
        break label$27;
       }
       label$32 : {
        if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
         break label$32
        }
        HEAP32[($6_1 + 76 | 0) >> 2] = $293(3425 | 0) | 0;
        break label$1;
       }
       label$33 : {
        label$34 : {
         if (!($381(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0)) {
          break label$34
         }
         $287_1 = 16;
         HEAP32[($6_1 + 16 | 0) >> 2] = ((HEAPU16[($6_1 + 30 | 0) >> 1] | 0) << $287_1 | 0) >> $287_1 | 0;
         break label$33;
        }
        $291_1 = 16;
        HEAP32[($6_1 + 16 | 0) >> 2] = 0 - (((HEAPU16[($6_1 + 30 | 0) >> 1] | 0) << $291_1 | 0) >> $291_1 | 0) | 0;
       }
      }
      label$35 : {
       label$36 : while (1) {
        if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$35
        }
        $304_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
        $305_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
        HEAP32[($6_1 + 56 | 0) >> 2] = $305_1 + 1 | 0;
        HEAP32[($6_1 + 8 | 0) >> 2] = $304_1 + (((HEAPU8[($305_1 + 20592 | 0) >> 0] | 0) & 255 | 0) << 1 | 0) | 0;
        $316_1 = 16;
        label$37 : {
         label$38 : {
          if (!(((HEAPU16[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 1] | 0) << $316_1 | 0) >> $316_1 | 0)) {
           break label$38
          }
          label$39 : {
           if (!($381(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0)) {
            break label$39
           }
           $323_1 = 16;
           $327_1 = 16;
           label$40 : {
            if ((((HEAPU16[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 1] | 0) << $323_1 | 0) >> $323_1 | 0) & (((HEAPU16[($6_1 + 30 | 0) >> 1] | 0) << $327_1 | 0) >> $327_1 | 0) | 0) {
             break label$40
            }
            $333_1 = 16;
            label$41 : {
             label$42 : {
              if (!((((HEAPU16[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 1] | 0) << $333_1 | 0) >> $333_1 | 0 | 0) > (0 | 0) & 1 | 0)) {
               break label$42
              }
              $343_1 = 16;
              $346_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
              $348_1 = 16;
              HEAP16[$346_1 >> 1] = (((HEAPU16[$346_1 >> 1] | 0) << $348_1 | 0) >> $348_1 | 0) + (((HEAPU16[($6_1 + 30 | 0) >> 1] | 0) << $343_1 | 0) >> $343_1 | 0) | 0;
              break label$41;
             }
             $353_1 = 16;
             $356_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
             $358_1 = 16;
             HEAP16[$356_1 >> 1] = (((HEAPU16[$356_1 >> 1] | 0) << $358_1 | 0) >> $358_1 | 0) - (((HEAPU16[($6_1 + 30 | 0) >> 1] | 0) << $353_1 | 0) >> $353_1 | 0) | 0;
            }
           }
          }
          break label$37;
         }
         label$43 : {
          if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
           break label$43
          }
          HEAP16[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 1] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
          break label$35;
         }
         HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + -1 | 0;
        }
        continue label$36;
       };
      }
      if ((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 18132 | 0) >> 2] | 0 | 0) & 1 | 0) {
       continue label$25
      }
      break label$25;
     };
    }
   }
   HEAP32[($6_1 + 76 | 0) >> 2] = 1;
  }
  $377_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  global$0 = $6_1 + 80 | 0;
  return $377_1 | 0;
 }
 
 function $378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $23_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (64 | 0) & 1 | 0)) {
     break label$1
    }
    $23_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 1 | 0) | 0;
    $25_1 = 16;
    HEAP16[$23_1 >> 1] = Math_imul(((HEAPU16[$23_1 >> 1] | 0) << $25_1 | 0) >> $25_1 | 0, (HEAPU8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $379($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $51_1 = 0, $55_1 = 0, $95_1 = 0, $178_1 = 0, $182_1 = 0, $193_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
    break label$1
   }
   $375(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = ((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >>> 23 | 0) & 511 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (255 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAPU8[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1280 | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0;
    label$4 : {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) > (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = -1;
     break label$2;
    }
    $51_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($51_1 + 18108 | 0) >> 2] = (HEAP32[($51_1 + 18108 | 0) >> 2] | 0) << (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0;
    $55_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($55_1 + 18112 | 0) >> 2] = (HEAP32[($55_1 + 18112 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAPU8[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1024 | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0;
    break label$2;
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >>> 16 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = 10;
   label$5 : {
    label$6 : while (1) {
     label$7 : {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1540 | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$7
      }
      break label$5;
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   label$8 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0)) {
     break label$8
    }
    $95_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($95_1 + 18112 | 0) >> 2] = (HEAP32[($95_1 + 18112 | 0) >> 2] | 0) - 16 | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = -1;
    break label$2;
   }
   label$9 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = -1;
    break label$2;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = (((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >>> (32 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0) & (HEAP32[(20672 + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1612 | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
   label$10 : {
    if ((((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >>> (32 - ((HEAPU8[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1280 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) | 0) | 0) & (HEAP32[(20672 + (((HEAPU8[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1280 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0) | 0 | 0) == ((HEAPU16[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 512 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0 | 0) & 1 | 0) {
     break label$10
    }
    fimport$54(3683 | 0, 2854 | 0, 1651 | 0, 3375 | 0);
    abort();
   }
   $178_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($178_1 + 18112 | 0) >> 2] = (HEAP32[($178_1 + 18112 | 0) >> 2] | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
   $182_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($182_1 + 18108 | 0) >> 2] = (HEAP32[($182_1 + 18108 | 0) >> 2] | 0) << (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = (HEAPU8[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1024 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0;
  }
  $193_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $193_1 | 0;
 }
 
 function $380($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $67_1 = 0, $81_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $375(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  }
  HEAP32[$4_1 >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >> 31 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) << (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | ((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >>> (32 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$3
    }
    if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (17 | 0) & 1 | 0) {
     break label$2
    }
   }
   fimport$54(4956 | 0, 2854 | 0, 1672 | 0, 3132 | 0);
   abort();
  }
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) & ((HEAP32[(20672 + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) ^ -1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) & (HEAP32[(20672 + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
  $67_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($67_1 + 18112 | 0) >> 2] = (HEAP32[($67_1 + 18112 | 0) >> 2] | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  $81_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[(6112 + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & ((HEAP32[$4_1 >> 2] | 0) ^ -1 | 0) | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $81_1 | 0;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, $19_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
    break label$1
   }
   $375(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0;
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($15_1 + 18108 | 0) >> 2] = (HEAP32[($15_1 + 18108 | 0) >> 2] | 0) << 1 | 0;
  $19_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($19_1 + 18112 | 0) >> 2] = (HEAP32[($19_1 + 18112 | 0) >> 2] | 0) + -1 | 0;
  $25_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0;
  global$0 = $3_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $382($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $45_1 = 0, $48_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18112 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $375(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) << (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | ((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] | 0) >>> (32 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18108 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) & ((HEAP32[(20672 + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) ^ -1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) & (HEAP32[(20672 + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($45_1 + 18112 | 0) >> 2] = (HEAP32[($45_1 + 18112 | 0) >> 2] | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  $48_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $48_1 | 0;
 }
 
 function $383($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $38_1 = 0, $493_1 = 0, $68_1 = 0, $81_1 = 0, $285_1 = 0, $296_1 = 0, $307_1 = 0, $384_1 = 0, $430_1 = 0, $584_1 = 0, $751_1 = 0;
  $5_1 = global$0 - 1136 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 1128 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 1124 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 1120 | 0) >> 2] = $2_1;
  HEAP8[($5_1 + 95 | 0) >> 0] = 0;
  HEAP8[($5_1 + 94 | 0) >> 0] = 0;
  HEAP32[($5_1 + 84 | 0) >> 2] = 0;
  HEAP32[($5_1 + 80 | 0) >> 2] = 0;
  HEAP32[($5_1 + 72 | 0) >> 2] = 0;
  HEAP32[($5_1 + 68 | 0) >> 2] = 1;
  HEAP32[($5_1 + 60 | 0) >> 2] = 0;
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  HEAP32[($5_1 + 52 | 0) >> 2] = 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 1128 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if ($334(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    HEAP32[($5_1 + 1132 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($5_1 + 1124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 1132 | 0) >> 2] = 1;
    break label$1;
   }
   label$4 : while (1) {
    $384($5_1 + 32 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
    $38_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            if (($38_1 | 0) == (1130840649 | 0)) {
             break label$12
            }
            if (($38_1 | 0) == (1229209940 | 0)) {
             break label$8
            }
            if (($38_1 | 0) == (1229278788 | 0)) {
             break label$7
            }
            if (($38_1 | 0) == (1229472850 | 0)) {
             break label$11
            }
            if (($38_1 | 0) == (1347179589 | 0)) {
             break label$10
            }
            if (($38_1 | 0) == (1951551059 | 0)) {
             break label$9
            }
            break label$6;
           }
           HEAP32[($5_1 + 48 | 0) >> 2] = 1;
           $340(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
           break label$5;
          }
          label$13 : {
           if (HEAP32[($5_1 + 68 | 0) >> 2] | 0) {
            break label$13
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3859 | 0) | 0;
           break label$1;
          }
          HEAP32[($5_1 + 68 | 0) >> 2] = 0;
          label$14 : {
           if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (13 | 0) & 1 | 0)) {
            break label$14
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(2615 | 0) | 0;
           break label$1;
          }
          $68_1 = $347(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] = $68_1;
          label$15 : {
           if (!((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >>> 0 > 16777216 >>> 0 & 1 | 0)) {
            break label$15
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3351 | 0) | 0;
           break label$1;
          }
          $81_1 = $347(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] = $81_1;
          label$16 : {
           if (!((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 > 16777216 >>> 0 & 1 | 0)) {
            break label$16
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3351 | 0) | 0;
           break label$1;
          }
          HEAP32[($5_1 + 52 | 0) >> 2] = ($337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          label$17 : {
           if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
            break label$17
           }
           if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
            break label$17
           }
           if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0)) {
            break label$17
           }
           if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != (8 | 0) & 1 | 0)) {
            break label$17
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(1379 | 0) | 0;
           break label$1;
          }
          HEAP32[($5_1 + 56 | 0) >> 2] = ($337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          label$18 : {
           if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) > (6 | 0) & 1 | 0)) {
            break label$18
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3221 | 0) | 0;
           break label$1;
          }
          label$19 : {
           label$20 : {
            if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
             break label$20
            }
            HEAP8[($5_1 + 95 | 0) >> 0] = 3;
            break label$19;
           }
           label$21 : {
            if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0) & 1 | 0)) {
             break label$21
            }
            HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3221 | 0) | 0;
            break label$1;
           }
          }
          HEAP32[($5_1 + 28 | 0) >> 2] = ($337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          label$22 : {
           if (!(HEAP32[($5_1 + 28 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3483 | 0) | 0;
           break label$1;
          }
          HEAP32[($5_1 + 24 | 0) >> 2] = ($337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          label$23 : {
           if (!(HEAP32[($5_1 + 24 | 0) >> 2] | 0)) {
            break label$23
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3465 | 0) | 0;
           break label$1;
          }
          HEAP32[($5_1 + 60 | 0) >> 2] = ($337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
          label$24 : {
           if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
            break label$24
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3499 | 0) | 0;
           break label$1;
          }
          label$25 : {
           label$26 : {
            if (!(HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0)) {
             break label$26
            }
            if (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) {
             break label$25
            }
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3361 | 0) | 0;
           break label$1;
          }
          label$27 : {
           label$28 : {
            if (((HEAPU8[($5_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
             break label$28
            }
            HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] = ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) & 2 | 0 ? 3 : 1) + ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) & 4 | 0 ? 1 : 0) | 0;
            label$29 : {
             if (!(((((1073741824 >>> 0) / ((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >>> 0) | 0) >>> 0) / ((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0) | 0) >>> 0 < (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
              break label$29
             }
             HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3351 | 0) | 0;
             break label$1;
            }
            label$30 : {
             if (!((HEAP32[($5_1 + 1124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
              break label$30
             }
             HEAP32[($5_1 + 1132 | 0) >> 2] = 1;
             break label$1;
            }
            break label$27;
           }
           HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] = 1;
           label$31 : {
            if (!((((1073741824 >>> 0) / ((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >>> 0) | 0) >>> 2 | 0) >>> 0 < (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
             break label$31
            }
            HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3351 | 0) | 0;
            break label$1;
           }
          }
          break label$5;
         }
         label$32 : {
          if (!(HEAP32[($5_1 + 68 | 0) >> 2] | 0)) {
           break label$32
          }
          HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3844 | 0) | 0;
          break label$1;
         }
         label$33 : {
          if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0) >>> 0 > 768 >>> 0 & 1 | 0)) {
           break label$33
          }
          HEAP32[($5_1 + 1132 | 0) >> 2] = $293(4007 | 0) | 0;
          break label$1;
         }
         HEAP32[($5_1 + 72 | 0) >> 2] = ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) >>> 0) / (3 >>> 0) | 0;
         label$34 : {
          if (!((Math_imul(HEAP32[($5_1 + 72 | 0) >> 2] | 0, 3) | 0) != (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$34
          }
          HEAP32[($5_1 + 1132 | 0) >> 2] = $293(4007 | 0) | 0;
          break label$1;
         }
         HEAP32[($5_1 + 76 | 0) >> 2] = 0;
         label$35 : {
          label$36 : while (1) {
           if (!((HEAP32[($5_1 + 76 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 72 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$35
           }
           $285_1 = $337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
           HEAP8[(($5_1 + 96 | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) << 2 | 0) + 0 | 0) | 0) >> 0] = $285_1;
           $296_1 = $337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
           HEAP8[(($5_1 + 96 | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) << 2 | 0) + 1 | 0) | 0) >> 0] = $296_1;
           $307_1 = $337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
           HEAP8[(($5_1 + 96 | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) << 2 | 0) + 2 | 0) | 0) >> 0] = $307_1;
           HEAP8[(($5_1 + 96 | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) << 2 | 0) + 3 | 0) | 0) >> 0] = 255;
           HEAP32[($5_1 + 76 | 0) >> 2] = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 1 | 0;
           continue label$36;
          };
         }
         break label$5;
        }
        label$37 : {
         if (!(HEAP32[($5_1 + 68 | 0) >> 2] | 0)) {
          break label$37
         }
         HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3844 | 0) | 0;
         break label$1;
        }
        label$38 : {
         if (!((HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$38
         }
         HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3803 | 0) | 0;
         break label$1;
        }
        label$39 : {
         label$40 : {
          if (!(((HEAPU8[($5_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
           break label$40
          }
          label$41 : {
           if (!((HEAP32[($5_1 + 1124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
            break label$41
           }
           HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] = 4;
           HEAP32[($5_1 + 1132 | 0) >> 2] = 1;
           break label$1;
          }
          label$42 : {
           if (HEAP32[($5_1 + 72 | 0) >> 2] | 0) {
            break label$42
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3990 | 0) | 0;
           break label$1;
          }
          label$43 : {
           if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0) >>> 0 > (HEAP32[($5_1 + 72 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
            break label$43
           }
           HEAP32[($5_1 + 1132 | 0) >> 2] = $293(2602 | 0) | 0;
           break label$1;
          }
          HEAP8[($5_1 + 95 | 0) >> 0] = 4;
          HEAP32[($5_1 + 76 | 0) >> 2] = 0;
          label$44 : {
           label$45 : while (1) {
            if (!((HEAP32[($5_1 + 76 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 32 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
             break label$44
            }
            $384_1 = $337(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
            HEAP8[(($5_1 + 96 | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) << 2 | 0) + 3 | 0) | 0) >> 0] = $384_1;
            HEAP32[($5_1 + 76 | 0) >> 2] = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 1 | 0;
            continue label$45;
           };
          }
          break label$39;
         }
         label$46 : {
          if ((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 1 | 0) {
           break label$46
          }
          HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3667 | 0) | 0;
          break label$1;
         }
         label$47 : {
          if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != ((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
           break label$47
          }
          HEAP32[($5_1 + 1132 | 0) >> 2] = $293(2602 | 0) | 0;
          break label$1;
         }
         HEAP8[($5_1 + 94 | 0) >> 0] = 1;
         HEAP32[($5_1 + 64 | 0) >> 2] = 0;
         label$48 : {
          label$49 : while (1) {
           if (!((HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$48
           }
           $430_1 = (($348(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0) & 255 | 0) & 255 | 0;
           HEAP8[(($5_1 + 91 | 0) + (HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0) >> 0] = Math_imul($430_1, (HEAPU8[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 20748 | 0) >> 0] | 0) & 255 | 0);
           HEAP32[($5_1 + 64 | 0) >> 2] = (HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 1 | 0;
           continue label$49;
          };
         }
        }
        break label$5;
       }
       label$50 : {
        if (!(HEAP32[($5_1 + 68 | 0) >> 2] | 0)) {
         break label$50
        }
        HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3844 | 0) | 0;
        break label$1;
       }
       label$51 : {
        if (!((HEAPU8[($5_1 + 95 | 0) >> 0] | 0) & 255 | 0)) {
         break label$51
        }
        if (HEAP32[($5_1 + 72 | 0) >> 2] | 0) {
         break label$51
        }
        HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3982 | 0) | 0;
        break label$1;
       }
       label$52 : {
        if (!((HEAP32[($5_1 + 1124 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$52
        }
        HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAPU8[($5_1 + 95 | 0) >> 0] | 0) & 255 | 0;
        HEAP32[($5_1 + 1132 | 0) >> 2] = 1;
        break label$1;
       }
       label$53 : {
        if (!(((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0 | 0) < (HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$53
        }
        HEAP32[($5_1 + 1132 | 0) >> 2] = 0;
        break label$1;
       }
       label$54 : {
        if (!(((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) >>> 0 > (HEAP32[($5_1 + 80 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$54
        }
        label$55 : {
         if (HEAP32[($5_1 + 80 | 0) >> 2] | 0) {
          break label$55
         }
         label$56 : {
          label$57 : {
           if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0) >>> 0 > 4096 >>> 0 & 1 | 0)) {
            break label$57
           }
           $493_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
           break label$56;
          }
          $493_1 = 4096;
         }
         HEAP32[($5_1 + 80 | 0) >> 2] = $493_1;
        }
        label$58 : {
         label$59 : while (1) {
          if (!(((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) >>> 0 > (HEAP32[($5_1 + 80 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
           break label$58
          }
          HEAP32[($5_1 + 80 | 0) >> 2] = (HEAP32[($5_1 + 80 | 0) >> 2] | 0) << 1 | 0;
          continue label$59;
         };
        }
        HEAP32[($5_1 + 20 | 0) >> 2] = $2006(HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) | 0;
        label$60 : {
         if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
          break label$60
         }
         HEAP32[($5_1 + 1132 | 0) >> 2] = $293(2677 | 0) | 0;
         break label$1;
        }
        HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
       }
       label$61 : {
        if ($352(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0) {
         break label$61
        }
        HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3657 | 0) | 0;
        break label$1;
       }
       HEAP32[($5_1 + 84 | 0) >> 2] = (HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0;
       break label$5;
      }
      label$62 : {
       if (!(HEAP32[($5_1 + 68 | 0) >> 2] | 0)) {
        break label$62
       }
       HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3844 | 0) | 0;
       break label$1;
      }
      label$63 : {
       if (!(HEAP32[($5_1 + 1124 | 0) >> 2] | 0)) {
        break label$63
       }
       HEAP32[($5_1 + 1132 | 0) >> 2] = 1;
       break label$1;
      }
      label$64 : {
       if (!((HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$64
       }
       HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3819 | 0) | 0;
       break label$1;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = (Math_imul(HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0, HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 7 | 0) >>> 3 | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = Math_imul(Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0), HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0;
      $584_1 = $309(HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $5_1 + 16 | 0 | 0, ((HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0 | 0) | 0;
      HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 8 | 0) >> 2] = $584_1;
      label$65 : {
       if (!((HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$65
       }
       HEAP32[($5_1 + 1132 | 0) >> 2] = 0;
       break label$1;
      }
      $2005(HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
      HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
      label$66 : {
       label$67 : {
        label$68 : {
         label$69 : {
          if (!((HEAP32[($5_1 + 1120 | 0) >> 2] | 0 | 0) == ((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
           break label$69
          }
          if (!((HEAP32[($5_1 + 1120 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
           break label$69
          }
          if (!(((HEAPU8[($5_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
           break label$68
          }
         }
         if (!((HEAPU8[($5_1 + 94 | 0) >> 0] | 0) & 255 | 0)) {
          break label$67
         }
        }
        HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 1 | 0;
        break label$66;
       }
       HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      }
      label$70 : {
       if ($385(HEAP32[($5_1 + 1128 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) | 0) {
        break label$70
       }
       HEAP32[($5_1 + 1132 | 0) >> 2] = 0;
       break label$1;
      }
      label$71 : {
       if (!(((HEAPU8[($5_1 + 94 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
        break label$71
       }
       label$72 : {
        if ($386(HEAP32[($5_1 + 1128 | 0) >> 2] | 0 | 0, $5_1 + 91 | 0 | 0, HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0) {
         break label$72
        }
        HEAP32[($5_1 + 1132 | 0) >> 2] = 0;
        break label$1;
       }
      }
      label$73 : {
       if (!(HEAP32[($5_1 + 48 | 0) >> 2] | 0)) {
        break label$73
       }
       if (!(HEAP32[(0 + 22112 | 0) >> 2] | 0)) {
        break label$73
       }
       if (!((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
        break label$73
       }
       $387(HEAP32[($5_1 + 1128 | 0) >> 2] | 0 | 0);
      }
      label$74 : {
       if (!(((HEAPU8[($5_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
        break label$74
       }
       HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAPU8[($5_1 + 95 | 0) >> 0] | 0) & 255 | 0;
       HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAPU8[($5_1 + 95 | 0) >> 0] | 0) & 255 | 0;
       label$75 : {
        if (!((HEAP32[($5_1 + 1120 | 0) >> 2] | 0 | 0) >= (3 | 0) & 1 | 0)) {
         break label$75
        }
        HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($5_1 + 1120 | 0) >> 2] | 0;
       }
       label$76 : {
        if ($388(HEAP32[($5_1 + 1128 | 0) >> 2] | 0 | 0, $5_1 + 96 | 0 | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0) {
         break label$76
        }
        HEAP32[($5_1 + 1132 | 0) >> 2] = 0;
        break label$1;
       }
      }
      $2005(HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
      HEAP32[((HEAP32[($5_1 + 1128 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
      HEAP32[($5_1 + 1132 | 0) >> 2] = 1;
      break label$1;
     }
     label$77 : {
      if (!(HEAP32[($5_1 + 68 | 0) >> 2] | 0)) {
       break label$77
      }
      HEAP32[($5_1 + 1132 | 0) >> 2] = $293(3844 | 0) | 0;
      break label$1;
     }
     label$78 : {
      if ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) & 536870912 | 0) {
       break label$78
      }
      HEAP8[(0 + 20768 | 0) >> 0] = ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) >>> 24 | 0) & 255 | 0;
      HEAP8[(0 + 20769 | 0) >> 0] = ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) >>> 16 | 0) & 255 | 0;
      HEAP8[(0 + 20770 | 0) >> 0] = ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) >>> 8 | 0) & 255 | 0;
      HEAP8[(0 + 20771 | 0) >> 0] = ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) >>> 0 | 0) & 255 | 0;
      HEAP32[($5_1 + 1132 | 0) >> 2] = $293(20768 | 0) | 0;
      break label$1;
     }
     $340(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
    }
    $347(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
    continue label$4;
   };
  }
  $751_1 = HEAP32[($5_1 + 1132 | 0) >> 2] | 0;
  global$0 = $5_1 + 1136 | 0;
  return $751_1 | 0;
 }
 
 function $384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $347(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $347(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $385($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $44_1 = 0, $55_1 = 0, $66_1 = 0, $77_1 = 0, $47_1 = 0, $58_1 = 0, $69_1 = 0, $80_1 = 0, $403_1 = 0, $410_1 = 0, $414_1 = 0, $432_1 = 0, $439_1 = 0, $443_1 = 0, $461_1 = 0, $468_1 = 0, $472_1 = 0, $490_1 = 0, $497_1 = 0, $501_1 = 0, $276_1 = 0;
  $9_1 = global$0 - 208 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 200 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 192 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 188 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 184 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 180 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 176 | 0) >> 2] = $6_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($9_1 + 176 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($9_1 + 204 | 0) >> 2] = $390(HEAP32[($9_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[(HEAP32[($9_1 + 200 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[(HEAP32[($9_1 + 200 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 180 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($9_1 + 172 | 0) >> 2] = $306(Math_imul(Math_imul(HEAP32[(HEAP32[(HEAP32[($9_1 + 200 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0, HEAP32[((HEAP32[(HEAP32[($9_1 + 200 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0), HEAP32[($9_1 + 188 | 0) >> 2] | 0) | 0) | 0;
   HEAP32[($9_1 + 168 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($9_1 + 168 | 0) >> 2] | 0 | 0) < (7 | 0) & 1 | 0)) {
      break label$3
     }
     $44_1 = $9_1 + 128 | 0;
     $47_1 = 0;
     HEAP32[($44_1 + 24 | 0) >> 2] = HEAP32[($47_1 + 6200 | 0) >> 2] | 0;
     i64toi32_i32$2 = $47_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6192 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6196 | 0) >> 2] | 0;
     $403_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $44_1 + 16 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $403_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6184 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6188 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $44_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $410_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6176 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6180 | 0) >> 2] | 0;
     $414_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $44_1;
     HEAP32[i64toi32_i32$0 >> 2] = $414_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $55_1 = $9_1 + 96 | 0;
     $58_1 = 0;
     HEAP32[($55_1 + 24 | 0) >> 2] = HEAP32[($58_1 + 6232 | 0) >> 2] | 0;
     i64toi32_i32$2 = $58_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6224 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6228 | 0) >> 2] | 0;
     $432_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $55_1 + 16 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $432_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6216 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6220 | 0) >> 2] | 0;
     $439_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $55_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $439_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6208 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6212 | 0) >> 2] | 0;
     $443_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $55_1;
     HEAP32[i64toi32_i32$1 >> 2] = $443_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $66_1 = $9_1 + 64 | 0;
     $69_1 = 0;
     HEAP32[($66_1 + 24 | 0) >> 2] = HEAP32[($69_1 + 6264 | 0) >> 2] | 0;
     i64toi32_i32$2 = $69_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6256 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6260 | 0) >> 2] | 0;
     $461_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $66_1 + 16 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $461_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6248 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6252 | 0) >> 2] | 0;
     $468_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $66_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $468_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6240 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6244 | 0) >> 2] | 0;
     $472_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $66_1;
     HEAP32[i64toi32_i32$0 >> 2] = $472_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $77_1 = $9_1 + 32 | 0;
     $80_1 = 0;
     HEAP32[($77_1 + 24 | 0) >> 2] = HEAP32[($80_1 + 6296 | 0) >> 2] | 0;
     i64toi32_i32$2 = $80_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6288 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6292 | 0) >> 2] | 0;
     $490_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $77_1 + 16 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $490_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6280 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6284 | 0) >> 2] | 0;
     $497_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $77_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $497_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6272 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 6276 | 0) >> 2] | 0;
     $501_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $77_1;
     HEAP32[i64toi32_i32$1 >> 2] = $501_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($9_1 + 20 | 0) >> 2] = (((((HEAP32[(HEAP32[(HEAP32[($9_1 + 200 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[(($9_1 + 128 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($9_1 + 64 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) / ((HEAP32[(($9_1 + 64 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0) | 0;
     HEAP32[($9_1 + 16 | 0) >> 2] = (((((HEAP32[((HEAP32[(HEAP32[($9_1 + 200 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[(($9_1 + 96 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($9_1 + 32 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) - 1 | 0) >>> 0) / ((HEAP32[(($9_1 + 32 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0) | 0;
     label$5 : {
      if (!(HEAP32[($9_1 + 20 | 0) >> 2] | 0)) {
       break label$5
      }
      if (!(HEAP32[($9_1 + 16 | 0) >> 2] | 0)) {
       break label$5
      }
      HEAP32[($9_1 + 12 | 0) >> 2] = Math_imul(((Math_imul(Math_imul(HEAP32[((HEAP32[(HEAP32[($9_1 + 200 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0), HEAP32[($9_1 + 184 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0) + 1 | 0, HEAP32[($9_1 + 16 | 0) >> 2] | 0);
      label$6 : {
       if ($390(HEAP32[($9_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 180 | 0) >> 2] | 0 | 0) | 0) {
        break label$6
       }
       $2005(HEAP32[($9_1 + 172 | 0) >> 2] | 0 | 0);
       HEAP32[($9_1 + 204 | 0) >> 2] = 0;
       break label$1;
      }
      HEAP32[($9_1 + 24 | 0) >> 2] = 0;
      label$7 : {
       label$8 : while (1) {
        if (!((HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[($9_1 + 28 | 0) >> 2] = 0;
        label$9 : {
         label$10 : while (1) {
          if (!((HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$9
          }
          HEAP32[($9_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 24 | 0) >> 2] | 0, HEAP32[(($9_1 + 32 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP32[(($9_1 + 96 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
          HEAP32[($9_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 28 | 0) >> 2] | 0, HEAP32[(($9_1 + 64 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP32[(($9_1 + 128 | 0) + ((HEAP32[($9_1 + 168 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
          $2014(((HEAP32[($9_1 + 172 | 0) >> 2] | 0) + Math_imul(Math_imul(HEAP32[($9_1 + 8 | 0) >> 2] | 0, HEAP32[(HEAP32[(HEAP32[($9_1 + 200 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0), HEAP32[($9_1 + 188 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9_1 + 4 | 0) >> 2] | 0, HEAP32[($9_1 + 188 | 0) >> 2] | 0) | 0 | 0, (HEAP32[((HEAP32[($9_1 + 200 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + Math_imul(Math_imul(HEAP32[($9_1 + 24 | 0) >> 2] | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0) + (HEAP32[($9_1 + 28 | 0) >> 2] | 0) | 0, HEAP32[($9_1 + 188 | 0) >> 2] | 0) | 0 | 0, HEAP32[($9_1 + 188 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($9_1 + 28 | 0) >> 2] = (HEAP32[($9_1 + 28 | 0) >> 2] | 0) + 1 | 0;
          continue label$10;
         };
        }
        HEAP32[($9_1 + 24 | 0) >> 2] = (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 1 | 0;
        continue label$8;
       };
      }
      $2005(HEAP32[((HEAP32[($9_1 + 200 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
      HEAP32[($9_1 + 196 | 0) >> 2] = (HEAP32[($9_1 + 196 | 0) >> 2] | 0) + (HEAP32[($9_1 + 12 | 0) >> 2] | 0) | 0;
      HEAP32[($9_1 + 192 | 0) >> 2] = (HEAP32[($9_1 + 192 | 0) >> 2] | 0) - (HEAP32[($9_1 + 12 | 0) >> 2] | 0) | 0;
     }
     HEAP32[($9_1 + 168 | 0) >> 2] = (HEAP32[($9_1 + 168 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[((HEAP32[($9_1 + 200 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($9_1 + 172 | 0) >> 2] | 0;
   HEAP32[($9_1 + 204 | 0) >> 2] = 1;
  }
  $276_1 = HEAP32[($9_1 + 204 | 0) >> 2] | 0;
  global$0 = $9_1 + 208 | 0;
  return $276_1 | 0;
 }
 
 function $386($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = Math_imul(HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0, HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0) {
    break label$1
   }
   if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0) {
    break label$1
   }
   fimport$54(4776 | 0, 2854 | 0, 4209 | 0, 1396 | 0);
   abort();
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$4
      }
      HEAP8[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = ((HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0 ? 0 : 255;
      HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 2 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     };
    }
    break label$2;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$6
     }
     label$8 : {
      if (!(((HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$8
      }
      if (!(((HEAPU8[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$8
      }
      if (!(((HEAPU8[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP8[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 3 | 0) >> 0] = 0;
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
  }
  global$0 = $5_1 + 32 | 0;
  return 1 | 0;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = Math_imul(HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$3
      }
      HEAP8[($3_1 + 11 | 0) >> 0] = HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0;
      HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[($3_1 + 11 | 0) >> 0] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 3 | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   label$5 : {
    if ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0) {
     break label$5
    }
    fimport$54(4758 | 0, 2854 | 0, 4290 | 0, 3268 | 0);
    abort();
   }
   label$6 : {
    label$7 : {
     if (!(HEAP32[(0 + 22108 | 0) >> 2] | 0)) {
      break label$7
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = 0;
     label$8 : {
      label$9 : while (1) {
       if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$8
       }
       HEAP8[($3_1 + 10 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 3 | 0) >> 0] | 0;
       HEAP8[($3_1 + 9 | 0) >> 0] = HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0;
       label$10 : {
        label$11 : {
         if (!(((HEAPU8[($3_1 + 10 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break label$11
         }
         HEAP8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] = (Math_imul((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0, 255) | 0) / ((HEAPU8[($3_1 + 10 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
         HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0) >> 0] = (Math_imul((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0, 255) | 0) / ((HEAPU8[($3_1 + 10 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
         HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] = (Math_imul((HEAPU8[($3_1 + 9 | 0) >> 0] | 0) & 255 | 0, 255) | 0) / ((HEAPU8[($3_1 + 10 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
         break label$10;
        }
        HEAP8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0;
        HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[($3_1 + 9 | 0) >> 0] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0;
       HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$9;
      };
     }
     break label$6;
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = 0;
    label$12 : {
     label$13 : while (1) {
      if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$12
      }
      HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0;
      HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$13;
     };
    }
   }
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $388($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $131_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = Math_imul(HEAP32[(HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0, HEAP32[((HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[($6_1 + 16 | 0) >> 2] = $306(Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = $293(2677 | 0) | 0;
    break label$1;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = 0;
     label$5 : {
      label$6 : while (1) {
       if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$5
       }
       HEAP32[($6_1 + 4 | 0) >> 2] = ((HEAPU8[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) << 2 | 0;
       HEAP8[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + (HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
       HEAP8[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0;
       HEAP8[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 2 | 0) | 0) >> 0] | 0;
       HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 3 | 0;
       HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$6;
      };
     }
     break label$3;
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 20 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$7
      }
      HEAP32[$6_1 >> 2] = ((HEAPU8[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) << 2 | 0;
      HEAP8[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + (HEAP32[$6_1 >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) + 1 | 0) | 0) >> 0] | 0;
      HEAP8[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) + 2 | 0) | 0) >> 0] | 0;
      HEAP8[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 3 | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) + 3 | 0) | 0) >> 0] | 0;
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 4 | 0;
      HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
   }
   $2005(HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   HEAP32[($6_1 + 44 | 0) >> 2] = 1;
  }
  $131_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $131_1 | 0;
 }
 
 function $389($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (((Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 77) + Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, 150) | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 29) | 0) >> 8 | 0) & 255 | 0 | 0;
 }
 
 function $390($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $124_1 = 0, $181_1 = 0, $247_1 = 0, $327_1 = 0, $533_1 = 0, $560_1 = 0, $947_1 = 0, $1017_1 = 0, $1047_1 = 0, $1060_1 = 0, $1086_1 = 0, $1116_1 = 0, $1131_1 = 0, $1146_1 = 0, $1159_1 = 0, $1185_1 = 0, $1207_1 = 0, $1229_1 = 0, $1259_1 = 0, $1274_1 = 0, $1289_1 = 0, $1304_1 = 0, $1319_1 = 0, $1334_1 = 0, $1349_1 = 0, $1362_1 = 0, $1388_1 = 0, $1410_1 = 0, $1432_1 = 0, $1454_1 = 0, $1476_1 = 0, $1498_1 = 0, $1520_1 = 0, $45_1 = 0, $251_1 = 0, $471_1 = 0, $537_1 = 0, $833_1 = 0, $951_1 = 0, $1046_1 = 0, $1059_1 = 0, $1085_1 = 0, $1115_1 = 0, $1130_1 = 0, $1145_1 = 0, $1158_1 = 0, $1184_1 = 0, $1206_1 = 0, $1228_1 = 0, $1258_1 = 0, $1273_1 = 0, $1288_1 = 0, $1303_1 = 0, $1318_1 = 0, $1333_1 = 0, $1348_1 = 0, $1361_1 = 0, $1387_1 = 0, $1409_1 = 0, $1431_1 = 0, $1453_1 = 0, $1475_1 = 0, $1497_1 = 0, $1519_1 = 0, $1656_1 = 0;
  $10_1 = global$0 - 112 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 92 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 88 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 84 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 80 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 76 | 0) >> 2] = $7_1;
  HEAP32[($10_1 + 72 | 0) >> 2] = HEAP32[(HEAP32[($10_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($10_1 + 60 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 88 | 0) >> 2] | 0, HEAP32[($10_1 + 92 | 0) >> 2] | 0);
  HEAP32[($10_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0) {
    break label$1
   }
   if ((HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) == ((HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$54(4843 | 0, 2854 | 0, 3989 | 0, 1577 | 0);
   abort();
  }
  $45_1 = $306(Math_imul(Math_imul(HEAP32[($10_1 + 88 | 0) >> 2] | 0, HEAP32[($10_1 + 84 | 0) >> 2] | 0), HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) | 0;
  HEAP32[((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 12 | 0) >> 2] = $45_1;
  label$2 : {
   label$3 : {
    if ((HEAP32[((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    HEAP32[($10_1 + 108 | 0) >> 2] = $293(2677 | 0) | 0;
    break label$2;
   }
   HEAP32[($10_1 + 52 | 0) >> 2] = (Math_imul(Math_imul(HEAP32[($10_1 + 44 | 0) >> 2] | 0, HEAP32[($10_1 + 88 | 0) >> 2] | 0), HEAP32[($10_1 + 80 | 0) >> 2] | 0) + 7 | 0) >>> 3 | 0;
   HEAP32[($10_1 + 56 | 0) >> 2] = Math_imul((HEAP32[($10_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($10_1 + 84 | 0) >> 2] | 0);
   label$4 : {
    label$5 : {
     if (!((HEAP32[(HEAP32[($10_1 + 72 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     if (!((HEAP32[((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($10_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!((HEAP32[($10_1 + 96 | 0) >> 2] | 0 | 0) != (HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($10_1 + 108 | 0) >> 2] = $293(2e3 | 0) | 0;
      break label$2;
     }
     break label$4;
    }
    label$7 : {
     if (!((HEAP32[($10_1 + 96 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 56 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     HEAP32[($10_1 + 108 | 0) >> 2] = $293(2e3 | 0) | 0;
     break label$2;
    }
   }
   HEAP32[($10_1 + 64 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($10_1 + 64 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 84 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$8
     }
     HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[($10_1 + 60 | 0) >> 2] | 0, HEAP32[($10_1 + 64 | 0) >> 2] | 0) | 0;
     HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (0 - (HEAP32[($10_1 + 60 | 0) >> 2] | 0) | 0) | 0;
     $124_1 = HEAP32[($10_1 + 100 | 0) >> 2] | 0;
     HEAP32[($10_1 + 100 | 0) >> 2] = $124_1 + 1 | 0;
     HEAP32[($10_1 + 32 | 0) >> 2] = (HEAPU8[$124_1 >> 0] | 0) & 255 | 0;
     HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
     HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($10_1 + 88 | 0) >> 2] | 0;
     label$10 : {
      if (!((HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($10_1 + 108 | 0) >> 2] = $293(2211 | 0) | 0;
      break label$2;
     }
     label$11 : {
      if (!((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
       break label$11
      }
      label$12 : {
       if ((HEAP32[($10_1 + 52 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($10_1 + 88 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
        break label$12
       }
       fimport$54(1522 | 0, 2854 | 0, 4011 | 0, 1577 | 0);
       abort();
      }
      HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (Math_imul(HEAP32[($10_1 + 88 | 0) >> 2] | 0, HEAP32[($10_1 + 92 | 0) >> 2] | 0) - (HEAP32[($10_1 + 52 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($10_1 + 28 | 0) >> 2] = 1;
      HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($10_1 + 52 | 0) >> 2] | 0;
     }
     label$13 : {
      if (HEAP32[($10_1 + 64 | 0) >> 2] | 0) {
       break label$13
      }
      HEAP32[($10_1 + 32 | 0) >> 2] = (HEAPU8[((HEAP32[($10_1 + 32 | 0) >> 2] | 0) + 20793 | 0) >> 0] | 0) & 255 | 0;
     }
     HEAP32[($10_1 + 48 | 0) >> 2] = 0;
     label$14 : {
      label$15 : while (1) {
       if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       $181_1 = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
       label$16 : {
        label$17 : {
         switch ($181_1 | 0) {
         case 0:
          HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0;
          break label$16;
         case 1:
          HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0;
          break label$16;
         case 2:
          HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) | 0) & 255 | 0;
          break label$16;
         case 3:
          HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) >> 1 | 0) | 0) & 255 | 0;
          break label$16;
         case 4:
          $247_1 = 0;
          $251_1 = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ($391($247_1 | 0, (HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0, $247_1 | 0) | 0) | 0) & 255 | 0;
          HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = $251_1;
          break label$16;
         case 5:
          HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0;
          break label$16;
         case 6:
          break label$17;
         default:
          break label$16;
         };
        }
        HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0;
       }
       HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
       continue label$15;
      };
     }
     label$24 : {
      label$25 : {
       if (!((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
        break label$25
       }
       label$26 : {
        if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) != (HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$26
        }
        HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0) >> 0] = 255;
       }
       HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0;
       HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
       HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
       break label$24;
      }
      HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     }
     label$27 : {
      label$28 : {
       label$29 : {
        if ((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0) {
         break label$29
        }
        if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) == (HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$28
        }
       }
       HEAP32[($10_1 + 20 | 0) >> 2] = Math_imul((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + -1 | 0, HEAP32[($10_1 + 44 | 0) >> 2] | 0);
       $327_1 = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
       label$30 : {
        label$31 : {
         switch ($327_1 | 0) {
         case 0:
          $2014(HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) | 0;
          break label$30;
         case 1:
          HEAP32[($10_1 + 48 | 0) >> 2] = 0;
          label$38 : {
           label$39 : while (1) {
            if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$38
            }
            HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 28 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0) & 255 | 0;
            HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
            continue label$39;
           };
          }
          break label$30;
         case 2:
          HEAP32[($10_1 + 48 | 0) >> 2] = 0;
          label$40 : {
           label$41 : while (1) {
            if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$40
            }
            HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) | 0) & 255 | 0;
            HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
            continue label$41;
           };
          }
          break label$30;
         case 3:
          HEAP32[($10_1 + 48 | 0) >> 2] = 0;
          label$42 : {
           label$43 : while (1) {
            if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$42
            }
            HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((((HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 28 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0) >> 1 | 0) | 0) & 255 | 0;
            HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
            continue label$43;
           };
          }
          break label$30;
         case 4:
          HEAP32[($10_1 + 48 | 0) >> 2] = 0;
          label$44 : {
           label$45 : while (1) {
            if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$44
            }
            $471_1 = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ($391((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 28 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 28 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0) | 0) | 0) & 255 | 0;
            HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = $471_1;
            HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
            continue label$45;
           };
          }
          break label$30;
         case 5:
          HEAP32[($10_1 + 48 | 0) >> 2] = 0;
          label$46 : {
           label$47 : while (1) {
            if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$46
            }
            HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 28 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) >> 1 | 0) | 0) & 255 | 0;
            HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
            continue label$47;
           };
          }
          break label$30;
         case 6:
          break label$31;
         default:
          break label$30;
         };
        }
        HEAP32[($10_1 + 48 | 0) >> 2] = 0;
        label$48 : {
         label$49 : while (1) {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$48
          }
          $533_1 = 0;
          $537_1 = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ($391((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 28 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0, $533_1 | 0, $533_1 | 0) | 0) | 0) & 255 | 0;
          HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = $537_1;
          HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
          continue label$49;
         };
        }
       }
       HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 20 | 0) >> 2] | 0) | 0;
       break label$27;
      }
      label$50 : {
       if (((HEAP32[($10_1 + 44 | 0) >> 2] | 0) + 1 | 0 | 0) == (HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$50
       }
       fimport$54(2660 | 0, 2854 | 0, 4064 | 0, 1577 | 0);
       abort();
      }
      $560_1 = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
      label$51 : {
       label$52 : {
        switch ($560_1 | 0) {
        case 0:
         HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
         label$59 : {
          label$60 : while (1) {
           if (!((HEAP32[($10_1 + 68 | 0) >> 2] | 0) >>> 0 >= 1 >>> 0 & 1 | 0)) {
            break label$59
           }
           HEAP32[($10_1 + 48 | 0) >> 2] = 0;
           label$61 : {
            label$62 : while (1) {
             if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$61
             }
             HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
             continue label$62;
            };
           }
           HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + -1 | 0;
           HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0) >> 0] = 255;
           HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           continue label$60;
          };
         }
         break label$51;
        case 1:
         HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
         label$63 : {
          label$64 : while (1) {
           if (!((HEAP32[($10_1 + 68 | 0) >> 2] | 0) >>> 0 >= 1 >>> 0 & 1 | 0)) {
            break label$63
           }
           HEAP32[($10_1 + 48 | 0) >> 2] = 0;
           label$65 : {
            label$66 : while (1) {
             if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$65
             }
             HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0) & 255 | 0;
             HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
             continue label$66;
            };
           }
           HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + -1 | 0;
           HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0) >> 0] = 255;
           HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           continue label$64;
          };
         }
         break label$51;
        case 2:
         HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
         label$67 : {
          label$68 : while (1) {
           if (!((HEAP32[($10_1 + 68 | 0) >> 2] | 0) >>> 0 >= 1 >>> 0 & 1 | 0)) {
            break label$67
           }
           HEAP32[($10_1 + 48 | 0) >> 2] = 0;
           label$69 : {
            label$70 : while (1) {
             if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$69
             }
             HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) | 0) & 255 | 0;
             HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
             continue label$70;
            };
           }
           HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + -1 | 0;
           HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0) >> 0] = 255;
           HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           continue label$68;
          };
         }
         break label$51;
        case 3:
         HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
         label$71 : {
          label$72 : while (1) {
           if (!((HEAP32[($10_1 + 68 | 0) >> 2] | 0) >>> 0 >= 1 >>> 0 & 1 | 0)) {
            break label$71
           }
           HEAP32[($10_1 + 48 | 0) >> 2] = 0;
           label$73 : {
            label$74 : while (1) {
             if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$73
             }
             HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((((HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0) >> 1 | 0) | 0) & 255 | 0;
             HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
             continue label$74;
            };
           }
           HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + -1 | 0;
           HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0) >> 0] = 255;
           HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           continue label$72;
          };
         }
         break label$51;
        case 4:
         HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
         label$75 : {
          label$76 : while (1) {
           if (!((HEAP32[($10_1 + 68 | 0) >> 2] | 0) >>> 0 >= 1 >>> 0 & 1 | 0)) {
            break label$75
           }
           HEAP32[($10_1 + 48 | 0) >> 2] = 0;
           label$77 : {
            label$78 : while (1) {
             if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$77
             }
             $833_1 = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ($391((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($10_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0) | 0) | 0) & 255 | 0;
             HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = $833_1;
             HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
             continue label$78;
            };
           }
           HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + -1 | 0;
           HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0) >> 0] = 255;
           HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           continue label$76;
          };
         }
         break label$51;
        case 5:
         HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
         label$79 : {
          label$80 : while (1) {
           if (!((HEAP32[($10_1 + 68 | 0) >> 2] | 0) >>> 0 >= 1 >>> 0 & 1 | 0)) {
            break label$79
           }
           HEAP32[($10_1 + 48 | 0) >> 2] = 0;
           label$81 : {
            label$82 : while (1) {
             if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$81
             }
             HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) >> 1 | 0) | 0) & 255 | 0;
             HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
             continue label$82;
            };
           }
           HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + -1 | 0;
           HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0) >> 0] = 255;
           HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
           continue label$80;
          };
         }
         break label$51;
        case 6:
         break label$52;
        default:
         break label$51;
        };
       }
       HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
       label$83 : {
        label$84 : while (1) {
         if (!((HEAP32[($10_1 + 68 | 0) >> 2] | 0) >>> 0 >= 1 >>> 0 & 1 | 0)) {
          break label$83
         }
         HEAP32[($10_1 + 48 | 0) >> 2] = 0;
         label$85 : {
          label$86 : while (1) {
           if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$85
           }
           $947_1 = 0;
           $951_1 = (((HEAPU8[((HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + ($391((HEAPU8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0, $947_1 | 0, $947_1 | 0) | 0) | 0) & 255 | 0;
           HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) >> 0] = $951_1;
           HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
           continue label$86;
          };
         }
         HEAP32[($10_1 + 68 | 0) >> 2] = (HEAP32[($10_1 + 68 | 0) >> 2] | 0) + -1 | 0;
         HEAP8[((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0) >> 0] = 255;
         HEAP32[($10_1 + 100 | 0) >> 2] = (HEAP32[($10_1 + 100 | 0) >> 2] | 0) + (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0;
         HEAP32[($10_1 + 40 | 0) >> 2] = (HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
         HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0;
         continue label$84;
        };
       }
      }
     }
     HEAP32[($10_1 + 64 | 0) >> 2] = (HEAP32[($10_1 + 64 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   label$87 : {
    if (!((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
     break label$87
    }
    HEAP32[($10_1 + 64 | 0) >> 2] = 0;
    label$88 : {
     label$89 : while (1) {
      if (!((HEAP32[($10_1 + 64 | 0) >> 2] | 0) >>> 0 < (HEAP32[($10_1 + 84 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$88
      }
      HEAP32[($10_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[($10_1 + 60 | 0) >> 2] | 0, HEAP32[($10_1 + 64 | 0) >> 2] | 0) | 0;
      HEAP32[($10_1 + 12 | 0) >> 2] = (((HEAP32[((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[($10_1 + 60 | 0) >> 2] | 0, HEAP32[($10_1 + 64 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($10_1 + 88 | 0) >> 2] | 0, HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) + (0 - (HEAP32[($10_1 + 52 | 0) >> 2] | 0) | 0) | 0;
      label$90 : {
       label$91 : {
        if (HEAP32[($10_1 + 76 | 0) >> 2] | 0) {
         break label$91
        }
        $1017_1 = (HEAPU8[((HEAP32[($10_1 + 80 | 0) >> 2] | 0) + 20748 | 0) >> 0] | 0) & 255 | 0;
        break label$90;
       }
       $1017_1 = 1;
      }
      HEAP8[($10_1 + 11 | 0) >> 0] = $1017_1;
      label$92 : {
       label$93 : {
        if (!((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$93
        }
        HEAP32[($10_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 88 | 0) >> 2] | 0, HEAP32[($10_1 + 44 | 0) >> 2] | 0);
        label$94 : {
         label$95 : while (1) {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
           break label$94
          }
          $1046_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 4 | 0);
          $1047_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1047_1 + 1 | 0;
          HEAP8[$1047_1 >> 0] = $1046_1;
          $1059_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) & 15 | 0);
          $1060_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1060_1 + 1 | 0;
          HEAP8[$1060_1 >> 0] = $1059_1;
          HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) - 2 | 0;
          HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0;
          continue label$95;
         };
        }
        label$96 : {
         if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
          break label$96
         }
         $1085_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 4 | 0);
         $1086_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
         HEAP32[($10_1 + 16 | 0) >> 2] = $1086_1 + 1 | 0;
         HEAP8[$1086_1 >> 0] = $1085_1;
        }
        break label$92;
       }
       label$97 : {
        label$98 : {
         if (!((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
          break label$98
         }
         HEAP32[($10_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 88 | 0) >> 2] | 0, HEAP32[($10_1 + 44 | 0) >> 2] | 0);
         label$99 : {
          label$100 : while (1) {
           if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
            break label$99
           }
           $1115_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 6 | 0);
           $1116_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1116_1 + 1 | 0;
           HEAP8[$1116_1 >> 0] = $1115_1;
           $1130_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 4 | 0) & 3 | 0);
           $1131_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1131_1 + 1 | 0;
           HEAP8[$1131_1 >> 0] = $1130_1;
           $1145_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 2 | 0) & 3 | 0);
           $1146_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1146_1 + 1 | 0;
           HEAP8[$1146_1 >> 0] = $1145_1;
           $1158_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) & 3 | 0);
           $1159_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1159_1 + 1 | 0;
           HEAP8[$1159_1 >> 0] = $1158_1;
           HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) - 4 | 0;
           HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0;
           continue label$100;
          };
         }
         label$101 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
           break label$101
          }
          $1184_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 6 | 0);
          $1185_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1185_1 + 1 | 0;
          HEAP8[$1185_1 >> 0] = $1184_1;
         }
         label$102 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
           break label$102
          }
          $1206_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 4 | 0) & 3 | 0);
          $1207_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1207_1 + 1 | 0;
          HEAP8[$1207_1 >> 0] = $1206_1;
         }
         label$103 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
           break label$103
          }
          $1228_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 2 | 0) & 3 | 0);
          $1229_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1229_1 + 1 | 0;
          HEAP8[$1229_1 >> 0] = $1228_1;
         }
         break label$97;
        }
        label$104 : {
         if (!((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
          break label$104
         }
         HEAP32[($10_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 88 | 0) >> 2] | 0, HEAP32[($10_1 + 44 | 0) >> 2] | 0);
         label$105 : {
          label$106 : while (1) {
           if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) >= (8 | 0) & 1 | 0)) {
            break label$105
           }
           $1258_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 7 | 0);
           $1259_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1259_1 + 1 | 0;
           HEAP8[$1259_1 >> 0] = $1258_1;
           $1273_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 6 | 0) & 1 | 0);
           $1274_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1274_1 + 1 | 0;
           HEAP8[$1274_1 >> 0] = $1273_1;
           $1288_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 5 | 0) & 1 | 0);
           $1289_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1289_1 + 1 | 0;
           HEAP8[$1289_1 >> 0] = $1288_1;
           $1303_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 4 | 0) & 1 | 0);
           $1304_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1304_1 + 1 | 0;
           HEAP8[$1304_1 >> 0] = $1303_1;
           $1318_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 3 | 0) & 1 | 0);
           $1319_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1319_1 + 1 | 0;
           HEAP8[$1319_1 >> 0] = $1318_1;
           $1333_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 2 | 0) & 1 | 0);
           $1334_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1334_1 + 1 | 0;
           HEAP8[$1334_1 >> 0] = $1333_1;
           $1348_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 1 | 0) & 1 | 0);
           $1349_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1349_1 + 1 | 0;
           HEAP8[$1349_1 >> 0] = $1348_1;
           $1361_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) & 1 | 0);
           $1362_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
           HEAP32[($10_1 + 16 | 0) >> 2] = $1362_1 + 1 | 0;
           HEAP8[$1362_1 >> 0] = $1361_1;
           HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) - 8 | 0;
           HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0;
           continue label$106;
          };
         }
         label$107 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
           break label$107
          }
          $1387_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, ((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 7 | 0);
          $1388_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1388_1 + 1 | 0;
          HEAP8[$1388_1 >> 0] = $1387_1;
         }
         label$108 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
           break label$108
          }
          $1409_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 6 | 0) & 1 | 0);
          $1410_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1410_1 + 1 | 0;
          HEAP8[$1410_1 >> 0] = $1409_1;
         }
         label$109 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
           break label$109
          }
          $1431_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 5 | 0) & 1 | 0);
          $1432_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1432_1 + 1 | 0;
          HEAP8[$1432_1 >> 0] = $1431_1;
         }
         label$110 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (3 | 0) & 1 | 0)) {
           break label$110
          }
          $1453_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 4 | 0) & 1 | 0);
          $1454_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1454_1 + 1 | 0;
          HEAP8[$1454_1 >> 0] = $1453_1;
         }
         label$111 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
           break label$111
          }
          $1475_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 3 | 0) & 1 | 0);
          $1476_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1476_1 + 1 | 0;
          HEAP8[$1476_1 >> 0] = $1475_1;
         }
         label$112 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (5 | 0) & 1 | 0)) {
           break label$112
          }
          $1497_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 2 | 0) & 1 | 0);
          $1498_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1498_1 + 1 | 0;
          HEAP8[$1498_1 >> 0] = $1497_1;
         }
         label$113 : {
          if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) > (6 | 0) & 1 | 0)) {
           break label$113
          }
          $1519_1 = Math_imul((HEAPU8[($10_1 + 11 | 0) >> 0] | 0) & 255 | 0, (((HEAPU8[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) >> 1 | 0) & 1 | 0);
          $1520_1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
          HEAP32[($10_1 + 16 | 0) >> 2] = $1520_1 + 1 | 0;
          HEAP8[$1520_1 >> 0] = $1519_1;
         }
        }
       }
      }
      label$114 : {
       if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) != (HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$114
       }
       HEAP32[($10_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[($10_1 + 60 | 0) >> 2] | 0, HEAP32[($10_1 + 64 | 0) >> 2] | 0) | 0;
       label$115 : {
        label$116 : {
         if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
          break label$116
         }
         HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
         label$117 : {
          label$118 : while (1) {
           if (!((HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
            break label$117
           }
           HEAP8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) | 0) >> 0] = 255;
           HEAP8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) << 1 | 0) + 0 | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (HEAP32[($10_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) + -1 | 0;
           continue label$118;
          };
         }
         break label$115;
        }
        label$119 : {
         if ((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0) {
          break label$119
         }
         fimport$54(4832 | 0, 2854 | 0, 4144 | 0, 1577 | 0);
         abort();
        }
        HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - 1 | 0;
        label$120 : {
         label$121 : while (1) {
          if (!((HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$120
          }
          HEAP8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) << 2 | 0) + 3 | 0) | 0) >> 0] = 255;
          HEAP8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) << 2 | 0) + 2 | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (Math_imul(HEAP32[($10_1 + 4 | 0) >> 2] | 0, 3) + 2 | 0) | 0) >> 0] | 0;
          HEAP8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) << 2 | 0) + 1 | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (Math_imul(HEAP32[($10_1 + 4 | 0) >> 2] | 0, 3) + 1 | 0) | 0) >> 0] | 0;
          HEAP8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) << 2 | 0) + 0 | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (Math_imul(HEAP32[($10_1 + 4 | 0) >> 2] | 0, 3) + 0 | 0) | 0) >> 0] | 0;
          HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          continue label$121;
         };
        }
       }
      }
      HEAP32[($10_1 + 64 | 0) >> 2] = (HEAP32[($10_1 + 64 | 0) >> 2] | 0) + 1 | 0;
      continue label$89;
     };
    }
   }
   HEAP32[($10_1 + 108 | 0) >> 2] = 1;
  }
  $1656_1 = HEAP32[($10_1 + 108 | 0) >> 2] | 0;
  global$0 = $10_1 + 112 | 0;
  return $1656_1 | 0;
 }
 
 function $391($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $47_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0) - (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $604((HEAP32[($5_1 + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $604((HEAP32[($5_1 + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $604((HEAP32[($5_1 + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) <= (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) <= (HEAP32[$5_1 >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) <= (HEAP32[$5_1 >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  }
  $47_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $47_1 | 0;
 }
 
 function $392($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $86_1 = 0, $89_1 = 0, $94_1 = 0, $99_1 = 0, $104_1 = 0, $135_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((($337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (71 | 0) & 1 | 0) {
      break label$3
     }
     if ((($337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (73 | 0) & 1 | 0) {
      break label$3
     }
     if ((($337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (70 | 0) & 1 | 0) {
      break label$3
     }
     if (!((($337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (56 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = $293(3974 | 0) | 0;
    break label$1;
   }
   HEAP8[($6_1 + 11 | 0) >> 0] = $337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    if (!(((HEAPU8[($6_1 + 11 | 0) >> 0] | 0) & 255 | 0 | 0) != (55 | 0) & 1 | 0)) {
     break label$4
    }
    if (!(((HEAPU8[($6_1 + 11 | 0) >> 0] | 0) & 255 | 0 | 0) != (57 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = $293(3974 | 0) | 0;
    break label$1;
   }
   label$5 : {
    if (!((($337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != (97 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = $293(3974 | 0) | 0;
    break label$1;
   }
   HEAP32[(0 + 22100 | 0) >> 2] = 5224;
   $86_1 = $339(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 2] = $86_1;
   $89_1 = $339(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = $89_1;
   $94_1 = ($337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] = $94_1;
   $99_1 = ($337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] = $99_1;
   $104_1 = ($337(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = $104_1;
   HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] = -1;
   label$6 : {
    if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] = 4;
   }
   label$7 : {
    if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
     break label$7
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 1;
    break label$1;
   }
   label$8 : {
    if (!((HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & 128 | 0)) {
     break label$8
    }
    $394(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 40 | 0 | 0, 2 << ((HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & 7 | 0) | 0 | 0, -1 | 0);
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 1;
  }
  $135_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $135_1 | 0;
 }
 
 function $393($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 48 | 0;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 40 | 0) + ((HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) | 0;
      HEAP8[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0;
      HEAP8[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
      HEAP8[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 0] | 0;
      HEAP8[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 3 | 0) >> 0] = 0;
      HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0;
      continue label$4;
     };
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($7_1 + 44 | 0) >> 2] | 0) >> 2] | 0) << 2 | 0) | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $394($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $16_1 = 0, $23_1 = 0, $30_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $16_1 = $337(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[(((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = $16_1;
    $23_1 = $337(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[(((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] = $23_1;
    $30_1 = $337(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] = $30_1;
    HEAP8[(((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0 ? 0 : 255;
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $395($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $149_1 = 0, $170_1 = 0, $182_1 = 0, $197_1 = 0, $221_1 = 0, $243_1 = 0, $270_1 = 0, $96_1 = 0, $181_1 = 0, $272_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $1_1;
  HEAP8[($4_1 + 51 | 0) >> 0] = $337(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(((HEAPU8[($4_1 + 51 | 0) >> 0] | 0) & 255 | 0 | 0) > (12 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 60 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = 1 << ((HEAPU8[($4_1 + 51 | 0) >> 0] | 0) & 255 | 0) | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = 1;
   HEAP32[($4_1 + 32 | 0) >> 2] = ((HEAPU8[($4_1 + 51 | 0) >> 0] | 0) & 255 | 0) + 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = (1 << (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0) - 1 | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   HEAP32[($4_1 + 40 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP16[(((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 2088 | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 1] = 65535;
     HEAP8[((((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 2088 | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     HEAP8[((((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 2088 | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 2 | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = -1;
   HEAP32[($4_1 + 44 | 0) >> 2] = 0;
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      label$8 : {
       if (HEAP32[($4_1 + 44 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($4_1 + 44 | 0) >> 2] = ($337(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
       label$9 : {
        if (HEAP32[($4_1 + 44 | 0) >> 2] | 0) {
         break label$9
        }
        HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        break label$1;
       }
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + -1 | 0;
      $96_1 = ($337(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0 | ($96_1 << (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0;
      break label$6;
     }
     HEAP32[$4_1 >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) & (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) - (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0;
     label$10 : {
      label$11 : {
       if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[($4_1 + 32 | 0) >> 2] = ((HEAPU8[($4_1 + 51 | 0) >> 0] | 0) & 255 | 0) + 1 | 0;
       HEAP32[($4_1 + 28 | 0) >> 2] = (1 << (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0) - 1 | 0;
       HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 2 | 0;
       HEAP32[($4_1 + 20 | 0) >> 2] = -1;
       HEAP32[($4_1 + 36 | 0) >> 2] = 0;
       break label$10;
      }
      label$12 : {
       if (!((HEAP32[$4_1 >> 2] | 0 | 0) == ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
        break label$12
       }
       $340(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
       label$13 : {
        label$14 : while (1) {
         $149_1 = ($337(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
         HEAP32[($4_1 + 44 | 0) >> 2] = $149_1;
         if (!(($149_1 | 0) > (0 | 0) & 1 | 0)) {
          break label$13
         }
         $340(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
         continue label$14;
        };
       }
       HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       break label$1;
      }
      label$15 : {
       label$16 : {
        if (!((HEAP32[$4_1 >> 2] | 0 | 0) <= (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$16
        }
        label$17 : {
         if (!(HEAP32[($4_1 + 36 | 0) >> 2] | 0)) {
          break label$17
         }
         $170_1 = 0;
         HEAP32[($4_1 + 60 | 0) >> 2] = $293(3398 | 0) | 0 ? $170_1 : $170_1;
         break label$1;
        }
        label$18 : {
         label$19 : {
          if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
           break label$19
          }
          $181_1 = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 2088 | 0;
          $182_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
          HEAP32[($4_1 + 24 | 0) >> 2] = $182_1 + 1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $181_1 + ($182_1 << 2 | 0) | 0;
          label$20 : {
           if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) > (4096 | 0) & 1 | 0)) {
            break label$20
           }
           $197_1 = 0;
           HEAP32[($4_1 + 60 | 0) >> 2] = $293(2114 | 0) | 0 ? $197_1 : $197_1;
           break label$1;
          }
          HEAP16[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 1] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
          HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[((((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 2088 | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] | 0;
          label$21 : {
           label$22 : {
            if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$22
            }
            $221_1 = (HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0;
            break label$21;
           }
           $221_1 = (HEAPU8[((((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 2088 | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] | 0) & 255 | 0;
          }
          HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 3 | 0) >> 0] = $221_1;
          break label$18;
         }
         label$23 : {
          if (!((HEAP32[$4_1 >> 2] | 0 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$23
          }
          $243_1 = 0;
          HEAP32[($4_1 + 60 | 0) >> 2] = $293(2188 | 0) | 0 ? $243_1 : $243_1;
          break label$1;
         }
        }
        $396(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, (HEAP32[$4_1 >> 2] | 0) & 65535 | 0 | 0);
        label$24 : {
         if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) & (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0) {
          break label$24
         }
         if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) <= (4095 | 0) & 1 | 0)) {
          break label$24
         }
         HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = (1 << (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0) - 1 | 0;
        }
        HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
        break label$15;
       }
       $270_1 = 0;
       HEAP32[($4_1 + 60 | 0) >> 2] = $293(2188 | 0) | 0 ? $270_1 : $270_1;
       break label$1;
      }
     }
    }
    continue label$5;
   };
  }
  $272_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  global$0 = $4_1 + 64 | 0;
  return $272_1 | 0;
 }
 
 function $396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $93_1 = 0, $111_1 = 0, $124_1 = 0, $150_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP16[($4_1 + 10 | 0) >> 1] = $1_1;
  $15_1 = 16;
  label$1 : {
   if (!((((HEAPU16[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 2088 | 0) + (((HEAPU16[($4_1 + 10 | 0) >> 1] | 0) & 65535 | 0) << 2 | 0) | 0) >> 1] | 0) << $15_1 | 0) >> $15_1 | 0 | 0) >= (0 | 0) & 1 | 0)) {
    break label$1
   }
   $396(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, (HEAPU16[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 2088 | 0) + (((HEAPU16[($4_1 + 10 | 0) >> 1] | 0) & 65535 | 0) << 2 | 0) | 0) >> 1] | 0) & 65535 | 0 | 0);
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18508 | 0) >> 2] | 0 | 0) >= (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18500 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    break label$2;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18504 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18508 | 0) >> 2] | 0) | 0) | 0;
   HEAP32[$4_1 >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18472 | 0) >> 2] | 0) + (((HEAPU8[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 2088 | 0) + (((HEAPU16[($4_1 + 10 | 0) >> 1] | 0) & 65535 | 0) << 2 | 0) | 0) + 3 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0;
   label$4 : {
    if (!(((HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 3 | 0) >> 0] | 0) & 255 | 0 | 0) >= (128 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 2 | 0) >> 0] | 0;
    HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 1 | 0) >> 0] | 0;
    HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[(HEAP32[$4_1 >> 2] | 0) >> 0] | 0;
    HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 3 | 0) >> 0] = HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 3 | 0) >> 0] | 0;
   }
   $93_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[($93_1 + 18504 | 0) >> 2] = (HEAP32[($93_1 + 18504 | 0) >> 2] | 0) + 4 | 0;
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18504 | 0) >> 2] | 0 | 0) >= (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18496 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18504 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18488 | 0) >> 2] | 0;
   $111_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[($111_1 + 18508 | 0) >> 2] = (HEAP32[($111_1 + 18508 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18480 | 0) >> 2] | 0) | 0;
   label$5 : while (1) {
    $124_1 = 0;
    label$6 : {
     if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18508 | 0) >> 2] | 0 | 0) >= (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18500 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $124_1 = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18476 | 0) >> 2] | 0 | 0) > (0 | 0);
    }
    label$7 : {
     if (!($124_1 & 1 | 0)) {
      break label$7
     }
     HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18480 | 0) >> 2] = Math_imul(1 << (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18476 | 0) >> 2] | 0) | 0, HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18512 | 0) >> 2] | 0);
     HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18508 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18492 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18480 | 0) >> 2] | 0) >> 1 | 0) | 0;
     $150_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[($150_1 + 18476 | 0) >> 2] = (HEAP32[($150_1 + 18476 | 0) >> 2] | 0) + -1 | 0;
     continue label$5;
    }
    break label$5;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $33_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((($337(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 255 | 0 | 0) != ((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (HEAP32[$4_1 >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 1;
  }
  $33_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $33_1 | 0;
 }
 
 function $398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $22_1 = 0, $25_1 = 0, $36_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 128;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0) & (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0)) {
       break label$4
      }
      label$5 : {
       if (!($350(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
        break label$5
       }
       $22_1 = 0;
       HEAP32[($5_1 + 28 | 0) >> 2] = $293(3301 | 0) | 0 ? $22_1 : $22_1;
       break label$1;
      }
      $25_1 = $337(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      HEAP8[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = $25_1;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  }
  $36_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $399($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = 128;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0) & (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0)) {
      break label$3
     }
     HEAP8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $400($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $11_1 = 0, $23_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : while (1) {
   $8_1 = 0;
   label$2 : {
    if ($350(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $11_1 = 24;
    $8_1 = ($402(((HEAPU8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] | 0) << $11_1 | 0) >> $11_1 | 0 | 0) | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($8_1 & 1 | 0)) {
     break label$3
    }
    $23_1 = $337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] = $23_1;
    continue label$1;
   }
   break label$1;
  };
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $12_1 = 0, $28_1 = 0, $35_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : while (1) {
   $9_1 = 0;
   label$2 : {
    if ($350(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $12_1 = 24;
    $9_1 = ($403(((HEAPU8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] | 0) << $12_1 | 0) >> $12_1 | 0 | 0) | 0 | 0) != (0 | 0);
   }
   label$3 : {
    if (!($9_1 & 1 | 0)) {
     break label$3
    }
    $28_1 = 24;
    HEAP32[($4_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 10) + ((((HEAPU8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] | 0) << $28_1 | 0) >> $28_1 | 0) - 48 | 0) | 0;
    $35_1 = $337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] = $35_1;
    continue label$1;
   }
   break label$1;
  };
  $37_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $37_1 | 0;
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, $5_1 = 0, $17_1 = 0, $28_1 = 0, $39_1 = 0, $50_1 = 0, $61_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  $5_1 = 24;
  $15_1 = 1;
  label$1 : {
   if ((((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) << $5_1 | 0) >> $5_1 | 0 | 0) == (32 | 0) & 1 | 0) {
    break label$1
   }
   $17_1 = 24;
   $15_1 = 1;
   if ((((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) << $17_1 | 0) >> $17_1 | 0 | 0) == (9 | 0) & 1 | 0) {
    break label$1
   }
   $28_1 = 24;
   $15_1 = 1;
   if ((((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) << $28_1 | 0) >> $28_1 | 0 | 0) == (10 | 0) & 1 | 0) {
    break label$1
   }
   $39_1 = 24;
   $15_1 = 1;
   if ((((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) << $39_1 | 0) >> $39_1 | 0 | 0) == (11 | 0) & 1 | 0) {
    break label$1
   }
   $50_1 = 24;
   $15_1 = 1;
   if ((((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) << $50_1 | 0) >> $50_1 | 0 | 0) == (12 | 0) & 1 | 0) {
    break label$1
   }
   $61_1 = 24;
   $15_1 = (((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) << $61_1 | 0) >> $61_1 | 0 | 0) == (13 | 0);
  }
  return $15_1 & 1 | 0 | 0;
 }
 
 function $403($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  $5_1 = 24;
  $15_1 = 0;
  label$1 : {
   if (!((((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) << $5_1 | 0) >> $5_1 | 0 | 0) >= (48 | 0) & 1 | 0)) {
    break label$1
   }
   $17_1 = 24;
   $15_1 = (((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) << $17_1 | 0) >> $17_1 | 0 | 0) <= (57 | 0);
  }
  return $15_1 & 1 | 0 | 0;
 }
 
 function $404($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = ($411(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) & 15 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = ($411(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 8 | 0) + (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0 | 0) % (31 | 0) | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = $293(2297 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 32 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = $293(1876 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) != (8 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = $293(2544 | 0) | 0;
    break label$1;
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = 1;
  }
  $39_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $39_1 | 0;
 }
 
 function $405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $23_1 = 0, $27_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $412(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) & ((1 << (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) - 1 | 0) | 0;
  $23_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($23_1 + 12 | 0) >> 2] = (HEAP32[($23_1 + 12 | 0) >> 2] | 0) >>> (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  $27_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($27_1 + 8 | 0) >> 2] = (HEAP32[($27_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  $30_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $30_1 | 0;
 }
 
 function $406($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $33_1 = 0, $37_1 = 0, $56_1 = 0, $128_1 = 0, $132_1 = 0, $25_1 = 0, $55_1 = 0, $136_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 7 | 0)) {
    break label$1
   }
   $405(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 7 | 0 | 0) | 0;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$2
    }
    $25_1 = (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) & 255 | 0;
    $26_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $26_1 + 1 | 0;
    HEAP8[(($3_1 + 20 | 0) + $26_1 | 0) >> 0] = $25_1;
    $33_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    HEAP32[($33_1 + 12 | 0) >> 2] = (HEAP32[($33_1 + 12 | 0) >> 2] | 0) >>> 8 | 0;
    $37_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    HEAP32[($37_1 + 8 | 0) >> 2] = (HEAP32[($37_1 + 8 | 0) >> 2] | 0) - 8 | 0;
    continue label$3;
   };
  }
  label$4 : {
   if (!(HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0)) {
    break label$4
   }
   fimport$54(4884 | 0, 2854 | 0, 3749 | 0, 2720 | 0);
   abort();
  }
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$5
    }
    $55_1 = $411(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $56_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $56_1 + 1 | 0;
    HEAP8[(($3_1 + 20 | 0) + $56_1 | 0) >> 0] = $55_1;
    continue label$6;
   };
  }
  HEAP32[($3_1 + 16 | 0) >> 2] = (((HEAPU8[($3_1 + 21 | 0) >> 0] | 0) & 255 | 0) << 8 | 0) + ((HEAPU8[($3_1 + 20 | 0) >> 0] | 0) & 255 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = (((HEAPU8[($3_1 + 23 | 0) >> 0] | 0) & 255 | 0) << 8 | 0) + ((HEAPU8[($3_1 + 22 | 0) >> 0] | 0) & 255 | 0) | 0;
  label$7 : {
   label$8 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) ^ 65535 | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = $293(1717 | 0) | 0;
    break label$7;
   }
   label$9 : {
    if (!(((HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0) >>> 0 > (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$9
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = $293(2280 | 0) | 0;
    break label$7;
   }
   label$10 : {
    if (!(((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0) >>> 0 > (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$10
    }
    label$11 : {
     if ($413(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) {
      break label$11
     }
     HEAP32[($3_1 + 28 | 0) >> 2] = 0;
     break label$7;
    }
   }
   $2014(HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   $128_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   HEAP32[$128_1 >> 2] = (HEAP32[$128_1 >> 2] | 0) + (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0;
   $132_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   HEAP32[($132_1 + 16 | 0) >> 2] = (HEAP32[($132_1 + 16 | 0) >> 2] | 0) + (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0;
   HEAP32[($3_1 + 28 | 0) >> 2] = 1;
  }
  $136_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $136_1 | 0;
 }
 
 function $407() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) <= (143 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 22160 | 0) >> 0] = 8;
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) <= (255 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 22160 | 0) >> 0] = 9;
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) <= (279 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 22160 | 0) >> 0] = 7;
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) <= (287 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 22160 | 0) >> 0] = 8;
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) <= (31 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 22128 | 0) >> 0] = 5;
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  return;
 }
 
 function $408($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $34_1 = 0, $270_1 = 0, $278_1 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 184 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 176 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 168 | 0) >> 2] = 0;
  $2015($5_1 + 16 | 0 | 0, 0 | 0, 68 | 0) | 0;
  $2015(HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0, 0 | 0, 1024 | 0) | 0;
  HEAP32[($5_1 + 172 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $34_1 = ($5_1 + 16 | 0) + (((HEAPU8[((HEAP32[($5_1 + 180 | 0) >> 2] | 0) + (HEAP32[($5_1 + 172 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0;
    HEAP32[$34_1 >> 2] = (HEAP32[$34_1 >> 2] | 0) + 1 | 0;
    HEAP32[($5_1 + 172 | 0) >> 2] = (HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAP32[($5_1 + 172 | 0) >> 2] = 1;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      if (!((HEAP32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (1 << (HEAP32[($5_1 + 172 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($5_1 + 188 | 0) >> 2] = $293(2076 | 0) | 0;
      break label$3;
     }
     HEAP32[($5_1 + 172 | 0) >> 2] = (HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAP32[($5_1 + 164 | 0) >> 2] = 0;
   HEAP32[($5_1 + 172 | 0) >> 2] = 1;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[(($5_1 + 96 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 164 | 0) >> 2] | 0;
     HEAP16[(((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1024 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = HEAP32[($5_1 + 164 | 0) >> 2] | 0;
     HEAP16[(((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1124 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
     HEAP32[($5_1 + 164 | 0) >> 2] = (HEAP32[($5_1 + 164 | 0) >> 2] | 0) + (HEAP32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
     label$9 : {
      if (!(HEAP32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
       break label$9
      }
      label$10 : {
       if (!(((HEAP32[($5_1 + 164 | 0) >> 2] | 0) - 1 | 0 | 0) >= (1 << (HEAP32[($5_1 + 172 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[($5_1 + 188 | 0) >> 2] = $293(2043 | 0) | 0;
       break label$3;
      }
     }
     HEAP32[(((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1056 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($5_1 + 164 | 0) >> 2] | 0) << (16 - (HEAP32[($5_1 + 172 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($5_1 + 164 | 0) >> 2] = (HEAP32[($5_1 + 164 | 0) >> 2] | 0) << 1 | 0;
     HEAP32[($5_1 + 168 | 0) >> 2] = (HEAP32[($5_1 + 168 | 0) >> 2] | 0) + (HEAP32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 172 | 0) >> 2] = (HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   HEAP32[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1120 | 0) >> 2] = 65536;
   HEAP32[($5_1 + 172 | 0) >> 2] = 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAPU8[((HEAP32[($5_1 + 180 | 0) >> 2] | 0) + (HEAP32[($5_1 + 172 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0;
     label$13 : {
      if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
       break label$13
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = ((HEAP32[(($5_1 + 96 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) - ((HEAPU16[(((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1024 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) | 0) + ((HEAPU16[(((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1124 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) | 0;
      HEAP16[($5_1 + 6 | 0) >> 1] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 9 | 0 | (HEAP32[($5_1 + 172 | 0) >> 2] | 0) | 0;
      HEAP8[(((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1156 | 0) + (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      HEAP16[(((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + 1444 | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = HEAP32[($5_1 + 172 | 0) >> 2] | 0;
      label$14 : {
       if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) <= (9 | 0) & 1 | 0)) {
        break label$14
       }
       HEAP32[$5_1 >> 2] = $414(HEAP32[(($5_1 + 96 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
       label$15 : {
        label$16 : while (1) {
         if (!((HEAP32[$5_1 >> 2] | 0 | 0) < (512 | 0) & 1 | 0)) {
          break label$15
         }
         HEAP16[((HEAP32[($5_1 + 184 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 1 | 0) | 0) >> 1] = HEAPU16[($5_1 + 6 | 0) >> 1] | 0;
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (1 << (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) | 0;
         continue label$16;
        };
       }
      }
      $270_1 = ($5_1 + 96 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0;
      HEAP32[$270_1 >> 2] = (HEAP32[$270_1 >> 2] | 0) + 1 | 0;
     }
     HEAP32[($5_1 + 172 | 0) >> 2] = (HEAP32[($5_1 + 172 | 0) >> 2] | 0) + 1 | 0;
     continue label$12;
    };
   }
   HEAP32[($5_1 + 188 | 0) >> 2] = 1;
  }
  $278_1 = HEAP32[($5_1 + 188 | 0) >> 2] | 0;
  global$0 = $5_1 + 192 | 0;
  return $278_1 | 0;
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, $219_1 = 0, $98_1 = 0, $97_1 = 0, $216_1 = 0;
  $3_1 = global$0 - 2560 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 2552 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = ($405(HEAP32[($3_1 + 2552 | 0) >> 2] | 0 | 0, 5 | 0) | 0) + 257 | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = ($405(HEAP32[($3_1 + 2552 | 0) >> 2] | 0 | 0, 5 | 0) | 0) + 1 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = ($405(HEAP32[($3_1 + 2552 | 0) >> 2] | 0 | 0, 4 | 0) | 0) + 4 | 0;
  i64toi32_i32$0 = 0;
  $219_1 = 0;
  i64toi32_i32$1 = $3_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $219_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = i64toi32_i32$1 + 15 | 0;
  $9_1 = 0;
  HEAP8[$8_1 >> 0] = $9_1;
  HEAP8[($8_1 + 1 | 0) >> 0] = $9_1 >>> 8 | 0;
  HEAP8[($8_1 + 2 | 0) >> 0] = $9_1 >>> 16 | 0;
  HEAP8[($8_1 + 3 | 0) >> 0] = $9_1 >>> 24 | 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $219_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $405(HEAP32[($3_1 + 2552 | 0) >> 2] | 0 | 0, 3 | 0) | 0;
    HEAP8[(($3_1 + 32 | 0) + ((HEAPU8[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 20800 | 0) >> 0] | 0) & 255 | 0) | 0) >> 0] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : {
    if ($408($3_1 + 528 | 0 | 0, $3_1 + 32 | 0 | 0, 19 | 0) | 0) {
     break label$4
    }
    HEAP32[($3_1 + 2556 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) < ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $415(HEAP32[($3_1 + 2552 | 0) >> 2] | 0 | 0, $3_1 + 528 | 0 | 0) | 0;
     label$7 : {
      label$8 : {
       if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
        break label$8
       }
       if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) >= (19 | 0) & 1 | 0)) {
        break label$7
       }
      }
      HEAP32[($3_1 + 2556 | 0) >> 2] = $293(2043 | 0) | 0;
      break label$3;
     }
     label$9 : {
      label$10 : {
       if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
        break label$10
       }
       $97_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $98_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
       HEAP32[($3_1 + 24 | 0) >> 2] = $98_1 + 1 | 0;
       HEAP8[(($3_1 + 64 | 0) + $98_1 | 0) >> 0] = $97_1;
       break label$9;
      }
      label$11 : {
       label$12 : {
        if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (16 | 0) & 1 | 0)) {
         break label$12
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = ($405(HEAP32[($3_1 + 2552 | 0) >> 2] | 0 | 0, 2 | 0) | 0) + 3 | 0;
        $2015(($3_1 + 64 | 0) + (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0 | 0, (HEAPU8[(($3_1 + 64 | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0;
        break label$11;
       }
       label$13 : {
        label$14 : {
         if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0)) {
          break label$14
         }
         HEAP32[($3_1 + 4 | 0) >> 2] = ($405(HEAP32[($3_1 + 2552 | 0) >> 2] | 0 | 0, 3 | 0) | 0) + 3 | 0;
         $2015(($3_1 + 64 | 0) + (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0 | 0, 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0;
         break label$13;
        }
        label$15 : {
         if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (18 | 0) & 1 | 0) {
          break label$15
         }
         fimport$54(4685 | 0, 2854 | 0, 3724 | 0, 2086 | 0);
         abort();
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = ($405(HEAP32[($3_1 + 2552 | 0) >> 2] | 0 | 0, 7 | 0) | 0) + 11 | 0;
        $2015(($3_1 + 64 | 0) + (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0 | 0, 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0;
       }
      }
     }
     continue label$6;
    };
   }
   label$16 : {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) != ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
     break label$16
    }
    HEAP32[($3_1 + 2556 | 0) >> 2] = $293(2043 | 0) | 0;
    break label$3;
   }
   label$17 : {
    if ($408((HEAP32[($3_1 + 2552 | 0) >> 2] | 0) + 32 | 0 | 0, $3_1 + 64 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
     break label$17
    }
    HEAP32[($3_1 + 2556 | 0) >> 2] = 0;
    break label$3;
   }
   label$18 : {
    if ($408((HEAP32[($3_1 + 2552 | 0) >> 2] | 0) + 2052 | 0 | 0, ($3_1 + 64 | 0) + (HEAP32[($3_1 + 20 | 0) >> 2] | 0) | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) {
     break label$18
    }
    HEAP32[($3_1 + 2556 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($3_1 + 2556 | 0) >> 2] = 1;
  }
  $216_1 = HEAP32[($3_1 + 2556 | 0) >> 2] | 0;
  global$0 = $3_1 + 2560 | 0;
  return $216_1 | 0;
 }
 
 function $410($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $43_1 = 0, $162_1 = 0, $167_1 = 0, $169_1 = 0, $173_1 = 0, $178_1 = 0, $42_1 = 0, $78_1 = 0, $114_1 = 0, $161_1 = 0, $172_1 = 0, $179_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    HEAP32[($3_1 + 16 | 0) >> 2] = $415(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 32 | 0 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (256 | 0) & 1 | 0)) {
       break label$4
      }
      label$5 : {
       if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($3_1 + 28 | 0) >> 2] = $293(3425 | 0) | 0;
       break label$1;
      }
      label$6 : {
       if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 >= (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$6
       }
       label$7 : {
        if ($413(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 1 | 0) | 0) {
         break label$7
        }
        HEAP32[($3_1 + 28 | 0) >> 2] = 0;
        break label$1;
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      }
      $42_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      $43_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = $43_1 + 1 | 0;
      HEAP8[$43_1 >> 0] = $42_1;
      break label$3;
     }
     label$8 : {
      if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) == (256 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      HEAP32[($3_1 + 28 | 0) >> 2] = 1;
      break label$1;
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) - 257 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(20832 + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     label$9 : {
      if (!(HEAP32[(20960 + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
       break label$9
      }
      $78_1 = $405(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[(20960 + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + $78_1 | 0;
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = $415(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 2052 | 0 | 0) | 0;
     label$10 : {
      if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = $293(3425 | 0) | 0;
      break label$1;
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[(21088 + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     label$11 : {
      if (!(HEAP32[(21216 + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
       break label$11
      }
      $114_1 = $405(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[(21216 + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $114_1 | 0;
     }
     label$12 : {
      if (!(((HEAP32[($3_1 + 20 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0 | 0) < (HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = $293(1681 | 0) | 0;
      break label$1;
     }
     label$13 : {
      if (!(((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >>> 0 > (HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$13
      }
      label$14 : {
       if ($413(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
        break label$14
       }
       HEAP32[($3_1 + 28 | 0) >> 2] = 0;
       break label$1;
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + (0 - (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0) | 0;
     label$15 : {
      label$16 : {
       if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$16
       }
       HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0;
       label$17 : {
        if (!(HEAP32[($3_1 + 8 | 0) >> 2] | 0)) {
         break label$17
        }
        label$18 : while (1) {
         $161_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
         $162_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         HEAP32[($3_1 + 20 | 0) >> 2] = $162_1 + 1 | 0;
         HEAP8[$162_1 >> 0] = $161_1;
         $167_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($3_1 + 8 | 0) >> 2] = $167_1;
         if ($167_1) {
          continue label$18
         }
         break label$18;
        };
       }
       break label$15;
      }
      label$19 : {
       if (!(HEAP32[($3_1 + 8 | 0) >> 2] | 0)) {
        break label$19
       }
       label$20 : while (1) {
        $169_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $169_1 + 1 | 0;
        $172_1 = HEAPU8[$169_1 >> 0] | 0;
        $173_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        HEAP32[($3_1 + 20 | 0) >> 2] = $173_1 + 1 | 0;
        HEAP8[$173_1 >> 0] = $172_1;
        $178_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($3_1 + 8 | 0) >> 2] = $178_1;
        if ($178_1) {
         continue label$20
        }
        break label$20;
       };
      }
     }
    }
    continue label$2;
   };
  }
  $179_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $179_1 | 0;
 }
 
 function $411($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 >= (HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    break label$1;
   }
   $14_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   $15_1 = HEAP32[$14_1 >> 2] | 0;
   HEAP32[$14_1 >> 2] = $15_1 + 1 | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = HEAPU8[$15_1 >> 0] | 0;
  }
  return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0 | 0;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $29_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : while (1) {
   label$2 : {
    if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >>> 0 < (1 << (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) >>> 0 & 1 | 0) {
     break label$2
    }
    fimport$54(4912 | 0, 2854 | 0, 3568 | 0, 1984 | 0);
    abort();
   }
   $22_1 = ($411(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 255 | 0;
   $26_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($26_1 + 12 | 0) >> 2] = HEAP32[($26_1 + 12 | 0) >> 2] | 0 | ($22_1 << (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) | 0;
   $29_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($29_1 + 8 | 0) >> 2] = (HEAP32[($29_1 + 8 | 0) >> 2] | 0) + 8 | 0;
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) <= (24 | 0) & 1 | 0) {
    continue label$1
   }
   break label$1;
  };
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $413($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $58_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $293(1817 | 0) | 0;
    break label$1;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0;
   label$3 : {
    label$4 : while (1) {
     if (!(((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0 | 0) > (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $2006(HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   label$5 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $293(2677 | 0) | 0;
    break label$1;
   }
   HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = 1;
  }
  $58_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $58_1 | 0;
 }
 
 function $414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) <= (16 | 0) & 1 | 0) {
    break label$1
   }
   fimport$54(4701 | 0, 2854 | 0, 3486 | 0, 3174 | 0);
   abort();
  }
  $21_1 = ($416(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> (16 - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $415($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $30_1 = 0, $34_1 = 0, $43_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
    break label$1
   }
   $412(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAPU16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) & 511 | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0;
  label$2 : {
   label$3 : {
    if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 9 | 0;
    $30_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($30_1 + 12 | 0) >> 2] = (HEAP32[($30_1 + 12 | 0) >> 2] | 0) >>> (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
    $34_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($34_1 + 8 | 0) >> 2] = (HEAP32[($34_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) & 511 | 0;
    break label$2;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = $417(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  }
  $43_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $43_1 | 0;
 }
 
 function $416($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 43690 | 0) >> 1 | 0 | (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 21845 | 0) << 1 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 52428 | 0) >> 2 | 0 | (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 13107 | 0) << 2 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 61680 | 0) >> 4 | 0 | (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 3855 | 0) << 4 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 65280 | 0) >> 8 | 0 | (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 255 | 0) << 8 | 0) | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $81_1 = 0, $85_1 = 0, $98_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $414(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, 16 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 10;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1056 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     break label$1;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$4 : {
   label$5 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (16 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = -1;
    break label$4;
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> (16 - (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) | 0) - ((HEAPU16[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1024 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) | 0) + ((HEAPU16[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1124 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) | 0;
   label$6 : {
    if (((HEAPU8[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1156 | 0) + (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$6
    }
    fimport$54(2129 | 0, 2854 | 0, 3596 | 0, 2817 | 0);
    abort();
   }
   $81_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($81_1 + 12 | 0) >> 2] = (HEAP32[($81_1 + 12 | 0) >> 2] | 0) >>> (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
   $85_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($85_1 + 8 | 0) >> 2] = (HEAP32[($85_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = (HEAPU16[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1444 | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0;
  }
  $98_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $98_1 | 0;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $598($419(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $420() {
  fimport$55($421() | 0 | 0, 3527 | 0);
  fimport$56($422() | 0 | 0, 2690 | 0, 1 | 0, 1 & 1 | 0 | 0, 0 & 1 | 0 | 0);
  $423(2373 | 0);
  $424(2366 | 0);
  $425(2364 | 0);
  $426(1711 | 0);
  $427(1702 | 0);
  $428(1803 | 0);
  $429(1794 | 0);
  $430(2941 | 0);
  $431(2932 | 0);
  $432(1976 | 0);
  $433(1975 | 0);
  $434(1895 | 0);
  $435(3310 | 0);
  fimport$57($436() | 0 | 0, 2972 | 0);
  fimport$57($437() | 0 | 0, 4503 | 0);
  fimport$58($438() | 0 | 0, 4 | 0, 2946 | 0);
  fimport$58($439() | 0 | 0, 2 | 0, 2984 | 0);
  fimport$58($440() | 0 | 0, 4 | 0, 2999 | 0);
  fimport$59($441() | 0 | 0, 2704 | 0);
  $442(4434 | 0);
  $443(4536 | 0);
  $444(4464 | 0);
  $445(4066 | 0);
  $446(4097 | 0);
  $447(4137 | 0);
  $448(4166 | 0);
  $449(4573 | 0);
  $450(4603 | 0);
  $443(4268 | 0);
  $444(4235 | 0);
  $445(4334 | 0);
  $446(4300 | 0);
  $447(4401 | 0);
  $448(4367 | 0);
  $451(4204 | 0);
  $452(4642 | 0);
  return;
 }
 
 function $421() {
  return $453() | 0 | 0;
 }
 
 function $422() {
  return $454() | 0 | 0;
 }
 
 function $423($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $11_1 = 24;
  fimport$60($455() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($456() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($457() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $424($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $11_1 = 24;
  fimport$60($458() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($459() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($460() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $425($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$60($461() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, ($462() | 0) & 255 | 0 | 0, ($463() | 0) & 255 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 16;
  $11_1 = 16;
  fimport$60($464() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, (($465() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($466() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$60($467() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, ($468() | 0) & 65535 | 0 | 0, ($469() | 0) & 65535 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$60($470() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $471() | 0 | 0, $472() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$60($473() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $474() | 0 | 0, $475() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$60($476() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $477() | 0 | 0, $478() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$60($479() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $480() | 0 | 0, $481() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $9$hi = 0, $10$hi = 0, $4_1 = 0, $5_1 = 0, $9_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $482() | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = $483() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $484() | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = $10$hi;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$1 = $10$hi;
  $2037($4_1 | 0, $5_1 | 0, 8 | 0, $9_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $433($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $9$hi = 0, $10$hi = 0, $4_1 = 0, $5_1 = 0, $9_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $485() | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = $486() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $487() | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = $10$hi;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$1 = $10$hi;
  $2037($4_1 | 0, $5_1 | 0, 8 | 0, $9_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$61($488() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $435($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$61($489() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 8 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $436() {
  return $490() | 0 | 0;
 }
 
 function $437() {
  return $491() | 0 | 0;
 }
 
 function $438() {
  return $492() | 0 | 0;
 }
 
 function $439() {
  return $493() | 0 | 0;
 }
 
 function $440() {
  return $494() | 0 | 0;
 }
 
 function $441() {
  return $495() | 0 | 0;
 }
 
 function $442($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($496() | 0 | 0, $497() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $443($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($498() | 0 | 0, $499() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($500() | 0 | 0, $501() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($502() | 0 | 0, $503() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($504() | 0 | 0, $505() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $447($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($506() | 0 | 0, $507() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($508() | 0 | 0, $509() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $449($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($510() | 0 | 0, $511() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $450($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($512() | 0 | 0, $513() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $451($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($514() | 0 | 0, $515() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $452($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$62($516() | 0 | 0, $517() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $453() {
  return 20096 | 0;
 }
 
 function $454() {
  return 20120 | 0;
 }
 
 function $455() {
  return $520() | 0 | 0;
 }
 
 function $456() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($521() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $457() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($522() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $458() {
  return $523() | 0 | 0;
 }
 
 function $459() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($524() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $460() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($525() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $461() {
  return $526() | 0 | 0;
 }
 
 function $462() {
  return ($527() | 0) & 255 | 0 | 0;
 }
 
 function $463() {
  return ($528() | 0) & 255 | 0 | 0;
 }
 
 function $464() {
  return $529() | 0 | 0;
 }
 
 function $465() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($530() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $466() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($531() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $467() {
  return $532() | 0 | 0;
 }
 
 function $468() {
  return ($533() | 0) & 65535 | 0 | 0;
 }
 
 function $469() {
  return ($534() | 0) & 65535 | 0 | 0;
 }
 
 function $470() {
  return $535() | 0 | 0;
 }
 
 function $471() {
  return $536() | 0 | 0;
 }
 
 function $472() {
  return $537() | 0 | 0;
 }
 
 function $473() {
  return $538() | 0 | 0;
 }
 
 function $474() {
  return $539() | 0 | 0;
 }
 
 function $475() {
  return $540() | 0 | 0;
 }
 
 function $476() {
  return $541() | 0 | 0;
 }
 
 function $477() {
  return $542() | 0 | 0;
 }
 
 function $478() {
  return $543() | 0 | 0;
 }
 
 function $479() {
  return $544() | 0 | 0;
 }
 
 function $480() {
  return $545() | 0 | 0;
 }
 
 function $481() {
  return $546() | 0 | 0;
 }
 
 function $482() {
  return $547() | 0 | 0;
 }
 
 function $483() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $548() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $484() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $549() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $485() {
  return $550() | 0 | 0;
 }
 
 function $486() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $551() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $487() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $552() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $488() {
  return $553() | 0 | 0;
 }
 
 function $489() {
  return $554() | 0 | 0;
 }
 
 function $490() {
  return 6068 | 0;
 }
 
 function $491() {
  return 6364 | 0;
 }
 
 function $492() {
  return 6452 | 0;
 }
 
 function $493() {
  return 6544 | 0;
 }
 
 function $494() {
  return 6636 | 0;
 }
 
 function $495() {
  return 5908 | 0;
 }
 
 function $496() {
  return $555() | 0 | 0;
 }
 
 function $497() {
  return 0 | 0;
 }
 
 function $498() {
  return $556() | 0 | 0;
 }
 
 function $499() {
  return 0 | 0;
 }
 
 function $500() {
  return $557() | 0 | 0;
 }
 
 function $501() {
  return 1 | 0;
 }
 
 function $502() {
  return $558() | 0 | 0;
 }
 
 function $503() {
  return 2 | 0;
 }
 
 function $504() {
  return $559() | 0 | 0;
 }
 
 function $505() {
  return 3 | 0;
 }
 
 function $506() {
  return $560() | 0 | 0;
 }
 
 function $507() {
  return 4 | 0;
 }
 
 function $508() {
  return $561() | 0 | 0;
 }
 
 function $509() {
  return 5 | 0;
 }
 
 function $510() {
  return $562() | 0 | 0;
 }
 
 function $511() {
  return 4 | 0;
 }
 
 function $512() {
  return $563() | 0 | 0;
 }
 
 function $513() {
  return 5 | 0;
 }
 
 function $514() {
  return $564() | 0 | 0;
 }
 
 function $515() {
  return 6 | 0;
 }
 
 function $516() {
  return $565() | 0 | 0;
 }
 
 function $517() {
  return 7 | 0;
 }
 
 function $518() {
  FUNCTION_TABLE[50 | 0](22448) | 0;
  return;
 }
 
 function $519($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $420();
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $520() {
  return 20132 | 0;
 }
 
 function $521() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $522() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $523() {
  return 20156 | 0;
 }
 
 function $524() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $525() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $526() {
  return 20144 | 0;
 }
 
 function $527() {
  return 0 & 255 | 0 | 0;
 }
 
 function $528() {
  return 255 & 255 | 0 | 0;
 }
 
 function $529() {
  return 20168 | 0;
 }
 
 function $530() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32768 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $531() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32767 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $532() {
  return 20180 | 0;
 }
 
 function $533() {
  return 0 & 65535 | 0 | 0;
 }
 
 function $534() {
  return 65535 & 65535 | 0 | 0;
 }
 
 function $535() {
  return 20192 | 0;
 }
 
 function $536() {
  return -2147483648 | 0;
 }
 
 function $537() {
  return 2147483647 | 0;
 }
 
 function $538() {
  return 20204 | 0;
 }
 
 function $539() {
  return 0 | 0;
 }
 
 function $540() {
  return -1 | 0;
 }
 
 function $541() {
  return 20216 | 0;
 }
 
 function $542() {
  return -2147483648 | 0;
 }
 
 function $543() {
  return 2147483647 | 0;
 }
 
 function $544() {
  return 20228 | 0;
 }
 
 function $545() {
  return 0 | 0;
 }
 
 function $546() {
  return -1 | 0;
 }
 
 function $547() {
  return 20240 | 0;
 }
 
 function $548() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function $549() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 2147483647;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return -1 | 0;
 }
 
 function $550() {
  return 20252 | 0;
 }
 
 function $551() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function $552() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return -1 | 0;
 }
 
 function $553() {
  return 20264 | 0;
 }
 
 function $554() {
  return 20276 | 0;
 }
 
 function $555() {
  return 6692 | 0;
 }
 
 function $556() {
  return 6732 | 0;
 }
 
 function $557() {
  return 6772 | 0;
 }
 
 function $558() {
  return 6812 | 0;
 }
 
 function $559() {
  return 6852 | 0;
 }
 
 function $560() {
  return 6892 | 0;
 }
 
 function $561() {
  return 6932 | 0;
 }
 
 function $562() {
  return 6972 | 0;
 }
 
 function $563() {
  return 7012 | 0;
 }
 
 function $564() {
  return 7052 | 0;
 }
 
 function $565() {
  return 7092 | 0;
 }
 
 function $566() {
  $518();
  return;
 }
 
 function $567($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($596(3653 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($605() | 0) >> 2] = 28;
     break label$2;
    }
    $3_1 = $575($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    $4_1 = 0;
    $0_1 = $599(fimport$63($0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $589($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
    fimport$64($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $568($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $11_1 = 0, $11$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $569($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $568($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $2020($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $568($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $2021($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $570($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  return $569($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $571() {
  $609(22452 | 0);
  return 22460 | 0;
 }
 
 function $572() {
  $610(22452 | 0);
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $2020($0_1 | 0) | 0;
  }
  $573($0_1 | 0);
  label$2 : {
   $2_1 = (HEAP32[$0_1 >> 2] | 0) & 1 | 0;
   if ($2_1) {
    break label$2
   }
   $3_1 = $571() | 0;
   label$3 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$5 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   $572();
  }
  $3_1 = $578($0_1 | 0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  label$6 : {
   $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$6
   }
   $2005($5_1 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2_1) {
     break label$8
    }
    $2005($0_1 | 0);
    break label$7;
   }
   if (!$1_1) {
    break label$7
   }
   $2021($0_1 | 0);
  }
  return $4_1 | $3_1 | 0 | 0;
 }
 
 function $575($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($596($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $596($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $596($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $576($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $577($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $2020($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAPU8[($3_1 + 74 | 0) >> 0] | 0;
  HEAP8[($3_1 + 74 | 0) >> 0] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
    if (($6_1 | 0) >= (1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $8_1 = $6_1 >>> 0 < $5_1 >>> 0 ? $6_1 : $5_1;
   $2014($0_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $8_1 | 0;
   $6_1 = $5_1 - $8_1 | 0;
   $0_1 = $0_1 + $8_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($576($3_1 | 0) | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0]($3_1, $0_1, $6_1) | 0;
      if (($8_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $2021($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $8_1 | 0;
    $6_1 = $6_1 - $8_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $2021($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $578($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $579($0_1 | 0) | 0 | 0;
    }
    $1_1 = $2020($0_1 | 0) | 0;
    $2_1 = $579($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $2021($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 21864 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $578(HEAP32[(0 + 21864 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($571() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $2020($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $579($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $2021($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $572();
  }
  return $2_1 | 0;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $580($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $2_1 = $2020($0_1 | 0) | 0;
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $2021($0_1 | 0);
  }
  return ($1_1 >>> 4 | 0) & 1 | 0 | 0;
 }
 
 function $581($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $1_1 = 0, $28_1 = 0, $28$hi = 0, $29$hi = 0, $35_1 = 0, $35$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 ? 2 : 1;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1 | 0]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   if ($16_1) {
    break label$2
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $28_1 = i64toi32_i32$1;
   $28$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $28$hi;
   i64toi32_i32$0 = $28_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $29$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $29$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$0 = $35_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
  return i64toi32_i32$2 | 0;
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $581($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $2020($0_1 | 0) | 0;
  i64toi32_i32$0 = $581($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $2021($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $583($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $0_1 = $611($2038(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0_1 ? -1 : $1_1;
  i64toi32_i32$2 = $0_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $584($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($611(fimport$67(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($611(fimport$67(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $585($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  $4_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($611(fimport$68(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$2
     }
    }
    HEAP32[$0_1 >> 2] = ($4_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$1;
   }
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($4_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
    HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $586($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $587($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$64($586(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $588($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $571() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $572();
  return $0_1 | 0;
 }
 
 function $589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($596(3653 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($605() | 0) >> 2] = 28;
      break label$3;
     }
     $3_1 = $2004(1176 | 0) | 0;
     if ($3_1) {
      break label$2
     }
    }
    $3_1 = 0;
    break label$1;
   }
   $2015($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if ($596($1_1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1_1 = fimport$65($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$8
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 | 1024 | 0;
     fimport$65($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP8[($3_1 + 75 | 0) >> 0] = 255;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$9 : {
    if ($1_1 & 8 | 0) {
     break label$9
    }
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    if (fimport$66($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 51;
   HEAP32[($3_1 + 36 | 0) >> 2] = 52;
   HEAP32[($3_1 + 32 | 0) >> 2] = 53;
   HEAP32[($3_1 + 12 | 0) >> 2] = 54;
   label$10 : {
    if (HEAP32[(22464 + 4 | 0) >> 2] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $588($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $590($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $4_1 = 0.0, $7_1 = 0, $7$hi = 0, $9_1 = 0, $5_1 = 0.0, $14_1 = 0, $3_1 = 0.0, $15_1 = 0, $16_1 = 0, $8_1 = 0, $6_1 = 0.0, $8$hi = 0, $13_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $17_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $90_1 = 0, $91_1 = 0, $92_1 = 0, $107_1 = 0.0, $112_1 = 0.0, $142_1 = 0.0, $143_1 = 0.0, $190_1 = 0.0, $193_1 = 0.0, $273_1 = 0.0, $277_1 = 0.0, $280$hi = 0, $283_1 = 0, $283$hi = 0, $289_1 = 0.0, $293_1 = 0.0, $324_1 = 0.0, $334_1 = 0.0, $393_1 = 0.0, $403_1 = 0.0, $504_1 = 0, $505_1 = 0, $509_1 = 0.0, $510_1 = 0.0, $524_1 = 0, $567_1 = 0.0, $594$hi = 0, $596_1 = 0, $596$hi = 0;
  $2_1 = 1.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $51_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $51_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $9_1 = $51_1;
   $10_1 = $9_1 & 2147483647 | 0;
   i64toi32_i32$1 = $7$hi;
   $11_1 = $7_1;
   if (!($10_1 | $11_1 | 0)) {
    break label$1
   }
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $8$hi = i64toi32_i32$1;
   $12_1 = $8_1;
   label$2 : {
    i64toi32_i32$0 = $12_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $52_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $13_1 = $52_1;
    if (($13_1 | 0) != (1072693248 | 0)) {
     break label$2
    }
    if (!$12_1) {
     break label$1
    }
   }
   label$3 : {
    label$4 : {
     $14_1 = $13_1 & 2147483647 | 0;
     if ($14_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (($14_1 | 0) == (2146435072 | 0) & ($12_1 | 0) != (0 | 0) | 0) {
      break label$4
     }
     if ($10_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (($10_1 | 0) != (2146435072 | 0)) {
      break label$3
     }
     if (!$11_1) {
      break label$3
     }
    }
    return +($0_1 + $1_1);
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
        $53_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $54_1 = 0
         } else {
          $54_1 = 1
         }
         $55_1 = $54_1;
        } else {
         $55_1 = 0
        }
        $53_1 = $55_1;
       }
       if ($53_1) {
        break label$8
       }
       $15_1 = 2;
       if ($10_1 >>> 0 > 1128267775 >>> 0) {
        break label$7
       }
       if ($10_1 >>> 0 < 1072693248 >>> 0) {
        break label$8
       }
       $16_1 = $10_1 >>> 20 | 0;
       label$9 : {
        if ($10_1 >>> 0 < 1094713344 >>> 0) {
         break label$9
        }
        $15_1 = 0;
        $16_1 = 1075 - $16_1 | 0;
        $17_1 = $11_1 >>> $16_1 | 0;
        if (($17_1 << $16_1 | 0 | 0) != ($11_1 | 0)) {
         break label$7
        }
        $15_1 = 2 - ($17_1 & 1 | 0) | 0;
        break label$7;
       }
       $15_1 = 0;
       if ($11_1) {
        break label$5
       }
       $15_1 = 0;
       $11_1 = 1043 - $16_1 | 0;
       $16_1 = $10_1 >>> $11_1 | 0;
       if (($16_1 << $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$6
       }
       $15_1 = 2 - ($16_1 & 1 | 0) | 0;
       break label$6;
      }
      $15_1 = 0;
     }
     if ($11_1) {
      break label$5
     }
    }
    label$10 : {
     if (($10_1 | 0) != (2146435072 | 0)) {
      break label$10
     }
     if (!($14_1 + -1072693248 | 0 | $12_1 | 0)) {
      break label$1
     }
     label$11 : {
      if ($14_1 >>> 0 < 1072693248 >>> 0) {
       break label$11
      }
      $107_1 = $1_1;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = -1;
      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
       $56_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
         $57_1 = 0
        } else {
         $57_1 = 1
        }
        $58_1 = $57_1;
       } else {
        $58_1 = 0
       }
       $56_1 = $58_1;
      }
      return +($56_1 ? $107_1 : 0.0);
     }
     $112_1 = -$1_1;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
      $59_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $60_1 = 0
       } else {
        $60_1 = 1
       }
       $61_1 = $60_1;
      } else {
       $61_1 = 0
      }
      $59_1 = $61_1;
     }
     return +($59_1 ? 0.0 : $112_1);
    }
    label$12 : {
     if (($10_1 | 0) != (1072693248 | 0)) {
      break label$12
     }
     label$13 : {
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -1;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
       $62_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
         $63_1 = 0
        } else {
         $63_1 = 1
        }
        $64_1 = $63_1;
       } else {
        $64_1 = 0
       }
       $62_1 = $64_1;
      }
      if ($62_1) {
       break label$13
      }
      return +$0_1;
     }
     return +(1.0 / $0_1);
    }
    label$14 : {
     if (($9_1 | 0) != (1073741824 | 0)) {
      break label$14
     }
     return +($0_1 * $0_1);
    }
    if (($9_1 | 0) != (1071644672 | 0)) {
     break label$5
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
     $65_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $66_1 = 0
      } else {
       $66_1 = 1
      }
      $67_1 = $66_1;
     } else {
      $67_1 = 0
     }
     $65_1 = $67_1;
    }
    if ($65_1) {
     break label$5
    }
    return +(+$592(+$0_1));
   }
   $2_1 = +$593(+$0_1);
   label$15 : {
    if ($12_1) {
     break label$15
    }
    label$16 : {
     if (($13_1 & 1073741823 | 0 | 0) == (1072693248 | 0)) {
      break label$16
     }
     if ($14_1) {
      break label$15
     }
    }
    $142_1 = 1.0 / $2_1;
    $143_1 = $2_1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $68_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $69_1 = 0
      } else {
       $69_1 = 1
      }
      $70_1 = $69_1;
     } else {
      $70_1 = 0
     }
     $68_1 = $70_1;
    }
    $2_1 = $68_1 ? $142_1 : $143_1;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$0 = $8_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
     $71_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $72_1 = 0
      } else {
       $72_1 = 1
      }
      $73_1 = $72_1;
     } else {
      $73_1 = 0
     }
     $71_1 = $73_1;
    }
    if ($71_1) {
     break label$1
    }
    label$17 : {
     if ($15_1 | ($14_1 + -1072693248 | 0) | 0) {
      break label$17
     }
     $1_1 = $2_1 - $2_1;
     return +($1_1 / $1_1);
    }
    return +(($15_1 | 0) == (1 | 0) ? -$2_1 : $2_1);
   }
   $3_1 = 1.0;
   label$18 : {
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
     $74_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $75_1 = 0
      } else {
       $75_1 = 1
      }
      $76_1 = $75_1;
     } else {
      $76_1 = 0
     }
     $74_1 = $76_1;
    }
    if ($74_1) {
     break label$18
    }
    label$19 : {
     switch ($15_1 | 0) {
     case 0:
      $1_1 = $0_1 - $0_1;
      return +($1_1 / $1_1);
     case 1:
      break label$19;
     default:
      break label$18;
     };
    }
    $3_1 = -1.0;
   }
   label$21 : {
    label$22 : {
     if ($10_1 >>> 0 < 1105199105 >>> 0) {
      break label$22
     }
     label$23 : {
      if ($10_1 >>> 0 < 1139802113 >>> 0) {
       break label$23
      }
      label$24 : {
       if ($14_1 >>> 0 > 1072693247 >>> 0) {
        break label$24
       }
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
        $77_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $78_1 = 0
         } else {
          $78_1 = 1
         }
         $79_1 = $78_1;
        } else {
         $79_1 = 0
        }
        $77_1 = $79_1;
       }
       return +($77_1 ? infinity : 0.0);
      }
      return +(($9_1 | 0) > (0 | 0) ? infinity : 0.0);
     }
     label$25 : {
      if ($14_1 >>> 0 > 1072693246 >>> 0) {
       break label$25
      }
      $190_1 = $3_1 * 1.e+300 * 1.e+300;
      $193_1 = $3_1 * 1.0e-300 * 1.0e-300;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
       $80_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $81_1 = 0
        } else {
         $81_1 = 1
        }
        $82_1 = $81_1;
       } else {
        $82_1 = 0
       }
       $80_1 = $82_1;
      }
      return +($80_1 ? $190_1 : $193_1);
     }
     label$26 : {
      if ($14_1 >>> 0 < 1072693249 >>> 0) {
       break label$26
      }
      return +(($9_1 | 0) > (0 | 0) ? $3_1 * 1.e+300 * 1.e+300 : $3_1 * 1.0e-300 * 1.0e-300);
     }
     $0_1 = $2_1 + -1.0;
     $2_1 = $0_1 * 1.9259629911266175e-08 + $0_1 * $0_1 * (.5 - $0_1 * ($0_1 * -.25 + .3333333333333333)) * -1.4426950408889634;
     $4_1 = $0_1 * 1.4426950216293335;
     wasm2js_scratch_store_f64(+($2_1 + $4_1));
     i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $4_1 = $2_1 - ($0_1 - $4_1);
     break label$21;
    }
    $0_1 = $2_1 * 9007199254740992.0;
    $10_1 = $14_1 >>> 0 < 1048576 >>> 0;
    $2_1 = $10_1 ? $0_1 : $2_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $83_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $83_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $10_1 ? $83_1 : $14_1;
    $11_1 = $9_1 & 1048575 | 0;
    $12_1 = $11_1 | 1072693248 | 0;
    $9_1 = ($10_1 ? -1076 : -1023) + ($9_1 >> 20 | 0) | 0;
    $10_1 = 0;
    label$27 : {
     if ($11_1 >>> 0 < 235663 >>> 0) {
      break label$27
     }
     label$28 : {
      if ($11_1 >>> 0 >= 767610 >>> 0) {
       break label$28
      }
      $10_1 = 1;
      break label$27;
     }
     $12_1 = $11_1 | 1071644672 | 0;
     $9_1 = $9_1 + 1 | 0;
    }
    $11_1 = $10_1 << 3 | 0;
    $273_1 = +HEAPF64[($11_1 + 7120 | 0) >> 3];
    $0_1 = +HEAPF64[($11_1 + 7104 | 0) >> 3];
    $277_1 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $84_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $84_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $280$hi = i64toi32_i32$3;
    wasm2js_scratch_store_f64(+$2_1);
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $283_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $283$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $280$hi;
    i64toi32_i32$3 = $84_1;
    i64toi32_i32$0 = $283$hi;
    i64toi32_i32$2 = $283_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $5_1 = +wasm2js_scratch_load_f64();
    $2_1 = 1.0 / ($277_1 + $5_1);
    $289_1 = $2_1;
    $4_1 = $5_1 - $0_1;
    $293_1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = (($12_1 >>> 1 | 0 | 536870912 | 0) + ($10_1 << 18 | 0) | 0) + 524288 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $85_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $6_1 = +wasm2js_scratch_load_f64();
    $4_1 = $4_1 * $2_1;
    wasm2js_scratch_store_f64(+$4_1);
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $2_1 = +wasm2js_scratch_load_f64();
    $0_1 = $289_1 * ($293_1 - $6_1 * $2_1 - ($5_1 - ($6_1 - $0_1)) * $2_1);
    $324_1 = $0_1;
    $5_1 = $2_1 * $2_1;
    $334_1 = $0_1 * ($4_1 + $2_1);
    $0_1 = $4_1 * $4_1;
    $6_1 = $334_1 + $0_1 * $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * .20697501780033842 + .23066074577556175) + .272728123808534) + .33333332981837743) + .4285714285785502) + .5999999999999946);
    wasm2js_scratch_store_f64(+($5_1 + 3.0 + $6_1));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $4_1 = $324_1 * $0_1 + $4_1 * ($6_1 - ($0_1 + -3.0 - $5_1));
    $2_1 = $2_1 * $0_1;
    wasm2js_scratch_store_f64(+($4_1 + $2_1));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $2_1 = $273_1 + (($4_1 - ($0_1 - $2_1)) * .9617966939259756 + $0_1 * -7.028461650952758e-09);
    $393_1 = $2_1;
    $4_1 = +HEAPF64[($11_1 + 7136 | 0) >> 3];
    $5_1 = $0_1 * .9617967009544373;
    $403_1 = $4_1 + ($2_1 + $5_1);
    $2_1 = +($9_1 | 0);
    wasm2js_scratch_store_f64(+($403_1 + $2_1));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $4_1 = $393_1 - ($0_1 - $2_1 - $4_1 - $5_1);
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$2 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $5_1 = +wasm2js_scratch_load_f64();
   $2_1 = $0_1 * $5_1;
   $1_1 = $4_1 * $1_1 + ($1_1 - $5_1) * $0_1;
   $0_1 = $2_1 + $1_1;
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $7$hi = i64toi32_i32$0;
   $10_1 = $7_1;
   label$29 : {
    label$30 : {
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $86_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $86_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $12_1 = $86_1;
     if (($12_1 | 0) < (1083179008 | 0)) {
      break label$30
     }
     label$31 : {
      if (!($12_1 + -1083179008 | 0 | $10_1 | 0)) {
       break label$31
      }
      return +($3_1 * 1.e+300 * 1.e+300);
     }
     if (!($1_1 + 8.008566259537294e-17 > $0_1 - $2_1)) {
      break label$29
     }
     return +($3_1 * 1.e+300 * 1.e+300);
    }
    if (($12_1 & 2147482624 | 0) >>> 0 < 1083231232 >>> 0) {
     break label$29
    }
    label$32 : {
     if (!($12_1 + 1064252416 | 0 | $10_1 | 0)) {
      break label$32
     }
     return +($3_1 * 1.0e-300 * 1.0e-300);
    }
    if (!($1_1 <= $0_1 - $2_1)) {
     break label$29
    }
    return +($3_1 * 1.0e-300 * 1.0e-300);
   }
   $10_1 = 0;
   label$33 : {
    $11_1 = $12_1 & 2147483647 | 0;
    if ($11_1 >>> 0 < 1071644673 >>> 0) {
     break label$33
    }
    $12_1 = (1048576 >>> (($11_1 >>> 20 | 0) + -1022 | 0) | 0) + $12_1 | 0;
    $11_1 = ($12_1 >>> 20 | 0) & 2047 | 0;
    $10_1 = ($12_1 & 1048575 | 0 | 1048576 | 0) >>> (1043 - $11_1 | 0) | 0;
    $504_1 = 0 - $10_1 | 0;
    $505_1 = $10_1;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
     $87_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $88_1 = 0
      } else {
       $88_1 = 1
      }
      $89_1 = $88_1;
     } else {
      $89_1 = 0
     }
     $87_1 = $89_1;
    }
    $10_1 = $87_1 ? $504_1 : $505_1;
    $509_1 = $1_1;
    $510_1 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = (-1048576 >> ($11_1 + -1023 | 0) | 0) & $12_1 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $90_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $90_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $90_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $2_1 = $510_1 - +wasm2js_scratch_load_f64();
    wasm2js_scratch_store_f64(+($509_1 + $2_1));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $7$hi = i64toi32_i32$3;
   }
   label$34 : {
    label$35 : {
     $524_1 = $10_1 << 20 | 0;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$1 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $4_1 = $0_1 * .6931471824645996;
     $2_1 = ($1_1 - ($0_1 - $2_1)) * .6931471805599453 + $0_1 * -1.904654299957768e-09;
     $1_1 = $4_1 + $2_1;
     $0_1 = $1_1 * $1_1;
     $0_1 = $1_1 - $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
     $567_1 = $1_1 * $0_1 / ($0_1 + -2.0);
     $0_1 = $2_1 - ($1_1 - $4_1);
     $1_1 = $1_1 - ($567_1 - ($0_1 + $1_1 * $0_1)) + 1.0;
     wasm2js_scratch_store_f64(+$1_1);
     i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
     $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $91_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $91_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $12_1 = $524_1 + $91_1 | 0;
     if (($12_1 | 0) > (1048575 | 0)) {
      break label$35
     }
     $1_1 = +$2012(+$1_1, $10_1 | 0);
     break label$34;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $92_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $92_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $594$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $596_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $596$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $594$hi;
    i64toi32_i32$3 = $92_1;
    i64toi32_i32$0 = $596$hi;
    i64toi32_i32$1 = $596_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$1 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $1_1 = +wasm2js_scratch_load_f64();
   }
   $2_1 = $3_1 * $1_1;
  }
  return +$2_1;
 }
 
 function $591($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  return +(+$2012(+$0_1, $1_1 | 0));
 }
 
 function $592($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $593($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $594($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$3_1) {
     break label$3
    }
    label$4 : while (1) {
     label$5 : {
      label$6 : {
       $4_1 = HEAPU8[$1_1 >> 0] | 0;
       if (!$4_1) {
        break label$6
       }
       $2_1 = $2_1 + -1 | 0;
       if (!$2_1) {
        break label$6
       }
       if (($3_1 & 255 | 0 | 0) == ($4_1 | 0)) {
        break label$5
       }
      }
      $0_1 = $3_1 & 255 | 0;
      break label$2;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($3_1) {
      continue label$4
     }
     break label$4;
    };
   }
   $0_1 = 0;
  }
  return $0_1 - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $595($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $596($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $597($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $597($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($2022($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = ($2022($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $2004($1_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $2014($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($605() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $600($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $601($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $601($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $8_1 = 0, $11$hi = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13$hi = 0, $13_1 = 0, $14$hi = 0, $14_1 = 0, $103_1 = 0, $103$hi = 0, $148$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) > (36 | 0)) {
       break label$4
      }
      $5_1 = 0;
      $6_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1) {
       break label$3
      }
      $7_1 = $0_1;
      break label$2;
     }
     HEAP32[($605() | 0) >> 2] = 28;
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     break label$1;
    }
    $7_1 = $0_1;
    label$5 : {
     label$6 : while (1) {
      if (!($606(($6_1 << 24 | 0) >> 24 | 0 | 0) | 0)) {
       break label$5
      }
      $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
      $8_1 = $7_1 + 1 | 0;
      $7_1 = $8_1;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
     $7_1 = $8_1;
     break label$2;
    }
    label$7 : {
     $6_1 = HEAPU8[$7_1 >> 0] | 0;
     switch ($6_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$2;
     };
    }
    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
    $7_1 = $7_1 + 1 | 0;
   }
   label$8 : {
    label$9 : {
     if ($2_1 & -17 | 0) {
      break label$9
     }
     if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$9
     }
     $9_1 = 1;
     label$10 : {
      if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
       break label$10
      }
      $7_1 = $7_1 + 2 | 0;
      $10_1 = 16;
      break label$8;
     }
     $7_1 = $7_1 + 1 | 0;
     $10_1 = $2_1 ? $2_1 : 8;
     break label$8;
    }
    $10_1 = $2_1 ? $2_1 : 10;
    $9_1 = 0;
   }
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   label$11 : {
    label$12 : while (1) {
     label$13 : {
      $8_1 = HEAP8[$7_1 >> 0] | 0;
      $6_1 = $8_1 + -48 | 0;
      if (($6_1 & 255 | 0) >>> 0 <= 9 >>> 0) {
       break label$13
      }
      label$14 : {
       if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
        break label$14
       }
       $6_1 = $8_1 + -87 | 0;
       break label$13;
      }
      if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
       break label$11
      }
      $6_1 = $8_1 + -55 | 0;
     }
     if (($6_1 | 0) >= ($10_1 | 0)) {
      break label$11
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = 0;
     $612($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
     $8_1 = 1;
     label$15 : {
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $14_1 = i64toi32_i32$2;
      $14$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $103_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $103$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = $103$hi;
      i64toi32_i32$3 = $103_1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      $9_1 = 1;
      $8_1 = $2_1;
     }
     $7_1 = $7_1 + 1 | 0;
     $2_1 = $8_1;
     continue label$12;
    };
   }
   label$16 : {
    if (!$1_1) {
     break label$16
    }
    HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
   }
   label$17 : {
    label$18 : {
     label$19 : {
      if (!$2_1) {
       break label$19
      }
      HEAP32[($605() | 0) >> 2] = 68;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $11$hi = i64toi32_i32$3;
      $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
      i64toi32_i32$3 = i64toi32_i32$5;
      $12_1 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$3;
      break label$18;
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$17
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$3;
    }
    label$20 : {
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$20
     }
     if ($5_1) {
      break label$20
     }
     HEAP32[($605() | 0) >> 2] = 68;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$4;
     break label$1;
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$17
    }
    HEAP32[($605() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$0 = $12_1;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
   $148$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $148$hi;
   i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$2;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $602($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $601($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $603($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $601($0_1 | 0, $1_1 | 0, $2_1 | 0, -2147483648 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 >> 31 | 0;
  return ($0_1 + $1_1 | 0) ^ $1_1 | 0 | 0;
 }
 
 function $605() {
  return 22528 | 0;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $607($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 22536 | 0) >> 2] = $0_1 + -1 | 0;
  HEAP32[(i64toi32_i32$1 + 22540 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $608() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $7_1 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 22536 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 22540 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 1481765933;
  i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, 1284865837 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$2 + 22536 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 22540 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 33;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $6_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   $6_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $609($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $610($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $611($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($605() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $612($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $613($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label$1;
  };
 }
 
 function $614($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1336($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $617($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
    break label$1
   }
   $620(2378 | 0);
   abort();
  }
 }
 
 function $617($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $625($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 7160;
  $613($0_1 | 0, 0 | 0);
  $750($0_1 + 28 | 0 | 0) | 0;
  $2005(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  $2005(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
  $2005(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
  $2005(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  $1844($618($0_1 | 0) | 0 | 0);
 }
 
 function $620($0_1) {
  $0_1 = $0_1 | 0;
  fimport$69();
  abort();
 }
 
 function $621($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  $2015($0_1 + 32 | 0 | 0, 0 | 0, 40 | 0) | 0;
  $1338($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($624($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($624($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($624($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $625($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $626($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $627($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($626($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $628($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $629() {
  return 21344 | 0;
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $631($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $630($0_1 | 0) | 0 | 0;
 }
 
 function $632($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $633($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($629() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($605() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($605() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $633($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $635($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$635(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $636($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($3_1 & 64 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$3 = $3_1 + -64 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $18_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $2_1 = $18_1;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    if (!$3_1) {
     break label$1
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = 0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = 64 - $3_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $19_1 = $20_1;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = 0;
    $4_1 = $3_1;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $21_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $21_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $22_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $1_1 = $22_1;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $637($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $638($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $34_1 = 0, $34$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $43_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $46_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $636($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $637($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $49_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $639($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $2015($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($640(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $2020($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $640($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $640($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $2021($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $640($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, i64toi32_i32$1 = 0, $20_1 = 0, $14_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $19_1 = 0, $16_1 = 0, $18_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $316_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($11_1 | 0) < (0 | 0)) {
     break label$2
    }
    label$3 : {
     if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
      break label$3
     }
     HEAP32[($605() | 0) >> 2] = 61;
     $11_1 = -1;
     break label$2;
    }
    $11_1 = $1_1 + $11_1 | 0;
   }
   $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
   $1_1 = $12_1;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               $13_1 = HEAPU8[$1_1 >> 0] | 0;
               if (!$13_1) {
                break label$15
               }
               label$16 : while (1) {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   $13_1 = $13_1 & 255 | 0;
                   if ($13_1) {
                    break label$19
                   }
                   $13_1 = $1_1;
                   break label$18;
                  }
                  if (($13_1 | 0) != (37 | 0)) {
                   break label$17
                  }
                  $13_1 = $1_1;
                  label$20 : while (1) {
                   if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
                    break label$18
                   }
                   $14_1 = $1_1 + 2 | 0;
                   HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                   $13_1 = $13_1 + 1 | 0;
                   $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
                   $1_1 = $14_1;
                   if (($15_1 | 0) == (37 | 0)) {
                    continue label$20
                   }
                   break label$20;
                  };
                 }
                 $1_1 = $13_1 - $12_1 | 0;
                 label$21 : {
                  if (!$0_1) {
                   break label$21
                  }
                  $641($0_1 | 0, $12_1 | 0, $1_1 | 0);
                 }
                 if ($1_1) {
                  continue label$1
                 }
                 $1_1 = $630(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
                 $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                 if (!$1_1) {
                  break label$14
                 }
                 if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                  break label$14
                 }
                 $1_1 = $13_1 + 3 | 0;
                 $16_1 = (HEAP8[($13_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                 $10_1 = 1;
                 break label$13;
                }
                $14_1 = $1_1 + 1 | 0;
                HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                $1_1 = $14_1;
                continue label$16;
               };
              }
              $17_1 = $11_1;
              if ($0_1) {
               break label$6
              }
              if (!$10_1) {
               break label$12
              }
              $1_1 = 1;
              label$22 : {
               label$23 : while (1) {
                $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
                if (!$13_1) {
                 break label$22
                }
                $642($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                $17_1 = 1;
                $1_1 = $1_1 + 1 | 0;
                if (($1_1 | 0) != (10 | 0)) {
                 continue label$23
                }
                break label$6;
               };
              }
              $17_1 = 1;
              if ($1_1 >>> 0 >= 10 >>> 0) {
               break label$6
              }
              label$24 : while (1) {
               if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
                break label$7
               }
               $17_1 = 1;
               $1_1 = $1_1 + 1 | 0;
               if (($1_1 | 0) == (10 | 0)) {
                break label$6
               }
               continue label$24;
              };
             }
             $1_1 = $13_1 + 1 | 0;
             $16_1 = -1;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
            $18_1 = 0;
            label$25 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $13_1 = $15_1 + -32 | 0;
             if ($13_1 >>> 0 > 31 >>> 0) {
              break label$25
             }
             $13_1 = 1 << $13_1 | 0;
             if (!($13_1 & 75913 | 0)) {
              break label$25
             }
             label$26 : {
              label$27 : while (1) {
               $14_1 = $1_1 + 1 | 0;
               HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
               $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
               $1_1 = $15_1 + -32 | 0;
               if ($1_1 >>> 0 >= 32 >>> 0) {
                break label$26
               }
               $1_1 = 1 << $1_1 | 0;
               if (!($1_1 & 75913 | 0)) {
                break label$26
               }
               $13_1 = $1_1 | $13_1 | 0;
               $1_1 = $14_1;
               continue label$27;
              };
             }
             $1_1 = $14_1;
             $18_1 = $13_1;
            }
            label$28 : {
             label$29 : {
              if (($15_1 | 0) != (42 | 0)) {
               break label$29
              }
              label$30 : {
               label$31 : {
                if (!($630(HEAP8[($1_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                 break label$31
                }
                $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                 break label$31
                }
                HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                $1_1 = $13_1 + 3 | 0;
                $19_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                $10_1 = 1;
                break label$30;
               }
               if ($10_1) {
                break label$7
               }
               $10_1 = 0;
               $19_1 = 0;
               label$32 : {
                if (!$0_1) {
                 break label$32
                }
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                $19_1 = HEAP32[$1_1 >> 2] | 0;
               }
               $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              if (($19_1 | 0) > (-1 | 0)) {
               break label$28
              }
              $19_1 = 0 - $19_1 | 0;
              $18_1 = $18_1 | 8192 | 0;
              break label$28;
             }
             $19_1 = $643($7_1 + 76 | 0 | 0) | 0;
             if (($19_1 | 0) < (0 | 0)) {
              break label$7
             }
             $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
            }
            $20_1 = -1;
            label$33 : {
             if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
              break label$33
             }
             label$34 : {
              if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
               break label$34
              }
              label$35 : {
               if (!($630(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                break label$35
               }
               $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$35
               }
               HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $20_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $1_1 = $1_1 + 4 | 0;
               HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
               break label$33;
              }
              if ($10_1) {
               break label$7
              }
              label$36 : {
               label$37 : {
                if ($0_1) {
                 break label$37
                }
                $20_1 = 0;
                break label$36;
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $20_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$33;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
             $20_1 = $643($7_1 + 76 | 0 | 0) | 0;
             $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
            }
            $13_1 = 0;
            label$38 : while (1) {
             $14_1 = $13_1;
             $17_1 = -1;
             if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
              break label$6
             }
             $15_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
             $13_1 = HEAP8[$1_1 >> 0] | 0;
             $1_1 = $15_1;
             $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 7135 | 0) >> 0] | 0;
             if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
              continue label$38
             }
             break label$38;
            };
            if (($13_1 | 0) == (19 | 0)) {
             break label$10
            }
            if (!$13_1) {
             break label$6
            }
            label$39 : {
             if (($16_1 | 0) < (0 | 0)) {
              break label$39
             }
             HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
             i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $316_1 = i64toi32_i32$0;
             i64toi32_i32$0 = $7_1;
             HEAP32[($7_1 + 64 | 0) >> 2] = $316_1;
             HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
             break label$9;
            }
            if ($0_1) {
             break label$11
            }
           }
           $17_1 = 0;
           break label$6;
          }
          $642($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
          break label$8;
         }
         $17_1 = -1;
         if (($16_1 | 0) > (-1 | 0)) {
          break label$6
         }
        }
        $1_1 = 0;
        if (!$0_1) {
         continue label$1
        }
       }
       $21_1 = $18_1 & -65537 | 0;
       $13_1 = $18_1 & 8192 | 0 ? $21_1 : $18_1;
       $17_1 = 0;
       $16_1 = 1493;
       $18_1 = $9_1;
       label$40 : {
        label$41 : {
         label$42 : {
          label$43 : {
           label$44 : {
            label$45 : {
             label$46 : {
              label$47 : {
               label$48 : {
                label$49 : {
                 label$50 : {
                  label$51 : {
                   label$52 : {
                    label$53 : {
                     label$54 : {
                      label$55 : {
                       $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                       $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                       switch ($1_1 + -88 | 0 | 0) {
                       case 1:
                       case 2:
                       case 3:
                       case 4:
                       case 5:
                       case 6:
                       case 7:
                       case 8:
                       case 10:
                       case 16:
                       case 18:
                       case 19:
                       case 20:
                       case 21:
                       case 25:
                       case 26:
                       case 28:
                       case 30:
                       case 31:
                        break label$4;
                       case 11:
                        break label$40;
                       case 9:
                       case 13:
                       case 14:
                       case 15:
                        break label$41;
                       case 27:
                        break label$46;
                       case 12:
                       case 17:
                        break label$49;
                       case 23:
                        break label$50;
                       case 0:
                       case 32:
                        break label$51;
                       case 24:
                        break label$52;
                       case 22:
                        break label$53;
                       case 29:
                        break label$54;
                       default:
                        break label$55;
                       };
                      }
                      $18_1 = $9_1;
                      label$56 : {
                       switch ($1_1 + -65 | 0 | 0) {
                       case 1:
                       case 3:
                        break label$4;
                       case 0:
                       case 4:
                       case 5:
                       case 6:
                        break label$41;
                       case 2:
                        break label$44;
                       default:
                        break label$56;
                       };
                      }
                      if (($1_1 | 0) == (83 | 0)) {
                       break label$45
                      }
                      break label$5;
                     }
                     $17_1 = 0;
                     $16_1 = 1493;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     break label$48;
                    }
                    $1_1 = 0;
                    label$57 : {
                     switch ($14_1 & 255 | 0 | 0) {
                     case 0:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 1:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 2:
                      i64toi32_i32$1 = $11_1;
                      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      continue label$1;
                     case 3:
                      HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                      continue label$1;
                     case 4:
                      HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                      continue label$1;
                     case 6:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 7:
                      break label$57;
                     default:
                      continue label$1;
                     };
                    }
                    i64toi32_i32$1 = $11_1;
                    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    continue label$1;
                   }
                   $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                   $13_1 = $13_1 | 8 | 0;
                   $1_1 = 120;
                  }
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $12_1 = $644(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                  $17_1 = 0;
                  $16_1 = 1493;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                   break label$47
                  }
                  if (!($13_1 & 8 | 0)) {
                   break label$47
                  }
                  $16_1 = ($1_1 >>> 4 | 0) + 1493 | 0;
                  $17_1 = 2;
                  break label$47;
                 }
                 $17_1 = 0;
                 $16_1 = 1493;
                 i64toi32_i32$2 = $7_1;
                 i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                 $12_1 = $645(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                 if (!($13_1 & 8 | 0)) {
                  break label$47
                 }
                 $1_1 = $9_1 - $12_1 | 0;
                 $20_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1 + 1 | 0;
                 break label$47;
                }
                label$64 : {
                 i64toi32_i32$2 = $7_1;
                 i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                 $22_1 = i64toi32_i32$1;
                 $22$hi = i64toi32_i32$0;
                 i64toi32_i32$2 = i64toi32_i32$1;
                 i64toi32_i32$1 = -1;
                 i64toi32_i32$3 = -1;
                 if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                  $30_1 = 1
                 } else {
                  if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                   if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                    $31_1 = 0
                   } else {
                    $31_1 = 1
                   }
                   $32_1 = $31_1;
                  } else {
                   $32_1 = 0
                  }
                  $30_1 = $32_1;
                 }
                 if ($30_1) {
                  break label$64
                 }
                 i64toi32_i32$2 = $22$hi;
                 i64toi32_i32$2 = 0;
                 i64toi32_i32$3 = 0;
                 i64toi32_i32$0 = $22$hi;
                 i64toi32_i32$1 = $22_1;
                 i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                 i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                 $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                 $22$hi = i64toi32_i32$5;
                 i64toi32_i32$3 = $7_1;
                 HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                 HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                 $17_1 = 1;
                 $16_1 = 1493;
                 break label$48;
                }
                label$65 : {
                 if (!($13_1 & 2048 | 0)) {
                  break label$65
                 }
                 $17_1 = 1;
                 $16_1 = 1494;
                 break label$48;
                }
                $17_1 = $13_1 & 1 | 0;
                $16_1 = $17_1 ? 1495 : 1493;
               }
               i64toi32_i32$5 = $22$hi;
               $12_1 = $646($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
              }
              $13_1 = ($20_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
              label$66 : {
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               $22_1 = i64toi32_i32$5;
               $22$hi = i64toi32_i32$3;
               i64toi32_i32$2 = i64toi32_i32$5;
               i64toi32_i32$5 = 0;
               i64toi32_i32$1 = 0;
               if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                break label$66
               }
               if ($20_1) {
                break label$66
               }
               $20_1 = 0;
               $12_1 = $9_1;
               break label$5;
              }
              i64toi32_i32$2 = $22$hi;
              $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$2 | 0) | 0;
              $20_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
              break label$5;
             }
             $17_1 = 0;
             $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
             $12_1 = $1_1 ? $1_1 : 4949;
             $1_1 = $632($12_1 | 0, 0 | 0, $20_1 | 0) | 0;
             $18_1 = $1_1 ? $1_1 : $12_1 + $20_1 | 0;
             $13_1 = $21_1;
             $20_1 = $1_1 ? $1_1 - $12_1 | 0 : $20_1;
             break label$4;
            }
            label$67 : {
             if (!$20_1) {
              break label$67
             }
             $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
             break label$43;
            }
            $1_1 = 0;
            $647($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $13_1 | 0);
            break label$42;
           }
           HEAP32[($7_1 + 12 | 0) >> 2] = 0;
           i64toi32_i32$1 = $7_1;
           i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
           HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
           $20_1 = -1;
           $14_1 = $7_1 + 8 | 0;
          }
          $1_1 = 0;
          label$68 : {
           label$69 : while (1) {
            $15_1 = HEAP32[$14_1 >> 2] | 0;
            if (!$15_1) {
             break label$68
            }
            label$70 : {
             $15_1 = $634($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
             $12_1 = ($15_1 | 0) < (0 | 0);
             if ($12_1) {
              break label$70
             }
             if ($15_1 >>> 0 > ($20_1 - $1_1 | 0) >>> 0) {
              break label$70
             }
             $14_1 = $14_1 + 4 | 0;
             $1_1 = $15_1 + $1_1 | 0;
             if ($20_1 >>> 0 > $1_1 >>> 0) {
              continue label$69
             }
             break label$68;
            }
            break label$69;
           };
           $17_1 = -1;
           if ($12_1) {
            break label$6
           }
          }
          $647($0_1 | 0, 32 | 0, $19_1 | 0, $1_1 | 0, $13_1 | 0);
          label$71 : {
           if ($1_1) {
            break label$71
           }
           $1_1 = 0;
           break label$42;
          }
          $14_1 = 0;
          $15_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
          label$72 : while (1) {
           $12_1 = HEAP32[$15_1 >> 2] | 0;
           if (!$12_1) {
            break label$42
           }
           $12_1 = $634($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
           $14_1 = $12_1 + $14_1 | 0;
           if (($14_1 | 0) > ($1_1 | 0)) {
            break label$42
           }
           $641($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
           $15_1 = $15_1 + 4 | 0;
           if ($14_1 >>> 0 < $1_1 >>> 0) {
            continue label$72
           }
           break label$72;
          };
         }
         $647($0_1 | 0, 32 | 0, $19_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
         $1_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
         continue label$1;
        }
        $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $19_1, $20_1, $13_1, $1_1) | 0;
        continue label$1;
       }
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
       HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
       $20_1 = 1;
       $12_1 = $8_1;
       $18_1 = $9_1;
       $13_1 = $21_1;
       break label$4;
      }
      $17_1 = -1;
     }
     global$0 = $7_1 + 80 | 0;
     return $17_1 | 0;
    }
    $18_1 = $9_1;
   }
   $15_1 = $18_1 - $12_1 | 0;
   $20_1 = ($20_1 | 0) < ($15_1 | 0) ? $15_1 : $20_1;
   $14_1 = $17_1 + $20_1 | 0;
   $1_1 = ($19_1 | 0) < ($14_1 | 0) ? $14_1 : $19_1;
   $647($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
   $641($0_1 | 0, $16_1 | 0, $17_1 | 0);
   $647($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
   $647($0_1 | 0, 48 | 0, $20_1 | 0, $15_1 | 0, 0 | 0);
   $641($0_1 | 0, $12_1 | 0, $15_1 | 0);
   $647($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
   continue label$1;
  };
 }
 
 function $641($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $2018($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $642($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($630(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   $1_1 = 0;
   label$3 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($1_1 + $3_1 | 0) + -48 | 0;
    if (!($630(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
     break label$1
    }
    $1_1 = Math_imul($1_1, 10);
    continue label$3;
   };
  }
  return $1_1 | 0;
 }
 
 function $644($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 7664 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $645($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $646($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3_1 = $2_1;
   if (!$3_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $647($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $2015($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $641($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $641($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $648($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $639($0_1 | 0, $1_1 | 0, $2_1 | 0, 57 | 0, 58 | 0) | 0 | 0;
 }
 
 function $649($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $18_1 = 0, $17_1 = 0, $23_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $14_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $21_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $22_1 = 0, i64toi32_i32$3 = 0, $16_1 = 0, $24_1 = 0, $24$hi = 0, $12_1 = 0, $26_1 = 0.0, $8_1 = 0, $19_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $7_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $25$hi = 0, $46_1 = 0, $25_1 = 0, $162_1 = 0, $164$hi = 0, $166$hi = 0, $169$hi = 0, $173_1 = 0, $173$hi = 0, $377_1 = 0.0, $821_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $651(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $43_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $44_1 = 0
      } else {
       $44_1 = 1
      }
      $45_1 = $44_1;
     } else {
      $45_1 = 0
     }
     $43_1 = $45_1;
    }
    if ($43_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 1503;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $651(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 1506;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 1509 : 1504;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $647($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $641($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $641($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 2652 : 3916) : $11_1 ? 3026 : 3970) | 0, 3 | 0);
    $647($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$635(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : {
        label$18 : while (1) {
         $162_1 = $11_1;
         i64toi32_i32$0 = $11_1;
         i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
         i64toi32_i32$2 = 0;
         $164$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $25$hi;
         i64toi32_i32$2 = $164$hi;
         i64toi32_i32$0 = i64toi32_i32$1;
         i64toi32_i32$1 = $25$hi;
         i64toi32_i32$3 = $25_1;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          $46_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
          $46_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         }
         $166$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $24$hi;
         i64toi32_i32$1 = $166$hi;
         i64toi32_i32$2 = $46_1;
         i64toi32_i32$0 = $24$hi;
         i64toi32_i32$3 = $24_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $24_1 = i64toi32_i32$4;
         $24$hi = i64toi32_i32$5;
         $169$hi = i64toi32_i32$5;
         i64toi32_i32$2 = 0;
         i64toi32_i32$2 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
         $24_1 = i64toi32_i32$2;
         $24$hi = i64toi32_i32$5;
         i64toi32_i32$2 = 0;
         i64toi32_i32$2 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
         $173_1 = i64toi32_i32$2;
         $173$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $169$hi;
         i64toi32_i32$1 = i64toi32_i32$4;
         i64toi32_i32$2 = $173$hi;
         i64toi32_i32$3 = $173_1;
         i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
         i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
         HEAP32[$162_1 >> 2] = i64toi32_i32$0;
         $11_1 = $11_1 + -4 | 0;
         if ($11_1 >>> 0 < $18_1 >>> 0) {
          break label$17
         }
         i64toi32_i32$4 = $24$hi;
         i64toi32_i32$5 = $24_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = -1;
         i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
         $24_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $24$hi = i64toi32_i32$1;
         continue label$18;
        };
       }
       i64toi32_i32$1 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$19 : {
       label$20 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$19
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$20
        }
        break label$20;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    $17_1 = ($14_1 + 25 | 0 | 0) / (9 | 0) | 0;
    label$21 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$21
     }
     $19_1 = $17_1 + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$22 : while (1) {
      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$23 : {
       label$24 : {
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$24
        }
        $21_1 = 1e9 >>> $10_1 | 0;
        $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
        $3_1 = 0;
        $17_1 = $18_1;
        label$25 : while (1) {
         $23_1 = HEAP32[$17_1 >> 2] | 0;
         HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
         $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 < $11_1 >>> 0) {
          continue label$25
         }
         break label$25;
        };
        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
        if (!$3_1) {
         break label$23
        }
        HEAP32[$11_1 >> 2] = $3_1;
        $11_1 = $11_1 + 4 | 0;
        break label$23;
       }
       $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$22
      }
      break label$22;
     };
    }
    $17_1 = 0;
    label$26 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$26
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$26
     }
     $3_1 = 100;
     label$27 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      if ($23_1 >>> 0 < $3_1 >>> 0) {
       break label$26
      }
      $3_1 = Math_imul($3_1, 10);
      continue label$27;
     };
    }
    label$28 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($13_1 | 0) == (103 | 0) & ($14_1 | 0) != (0 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$28
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$29 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$29
      }
      $3_1 = 100;
      label$30 : while (1) {
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) == (8 | 0)) {
        break label$29
       }
       $3_1 = Math_imul($3_1, 10);
       continue label$30;
      };
     }
     $22_1 = $10_1 + 4 | 0;
     label$31 : {
      label$32 : {
       $23_1 = HEAP32[$10_1 >> 2] | 0;
       $19_1 = ($23_1 >>> 0) / ($3_1 >>> 0) | 0;
       $21_1 = $23_1 - Math_imul($19_1, $3_1) | 0;
       if ($21_1) {
        break label$32
       }
       if (($22_1 | 0) == ($11_1 | 0)) {
        break label$31
       }
      }
      $377_1 = ($22_1 | 0) == ($11_1 | 0) ? 1.0 : 1.5;
      $22_1 = $3_1 >>> 1 | 0;
      $26_1 = $21_1 >>> 0 < $22_1 >>> 0 ? .5 : ($21_1 | 0) == ($22_1 | 0) ? $377_1 : 1.5;
      $1_1 = $19_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$33 : {
       if ($7_1) {
        break label$33
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$33
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $23_1 - $21_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$31
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$34 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$34
       }
       label$35 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$36 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$36
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$35
        }
        break label$35;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$31
      }
      $3_1 = 100;
      label$37 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       if ($23_1 >>> 0 < $3_1 >>> 0) {
        break label$31
       }
       $3_1 = Math_imul($3_1, 10);
       continue label$37;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$38 : {
     label$39 : while (1) {
      $3_1 = $11_1;
      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($23_1) {
       break label$38
      }
      $11_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$39
      }
      break label$39;
     };
    }
    label$40 : {
     label$41 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$41
      }
      $22_1 = $4_1 & 8 | 0;
      break label$40;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$40
     }
     $11_1 = -9;
     label$42 : {
      if ($23_1) {
       break label$42
      }
      $10_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$42
      }
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$42
      }
      $23_1 = 0;
      $11_1 = 100;
      label$43 : {
       label$44 : while (1) {
        if (($10_1 >>> 0) % ($11_1 >>> 0) | 0) {
         break label$43
        }
        $23_1 = $23_1 + 1 | 0;
        $11_1 = Math_imul($11_1, 10);
        continue label$44;
       };
      }
      $11_1 = $23_1 ^ -1 | 0;
     }
     $23_1 = Math_imul(($3_1 - $16_1 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $22_1 = 0;
      $11_1 = ($23_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$40;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $23_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $19_1 = ($14_1 | $22_1 | 0 | 0) != (0 | 0);
    label$46 : {
     label$47 : {
      $23_1 = $5_1 & -33 | 0;
      if (($23_1 | 0) != (70 | 0)) {
       break label$47
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$46;
     }
     label$48 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$1 = 0;
      $11_1 = $646(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $20_1 = $11_1 + -2 | 0;
     HEAP8[$20_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $20_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $19_1 | 0) + $11_1 | 0) + 1 | 0;
    $647($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $641($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $647($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($23_1 | 0) != (70 | 0)) {
         break label$53
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $6_1 + 16 | 0 | 9 | 0;
        $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $18_1 = $23_1;
        label$54 : while (1) {
         i64toi32_i32$4 = $18_1;
         i64toi32_i32$1 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$5 = 0;
         $11_1 = $646(i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $17_1 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($18_1 | 0) == ($23_1 | 0)) {
            break label$56
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($11_1 | 0) != ($17_1 | 0)) {
           break label$55
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $641($0_1 | 0, $11_1 | 0, $17_1 - $11_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $16_1 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        $11_1 = 0;
        if (!$19_1) {
         break label$51
        }
        $641($0_1 | 0, 4901 | 0, 1 | 0);
        if ($18_1 >>> 0 >= $3_1 >>> 0) {
         break label$52
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$52
        }
        label$58 : while (1) {
         label$59 : {
          i64toi32_i32$4 = $18_1;
          i64toi32_i32$5 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$1 = 0;
          $11_1 = $646(i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, $17_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$59
          }
          label$60 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$60
           }
           break label$60;
          };
         }
         $641($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $3_1 >>> 0) {
          break label$51
         }
         $23_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($23_1) {
          continue label$58
         }
         break label$51;
        };
       }
       label$61 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$61
        }
        $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : $18_1 + 4 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $18_1;
        label$62 : while (1) {
         label$63 : {
          i64toi32_i32$4 = $17_1;
          i64toi32_i32$1 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$5 = 0;
          $11_1 = $646(i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$63
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$64 : {
          label$65 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$65
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$64
           }
           label$66 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$66
            }
            break label$64;
           };
          }
          $641($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$67 : {
           if (($14_1 | 0) > (0 | 0)) {
            break label$67
           }
           if (!$22_1) {
            break label$64
           }
          }
          $641($0_1 | 0, 4901 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $641($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$61
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$62
         }
         break label$62;
        };
       }
       $647($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $641($0_1 | 0, $20_1 | 0, $12_1 - $20_1 | 0 | 0);
       break label$50;
      }
      $11_1 = $14_1;
     }
     $647($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $647($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $17_1 = $5_1 & 32 | 0;
   $14_1 = $17_1 ? $9_1 + 9 | 0 : $9_1;
   label$68 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$68
    }
    $26_1 = 8.0;
    label$69 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$68;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$71 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $821_1 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$5 = 0;
    $11_1 = $646(($821_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$5 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$71
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $18_1 = $6_1 + 16 | 0;
   label$72 : while (1) {
    $11_1 = $18_1;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$74
      }
      $18_1 = ~~$1_1;
      break label$73;
     }
     $18_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($18_1 + 7664 | 0) >> 0] | 0 | $17_1 | 0;
    $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
    label$75 : {
     $18_1 = $11_1 + 1 | 0;
     if (($18_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($1_1 != 0.0) {
       break label$76
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$76
      }
      if (!$23_1) {
       break label$75
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $18_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   label$77 : {
    label$78 : {
     if (!$3_1) {
      break label$78
     }
     if ((($18_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$78
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$77;
    }
    $11_1 = ($12_1 - (($6_1 + 16 | 0) + $21_1 | 0) | 0) + $18_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $647($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $641($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $647($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $18_1 = $18_1 - ($6_1 + 16 | 0) | 0;
   $641($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $17_1 = $12_1 - $21_1 | 0;
   $647($0_1 | 0, 48 | 0, $11_1 - ($18_1 + $17_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $641($0_1 | 0, $21_1 | 0, $17_1 | 0);
   $647($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $650($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$638($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $651($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $652($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $2014($4_1 + 8 | 0 | 0, 7680 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $648($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($605() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $653($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $2014($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $654($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $652($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $655($0_1) {
  $0_1 = $0_1 | 0;
  return !($122($0_1 | 0) | 0) | 0;
 }
 
 function $656($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$69();
  abort();
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($576($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $658($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21_1 = $3_1 + $1_1 | 0;
  $22_1 = $2_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15_1 = 0
    } else {
     $15_1 = 1
    }
    $16_1 = $15_1;
   } else {
    $16_1 = 0
   }
   $14_1 = $16_1;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17_1 + 104 | 0) >> 2] = ($1_1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14_1 ? $21_1 : $22_1) : $2_1;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $1$hi = 0, i64toi32_i32$4 = 0, $4_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $5_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $11$hi = 0, $30_1 = 0, $30$hi = 0, $38_1 = 0, $38$hi = 0, $50_1 = 0, $52_1 = 0, $52$hi = 0, $57_1 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     if ($23_1) {
      break label$2
     }
    }
    $2_1 = $657($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $4_1 = $3_1;
  label$4 : {
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $4_1 = $3_1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$4;
   $1$hi = i64toi32_i32$5;
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1 - $5_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38_1 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38_1;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27_1 = 0
     } else {
      $27_1 = 1
     }
     $28_1 = $27_1;
    } else {
     $28_1 = 0
    }
    $26_1 = $28_1;
   }
   if ($26_1) {
    break label$4
   }
   i64toi32_i32$0 = $1$hi;
   $4_1 = $5_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $4_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$3_1) {
    break label$5
   }
   $50_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $52_1 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($3_1 - $4_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57_1 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50_1;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0_1 = $4_1 + -1 | 0;
   if (($2_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0_1 >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $660($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $636($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $661($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $636($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $662($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $14$hi = 0, $14_1 = 0, $12$hi = 0, $11$hi = 0, $10$hi = 0, $15$hi = 0, $12_1 = 0, $6_1 = 0, $15_1 = 0, $11_1 = 0, $10_1 = 0, $18$hi = 0, $8_1 = 0, $18_1 = 0, $13$hi = 0, $16$hi = 0, $17$hi = 0, $7_1 = 0, $13_1 = 0, $16_1 = 0, $17_1 = 0, $19$hi = 0, $22$hi = 0, $19_1 = 0, $9_1 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $244_1 = 0, $246_1 = 0, $248_1 = 0, $249_1 = 0, $251_1 = 0, $252_1 = 0, $254_1 = 0, $256_1 = 0, $20_1 = 0, $257_1 = 0, $258_1 = 0, $21_1 = 0, $22_1 = 0, $259_1 = 0, $24_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $270_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $278_1 = 0, $29_1 = 0, $29$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $43$hi = 0, $70_1 = 0, $74_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = 0, $94$hi = 0, $106_1 = 0, $106$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150_1 = 0, $150$hi = 0, $155$hi = 0, $162_1 = 0, $163_1 = 0, $163$hi = 0, $164_1 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $194_1 = 0, $194$hi = 0, $196$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $222_1 = 0, $222$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $243_1 = 0, $243$hi = 0, $245_1 = 0, $245$hi = 0, $247_1 = 0, $247$hi = 0, $250_1 = 0, $252$hi = 0, $253_1 = 0, $253$hi = 0, $255_1 = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $269_1 = 0, $269$hi = 0, $277_1 = 0, $277$hi = 0, $280$hi = 0, $23_1 = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $315_1 = 0, $316$hi = 0, $319_1 = 0, $320$hi = 0, $321$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $330_1 = 0, $330$hi = 0, $331_1 = 0, $331$hi = 0, $338_1 = 0, $338$hi = 0, $344_1 = 0, $344$hi = 0, $346$hi = 0, $347_1 = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $349_1 = 0, $349$hi = 0, $351$hi = 0, $355_1 = 0, $356$hi = 0, $357_1 = 0, $357$hi = 0, $358_1 = 0, $358$hi = 0, $360_1 = 0, $360$hi = 0, $363_1 = 0, $364$hi = 0, $367_1 = 0, $368$hi = 0, $369$hi = 0, $372_1 = 0, $373$hi = 0, $375$hi = 0, $376_1 = 0, $376$hi = 0, $380_1 = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $383_1 = 0, $383$hi = 0, $386_1 = 0, $387$hi = 0, $390_1 = 0, $391$hi = 0, $392$hi = 0, $396_1 = 0, $397$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $412_1 = 0, $412$hi = 0, $414$hi = 0, $418_1 = 0, $418$hi = 0, $420$hi = 0, $454_1 = 0, $454$hi = 0, $456_1 = 0, $456$hi = 0, $457_1 = 0, $457$hi = 0, $459_1 = 0, $459$hi = 0, $463_1 = 0, $463$hi = 0, $465_1 = 0, $466$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $484$hi = 0, $486_1 = 0, $486$hi = 0, $492_1 = 0, $498_1 = 0, $498$hi = 0, $503_1 = 0, $504$hi = 0, $508_1 = 0, $508$hi = 0, $512_1 = 0, $512$hi = 0, $515_1 = 0, $515$hi = 0, $519_1 = 0, $520$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $228_1;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29_1;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34_1 = $230_1;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34_1;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39_1 = $232_1;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $234_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $235_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $237_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $238_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70_1 : $74_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81_1 : $85_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129_1 = $1_1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $130_1 = $15_1;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239_1 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     $636($128_1 | 0, $129_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150_1 = $240_1;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150_1;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $242_1;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163_1 = $3_1;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $164_1 = $12_1;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244_1 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    $636($162_1 | 0, $163_1 | 0, i64toi32_i32$2 | 0, $164_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186_1 = $246_1;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194_1 = $249_1;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194_1;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $252_1;
    $17$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207_1 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207_1;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $12_1 = $256_1;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222_1 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = 0;
   $227_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$5 = $15_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $15_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $15$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243_1 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   $245_1 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247_1 = $257_1;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19_1;
   $250_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247_1;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245_1;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19_1 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255_1 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$4 = $16_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264_1 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269_1 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$0 = $17_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277_1 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $17_1 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255_1;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296_1 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24_1;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24_1;
     $300_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301_1 = $300_1;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305_1 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $309_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301_1;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311_1 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312_1 = $3_1;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$5 = $18_1;
     $319_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312_1;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $325_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311_1;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330_1 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331_1 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338_1 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344_1 = $260_1;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344_1;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331_1;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348_1 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349_1 = $2_1;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $355_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348_1;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357_1 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358_1 = $1_1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360_1 = $263_1;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $363_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = $16_1;
     $367_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363_1;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $372_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360_1;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358_1;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $380_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357_1;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382_1 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383_1 = $3_1;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$2 = $13_1;
     $386_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$3 = $19_1;
     $390_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386_1;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383_1;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $396_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382_1;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $266_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407_1 = $267_1;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407_1;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $270_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $270_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $412_1 = $270_1;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412_1;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $11_1 = $272_1;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418_1 = $3_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418_1;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $636($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $636($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $637($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $637($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $454_1 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $456_1 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$0 = $454_1;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$2 = $456_1;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $457_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459_1 = i64toi32_i32$5;
     $459$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463_1 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$1 = $459_1;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463_1;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $465_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $466$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$2 = $457_1;
     i64toi32_i32$0 = $466$hi;
     i64toi32_i32$1 = $465_1;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $471_1 = i64toi32_i32$0;
     $471$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475_1 = i64toi32_i32$2;
     $475$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $471$hi;
     i64toi32_i32$5 = $471_1;
     i64toi32_i32$2 = $475$hi;
     i64toi32_i32$1 = $475_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     break label$16;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274_1;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $11$hi;
    $492_1 = !($11_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276_1 = 0
      } else {
       $276_1 = 1
      }
      $278_1 = $276_1;
     } else {
      $278_1 = 0
     }
     $275_1 = $278_1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492_1 : $275_1) {
     break label$19
    }
    i64toi32_i32$1 = $14$hi;
    $498_1 = $14_1;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $503_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498_1;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $14$hi;
   $512_1 = $14_1;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $519_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512_1;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $14_1 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $14$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $663() {
  return 0 | 0;
 }
 
 function $664() {
  return 0 | 0;
 }
 
 function $665($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $9$hi = 0, $5_1 = 0, $7_1 = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $12_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $159_1 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151_1 = 0, $152_1 = 0, $152$hi = 0, $153_1 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183_1 = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $251$hi = 0, $269$hi = 0, $272_1 = 0, $273$hi = 0, $282_1 = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309_1 = 0, $309$hi = 0, $315_1 = 0, $316$hi = 0, $322_1 = 0, $322$hi = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $327_1 = 0, $327$hi = 0, $355_1 = 0, $355$hi = 0, $357_1 = 0, $357$hi = 0, $361_1 = 0, $361$hi = 0, $363_1 = 0, $364$hi = 0, $370_1 = 0, $370$hi = 0, $372$hi = 0, $375_1 = 0, $375$hi = 0, $378_1 = 0, $378$hi = 0, $379$hi = 0, $386_1 = 0, $386$hi = 0, $390$hi = 0, $394_1 = 0, $395$hi = 0, $400_1 = 0, $400$hi = 0, $408_1 = 0, $409$hi = 0, $411_1 = 0, $411$hi = 0, $417_1 = 0, $418$hi = 0, $422_1 = 0, $423$hi = 0, $426_1 = 0, $426$hi = 0, $432_1 = 0, $433$hi = 0, $437_1 = 0, $438$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $121_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $136_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $136_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $136_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $137_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $137_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $137_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152_1 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153_1 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $138_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138_1 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $138_1;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $636($151_1 | 0, $152_1 | 0, i64toi32_i32$3 | 0, $153_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184_1 = $3_1;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $185_1 = $4_1;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $4_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $139_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $139_1 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $139_1;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    $636($183_1 | 0, $184_1 | 0, i64toi32_i32$4 | 0, $185_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $140_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $140_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208_1 = $140_1;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $141_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $141_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208_1;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $141_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $142_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $142_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214_1 = $142_1;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $143_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $143_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214_1;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $143_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $144_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $144_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$1;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $636($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $637($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $145_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $145_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $145_1;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $146_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $147_1 = 0
       } else {
        $147_1 = 1
       }
       $148_1 = $147_1;
      } else {
       $148_1 = 0
      }
      $146_1 = $148_1;
     }
     if ($146_1) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283_1 = $1_1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     $284_1 = $4_1;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $4_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $149_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $149_1 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $149_1;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     $636($282_1 | 0, $283_1 | 0, i64toi32_i32$3 | 0, $284_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309_1 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309_1;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $150_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $150_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322_1 = $150_1;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $154_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $154_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322_1;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $154_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325_1;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $155_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $155_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $155_1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$17
     }
     i64toi32_i32$3 = 0;
     $9_1 = $6_1;
     $9$hi = i64toi32_i32$3;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $4$hi;
    $636($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $637($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$3 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$3;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $355_1 = i64toi32_i32$3;
    $355$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $357_1 = i64toi32_i32$4;
    $357$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $361_1 = i64toi32_i32$3;
    $361$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $357$hi;
    i64toi32_i32$5 = $357_1;
    i64toi32_i32$3 = $361$hi;
    i64toi32_i32$2 = $361_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $363_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $364$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $355$hi;
    i64toi32_i32$2 = $355_1;
    i64toi32_i32$3 = $364$hi;
    i64toi32_i32$5 = $363_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $156_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $156_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $370_1 = $156_1;
   $370$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $157_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $157_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $372$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $370$hi;
   i64toi32_i32$3 = $370_1;
   i64toi32_i32$2 = $372$hi;
   i64toi32_i32$5 = $157_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $158_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $375_1 = $158_1;
   $375$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $159_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $159_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$3 = $159_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $378_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $378$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $375$hi;
   i64toi32_i32$4 = $375_1;
   i64toi32_i32$3 = $378$hi;
   i64toi32_i32$5 = $378_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $379$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $379$hi;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch ($663() | 0 | 0) {
      case 0:
       i64toi32_i32$4 = $4$hi;
       $386_1 = $4_1;
       $386$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = 0;
       $390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $390$hi;
       i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1_1 = i64toi32_i32$1;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $3_1;
       $394_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $395$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $386$hi;
       i64toi32_i32$5 = $386_1;
       i64toi32_i32$0 = $395$hi;
       i64toi32_i32$3 = $394_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4_1 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$1;
       label$23 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$1 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$1;
        break label$19;
       }
       i64toi32_i32$1 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $2_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $3_1 = i64toi32_i32$0;
       $3$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2_1;
       $408_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$3 = $400_1;
       i64toi32_i32$2 = $409$hi;
       i64toi32_i32$1 = $408_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       break label$18;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $411_1 = $4_1;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$5 = $2_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       $417_1 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = $418$hi;
       i64toi32_i32$3 = $417_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1_1 = i64toi32_i32$2;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $422_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$3 = $411_1;
       i64toi32_i32$4 = $423$hi;
       i64toi32_i32$1 = $422_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       $3_1 = $1_1;
       $3$hi = i64toi32_i32$2;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$2 = $4$hi;
     $426_1 = $4_1;
     $426$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     $432_1 = !($2_1 | i64toi32_i32$2 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$3 = $433$hi;
     i64toi32_i32$1 = $432_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $437_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $438$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$1 = $426_1;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $437_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$4;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $664() | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $636($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $667($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $668($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $669($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $636($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $671($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $17_1 = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $665($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $672($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $662($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $662($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $662($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $662($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $662($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $673($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$6 = 0, $13$hi = 0, $10$hi = 0, $13_1 = 0, $10_1 = 0, $16$hi = 0, $15$hi = 0, $12$hi = 0, $20$hi = 0, $15_1 = 0, $11$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $17$hi = 0, $11_1 = 0, $14$hi = 0, $8_1 = 0, $18$hi = 0, $20_1 = 0, $14_1 = 0, $17_1 = 0, $23$hi = 0, $18_1 = 0, $23_1 = 0, $19_1 = 0, $19$hi = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $324_1 = 0, $325_1 = 0, $7_1 = 0, $326_1 = 0, $327_1 = 0, $329_1 = 0, $330_1 = 0, $331_1 = 0, $333_1 = 0, $334_1 = 0, $335_1 = 0, $336_1 = 0, $338_1 = 0, $339_1 = 0, $341_1 = 0, $342_1 = 0, $343_1 = 0, $344_1 = 0, $345_1 = 0, $347_1 = 0, $348_1 = 0, $349_1 = 0, $350_1 = 0, $352_1 = 0, $353_1 = 0, $354_1 = 0, $355_1 = 0, $21_1 = 0, $21$hi = 0, $356_1 = 0, $357_1 = 0, $359_1 = 0, $360_1 = 0, $361_1 = 0, $362_1 = 0, $365_1 = 0, $366_1 = 0, $368_1 = 0, $369_1 = 0, $371_1 = 0, $372_1 = 0, $373_1 = 0, $374_1 = 0, $375_1 = 0, $377_1 = 0, $378_1 = 0, $379_1 = 0, $381_1 = 0, $382_1 = 0, $383_1 = 0, $384_1 = 0, $387_1 = 0, $50_1 = 0, $54_1 = 0, $61_1 = 0, $65_1 = 0, $74_1 = 0, $74$hi = 0, $79_1 = 0, $79$hi = 0, $87_1 = 0, $87$hi = 0, $109_1 = 0, $110_1 = 0, $110$hi = 0, $111_1 = 0, $111$hi = 0, $118$hi = 0, $121$hi = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $163_1 = 0, $165_1 = 0, $165$hi = 0, $169$hi = 0, $180_1 = 0, $180$hi = 0, $181$hi = 0, $184_1 = 0, $187_1 = 0, $187$hi = 0, $192$hi = 0, $202_1 = 0, $202$hi = 0, $203$hi = 0, $205_1 = 0, $208_1 = 0, $208$hi = 0, $213$hi = 0, $223_1 = 0, $223$hi = 0, $224$hi = 0, $226_1 = 0, $229_1 = 0, $229$hi = 0, $234$hi = 0, $244_1 = 0, $244$hi = 0, $245$hi = 0, $247_1 = 0, $248_1 = 0, $248$hi = 0, $251_1 = 0, $251$hi = 0, $256$hi = 0, $261_1 = 0, $263$hi = 0, $266_1 = 0, $267_1 = 0, $267$hi = 0, $271_1 = 0, $271$hi = 0, $278_1 = 0, $278$hi = 0, $282_1 = 0, $283$hi = 0, $284$hi = 0, $286_1 = 0, $287$hi = 0, $288$hi = 0, $289$hi = 0, $293$hi = 0, $304_1 = 0, $304$hi = 0, $307_1 = 0, $307$hi = 0, $313$hi = 0, $314_1 = 0, $314$hi = 0, $320_1 = 0, $320$hi = 0, $328_1 = 0, $328$hi = 0, $332_1 = 0, $332$hi = 0, $337_1 = 0, $337$hi = 0, $339$hi = 0, $340_1 = 0, $340$hi = 0, $342$hi = 0, $343$hi = 0, $346_1 = 0, $347$hi = 0, $348$hi = 0, $351_1 = 0, $352$hi = 0, $358_1 = 0, $358$hi = 0, $363_1 = 0, $363$hi = 0, $364_1 = 0, $364$hi = 0, $367_1 = 0, $367$hi = 0, $370_1 = 0, $370$hi = 0, $372$hi = 0, $376_1 = 0, $376$hi = 0, $380_1 = 0, $381$hi = 0, $382$hi = 0, $385_1 = 0, $385$hi = 0, $386_1 = 0, $386$hi = 0, $393_1 = 0, $393$hi = 0, $397_1 = 0, $399_1 = 0, $399$hi = 0, $401$hi = 0, $402_1 = 0, $402$hi = 0, $403_1 = 0, $403$hi = 0, $404_1 = 0, $404$hi = 0, $406$hi = 0, $410_1 = 0, $411$hi = 0, $412_1 = 0, $412$hi = 0, $413_1 = 0, $413$hi = 0, $414_1 = 0, $414$hi = 0, $426_1 = 0, $426$hi = 0, $430_1 = 0, $431_1 = 0, $431$hi = 0, $435_1 = 0, $435$hi = 0, $439_1 = 0, $440$hi = 0, $441$hi = 0, $445_1 = 0, $446$hi = 0, $447_1 = 0, $447$hi = 0, $448_1 = 0, $448$hi = 0, $455_1 = 0, $455$hi = 0, $460_1 = 0, $460$hi = 0, $465_1 = 0, $465$hi = 0, $468_1 = 0, $468$hi = 0, $471_1 = 0, $472$hi = 0, $475_1 = 0, $476$hi = 0, $477$hi = 0, $480_1 = 0, $481$hi = 0, $483$hi = 0, $484_1 = 0, $484$hi = 0, $488_1 = 0, $489$hi = 0, $490_1 = 0, $490$hi = 0, $491_1 = 0, $491$hi = 0, $492_1 = 0, $492$hi = 0, $499_1 = 0, $499$hi = 0, $502_1 = 0, $502$hi = 0, $505_1 = 0, $507$hi = 0, $508_1 = 0, $508$hi = 0, $513_1 = 0, $513$hi = 0, $514_1 = 0, $514$hi = 0, $516$hi = 0, $517$hi = 0, $519_1 = 0, $520$hi = 0, $521$hi = 0, $525_1 = 0, $526$hi = 0, $531$hi = 0, $541$hi = 0, $545_1 = 0, $545$hi = 0, $546$hi = 0, $550_1 = 0, $551$hi = 0, $558_1 = 0, $560_1 = 0, $560$hi = 0, $562$hi = 0, $564_1 = 0, $564$hi = 0, $571$hi = 0, $575_1 = 0, $575$hi = 0, $576$hi = 0, $580_1 = 0, $581$hi = 0, $595_1 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603_1 = 0, $603$hi = 0, $636_1 = 0, $636$hi = 0, $641_1 = 0, $641$hi = 0, $645$hi = 0, $646_1 = 0, $646$hi = 0, $647_1 = 0, $647$hi = 0, $650_1 = 0, $650$hi = 0, $654_1 = 0, $655$hi = 0, $667_1 = 0, $667$hi = 0, $668_1 = 0, $668$hi = 0, $676_1 = 0, $680_1 = 0, $681$hi = 0, $685_1 = 0, $689_1 = 0, $690$hi = 0, $694_1 = 0, $695$hi = 0, $697_1 = 0, $697$hi = 0, $700_1 = 0, $703_1 = 0, $703$hi = 0, $704_1 = 0, $711_1 = 0, $716_1 = 0, $717$hi = 0, $721_1 = 0, $722$hi = 0, $724_1 = 0, $724$hi = 0, $727_1 = 0, $730_1 = 0, $730$hi = 0, $731_1 = 0, $737_1 = 0, $742_1 = 0, $743$hi = 0, $747_1 = 0, $748$hi = 0, $749$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $324_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $324_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $324_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $325_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $325_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $325_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $50_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $54_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $50_1 : $54_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $61_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $61_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $74_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $74$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $74$hi;
     i64toi32_i32$2 = $74_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $79_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $79$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $79$hi;
      i64toi32_i32$0 = $79_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $87_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $87$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $87$hi;
     i64toi32_i32$0 = $87_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $8_1 = 0;
    label$11 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $109_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $110_1 = $1_1;
     $110$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $111_1 = $11_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $326_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $326_1 = i64toi32_i32$1
     }
     $118$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $121$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $118$hi;
     i64toi32_i32$2 = $326_1;
     i64toi32_i32$4 = $121$hi;
     i64toi32_i32$1 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $110$hi;
     i64toi32_i32$2 = $111$hi;
     $636($109_1 | 0, $110_1 | 0, i64toi32_i32$5 | 0, $111_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5_1 + 328 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $136_1 = $5_1 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $137_1 = $3_1;
    $137$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $327_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $327_1 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$5 = $327_1;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$5 = $138$hi;
    $636($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $163_1 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $329_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $329_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $165_1 = $329_1;
   $165$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $330_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $330_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $169$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $165$hi;
   i64toi32_i32$4 = $165_1;
   i64toi32_i32$0 = $169$hi;
   i64toi32_i32$3 = $330_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   $612($163_1 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $180_1 = i64toi32_i32$3;
   $180$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $180$hi;
   i64toi32_i32$2 = $180_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $181$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $181$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   $612($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $184_1 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $331_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $331_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $187_1 = $331_1;
   $187$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $333_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $333_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $192$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $187$hi;
   i64toi32_i32$5 = $187_1;
   i64toi32_i32$0 = $192$hi;
   i64toi32_i32$1 = $333_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   $612($184_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $202_1 = i64toi32_i32$1;
   $202$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $202$hi;
   i64toi32_i32$0 = $202_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $203$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $203$hi;
   i64toi32_i32$0 = 0;
   $612($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $205_1 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $334_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $334_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $208_1 = $334_1;
   $208$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $335_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $335_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $213$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $208$hi;
   i64toi32_i32$5 = $208_1;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$4 = $335_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   $612($205_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $223_1 = i64toi32_i32$4;
   $223$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $223$hi;
   i64toi32_i32$2 = $223_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $224$hi;
   i64toi32_i32$2 = 0;
   $612($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $226_1 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $336_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $336_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $229_1 = $336_1;
   $229$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $338_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $338_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $234$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $229$hi;
   i64toi32_i32$5 = $229_1;
   i64toi32_i32$0 = $234$hi;
   i64toi32_i32$3 = $338_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $612($226_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $244_1 = i64toi32_i32$3;
   $244$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $244$hi;
   i64toi32_i32$0 = $244_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $245$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $245$hi;
   i64toi32_i32$0 = 0;
   $612($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $247_1 = $5_1 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $248_1 = $2_1;
   $248$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $339_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $339_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $251_1 = $339_1;
   $251$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $341_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $341_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $256$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $251$hi;
   i64toi32_i32$5 = $251_1;
   i64toi32_i32$2 = $256$hi;
   i64toi32_i32$1 = $341_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $248$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   $612($247_1 | 0, $248_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $261_1 = $5_1 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $342_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $342_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $263$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $263$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   $612($261_1 | 0, $342_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $266_1 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $267_1 = $4_1;
   $267$hi = i64toi32_i32$4;
   i64toi32_i32$0 = ($5_1 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $271_1 = i64toi32_i32$4;
   $271$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $278_1 = i64toi32_i32$4;
   $278$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$4 = $278$hi;
   i64toi32_i32$2 = $278_1;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $282_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $283$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $271$hi;
   i64toi32_i32$2 = $271_1;
   i64toi32_i32$3 = $283$hi;
   i64toi32_i32$0 = $282_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $284$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $286_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $287$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $284$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $287$hi;
   i64toi32_i32$2 = $286_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $288$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $288$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $289$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $267$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $289$hi;
   i64toi32_i32$2 = 0;
   $612($266_1 | 0, $267_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $293$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $293$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $612($5_1 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $343_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $343_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16_1 = $343_1;
     $16$hi = i64toi32_i32$3;
     $304_1 = $16_1;
     $304$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $344_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $344_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $307_1 = $344_1;
     $307$hi = i64toi32_i32$3;
     i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $345_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $345_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $313$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $307$hi;
     i64toi32_i32$2 = $307_1;
     i64toi32_i32$1 = $313$hi;
     i64toi32_i32$5 = $345_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $314_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $314$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $304$hi;
     i64toi32_i32$3 = $304_1;
     i64toi32_i32$2 = $314$hi;
     i64toi32_i32$5 = $314_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $347_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $347_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $347_1;
     $2$hi = i64toi32_i32$1;
     $320_1 = $2_1;
     $320$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $348_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     i64toi32_i32$0 = $348_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $320$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $20_1 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$1;
     $328_1 = i64toi32_i32$0;
     $328$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $349_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $349_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $10$hi = i64toi32_i32$4;
     $332_1 = $10_1;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$0 = ($5_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $350_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $337_1 = $350_1;
     $337$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $352_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $352_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $339$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $337$hi;
     i64toi32_i32$4 = $337_1;
     i64toi32_i32$1 = $339$hi;
     i64toi32_i32$5 = $352_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $340_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $340$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $353_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $340$hi;
     i64toi32_i32$1 = $340_1;
     i64toi32_i32$0 = $342$hi;
     i64toi32_i32$5 = $353_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $343$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $346_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$1 = $346_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $348$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $351_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $352$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $348$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $352$hi;
     i64toi32_i32$5 = $351_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $354_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $354_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $13_1 = $354_1;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($332_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $358_1 = i64toi32_i32$0;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $328$hi;
     i64toi32_i32$2 = $328_1;
     i64toi32_i32$0 = $358$hi;
     i64toi32_i32$5 = $358_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$5 = $20_1;
     i64toi32_i32$4 = 0;
     $363_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $364_1 = i64toi32_i32$1;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $367_1 = $15_1;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $355_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $21_1 = $355_1;
     $21$hi = i64toi32_i32$5;
     $370_1 = $21_1;
     $370$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $356_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $356_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $372$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $370$hi;
     i64toi32_i32$5 = $370_1;
     i64toi32_i32$3 = $372$hi;
     i64toi32_i32$2 = $356_1;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($367_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $376_1 = i64toi32_i32$4;
     $376$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $364$hi;
     i64toi32_i32$3 = $364_1;
     i64toi32_i32$4 = $376$hi;
     i64toi32_i32$2 = $376_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $380_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $381$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $363$hi;
     i64toi32_i32$2 = $363_1;
     i64toi32_i32$1 = $381$hi;
     i64toi32_i32$3 = $380_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $382$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $385_1 = i64toi32_i32$2;
     $385$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $385$hi;
     i64toi32_i32$3 = $385_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $386_1 = i64toi32_i32$1;
     $386$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $393_1 = i64toi32_i32$5;
     $393$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$5 = $393$hi;
     i64toi32_i32$3 = $393_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $397_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = $397_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $399_1 = $357_1;
     $399$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $359_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $359_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $401$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $399$hi;
     i64toi32_i32$1 = $399_1;
     i64toi32_i32$4 = $401$hi;
     i64toi32_i32$0 = $359_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $402_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $402$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $386$hi;
     i64toi32_i32$3 = $386_1;
     i64toi32_i32$1 = $402$hi;
     i64toi32_i32$0 = $402_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $403_1 = i64toi32_i32$5;
     $403$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $404_1 = $17_1;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $360_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $360_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $406$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $404$hi;
     i64toi32_i32$2 = $404_1;
     i64toi32_i32$4 = $406$hi;
     i64toi32_i32$0 = $360_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $410_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $411$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $403$hi;
     i64toi32_i32$0 = $403_1;
     i64toi32_i32$5 = $411$hi;
     i64toi32_i32$2 = $410_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $412_1 = i64toi32_i32$4;
     $412$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $413_1 = $16_1;
     $413$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     $414_1 = $15_1;
     $414$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $361_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $361_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $22_1 = $361_1;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -2;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $17_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $17$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $414$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = __wasm_i64_mul($414_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $23_1 = i64toi32_i32$1;
     $23$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $18_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $426_1 = i64toi32_i32$0;
     $426$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$3 = $23_1;
     i64toi32_i32$0 = $426$hi;
     i64toi32_i32$2 = $426_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$2 = $23_1;
     $430_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $431_1 = $430_1;
     $431$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $435_1 = i64toi32_i32$4;
     $435$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $435$hi;
     i64toi32_i32$3 = $435_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $23_1 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $439_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $440$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $431$hi;
     i64toi32_i32$3 = $431_1;
     i64toi32_i32$5 = $440$hi;
     i64toi32_i32$2 = $439_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $441$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $413$hi;
     i64toi32_i32$1 = $413_1;
     i64toi32_i32$3 = $441$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $445_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $446$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $412$hi;
     i64toi32_i32$2 = $412_1;
     i64toi32_i32$4 = $446$hi;
     i64toi32_i32$1 = $445_1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $447_1 = i64toi32_i32$3;
     $447$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     $448_1 = $20_1;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $455_1 = i64toi32_i32$2;
     $455$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$0 = $16_1;
     i64toi32_i32$2 = $455$hi;
     i64toi32_i32$1 = $455_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $460_1 = i64toi32_i32$0;
     $460$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$0 = $460$hi;
     i64toi32_i32$1 = $460_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $13_1 = i64toi32_i32$2;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $465_1 = i64toi32_i32$5;
     $465$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$5 = $465$hi;
     i64toi32_i32$1 = $465_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $362_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $362_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $468_1 = $362_1;
     $468$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$1 = $16_1;
     $471_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $472$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$4 = $4_1;
     $475_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $476$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $472$hi;
     i64toi32_i32$4 = $471_1;
     i64toi32_i32$2 = $476$hi;
     i64toi32_i32$3 = $475_1;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $477$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = $13_1;
     $480_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $481$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $477$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$0 = $481$hi;
     i64toi32_i32$4 = $480_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $365_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $365_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $483$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $468$hi;
     i64toi32_i32$5 = $468_1;
     i64toi32_i32$1 = $483$hi;
     i64toi32_i32$4 = $365_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $484_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $484$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $448$hi;
     i64toi32_i32$3 = $448_1;
     i64toi32_i32$5 = $484$hi;
     i64toi32_i32$4 = $484_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $488_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $489$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $447$hi;
     i64toi32_i32$4 = $447_1;
     i64toi32_i32$2 = $489$hi;
     i64toi32_i32$3 = $488_1;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $490_1 = i64toi32_i32$5;
     $490$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     $491_1 = $4_1;
     $491$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     $492_1 = $23_1;
     $492$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $499_1 = i64toi32_i32$4;
     $499$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$4 = $499$hi;
     i64toi32_i32$3 = $499_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $366_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
      $366_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $502_1 = $366_1;
     $502$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     $505_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = $505_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $368_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $368_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $507$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $502$hi;
     i64toi32_i32$5 = $502_1;
     i64toi32_i32$3 = $507$hi;
     i64toi32_i32$0 = $368_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $508_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $508$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $492$hi;
     i64toi32_i32$1 = $492_1;
     i64toi32_i32$5 = $508$hi;
     i64toi32_i32$0 = $508_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$0 = $23_1;
     i64toi32_i32$3 = 0;
     $513_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     $513$hi = i64toi32_i32$3;
     i64toi32_i32$3 = i64toi32_i32$2;
     $514_1 = i64toi32_i32$4;
     $514$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      $369_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
      $369_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     }
     $516$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $514$hi;
     i64toi32_i32$3 = $514_1;
     i64toi32_i32$0 = $516$hi;
     i64toi32_i32$1 = $369_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $517$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $517$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $519_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $520$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $513$hi;
     i64toi32_i32$1 = $513_1;
     i64toi32_i32$4 = $520$hi;
     i64toi32_i32$3 = $519_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $521$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$2 = $491_1;
     i64toi32_i32$1 = $521$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $525_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $526$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $490$hi;
     i64toi32_i32$3 = $490_1;
     i64toi32_i32$0 = $526$hi;
     i64toi32_i32$2 = $525_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = 131071;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$2 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $371_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $371_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $531$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $531$hi;
     i64toi32_i32$5 = $371_1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$3 = $14$hi;
     $612($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $372_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $372_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $541$hi = i64toi32_i32$4;
     i64toi32_i32$3 = ($5_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $545_1 = i64toi32_i32$4;
     $545$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $541$hi;
     i64toi32_i32$3 = $372_1;
     i64toi32_i32$4 = $545$hi;
     i64toi32_i32$2 = $545_1;
     i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     $546$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $550_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $551$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $551$hi;
     i64toi32_i32$1 = $550_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     break label$12;
    }
    $558_1 = $5_1 + 96 | 0;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $373_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $373_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560_1 = $373_1;
    $560$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     $374_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $374_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $560$hi;
    i64toi32_i32$5 = $560_1;
    i64toi32_i32$4 = $562$hi;
    i64toi32_i32$1 = $374_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$4;
    $564_1 = $2_1;
    $564$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $375_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $375_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $375_1;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $564$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$1 = $14$hi;
    $612($558_1 | 0, $564_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $377_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $377_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $575_1 = i64toi32_i32$4;
    $575$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $571$hi;
    i64toi32_i32$1 = $377_1;
    i64toi32_i32$4 = $575$hi;
    i64toi32_i32$5 = $575_1;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $576$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $580_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$0 = 0;
    $581$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $576$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$1 = $581$hi;
    i64toi32_i32$3 = $580_1;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$4;
   }
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $378_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $378_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $595_1 = $378_1;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 63;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $379_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $379_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
     }
     $597$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $595$hi;
     i64toi32_i32$2 = $595_1;
     i64toi32_i32$0 = $597$hi;
     i64toi32_i32$3 = $379_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $381_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $381_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 65535;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $603_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $603$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $601$hi;
     i64toi32_i32$2 = $381_1;
     i64toi32_i32$0 = $603$hi;
     i64toi32_i32$3 = $603_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $382_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $382_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $4_1 = $382_1;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = $4$hi;
    $637($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $636($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$4;
    i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $15$hi;
    $612($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $636_1 = i64toi32_i32$3;
    $636$hi = i64toi32_i32$0;
    i64toi32_i32$4 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     $383_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $383_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    }
    $641_1 = $383_1;
    $641$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $384_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
     $384_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
    }
    $645$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $641$hi;
    i64toi32_i32$4 = $641_1;
    i64toi32_i32$3 = $645$hi;
    i64toi32_i32$2 = $384_1;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $646_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $636$hi;
    i64toi32_i32$0 = $636_1;
    i64toi32_i32$4 = $646$hi;
    i64toi32_i32$2 = $646_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $647_1 = i64toi32_i32$5;
    $647$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    $650_1 = i64toi32_i32$1;
    $650$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $387_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $387_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $1_1 = $387_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $650$hi;
    i64toi32_i32$0 = $650_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $1_1;
    $654_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $655$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $647$hi;
    i64toi32_i32$2 = $647_1;
    i64toi32_i32$1 = $655$hi;
    i64toi32_i32$3 = $654_1;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $13_1 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   $612($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 3 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 0;
   $612($5_1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$5 | 0, 5 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = $15$hi;
   $667_1 = $15_1;
   $667$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   $668_1 = $2_1;
   $668$hi = i64toi32_i32$4;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $676_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1_1;
   $680_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = 0;
   $681$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$0 = $681$hi;
   i64toi32_i32$1 = $680_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$5;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$1 = $14_1;
   $685_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = $14_1;
   $689_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676_1 : $685_1;
   i64toi32_i32$1 = 0;
   $690$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $668$hi;
   i64toi32_i32$4 = $668_1;
   i64toi32_i32$3 = $690$hi;
   i64toi32_i32$2 = $689_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $694_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $695$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $667$hi;
   i64toi32_i32$2 = $667_1;
   i64toi32_i32$5 = $695$hi;
   i64toi32_i32$4 = $694_1;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$0;
   $697_1 = i64toi32_i32$3;
   $697$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$4 = 0;
   $700_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
   $703_1 = i64toi32_i32$1;
   $703$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$1 = $703$hi;
   i64toi32_i32$2 = $703_1;
   $704_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $2_1;
   $711_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$4 = $2_1;
   $716_1 = $700_1 & ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $704_1 : $711_1) | 0;
   i64toi32_i32$1 = 0;
   $717$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$0 = $716_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$0 = $3_1;
   $721_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $722$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $697$hi;
   i64toi32_i32$0 = $697_1;
   i64toi32_i32$3 = $722$hi;
   i64toi32_i32$4 = $721_1;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
   $724_1 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$4 = 0;
   $727_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $730_1 = i64toi32_i32$1;
   $730$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$1 = $730$hi;
   i64toi32_i32$0 = $730_1;
   $731_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$0 = $5_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$1 = $4_1;
   $737_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = $4_1;
   $742_1 = $727_1 & ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $731_1 : $737_1) | 0;
   i64toi32_i32$1 = 0;
   $743$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$0 = $743$hi;
   i64toi32_i32$5 = $742_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $747_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $748$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $724$hi;
   i64toi32_i32$5 = $724_1;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$4 = $747_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $749$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $749$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $12$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $674($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $675($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 7884 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 7872 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $659($1_1 | 0) | 0;
     }
     if ($606($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $659($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 1348 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $659($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (!$3_1) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $660($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 2652 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $659($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $659($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $676($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $677($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($605() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $659($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $659($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3_1) {
       break label$42
      }
      if (!$9_1) {
       break label$1
      }
      label$43 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$43
       }
       break label$1;
      };
     }
     HEAP32[($605() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $658($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $676($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $133_1 = 0, $133$hi = 0, $137_1 = 0, $137$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $146$hi = 0, $164_1 = 0, $164$hi = 0, $168_1 = 0, $168$hi = 0, $253$hi = 0, $260$hi = 0, $269_1 = 0, $269$hi = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $281_1 = 0, $281$hi = 0, $291_1 = 0, $291$hi = 0, $308_1 = 0, $308$hi = 0, $312_1 = 0, $312$hi = 0, $317_1 = 0, $317$hi = 0, $319_1 = 0, $319$hi = 0, $337$hi = 0, $345_1 = 0, $346_1 = 0, $349$hi = 0, $373_1 = 0, $373$hi = 0, $377_1 = 0, $377$hi = 0, $411_1 = 0, $411$hi = 0, $415_1 = 0, $415$hi = 0, $419_1 = 0, $419$hi = 0, $423_1 = 0, $423$hi = 0, $430_1 = 0, $430$hi = 0, $433_1 = 0, $433$hi = 0, $439_1 = 0, $439$hi = 0, $443_1 = 0, $443$hi = 0, $445_1 = 0, $445$hi = 0, $449_1 = 0, $449$hi = 0, $453_1 = 0, $453$hi = 0, $457_1 = 0, $457$hi = 0, $487_1 = 0, $487$hi = 0, $491_1 = 0, $491$hi = 0, $495_1 = 0, $495$hi = 0, $499_1 = 0, $499$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $659($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $659($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $659($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $659($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     $12_1 = $7_1 | 32 | 0;
     label$15 : {
      label$16 : {
       $13_1 = $7_1 + -48 | 0;
       if ($13_1 >>> 0 < 10 >>> 0) {
        break label$16
       }
       label$17 : {
        if (($12_1 + -97 | 0) >>> 0 < 6 >>> 0) {
         break label$17
        }
        if (($7_1 | 0) != (46 | 0)) {
         break label$12
        }
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$16
       }
       if ($8_1) {
        break label$13
       }
       $8_1 = 1;
       i64toi32_i32$5 = $19$hi;
       $14_1 = $19_1;
       $14$hi = i64toi32_i32$5;
       break label$15;
      }
      $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
      label$18 : {
       label$19 : {
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$0 = $19_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 7;
        if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
         $106_1 = 1
        } else {
         if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $107_1 = 0
          } else {
           $107_1 = 1
          }
          $108_1 = $107_1;
         } else {
          $108_1 = 0
         }
         $106_1 = $108_1;
        }
        if ($106_1) {
         break label$19
        }
        $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
        break label$18;
       }
       label$20 : {
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = $19_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 28;
        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
         $109_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
          if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
           $110_1 = 0
          } else {
           $110_1 = 1
          }
          $111_1 = $110_1;
         } else {
          $111_1 = 0
         }
         $109_1 = $111_1;
        }
        if ($109_1) {
         break label$20
        }
        $661($6_1 + 48 | 0 | 0, $7_1 | 0);
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$5 = 1073414144;
        $662($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$5;
        $18$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$2;
        $15$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
        $133_1 = i64toi32_i32$5;
        $133$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $137_1 = i64toi32_i32$2;
        $137$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$0 = $133$hi;
        i64toi32_i32$3 = $137$hi;
        $662($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133_1 | 0, i64toi32_i32$0 | 0, $137_1 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $17$hi;
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
        $142_1 = i64toi32_i32$3;
        $142$hi = i64toi32_i32$0;
        i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $146_1 = i64toi32_i32$0;
        $146$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$2 = $142$hi;
        i64toi32_i32$5 = $146$hi;
        $665($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142_1 | 0, i64toi32_i32$2 | 0, $146_1 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6_1 + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$5;
        break label$18;
       }
       if (!$7_1) {
        break label$18
       }
       if ($11_1) {
        break label$18
       }
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 1073610752;
       $662($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
       $164_1 = i64toi32_i32$3;
       $164$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $168_1 = i64toi32_i32$0;
       $168$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $164$hi;
       i64toi32_i32$5 = $168$hi;
       $665($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164_1 | 0, i64toi32_i32$2 | 0, $168_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       $11_1 = 1;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
      }
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      $9_1 = 1;
     }
     label$21 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$21
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      continue label$14;
     }
     $7_1 = $659($1_1 | 0) | 0;
     continue label$14;
    };
   }
   $7_1 = 46;
  }
  label$22 : {
   label$23 : {
    label$24 : {
     label$25 : {
      if ($9_1) {
       break label$25
      }
      label$26 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$26
       }
       if ($5_1) {
        break label$23
       }
       break label$24;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$24
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$23
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$23;
     }
     label$27 : {
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $112_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $113_1 = 0
        } else {
         $113_1 = 1
        }
        $114_1 = $113_1;
       } else {
        $114_1 = 0
       }
       $112_1 = $114_1;
      }
      if ($112_1) {
       break label$27
      }
      i64toi32_i32$5 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$5;
      label$28 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$28
       }
       break label$28;
      };
     }
     label$29 : {
      label$30 : {
       label$31 : {
        label$32 : {
         if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
          break label$32
         }
         i64toi32_i32$5 = $678($1_1 | 0, $5_1 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $15_1 = i64toi32_i32$5;
         $15$hi = i64toi32_i32$1;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$29
         }
         label$33 : {
          if (!$5_1) {
           break label$33
          }
          if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
           break label$31
          }
          break label$30;
         }
         i64toi32_i32$0 = 0;
         $16_1 = 0;
         $16$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $658($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
         i64toi32_i32$0 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$0;
         break label$22;
        }
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$30
        }
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
     }
     label$34 : {
      if ($10_1) {
       break label$34
      }
      $666($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      break label$22;
     }
     label$35 : {
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $115_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $115_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $253$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $253$hi;
      i64toi32_i32$3 = $115_1;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $260$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $260$hi;
      i64toi32_i32$0 = 0 - $3_1 | 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $116_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $117_1 = 0
        } else {
         $117_1 = 1
        }
        $118_1 = $117_1;
       } else {
        $118_1 = 0
       }
       $116_1 = $118_1;
      }
      if ($116_1) {
       break label$35
      }
      HEAP32[($605() | 0) >> 2] = 68;
      $661($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $269_1 = i64toi32_i32$2;
      $269$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $273_1 = i64toi32_i32$1;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$1 = $273$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      $662($6_1 + 144 | 0 | 0, $269_1 | 0, i64toi32_i32$2 | 0, $273_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $277_1 = i64toi32_i32$5;
      $277$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $281_1 = i64toi32_i32$0;
      $281$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $277$hi;
      i64toi32_i32$0 = $281$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      $662($6_1 + 128 | 0 | 0, $277_1 | 0, i64toi32_i32$5 | 0, $281_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$2;
      break label$22;
     }
     label$36 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $291_1 = i64toi32_i32$1;
      $291$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $291$hi;
      i64toi32_i32$5 = $291_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$36
      }
      label$37 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $665($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $668($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $308_1 = i64toi32_i32$0;
        $308$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $308$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $16_1 : $308_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $312_1 = i64toi32_i32$1;
        $312$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $317_1 = i64toi32_i32$5;
        $317$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$5 = $317$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $17_1 : $317_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $319_1 = i64toi32_i32$2;
        $319$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $312$hi;
        i64toi32_i32$1 = $319$hi;
        $665($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $312_1 | 0, i64toi32_i32$0 | 0, $319_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$2 = $19_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      label$39 : {
       label$40 : {
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $337$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = $337$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $14_1 = i64toi32_i32$2;
        $14$hi = i64toi32_i32$0;
        $7_1 = i64toi32_i32$2;
        $345_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $346_1 = $2_1;
        i64toi32_i32$0 = 0;
        $349$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $349$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $122_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $123_1 = 0
          } else {
           $123_1 = 1
          }
          $124_1 = $123_1;
         } else {
          $124_1 = 0
         }
         $122_1 = $124_1;
        }
        $7_1 = $122_1 ? $345_1 : $346_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$40
        }
        $661($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$5;
        $14$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        break label$39;
       }
       $666($6_1 + 352 | 0 | 0, +(+$2012(+(1.0), 144 - $7_1 | 0 | 0)));
       $661($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $373_1 = i64toi32_i32$5;
       $373$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $377_1 = i64toi32_i32$0;
       $377$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $373$hi;
       i64toi32_i32$0 = $377$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$4 = $14$hi;
       $669($6_1 + 368 | 0 | 0, $373_1 | 0, i64toi32_i32$5 | 0, $377_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = (($7_1 | 0) < (32 | 0) & ($667($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) | 0) & !($10_1 & 1 | 0) | 0;
      $670($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $411_1 = i64toi32_i32$5;
      $411$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $415_1 = i64toi32_i32$0;
      $415$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$3 = $411$hi;
      i64toi32_i32$4 = $415$hi;
      $662($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0, $411_1 | 0, i64toi32_i32$3 | 0, $415_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $419_1 = i64toi32_i32$4;
      $419$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $423_1 = i64toi32_i32$3;
      $423$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $419$hi;
      i64toi32_i32$3 = $423$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      $665($6_1 + 272 | 0 | 0, $419_1 | 0, i64toi32_i32$4 | 0, $423_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $16_1;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $430_1 = i64toi32_i32$4;
      $430$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $17_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $433_1 = i64toi32_i32$5;
      $433$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $430$hi;
      i64toi32_i32$5 = $433$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $14$hi;
      $662($6_1 + 288 | 0 | 0, $430_1 | 0, i64toi32_i32$1 | 0, $433_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $439_1 = i64toi32_i32$3;
      $439$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $443_1 = i64toi32_i32$0;
      $443$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $445_1 = i64toi32_i32$3;
      $445$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $449_1 = i64toi32_i32$0;
      $449$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $439$hi;
      i64toi32_i32$0 = $443$hi;
      i64toi32_i32$5 = $445$hi;
      i64toi32_i32$1 = $449$hi;
      $665($6_1 + 256 | 0 | 0, $439_1 | 0, i64toi32_i32$3 | 0, $443_1 | 0, i64toi32_i32$0 | 0, $445_1 | 0, i64toi32_i32$5 | 0, $449_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $453_1 = i64toi32_i32$1;
      $453$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $457_1 = i64toi32_i32$5;
      $457$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $453$hi;
      i64toi32_i32$5 = $457$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $20$hi;
      $671($6_1 + 240 | 0 | 0, $453_1 | 0, i64toi32_i32$1 | 0, $457_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
      label$41 : {
       i64toi32_i32$5 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$3;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$0;
       $17$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ($667($16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$41
       }
       HEAP32[($605() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $672($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      break label$22;
     }
     HEAP32[($605() | 0) >> 2] = 68;
     $661($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $487_1 = i64toi32_i32$5;
     $487$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $491_1 = i64toi32_i32$1;
     $491$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $487$hi;
     i64toi32_i32$1 = $491$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     $662($6_1 + 192 | 0 | 0, $487_1 | 0, i64toi32_i32$5 | 0, $491_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $495_1 = i64toi32_i32$3;
     $495$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $499_1 = i64toi32_i32$0;
     $499$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $495$hi;
     i64toi32_i32$0 = $499$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     $662($6_1 + 176 | 0 | 0, $495_1 | 0, i64toi32_i32$3 | 0, $499_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     break label$22;
    }
    i64toi32_i32$5 = 0;
    $658($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   $666($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $677($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19$hi = 0, i64toi32_i32$0 = 0, $19_1 = 0, $14_1 = 0, $20$hi = 0, $15_1 = 0, $20_1 = 0, $8_1 = 0, $11_1 = 0, $13_1 = 0, $22$hi = 0, $12_1 = 0, $21$hi = 0, $16_1 = 0, $22_1 = 0, $21_1 = 0, $23$hi = 0, $24$hi = 0, $23_1 = 0, $24_1 = 0, $17_1 = 0, $9_1 = 0, $163_1 = 0, $164_1 = 0, $165_1 = 0, $166_1 = 0, $167_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $18_1 = 0, $25_1 = 0.0, $10_1 = 0, $128_1 = 0, $236_1 = 0, $236$hi = 0, $240_1 = 0, $240$hi = 0, $242_1 = 0, $242$hi = 0, $246_1 = 0, $246$hi = 0, $256$hi = 0, $265_1 = 0, $265$hi = 0, $269_1 = 0, $269$hi = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $287_1 = 0, $287$hi = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $300$hi = 0, $304_1 = 0, $304$hi = 0, $308_1 = 0, $308$hi = 0, $357_1 = 0, $357$hi = 0, $361_1 = 0, $361$hi = 0, $363_1 = 0, $363$hi = 0, $367_1 = 0, $367$hi = 0, $386_1 = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $392_1 = 0, $392$hi = 0, $396_1 = 0, $396$hi = 0, $407_1 = 0, $407$hi = 0, $411_1 = 0, $411$hi = 0, $413_1 = 0, $413$hi = 0, $417_1 = 0, $417$hi = 0, $445_1 = 0, $445$hi = 0, $449_1 = 0, $449$hi = 0, $451_1 = 0, $451$hi = 0, $455_1 = 0, $455$hi = 0, $465_1 = 0, $465$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $514_1 = 0, $590$hi = 0, $599_1 = 0, $599$hi = 0, $742_1 = 0, $742$hi = 0, $746_1 = 0, $746$hi = 0, $748_1 = 0, $748$hi = 0, $752_1 = 0, $752$hi = 0, $771_1 = 0, $771$hi = 0, $775_1 = 0, $775$hi = 0, $817_1 = 0, $879_1 = 0, $879$hi = 0, $883_1 = 0, $883$hi = 0, $900_1 = 0, $900$hi = 0, $904_1 = 0, $904$hi = 0, $920_1 = 0, $920$hi = 0, $924_1 = 0, $924$hi = 0, $961_1 = 0, $961$hi = 0, $965_1 = 0, $965$hi = 0, $984_1 = 0, $984$hi = 0, $988_1 = 0, $988$hi = 0, $1011_1 = 0, $1011$hi = 0, $1015_1 = 0, $1015$hi = 0, $1031_1 = 0, $1031$hi = 0, $1035_1 = 0, $1035$hi = 0, $1049_1 = 0, $1049$hi = 0, $1051_1 = 0, $1051$hi = 0, $1071_1 = 0, $1071$hi = 0, $1075_1 = 0, $1075$hi = 0, $1108_1 = 0, $1108$hi = 0, $1115_1 = 0, $1115$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $659($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $659($1_1 | 0) | 0;
   }
   $8_1 = 1;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = -1;
   $19_1 = -1;
   $19$hi = i64toi32_i32$0;
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $659($1_1 | 0) | 0;
    }
    label$10 : {
     if (($2_1 | 0) == (48 | 0)) {
      break label$10
     }
     $11_1 = 1;
     $8_1 = 1;
     break label$1;
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    continue label$7;
   };
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  i64toi32_i32$5 = 0;
  $20_1 = 0;
  $20$hi = i64toi32_i32$5;
  label$11 : {
   label$12 : {
    label$13 : {
     label$14 : {
      label$15 : {
       label$16 : {
        label$17 : {
         label$18 : {
          label$19 : {
           $14_1 = ($2_1 | 0) == (46 | 0);
           if (!$14_1) {
            break label$19
           }
           $15_1 = 0;
           $16_1 = 0;
           break label$18;
          }
          $15_1 = 0;
          $16_1 = 0;
          if ($13_1 >>> 0 > 9 >>> 0) {
           break label$17
          }
         }
         label$20 : while (1) {
          label$21 : {
           label$22 : {
            if (!($14_1 & 1 | 0)) {
             break label$22
            }
            label$23 : {
             if ($8_1) {
              break label$23
             }
             i64toi32_i32$5 = $20$hi;
             $19_1 = $20_1;
             $19$hi = i64toi32_i32$5;
             $8_1 = 1;
             break label$21;
            }
            $14_1 = !$11_1;
            break label$16;
           }
           i64toi32_i32$5 = $20$hi;
           i64toi32_i32$0 = $20_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $20_1 = i64toi32_i32$1;
           $20$hi = i64toi32_i32$4;
           label$24 : {
            if (($15_1 | 0) > (2044 | 0)) {
             break label$24
            }
            $11_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $20$hi;
            $17_1 = $20_1;
            $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$25 : {
             if (!$12_1) {
              break label$25
             }
             $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $16_1 = $11_1 ? $16_1 : $17_1;
            HEAP32[$14_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $12_1 + 1 | 0;
            $128_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $12_1 = $2_1 ? 0 : $128_1;
            $15_1 = $15_1 + $2_1 | 0;
            break label$21;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$21
           }
           HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $16_1 = 18396;
          }
          label$26 : {
           label$27 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$27
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$26;
           }
           $2_1 = $659($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           continue label$20
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
           continue label$20
          }
          break label$20;
         };
        }
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $19_1 = i64toi32_i32$3;
        $19$hi = i64toi32_i32$5;
        label$28 : {
         if (!$11_1) {
          break label$28
         }
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$28
         }
         label$29 : {
          label$30 : {
           i64toi32_i32$5 = $678($1_1 | 0, $6_1 | 0) | 0;
           i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
           $21_1 = i64toi32_i32$5;
           $21$hi = i64toi32_i32$3;
           i64toi32_i32$2 = i64toi32_i32$5;
           i64toi32_i32$5 = -2147483648;
           i64toi32_i32$4 = 0;
           if ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0) {
            break label$30
           }
           i64toi32_i32$2 = $21$hi;
           i64toi32_i32$2 = $19$hi;
           i64toi32_i32$2 = $21$hi;
           i64toi32_i32$4 = $21_1;
           i64toi32_i32$3 = $19$hi;
           i64toi32_i32$5 = $19_1;
           i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
           i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           $19_1 = i64toi32_i32$0;
           $19$hi = i64toi32_i32$1;
           break label$29;
          }
          if (!$6_1) {
           break label$13
          }
          if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
           break label$29
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$11_1) {
          break label$14
         }
         break label$12;
        }
        $14_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$15
        }
       }
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$15
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$14_1) {
       break label$12
      }
     }
     HEAP32[($605() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $658($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$1;
    break label$11;
   }
   label$31 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$31
    }
    $666($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$11;
   }
   label$32 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $163_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $164_1 = 0
      } else {
       $164_1 = 1
      }
      $165_1 = $164_1;
     } else {
      $165_1 = 0
     }
     $163_1 = $165_1;
    }
    if ($163_1) {
     break label$32
    }
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$4 = $20_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$32
    }
    label$33 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$33
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$32
     }
    }
    $661($7_1 + 48 | 0 | 0, $5_1 | 0);
    $670($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
    $236_1 = i64toi32_i32$5;
    $236$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $240_1 = i64toi32_i32$2;
    $240$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$5;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $246_1 = i64toi32_i32$2;
    $246$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $236$hi;
    i64toi32_i32$2 = $240$hi;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$1 = $246$hi;
    $662($7_1 + 16 | 0 | 0, $236_1 | 0, i64toi32_i32$5 | 0, $240_1 | 0, i64toi32_i32$2 | 0, $242_1 | 0, i64toi32_i32$4 | 0, $246_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$11;
   }
   label$34 : {
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = 0;
    $256$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$4 = $256$hi;
    i64toi32_i32$5 = ($4_1 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $166_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $167_1 = 0
      } else {
       $167_1 = 1
      }
      $168_1 = $167_1;
     } else {
      $168_1 = 0
     }
     $166_1 = $168_1;
    }
    if ($166_1) {
     break label$34
    }
    HEAP32[($605() | 0) >> 2] = 68;
    $661($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $265_1 = i64toi32_i32$2;
    $265$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $269_1 = i64toi32_i32$1;
    $269$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $265$hi;
    i64toi32_i32$1 = $269$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $662($7_1 + 80 | 0 | 0, $265_1 | 0, i64toi32_i32$2 | 0, $269_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $273_1 = i64toi32_i32$4;
    $273$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $277_1 = i64toi32_i32$5;
    $277$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $273$hi;
    i64toi32_i32$5 = $277$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $662($7_1 + 64 | 0 | 0, $273_1 | 0, i64toi32_i32$4 | 0, $277_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$2;
    break label$11;
   }
   label$35 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $287_1 = i64toi32_i32$1;
    $287$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $287$hi;
    i64toi32_i32$4 = $287_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $169_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $170_1 = 0
      } else {
       $170_1 = 1
      }
      $171_1 = $170_1;
     } else {
      $171_1 = 0
     }
     $169_1 = $171_1;
    }
    if ($169_1) {
     break label$35
    }
    HEAP32[($605() | 0) >> 2] = 68;
    $661($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    $296_1 = i64toi32_i32$5;
    $296$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $300_1 = i64toi32_i32$2;
    $300$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $296$hi;
    i64toi32_i32$2 = $300$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $662($7_1 + 128 | 0 | 0, $296_1 | 0, i64toi32_i32$5 | 0, $300_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $304_1 = i64toi32_i32$1;
    $304$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $308_1 = i64toi32_i32$4;
    $308$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $304$hi;
    i64toi32_i32$4 = $308$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $662($7_1 + 112 | 0 | 0, $304_1 | 0, i64toi32_i32$1 | 0, $308_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$5;
    break label$11;
   }
   label$36 : {
    if (!$12_1) {
     break label$36
    }
    label$37 : {
     if (($12_1 | 0) > (8 | 0)) {
      break label$37
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$38 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $12_1 = $12_1 + 1 | 0;
      if (($12_1 | 0) != (9 | 0)) {
       continue label$38
      }
      break label$38;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$5 = $19$hi;
   $8_1 = $19_1;
   label$39 : {
    if (($16_1 | 0) >= (9 | 0)) {
     break label$39
    }
    if (($16_1 | 0) > ($8_1 | 0)) {
     break label$39
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$39
    }
    label$40 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$40
     }
     $661($7_1 + 192 | 0 | 0, $5_1 | 0);
     $670($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $357_1 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $361_1 = i64toi32_i32$2;
     $361$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $363_1 = i64toi32_i32$5;
     $363$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $367_1 = i64toi32_i32$2;
     $367$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $357$hi;
     i64toi32_i32$2 = $361$hi;
     i64toi32_i32$4 = $363$hi;
     i64toi32_i32$1 = $367$hi;
     $662($7_1 + 160 | 0 | 0, $357_1 | 0, i64toi32_i32$5 | 0, $361_1 | 0, i64toi32_i32$2 | 0, $363_1 | 0, i64toi32_i32$4 | 0, $367_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$11;
    }
    label$41 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$41
     }
     $661($7_1 + 272 | 0 | 0, $5_1 | 0);
     $670($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $386_1 = i64toi32_i32$1;
     $386$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $390_1 = i64toi32_i32$4;
     $390$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $392_1 = i64toi32_i32$1;
     $392$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $396_1 = i64toi32_i32$4;
     $396$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $386$hi;
     i64toi32_i32$4 = $390$hi;
     i64toi32_i32$2 = $392$hi;
     i64toi32_i32$5 = $396$hi;
     $662($7_1 + 240 | 0 | 0, $386_1 | 0, i64toi32_i32$1 | 0, $390_1 | 0, i64toi32_i32$4 | 0, $392_1 | 0, i64toi32_i32$2 | 0, $396_1 | 0, i64toi32_i32$5 | 0);
     $661($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 7840 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
     $407_1 = i64toi32_i32$5;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $411_1 = i64toi32_i32$2;
     $411$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
     $413_1 = i64toi32_i32$5;
     $413$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $417_1 = i64toi32_i32$2;
     $417$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $407$hi;
     i64toi32_i32$2 = $411$hi;
     i64toi32_i32$4 = $413$hi;
     i64toi32_i32$1 = $417$hi;
     $673($7_1 + 208 | 0 | 0, $407_1 | 0, i64toi32_i32$5 | 0, $411_1 | 0, i64toi32_i32$2 | 0, $413_1 | 0, i64toi32_i32$4 | 0, $417_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$11;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$42 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$42
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$39
     }
    }
    $661($7_1 + 352 | 0 | 0, $5_1 | 0);
    $670($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $445_1 = i64toi32_i32$1;
    $445$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $449_1 = i64toi32_i32$4;
    $449$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $451_1 = i64toi32_i32$1;
    $451$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $455_1 = i64toi32_i32$4;
    $455$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $445$hi;
    i64toi32_i32$4 = $449$hi;
    i64toi32_i32$2 = $451$hi;
    i64toi32_i32$5 = $455$hi;
    $662($7_1 + 320 | 0 | 0, $445_1 | 0, i64toi32_i32$1 | 0, $449_1 | 0, i64toi32_i32$4 | 0, $451_1 | 0, i64toi32_i32$2 | 0, $455_1 | 0, i64toi32_i32$5 | 0);
    $661($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 7800 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 324 | 0) >> 2] | 0;
    $465_1 = i64toi32_i32$5;
    $465$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $469_1 = i64toi32_i32$2;
    $469$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
    $471_1 = i64toi32_i32$5;
    $471$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $475_1 = i64toi32_i32$2;
    $475$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $465$hi;
    i64toi32_i32$2 = $469$hi;
    i64toi32_i32$4 = $471$hi;
    i64toi32_i32$1 = $475$hi;
    $662($7_1 + 288 | 0 | 0, $465_1 | 0, i64toi32_i32$5 | 0, $469_1 | 0, i64toi32_i32$2 | 0, $471_1 | 0, i64toi32_i32$4 | 0, $475_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$11;
   }
   label$43 : while (1) {
    $1_1 = $15_1;
    $15_1 = $1_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$43
    }
    break label$43;
   };
   $12_1 = 0;
   label$44 : {
    label$45 : {
     $2_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($2_1) {
      break label$45
     }
     $15_1 = 0;
     break label$44;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $2_1 : $2_1 + 9 | 0;
    label$46 : {
     label$47 : {
      if ($1_1) {
       break label$47
      }
      $15_1 = 0;
      $1_1 = 0;
      break label$46;
     }
     $13_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 7840 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($13_1 | 0) | 0;
     $14_1 = 0;
     $2_1 = 0;
     $15_1 = 0;
     label$48 : while (1) {
      $11_1 = ($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0;
      $514_1 = $11_1;
      $11_1 = HEAP32[$11_1 >> 2] | 0;
      $16_1 = ($11_1 >>> 0) / ($13_1 >>> 0) | 0;
      $14_1 = $16_1 + $14_1 | 0;
      HEAP32[$514_1 >> 2] = $14_1;
      $14_1 = ($2_1 | 0) == ($15_1 | 0) & !$14_1 | 0;
      $15_1 = $14_1 ? ($15_1 + 1 | 0) & 2047 | 0 : $15_1;
      $8_1 = $14_1 ? $8_1 + -9 | 0 : $8_1;
      $14_1 = Math_imul($17_1, $11_1 - Math_imul($16_1, $13_1) | 0);
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 | 0)) {
       continue label$48
      }
      break label$48;
     };
     if (!$14_1) {
      break label$46
     }
     HEAP32[(($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0) >> 2] = $14_1;
     $1_1 = $1_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$49 : while (1) {
    $16_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
    label$50 : {
     label$51 : while (1) {
      label$52 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$52
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$50
       }
       if ((HEAP32[$16_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$50
       }
      }
      $2_1 = $1_1 + 2047 | 0;
      i64toi32_i32$1 = 0;
      $19_1 = 0;
      $19$hi = i64toi32_i32$1;
      label$53 : while (1) {
       $14_1 = 0;
       label$54 : {
        $2_1 = $2_1 & 2047 | 0;
        $13_1 = ($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0;
        i64toi32_i32$2 = $13_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 29;
        i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $172_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
         $172_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $590$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$1 = $590$hi;
        i64toi32_i32$4 = $172_1;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $19_1 = i64toi32_i32$3;
        $19$hi = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = 1000000001;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
         break label$54
        }
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $599_1 = i64toi32_i32$0;
        $599$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$0 = $599$hi;
        i64toi32_i32$4 = $599_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $19_1 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        $14_1 = $20_1;
       }
       i64toi32_i32$3 = $19$hi;
       $11_1 = $19_1;
       HEAP32[$13_1 >> 2] = $19_1;
       $13_1 = ($2_1 | 0) == ($15_1 | 0);
       $1_1 = ($2_1 | 0) != (($1_1 + -1 | 0) & 2047 | 0 | 0) ? $1_1 : $13_1 ? $1_1 : $19_1 ? $1_1 : $2_1;
       label$55 : {
        if ($13_1) {
         break label$55
        }
        $2_1 = $2_1 + -1 | 0;
        i64toi32_i32$3 = 0;
        $19_1 = $14_1;
        $19$hi = i64toi32_i32$3;
        continue label$53;
       }
       break label$53;
      };
      $12_1 = $12_1 + -29 | 0;
      if (!$14_1) {
       continue label$51
      }
      break label$51;
     };
     label$56 : {
      $15_1 = ($15_1 + -1 | 0) & 2047 | 0;
      if (($15_1 | 0) != ($1_1 | 0)) {
       break label$56
      }
      $2_1 = ($7_1 + 784 | 0) + ((($1_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $1_1 = ($1_1 + -1 | 0) & 2047 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] = $14_1;
     continue label$49;
    }
    break label$49;
   };
   label$57 : {
    label$58 : while (1) {
     $6_1 = ($1_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 784 | 0) + ((($1_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$59 : while (1) {
      $16_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$60 : {
       label$61 : while (1) {
        $11_1 = $15_1;
        $2_1 = 0;
        label$62 : {
         label$63 : {
          label$64 : while (1) {
           $14_1 = ($2_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) == ($1_1 | 0)) {
            break label$63
           }
           $14_1 = HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($2_1 << 2 | 0) + 7824 | 0) >> 2] | 0;
           if ($14_1 >>> 0 < $13_1 >>> 0) {
            break label$63
           }
           if ($14_1 >>> 0 > $13_1 >>> 0) {
            break label$62
           }
           $2_1 = $2_1 + 1 | 0;
           if (($2_1 | 0) != (4 | 0)) {
            continue label$64
           }
           break label$64;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$62
         }
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         $2_1 = 0;
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         label$65 : while (1) {
          label$66 : {
           $14_1 = ($2_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) != ($1_1 | 0)) {
            break label$66
           }
           $1_1 = ($1_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($1_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $662($7_1 + 768 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $670($7_1 + 752 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $742_1 = i64toi32_i32$4;
          $742$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $746_1 = i64toi32_i32$1;
          $746$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $748_1 = i64toi32_i32$4;
          $748$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $752_1 = i64toi32_i32$1;
          $752$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $742$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$5 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          $665($7_1 + 736 | 0 | 0, $742_1 | 0, i64toi32_i32$4 | 0, $746_1 | 0, i64toi32_i32$1 | 0, $748_1 | 0, i64toi32_i32$5 | 0, $752_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$3;
          $20$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$3;
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) != (4 | 0)) {
           continue label$65
          }
          break label$65;
         };
         $661($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
         $771_1 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $775_1 = i64toi32_i32$5;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $771$hi;
         i64toi32_i32$4 = $775$hi;
         $662($7_1 + 704 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $771_1 | 0, i64toi32_i32$1 | 0, $775_1 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$1;
         $21$hi = i64toi32_i32$4;
         $13_1 = $12_1 + 113 | 0;
         $2_1 = $13_1 - $4_1 | 0;
         $8_1 = ($2_1 | 0) < ($3_1 | 0);
         $14_1 = $8_1 ? (($2_1 | 0) > (0 | 0) ? $2_1 : 0) : $3_1;
         if (($14_1 | 0) <= (112 | 0)) {
          break label$60
         }
         i64toi32_i32$4 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         break label$57;
        }
        $12_1 = $16_1 + $12_1 | 0;
        $15_1 = $1_1;
        if (($11_1 | 0) == ($1_1 | 0)) {
         continue label$61
        }
        break label$61;
       };
       $13_1 = 1e9 >>> $16_1 | 0;
       $17_1 = (-1 << $16_1 | 0) ^ -1 | 0;
       $2_1 = 0;
       $15_1 = $11_1;
       label$67 : while (1) {
        $14_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $817_1 = $14_1;
        $14_1 = HEAP32[$14_1 >> 2] | 0;
        $2_1 = ($14_1 >>> $16_1 | 0) + $2_1 | 0;
        HEAP32[$817_1 >> 2] = $2_1;
        $2_1 = ($11_1 | 0) == ($15_1 | 0) & !$2_1 | 0;
        $15_1 = $2_1 ? ($15_1 + 1 | 0) & 2047 | 0 : $15_1;
        $8_1 = $2_1 ? $8_1 + -9 | 0 : $8_1;
        $2_1 = Math_imul($14_1 & $17_1 | 0, $13_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($1_1 | 0)) {
         continue label$67
        }
        break label$67;
       };
       if (!$2_1) {
        continue label$59
       }
       label$68 : {
        if (($6_1 | 0) == ($15_1 | 0)) {
         break label$68
        }
        HEAP32[(($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0) >> 2] = $2_1;
        $1_1 = $6_1;
        continue label$58;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $15_1 = $6_1;
       continue label$59;
      }
      break label$59;
     };
     break label$58;
    };
    $666($7_1 + 656 | 0 | 0, +(+$2012(+(1.0), 225 - $14_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $879_1 = i64toi32_i32$4;
    $879$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $883_1 = i64toi32_i32$1;
    $883$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $879$hi;
    i64toi32_i32$1 = $883$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    $669($7_1 + 688 | 0 | 0, $879_1 | 0, i64toi32_i32$4 | 0, $883_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 696 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 700 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    $666($7_1 + 640 | 0 | 0, +(+$2012(+(1.0), 113 - $14_1 | 0 | 0)));
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $900_1 = i64toi32_i32$3;
    $900$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $904_1 = i64toi32_i32$5;
    $904$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $900$hi;
    i64toi32_i32$4 = $904$hi;
    $2011($7_1 + 672 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $900_1 | 0, i64toi32_i32$1 | 0, $904_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $22$hi;
    $671($7_1 + 624 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $920_1 = i64toi32_i32$3;
    $920$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $924_1 = i64toi32_i32$5;
    $924$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $920$hi;
    i64toi32_i32$4 = $924$hi;
    $665($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $920_1 | 0, i64toi32_i32$1 | 0, $924_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
   }
   label$69 : {
    $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($15_1 | 0) == ($1_1 | 0)) {
     break label$69
    }
    label$70 : {
     label$71 : {
      $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
      if ($15_1 >>> 0 > 499999999 >>> 0) {
       break label$71
      }
      label$72 : {
       if ($15_1) {
        break label$72
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($1_1 | 0)) {
        break label$70
       }
      }
      $666($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $961_1 = i64toi32_i32$4;
      $961$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $965_1 = i64toi32_i32$1;
      $965$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $961$hi;
      i64toi32_i32$3 = $965$hi;
      $665($7_1 + 480 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $961_1 | 0, i64toi32_i32$5 | 0, $965_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$70;
     }
     label$73 : {
      if (($15_1 | 0) == (5e8 | 0)) {
       break label$73
      }
      $666($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
      $984_1 = i64toi32_i32$3;
      $984$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $988_1 = i64toi32_i32$5;
      $988$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $984$hi;
      i64toi32_i32$4 = $988$hi;
      $665($7_1 + 576 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $984_1 | 0, i64toi32_i32$1 | 0, $988_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      break label$70;
     }
     $25_1 = +($5_1 | 0);
     label$74 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($1_1 | 0)) {
       break label$74
      }
      $666($7_1 + 528 | 0 | 0, +($25_1 * .5));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1011_1 = i64toi32_i32$4;
      $1011$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1015_1 = i64toi32_i32$1;
      $1015$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1011$hi;
      i64toi32_i32$3 = $1015$hi;
      $665($7_1 + 512 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $1011_1 | 0, i64toi32_i32$5 | 0, $1015_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$70;
     }
     $666($7_1 + 560 | 0 | 0, +($25_1 * .75));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
     $1031_1 = i64toi32_i32$3;
     $1031$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1035_1 = i64toi32_i32$5;
     $1035$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1031$hi;
     i64toi32_i32$4 = $1035$hi;
     $665($7_1 + 544 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $1031_1 | 0, i64toi32_i32$1 | 0, $1035_1 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
    }
    if (($14_1 | 0) > (111 | 0)) {
     break label$69
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $2011($7_1 + 464 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
    $1049_1 = i64toi32_i32$3;
    $1049$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 476 | 0) >> 2] | 0;
    $1051_1 = i64toi32_i32$5;
    $1051$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1049$hi;
    i64toi32_i32$5 = $1051$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($667($1049_1 | 0, i64toi32_i32$3 | 0, $1051_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$69
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $665($7_1 + 448 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 456 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $22$hi;
   $665($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1071_1 = i64toi32_i32$4;
   $1071$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1075_1 = i64toi32_i32$1;
   $1075$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $1071$hi;
   i64toi32_i32$1 = $1075$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   $671($7_1 + 416 | 0 | 0, $1071_1 | 0, i64toi32_i32$4 | 0, $1075_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   label$75 : {
    if (($13_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$75
    }
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    $674($7_1 + 400 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    $662($7_1 + 384 | 0 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$4;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$1;
    $24$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $1_1 = $668($23_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1108_1 = i64toi32_i32$5;
    $1108$hi = i64toi32_i32$3;
    $13_1 = ($1_1 | 0) < (0 | 0);
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $1108$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $20_1 : $1108_1;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1115_1 = i64toi32_i32$1;
    $1115$hi = i64toi32_i32$4;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $1115$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $21_1 : $1115_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$0;
    label$76 : {
     $12_1 = $12_1 + (($1_1 | 0) > (-1 | 0)) | 0;
     if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break label$76
     }
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1081081856;
     if (((($668($23_1 | 0, i64toi32_i32$0 | 0, $24_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) < (0 | 0) ? $8_1 : $8_1 & ($14_1 | 0) != ($2_1 | 0) | 0) | 0) != (1 | 0)) {
      break label$75
     }
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if (!($667($19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$75
     }
    }
    HEAP32[($605() | 0) >> 2] = 68;
   }
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   $672($7_1 + 368 | 0 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$3 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$0 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $20$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $19$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $678($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $86$hi = 0, $88_1 = 0, $88$hi = 0, $137$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $659($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $659($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   label$8 : {
    $3_1 = $5_1 + -48 | 0;
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!$1_1) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 > 9 >>> 0) {
     break label$10
    }
    $5_1 = 0;
    label$11 : while (1) {
     $5_1 = $2_1 + $5_1 | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $659($0_1 | 0) | 0;
     }
     $5_1 = $5_1 + -48 | 0;
     label$14 : {
      $3_1 = $2_1 + -48 | 0;
      if ($3_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($5_1 | 0) > (214748363 | 0)) {
       break label$14
      }
      $5_1 = Math_imul($5_1, 10);
      continue label$11;
     }
     break label$11;
    };
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $86$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $88_1 = i64toi32_i32$1;
      $88$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $86$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $88$hi;
      i64toi32_i32$3 = $88_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $659($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $3_1 = $2_1 + -48 | 0;
      if ($3_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $659($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $137$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $137$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $679($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $9$hi = 0, i64toi32_i32$1 = 0, $9_1 = 0, $7_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, $12$hi = 0, $6_1 = 0, $12_1 = 0, $4_1 = 0, $8_1 = 0, $29_1 = 0, $30_1 = 0, $185_1 = 0, $185$hi = 0, $243_1 = 0, $243$hi = 0, $410$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$10
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$9;
           }
           $5_1 = $659($0_1 | 0) | 0;
          }
          if ($606($5_1 | 0) | 0) {
           continue label$8
          }
          break label$8;
         };
         $6_1 = 0;
         label$11 : {
          label$12 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$13 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$13
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$11;
          }
          $5_1 = $659($0_1 | 0) | 0;
         }
         label$14 : {
          label$15 : {
           if ($1_1 & -17 | 0) {
            break label$15
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$15
           }
           label$16 : {
            label$17 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$17
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$16;
            }
            $5_1 = $659($0_1 | 0) | 0;
           }
           label$18 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$18
            }
            label$19 : {
             label$20 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$19;
             }
             $5_1 = $659($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 7905 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$5
            }
            label$21 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$21
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$1
             }
             break label$2;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$2
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$1;
           }
           if ($1_1) {
            break label$14
           }
           $1_1 = 8;
           break label$5;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 7905 | 0) >> 0] | 0) >>> 0) {
           break label$14
          }
          label$22 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $658($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($605() | 0) >> 2] = 28;
          break label$1;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$5
         }
         i64toi32_i32$0 = 0;
         $9_1 = 0;
         $9$hi = i64toi32_i32$0;
         label$23 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          $1_1 = 0;
          label$24 : while (1) {
           label$25 : {
            label$26 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$26
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$25;
            }
            $5_1 = $659($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$27 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$27
            }
            if ($1_1 >>> 0 > 429496728 >>> 0) {
             break label$27
            }
            $1_1 = Math_imul($1_1, 10);
            continue label$24;
           }
           break label$24;
          };
          i64toi32_i32$0 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$6
         }
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $10_1 = i64toi32_i32$1;
         $10$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $11_1 = $2_1;
         $11$hi = i64toi32_i32$0;
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$30
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$29;
           }
           $5_1 = $659($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $9_1 = i64toi32_i32$4;
          $9$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$6
          }
          i64toi32_i32$5 = $9$hi;
          i64toi32_i32$0 = $9_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$6
          }
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $11_1 = $2_1;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $185_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $185$hi;
          i64toi32_i32$2 = $185_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$28
          }
          break label$28;
         };
         $1_1 = 10;
         break label$4;
        }
        HEAP32[($605() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$1;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$4
       }
       break label$3;
      }
      label$31 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$31
       }
       i64toi32_i32$0 = 0;
       $9_1 = 0;
       $9$hi = i64toi32_i32$0;
       label$32 : {
        $7_1 = HEAPU8[($5_1 + 7905 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
         break label$32
        }
        $2_1 = 0;
        label$33 : while (1) {
         label$34 : {
          label$35 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$35
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$34;
          }
          $5_1 = $659($0_1 | 0) | 0;
         }
         $2_1 = $7_1 + $2_1 | 0;
         label$36 : {
          $7_1 = HEAPU8[($5_1 + 7905 | 0) >> 0] | 0;
          if ($1_1 >>> 0 <= $7_1 >>> 0) {
           break label$36
          }
          if ($2_1 >>> 0 > 119304646 >>> 0) {
           break label$36
          }
          $2_1 = Math_imul($2_1, $1_1);
          continue label$33;
         }
         break label$33;
        };
        i64toi32_i32$0 = 0;
        $9_1 = $2_1;
        $9$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $10_1 = $1_1;
       $10$hi = i64toi32_i32$0;
       label$37 : while (1) {
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $12$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $243_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $243$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $243$hi;
        i64toi32_i32$3 = $243_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        label$38 : {
         label$39 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$39
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$38;
         }
         $5_1 = $659($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$4;
        $7_1 = HEAPU8[($5_1 + 7905 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
         break label$4
        }
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$0 = 0;
        $612($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$4
        }
        continue label$37;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 8161 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$40 : {
       $2_1 = HEAPU8[($5_1 + 7905 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$40
       }
       $7_1 = 0;
       label$41 : while (1) {
        label$42 : {
         label$43 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$42;
         }
         $5_1 = $659($0_1 | 0) | 0;
        }
        $7_1 = $2_1 | $7_1 | 0;
        label$44 : {
         $2_1 = HEAPU8[($5_1 + 7905 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $2_1 >>> 0) {
          break label$44
         }
         if ($7_1 >>> 0 > 134217727 >>> 0) {
          break label$44
         }
         $7_1 = $7_1 << $8_1 | 0;
         continue label$41;
        }
        break label$41;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $7_1;
       $9$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$4
      }
      i64toi32_i32$3 = 0;
      $11_1 = $8_1;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $29_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $29_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $12_1 = $29_1;
      $12$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$0 = $9_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      label$45 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$4 = $11_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $30_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $30_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $9_1 = $30_1;
       $9$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $10_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $10$hi = i64toi32_i32$0;
       label$46 : {
        label$47 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$47
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$46;
        }
        $5_1 = $659($0_1 | 0) | 0;
       }
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$5 = $9_1;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $9$hi = i64toi32_i32$3;
       $2_1 = HEAPU8[($5_1 + 7905 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$4 = $12_1;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
        continue label$45
       }
       break label$45;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 7905 | 0) >> 0] | 0) >>> 0) {
      break label$3
     }
     label$48 : while (1) {
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $659($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 7905 | 0) >> 0] | 0) >>> 0) {
       continue label$48
      }
      break label$48;
     };
     HEAP32[($605() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $9_1 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$0;
    }
    label$51 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$51
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$52 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$52
     }
     label$53 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$53
      }
      if ($6_1) {
       break label$53
      }
      HEAP32[($605() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($9$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($9$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$52
     }
     HEAP32[($605() | 0) >> 2] = 68;
     break label$1;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $410$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $410$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $658($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $680($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $636($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $637($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $681($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 22544;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = HEAP32[(HEAP32[(($629() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0;
      $0_1 = HEAP8[$1_1 >> 0] | 0;
      label$8 : {
       if ($3_1) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = ($0_1 & 255 | 0) + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(8176 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($605() | 0) >> 2] = 25;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $682($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $683($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $3_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $17$hi = 0, $18$hi = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $19$hi = 0, $8_1 = 0, $16_1 = 0, $4_1 = 0, $14_1 = 0, $19_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $58_1 = 0, $68$hi = 0, $70$hi = 0, $75_1 = 0, $75$hi = 0, $176_1 = 0, $186_1 = 0, $248$hi = 0, $250$hi = 0, $255_1 = 0, $255$hi = 0, $296_1 = 0, $296$hi = 0, $302_1 = 0, $302$hi = 0, $303$hi = 0, $409_1 = 0, $409$hi = 0, $415_1 = 0, $415$hi = 0, $416$hi = 0, $620_1 = 0, $620$hi = 0, $625_1 = 0, $625$hi = 0, $653$hi = 0, $655$hi = 0, $661_1 = 0, $661$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2020($0_1 | 0) | 0;
  }
  label$2 : {
   $6_1 = HEAPU8[$1_1 >> 0] | 0;
   if (!$6_1) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   $17_1 = 0;
   $17$hi = i64toi32_i32$0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : while (1) {
         label$9 : {
          label$10 : {
           if (!($606($6_1 & 255 | 0 | 0) | 0)) {
            break label$10
           }
           label$11 : while (1) {
            $6_1 = $1_1;
            $1_1 = $1_1 + 1 | 0;
            if ($606(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
             continue label$11
            }
            break label$11;
           };
           i64toi32_i32$0 = 0;
           $658($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
           label$12 : while (1) {
            label$13 : {
             label$14 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$14
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$13;
             }
             $1_1 = $659($0_1 | 0) | 0;
            }
            if ($606($1_1 | 0) | 0) {
             continue label$12
            }
            break label$12;
           };
           $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$15 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$15
            }
            $1_1 = $1_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
           }
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $68$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $17$hi;
           i64toi32_i32$1 = $68$hi;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = $17$hi;
           i64toi32_i32$3 = $17_1;
           i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           $70$hi = i64toi32_i32$5;
           i64toi32_i32$2 = $1_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
           $75_1 = i64toi32_i32$2;
           $75$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $70$hi;
           i64toi32_i32$1 = i64toi32_i32$4;
           i64toi32_i32$2 = $75$hi;
           i64toi32_i32$3 = $75_1;
           i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $17_1 = i64toi32_i32$0;
           $17$hi = i64toi32_i32$4;
           break label$9;
          }
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              $6_1 = HEAPU8[$1_1 >> 0] | 0;
              if (($6_1 | 0) != (37 | 0)) {
               break label$19
              }
              $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
              if (($7_1 | 0) == (42 | 0)) {
               break label$18
              }
              if (($7_1 | 0) != (37 | 0)) {
               break label$17
              }
             }
             i64toi32_i32$4 = 0;
             $658($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
             $6_1 = $1_1 + (($6_1 | 0) == (37 | 0)) | 0;
             label$20 : {
              label$21 : {
               $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$21
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
               $1_1 = HEAPU8[$1_1 >> 0] | 0;
               break label$20;
              }
              $1_1 = $659($0_1 | 0) | 0;
             }
             label$22 : {
              if (($1_1 | 0) == (HEAPU8[$6_1 >> 0] | 0 | 0)) {
               break label$22
              }
              label$23 : {
               if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
                break label$23
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
              }
              if (($1_1 | 0) > (-1 | 0)) {
               break label$2
              }
              $8_1 = 0;
              if ($4_1) {
               break label$2
              }
              break label$4;
             }
             i64toi32_i32$4 = $17$hi;
             i64toi32_i32$5 = $17_1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 1;
             i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $17_1 = i64toi32_i32$2;
             $17$hi = i64toi32_i32$0;
             break label$9;
            }
            $6_1 = $1_1 + 2 | 0;
            $9_1 = 0;
            break label$16;
           }
           label$24 : {
            if (!($630($7_1 | 0) | 0)) {
             break label$24
            }
            if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
             break label$24
            }
            $6_1 = $1_1 + 3 | 0;
            $9_1 = $684($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
            break label$16;
           }
           $6_1 = $1_1 + 1 | 0;
           $9_1 = HEAP32[$2_1 >> 2] | 0;
           $2_1 = $2_1 + 4 | 0;
          }
          $8_1 = 0;
          label$25 : {
           label$26 : {
            if ($630(HEAPU8[$6_1 >> 0] | 0 | 0) | 0) {
             break label$26
            }
            $1_1 = 0;
            break label$25;
           }
           $1_1 = 0;
           label$27 : while (1) {
            $7_1 = $6_1 + 1 | 0;
            $1_1 = ($1_1 + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
            label$28 : {
             if ($630(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
              break label$28
             }
             $6_1 = $7_1;
             break label$25;
            }
            $1_1 = Math_imul($1_1, 10);
            $6_1 = $7_1;
            continue label$27;
           };
          }
          label$29 : {
           label$30 : {
            $10_1 = HEAPU8[$6_1 >> 0] | 0;
            if (($10_1 | 0) == (109 | 0)) {
             break label$30
            }
            $7_1 = $6_1;
            break label$29;
           }
           $7_1 = $6_1 + 1 | 0;
           $11_1 = 0;
           $8_1 = ($9_1 | 0) != (0 | 0);
           $10_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $12_1 = 0;
          }
          $6_1 = $7_1 + 1 | 0;
          $13_1 = 3;
          label$31 : {
           label$32 : {
            switch (($10_1 & 255 | 0) + -65 | 0 | 0) {
            case 39:
             $176_1 = $7_1 + 2 | 0;
             $7_1 = (HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
             $6_1 = $7_1 ? $176_1 : $6_1;
             $13_1 = $7_1 ? -2 : -1;
             break label$31;
            case 43:
             $186_1 = $7_1 + 2 | 0;
             $7_1 = (HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
             $6_1 = $7_1 ? $186_1 : $6_1;
             $13_1 = $7_1 ? 3 : 1;
             break label$31;
            case 51:
            case 57:
             $13_1 = 1;
             break label$31;
            case 11:
             $13_1 = 2;
             break label$31;
            case 41:
             break label$31;
            case 0:
            case 2:
            case 4:
            case 5:
            case 6:
            case 18:
            case 23:
            case 26:
            case 32:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 40:
            case 45:
            case 46:
            case 47:
            case 50:
            case 52:
            case 55:
             break label$32;
            default:
             break label$5;
            };
           }
           $13_1 = 0;
           $6_1 = $7_1;
          }
          $7_1 = HEAPU8[$6_1 >> 0] | 0;
          $10_1 = ($7_1 & 47 | 0 | 0) == (3 | 0);
          $14_1 = $10_1 ? 1 : $13_1;
          label$37 : {
           $15_1 = $10_1 ? $7_1 | 32 | 0 : $7_1;
           if (($15_1 | 0) == (91 | 0)) {
            break label$37
           }
           label$38 : {
            label$39 : {
             if (($15_1 | 0) == (110 | 0)) {
              break label$39
             }
             if (($15_1 | 0) != (99 | 0)) {
              break label$38
             }
             $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
             break label$37;
            }
            i64toi32_i32$0 = $17$hi;
            $685($9_1 | 0, $14_1 | 0, $17_1 | 0, i64toi32_i32$0 | 0);
            break label$9;
           }
           i64toi32_i32$0 = 0;
           $658($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
           label$40 : while (1) {
            label$41 : {
             label$42 : {
              $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$42
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
              $7_1 = HEAPU8[$7_1 >> 0] | 0;
              break label$41;
             }
             $7_1 = $659($0_1 | 0) | 0;
            }
            if ($606($7_1 | 0) | 0) {
             continue label$40
            }
            break label$40;
           };
           $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$43 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$43
            }
            $7_1 = $7_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
           }
           i64toi32_i32$4 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $248$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $17$hi;
           i64toi32_i32$5 = $248$hi;
           i64toi32_i32$4 = i64toi32_i32$0;
           i64toi32_i32$0 = $17$hi;
           i64toi32_i32$3 = $17_1;
           i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
           i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
           }
           $250$hi = i64toi32_i32$2;
           i64toi32_i32$4 = $7_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
           $255_1 = i64toi32_i32$4;
           $255$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $250$hi;
           i64toi32_i32$5 = i64toi32_i32$1;
           i64toi32_i32$4 = $255$hi;
           i64toi32_i32$3 = $255_1;
           i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
           i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           $17_1 = i64toi32_i32$0;
           $17$hi = i64toi32_i32$1;
          }
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$1 = $1_1 >> 31 | 0;
          $18_1 = $1_1;
          $18$hi = i64toi32_i32$1;
          $658($0_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0);
          label$44 : {
           label$45 : {
            $13_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            $7_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
            if ($13_1 >>> 0 >= $7_1 >>> 0) {
             break label$45
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $13_1 + 1 | 0;
            break label$44;
           }
           if (($659($0_1 | 0) | 0 | 0) < (0 | 0)) {
            break label$5
           }
           $7_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
          }
          label$46 : {
           if (!$7_1) {
            break label$46
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          $7_1 = 16;
          label$47 : {
           label$48 : {
            label$49 : {
             label$50 : {
              label$51 : {
               label$52 : {
                label$53 : {
                 switch ($15_1 + -88 | 0 | 0) {
                 default:
                  $1_1 = $15_1 + -65 | 0;
                  if ($1_1 >>> 0 > 6 >>> 0) {
                   break label$47
                  }
                  if (!((1 << $1_1 | 0) & 113 | 0)) {
                   break label$47
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $675($3_1 | 0, $0_1 | 0, $14_1 | 0, 0 | 0);
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                  $296_1 = i64toi32_i32$1;
                  $296$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                  $302_1 = i64toi32_i32$1;
                  $302$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = $302$hi;
                  i64toi32_i32$3 = $302_1;
                  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
                  $303$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $296$hi;
                  i64toi32_i32$5 = $296_1;
                  i64toi32_i32$2 = $303$hi;
                  i64toi32_i32$3 = i64toi32_i32$4;
                  if ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
                   break label$3
                  }
                  if (!$9_1) {
                   break label$47
                  }
                  i64toi32_i32$3 = $3_1;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                  $18_1 = i64toi32_i32$5;
                  $18$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$0;
                  $19$hi = i64toi32_i32$5;
                  switch ($14_1 | 0) {
                  case 2:
                   break label$49;
                  case 1:
                   break label$50;
                  case 0:
                   break label$51;
                  default:
                   break label$47;
                  };
                 case 3:
                 case 11:
                 case 27:
                  label$59 : {
                   if (($15_1 & 239 | 0 | 0) != (99 | 0)) {
                    break label$59
                   }
                   $2015($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                   if (($15_1 | 0) != (115 | 0)) {
                    break label$48
                   }
                   HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                   HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                   $58_1 = 0;
                   HEAP16[($3_1 + 42 | 0) >> 1] = $58_1;
                   HEAP16[($3_1 + 44 | 0) >> 1] = $58_1 >>> 16 | 0;
                   break label$48;
                  }
                  $13_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                  $7_1 = ($13_1 | 0) == (94 | 0);
                  $2015($3_1 + 32 | 0 | 0, $7_1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  $10_1 = $7_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                  label$60 : {
                   label$61 : {
                    label$62 : {
                     label$63 : {
                      $6_1 = HEAPU8[($6_1 + ($7_1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($6_1 | 0) == (45 | 0)) {
                       break label$63
                      }
                      if (($6_1 | 0) == (93 | 0)) {
                       break label$62
                      }
                      $13_1 = ($13_1 | 0) != (94 | 0);
                      $6_1 = $10_1;
                      break label$60;
                     }
                     $13_1 = ($13_1 | 0) != (94 | 0);
                     HEAP8[($3_1 + 78 | 0) >> 0] = $13_1;
                     break label$61;
                    }
                    $13_1 = ($13_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 126 | 0) >> 0] = $13_1;
                   }
                   $6_1 = $10_1 + 1 | 0;
                  }
                  label$64 : while (1) {
                   label$65 : {
                    label$66 : {
                     $7_1 = HEAPU8[$6_1 >> 0] | 0;
                     if (($7_1 | 0) == (45 | 0)) {
                      break label$66
                     }
                     if (!$7_1) {
                      break label$5
                     }
                     if (($7_1 | 0) != (93 | 0)) {
                      break label$65
                     }
                     break label$48;
                    }
                    $7_1 = 45;
                    $16_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                    if (!$16_1) {
                     break label$65
                    }
                    if (($16_1 | 0) == (93 | 0)) {
                     break label$65
                    }
                    $10_1 = $6_1 + 1 | 0;
                    label$67 : {
                     label$68 : {
                      $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                      if ($6_1 >>> 0 < $16_1 >>> 0) {
                       break label$68
                      }
                      $7_1 = $16_1;
                      break label$67;
                     }
                     label$69 : while (1) {
                      $6_1 = $6_1 + 1 | 0;
                      HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $13_1;
                      $7_1 = HEAPU8[$10_1 >> 0] | 0;
                      if ($6_1 >>> 0 < $7_1 >>> 0) {
                       continue label$69
                      }
                      break label$69;
                     };
                    }
                    $6_1 = $10_1;
                   }
                   HEAP8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $13_1;
                   $6_1 = $6_1 + 1 | 0;
                   continue label$64;
                  };
                 case 23:
                  $7_1 = 8;
                  break label$52;
                 case 12:
                 case 29:
                  $7_1 = 10;
                  break label$52;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$47;
                 case 0:
                 case 24:
                 case 32:
                  break label$52;
                 case 17:
                  break label$53;
                 };
                }
                $7_1 = 0;
               }
               i64toi32_i32$5 = -1;
               i64toi32_i32$5 = $679($0_1 | 0, $7_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
               i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
               $18_1 = i64toi32_i32$5;
               $18$hi = i64toi32_i32$0;
               i64toi32_i32$3 = $0_1;
               i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $409_1 = i64toi32_i32$0;
               $409$hi = i64toi32_i32$5;
               i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
               i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
               $415_1 = i64toi32_i32$0;
               $415$hi = i64toi32_i32$5;
               i64toi32_i32$5 = 0;
               i64toi32_i32$3 = 0;
               i64toi32_i32$0 = $415$hi;
               i64toi32_i32$2 = $415_1;
               i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
               i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
               i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
               $416$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $409$hi;
               i64toi32_i32$5 = $409_1;
               i64toi32_i32$3 = $416$hi;
               i64toi32_i32$2 = i64toi32_i32$1;
               if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0) {
                break label$3
               }
               label$70 : {
                if (($15_1 | 0) != (112 | 0)) {
                 break label$70
                }
                if (!$9_1) {
                 break label$70
                }
                i64toi32_i32$5 = $18$hi;
                HEAP32[$9_1 >> 2] = $18_1;
                break label$47;
               }
               i64toi32_i32$5 = $18$hi;
               $685($9_1 | 0, $14_1 | 0, $18_1 | 0, i64toi32_i32$5 | 0);
               break label$47;
              }
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $18$hi;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$4 = $18$hi;
              HEAPF32[$9_1 >> 2] = Math_fround($680($19_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$4 | 0));
              break label$47;
             }
             i64toi32_i32$4 = $19$hi;
             i64toi32_i32$4 = $18$hi;
             i64toi32_i32$4 = $19$hi;
             i64toi32_i32$5 = $18$hi;
             HEAPF64[$9_1 >> 3] = +$638($19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$5 | 0);
             break label$47;
            }
            i64toi32_i32$5 = $19$hi;
            i64toi32_i32$4 = $9_1;
            HEAP32[i64toi32_i32$4 >> 2] = $19_1;
            HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
            i64toi32_i32$5 = $18$hi;
            HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $18_1;
            HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
            break label$47;
           }
           $10_1 = ($15_1 | 0) == (99 | 0);
           $13_1 = $10_1 ? $1_1 + 1 | 0 : 31;
           label$71 : {
            label$72 : {
             $16_1 = ($14_1 | 0) != (1 | 0);
             if ($16_1) {
              break label$72
             }
             $7_1 = $9_1;
             label$73 : {
              if (!$8_1) {
               break label$73
              }
              $7_1 = $2004($13_1 << 2 | 0 | 0) | 0;
              if (!$7_1) {
               break label$6
              }
             }
             i64toi32_i32$4 = $3_1;
             i64toi32_i32$5 = 0;
             HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
             HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$5;
             $1_1 = 0;
             $11_1 = ($8_1 | 0) != (0 | 0);
             label$74 : while (1) {
              $12_1 = $7_1;
              label$75 : {
               label$76 : while (1) {
                label$77 : {
                 label$78 : {
                  $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                   break label$78
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                  $7_1 = HEAPU8[$7_1 >> 0] | 0;
                  break label$77;
                 }
                 $7_1 = $659($0_1 | 0) | 0;
                }
                if (!(HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                 break label$75
                }
                HEAP8[($3_1 + 27 | 0) >> 0] = $7_1;
                $7_1 = $681($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                if (($7_1 | 0) == (-2 | 0)) {
                 continue label$76
                }
                if (($7_1 | 0) == (-1 | 0)) {
                 break label$7
                }
                label$79 : {
                 if (!$12_1) {
                  break label$79
                 }
                 HEAP32[($12_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                 $1_1 = $1_1 + 1 | 0;
                }
                if (($11_1 & ($1_1 | 0) == ($13_1 | 0) | 0 | 0) != (1 | 0)) {
                 continue label$76
                }
                break label$76;
               };
               $13_1 = $13_1 << 1 | 0 | 1 | 0;
               $7_1 = $2006($12_1 | 0, $13_1 << 2 | 0 | 0) | 0;
               if ($7_1) {
                continue label$74
               }
               break label$7;
              }
              break label$74;
             };
             if (!($682($3_1 + 296 | 0 | 0) | 0)) {
              break label$7
             }
             $11_1 = 0;
             break label$71;
            }
            label$80 : {
             if (!$8_1) {
              break label$80
             }
             $1_1 = 0;
             $7_1 = $2004($13_1 | 0) | 0;
             if (!$7_1) {
              break label$6
             }
             label$81 : while (1) {
              $11_1 = $7_1;
              label$82 : while (1) {
               label$83 : {
                label$84 : {
                 $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                  break label$84
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                 $7_1 = HEAPU8[$7_1 >> 0] | 0;
                 break label$83;
                }
                $7_1 = $659($0_1 | 0) | 0;
               }
               label$85 : {
                if (HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                 break label$85
                }
                $12_1 = 0;
                break label$71;
               }
               HEAP8[($11_1 + $1_1 | 0) >> 0] = $7_1;
               $1_1 = $1_1 + 1 | 0;
               if (($1_1 | 0) != ($13_1 | 0)) {
                continue label$82
               }
               break label$82;
              };
              $12_1 = 0;
              $13_1 = $13_1 << 1 | 0 | 1 | 0;
              $7_1 = $2006($11_1 | 0, $13_1 | 0) | 0;
              if ($7_1) {
               continue label$81
              }
              break label$5;
             };
            }
            $1_1 = 0;
            label$86 : {
             if (!$9_1) {
              break label$86
             }
             label$87 : while (1) {
              label$88 : {
               label$89 : {
                $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                 break label$89
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                $7_1 = HEAPU8[$7_1 >> 0] | 0;
                break label$88;
               }
               $7_1 = $659($0_1 | 0) | 0;
              }
              label$90 : {
               if (HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break label$90
               }
               $12_1 = 0;
               $11_1 = $9_1;
               break label$71;
              }
              HEAP8[($9_1 + $1_1 | 0) >> 0] = $7_1;
              $1_1 = $1_1 + 1 | 0;
              continue label$87;
             };
            }
            label$91 : while (1) {
             label$92 : {
              label$93 : {
               $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$93
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
               $1_1 = HEAPU8[$1_1 >> 0] | 0;
               break label$92;
              }
              $1_1 = $659($0_1 | 0) | 0;
             }
             if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
              continue label$91
             }
             break label$91;
            };
            $11_1 = 0;
            $12_1 = 0;
            $1_1 = 0;
           }
           $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$94 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$94
            }
            $7_1 = $7_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
           }
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $620_1 = i64toi32_i32$5;
           $620$hi = i64toi32_i32$4;
           i64toi32_i32$5 = $7_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
           $625_1 = i64toi32_i32$5;
           $625$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $620$hi;
           i64toi32_i32$2 = $620_1;
           i64toi32_i32$5 = $625$hi;
           i64toi32_i32$3 = $625_1;
           i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
           i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           $19_1 = i64toi32_i32$0;
           $19$hi = i64toi32_i32$1;
           if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
            break label$3
           }
           label$95 : {
            if (($15_1 | 0) != (99 | 0)) {
             break label$95
            }
            i64toi32_i32$1 = $19$hi;
            i64toi32_i32$1 = $18$hi;
            i64toi32_i32$1 = $19$hi;
            i64toi32_i32$4 = $19_1;
            i64toi32_i32$2 = $18$hi;
            i64toi32_i32$3 = $18_1;
            if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
             break label$3
            }
           }
           label$96 : {
            if (!$8_1) {
             break label$96
            }
            label$97 : {
             if ($16_1) {
              break label$97
             }
             HEAP32[$9_1 >> 2] = $12_1;
             break label$96;
            }
            HEAP32[$9_1 >> 2] = $11_1;
           }
           if ($10_1) {
            break label$47
           }
           label$98 : {
            if (!$12_1) {
             break label$98
            }
            HEAP32[($12_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
           }
           label$99 : {
            if ($11_1) {
             break label$99
            }
            $11_1 = 0;
            break label$47;
           }
           HEAP8[($11_1 + $1_1 | 0) >> 0] = 0;
          }
          i64toi32_i32$3 = $0_1;
          i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $653$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $17$hi;
          i64toi32_i32$1 = $653$hi;
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$4 = $17$hi;
          i64toi32_i32$2 = $17_1;
          i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          $655$hi = i64toi32_i32$0;
          i64toi32_i32$3 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
          $661_1 = i64toi32_i32$3;
          $661$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $655$hi;
          i64toi32_i32$1 = i64toi32_i32$5;
          i64toi32_i32$3 = $661$hi;
          i64toi32_i32$2 = $661_1;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $17_1 = i64toi32_i32$4;
          $17$hi = i64toi32_i32$5;
          $4_1 = $4_1 + (($9_1 | 0) != (0 | 0)) | 0;
         }
         $1_1 = $6_1 + 1 | 0;
         $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
         if ($6_1) {
          continue label$8
         }
         break label$2;
        };
       }
       $11_1 = 0;
       break label$5;
      }
      $11_1 = 0;
      $12_1 = 0;
     }
     if ($4_1) {
      break label$3
     }
    }
    $4_1 = -1;
   }
   if (!$8_1) {
    break label$2
   }
   $2005($11_1 | 0);
   $2005($12_1 | 0);
  }
  label$100 : {
   if (!$5_1) {
    break label$100
   }
   $2021($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $4_1 | 0;
 }
 
 function $684($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1_1 >>> 0 > 1 >>> 0 ? (($1_1 << 2 | 0) + $0_1 | 0) + -4 | 0 : $0_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $685($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $686($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $632($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $2014($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $687($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $2015($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 60;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $683($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $688($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $686($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $689() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$70($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $2004(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 22548 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $2004(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    HEAP32[((HEAP32[(0 + 22548 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(fimport$71(HEAP32[(0 + 22548 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 22548 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $690($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $2022($0_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 22548 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   if ($596($0_1 | 0, 61 | 0) | 0) {
    break label$1
   }
   $1_1 = 0;
   $3_1 = HEAP32[(HEAP32[(0 + 22548 | 0) >> 2] | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = $594($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
     $3_1 = HEAP32[(0 + 22548 | 0) >> 2] | 0;
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $4_1 = (HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) + $2_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$2
      }
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $1_1 = $4_1 + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $691($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $690(3926 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = $690(Math_imul($0_1, 12) + 8480 | 0 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$4 : {
    $1_1 = $690(3958 | 0) | 0;
    if (!$1_1) {
     break label$4
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 4693;
  }
  $2_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
     if (!$3_1) {
      break label$6
     }
     if (($3_1 | 0) == (47 | 0)) {
      break label$6
     }
     $3_1 = 15;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (15 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $3_1 = $2_1;
  }
  $4_1 = 4693;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $2_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($2_1 | 0) == (46 | 0)) {
        break label$12
       }
       if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
        break label$12
       }
       $4_1 = $1_1;
       if (($2_1 | 0) != (67 | 0)) {
        break label$11
       }
      }
      if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
       break label$10
      }
     }
     if (!($595($4_1 | 0, 4693 | 0) | 0)) {
      break label$10
     }
     if ($595($4_1 | 0, 3786 | 0) | 0) {
      break label$9
     }
    }
    label$13 : {
     if ($0_1) {
      break label$13
     }
     $2_1 = 8404;
     if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break label$8
     }
    }
    return 0 | 0;
   }
   label$14 : {
    $2_1 = HEAP32[(0 + 22560 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$14
    }
    label$15 : while (1) {
     if (!($595($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
      break label$8
     }
     $2_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$15
     }
     break label$15;
    };
   }
   $609(22552 | 0);
   label$16 : {
    $2_1 = HEAP32[(0 + 22560 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$16
    }
    label$17 : while (1) {
     label$18 : {
      if ($595($4_1 | 0, $2_1 + 8 | 0 | 0) | 0) {
       break label$18
      }
      $610(22552 | 0);
      return $2_1 | 0;
     }
     $2_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$17
     }
     break label$17;
    };
   }
   label$19 : {
    label$20 : {
     $2_1 = $2004(28 | 0) | 0;
     if ($2_1) {
      break label$20
     }
     $2_1 = 0;
     break label$19;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8408 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 8404 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $2_1 + 8 | 0;
    $2014($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
    HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[(0 + 22560 | 0) >> 2] | 0;
    HEAP32[(0 + 22560 | 0) >> 2] = $2_1;
   }
   $610(22552 | 0);
   $2_1 = $2_1 | $0_1 | 0 ? $2_1 : 8404;
  }
  return $2_1 | 0;
 }
 
 function $692($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (8456 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (8432 | 0) | 0) | 0 | 0;
 }
 
 function $693($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $69_1 = 0, $75_1 = 0, $81_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($692($2_1 | 0) | 0)) {
     break label$2
    }
    $4_1 = 0;
    label$3 : while (1) {
     label$4 : {
      if (!(($0_1 >>> $4_1 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] = $691($4_1 | 0, $1_1 | 0) | 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $5_1 = 0;
   $4_1 = 0;
   label$5 : while (1) {
    $6_1 = (1 << $4_1 | 0) & $0_1 | 0;
    label$6 : {
     label$7 : {
      if (!$2_1) {
       break label$7
      }
      if ($6_1) {
       break label$7
      }
      $6_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
      break label$6;
     }
     $6_1 = $691($4_1 | 0, ($6_1 ? $1_1 : 5224) | 0) | 0;
    }
    HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $6_1;
    $5_1 = $5_1 + (($6_1 | 0) != (0 | 0)) | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (6 | 0)) {
     continue label$5
    }
    break label$5;
   };
   $2_1 = 8432;
   label$8 : {
    label$9 : {
     switch ($5_1 | 0) {
     case 0:
      break label$1;
     case 1:
      break label$9;
     default:
      break label$8;
     };
    }
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (8404 | 0)) {
     break label$8
    }
    $2_1 = 8456;
    break label$1;
   }
   $2_1 = $2004(24 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $69_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $69_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($3_1 + 8 | 0) + 16 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $75_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 16 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $75_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($3_1 + 8 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $81_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $81_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $694($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$1 : {
   $2_1 = $652(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $2004($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$1
   }
   $4_1 = $652($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $695($0_1) {
  $0_1 = $0_1 | 0;
  return ($630($0_1 | 0) | 0 | 0) != (0 | 0) | (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | 0 | 0;
 }
 
 function $696($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $695($0_1 | 0) | 0 | 0;
 }
 
 function $697($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $687($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $698($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($692($0_1 | 0) | 0)) {
    break label$1
   }
   $2005($0_1 | 0);
  }
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label$1
   }
   break label$1;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $700($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $701() {
  return 8552 | 0;
 }
 
 function $702() {
  return 9328 | 0;
 }
 
 function $703() {
  return 10880 | 0;
 }
 
 function $704($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$0_1) {
        break label$5
       }
       if ($2_1 >>> 0 >= 4 >>> 0) {
        break label$4
       }
       $5_1 = $2_1;
       break label$3;
      }
      $0_1 = 0;
      label$6 : {
       $6_1 = HEAP32[$1_1 >> 2] | 0;
       $5_1 = HEAP32[$6_1 >> 2] | 0;
       if ($5_1) {
        break label$6
       }
       $7_1 = 0;
       break label$1;
      }
      label$7 : while (1) {
       label$8 : {
        label$9 : {
         if ($5_1 >>> 0 > 127 >>> 0) {
          break label$9
         }
         $0_1 = $0_1 + 1 | 0;
         break label$8;
        }
        $7_1 = -1;
        $5_1 = $633($4_1 + 12 | 0 | 0, $5_1 | 0, 0 | 0) | 0;
        if (($5_1 | 0) == (-1 | 0)) {
         break label$1
        }
        $0_1 = $5_1 + $0_1 | 0;
       }
       $5_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
       $6_1 = $6_1 + 4 | 0;
       $7_1 = $0_1;
       if ($5_1) {
        continue label$7
       }
       break label$1;
      };
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $5_1 = $2_1;
     label$10 : while (1) {
      label$11 : {
       label$12 : {
        $8_1 = HEAP32[$6_1 >> 2] | 0;
        if (($8_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$12
        }
        label$13 : {
         if ($8_1) {
          break label$13
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $8_1 = $633($0_1 | 0, $8_1 | 0, 0 | 0) | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$1
        }
        $5_1 = $5_1 - $8_1 | 0;
        $0_1 = $0_1 + $8_1 | 0;
        break label$11;
       }
       HEAP8[$0_1 >> 0] = $8_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $6_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $6_1 = $6_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $6_1;
      if ($5_1 >>> 0 > 3 >>> 0) {
       continue label$10
      }
      break label$10;
     };
    }
    label$14 : {
     if (!$5_1) {
      break label$14
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     label$15 : while (1) {
      label$16 : {
       label$17 : {
        $8_1 = HEAP32[$6_1 >> 2] | 0;
        if (($8_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$17
        }
        label$18 : {
         if ($8_1) {
          break label$18
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $8_1 = $633($4_1 + 12 | 0 | 0, $8_1 | 0, 0 | 0) | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$1
        }
        if ($5_1 >>> 0 < $8_1 >>> 0) {
         break label$2
        }
        $633($0_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $5_1 = $5_1 - $8_1 | 0;
        $0_1 = $0_1 + $8_1 | 0;
        break label$16;
       }
       HEAP8[$0_1 >> 0] = $8_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $6_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $6_1 = $6_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $6_1;
      if ($5_1) {
       continue label$15
      }
      break label$15;
     };
    }
    $7_1 = $2_1;
    break label$1;
   }
   $7_1 = $2_1 - $5_1 | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $705($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $3_1 : 256;
  $3_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$6_1) {
      break label$3
     }
     if (!$7_1) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $9_1 = $7_1 >>> 0 <= $2_1 >>> 0;
       if (!$9_1) {
        break label$5
       }
       $8_1 = 0;
       break label$4;
      }
      $8_1 = 0;
      if ($2_1 >>> 0 > 32 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      break label$2;
     }
     label$6 : while (1) {
      $9_1 = $9_1 & 1 | 0 ? $7_1 : $2_1;
      $2_1 = $2_1 - $9_1 | 0;
      label$7 : {
       $9_1 = $704($3_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, 0 | 0) | 0;
       if (($9_1 | 0) != (-1 | 0)) {
        break label$7
       }
       $7_1 = 0;
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $8_1 = -1;
       break label$3;
      }
      $10_1 = ($3_1 | 0) == ($5_1 + 16 | 0 | 0);
      $7_1 = $7_1 - ($10_1 ? 0 : $9_1) | 0;
      $3_1 = $10_1 ? $3_1 : $3_1 + $9_1 | 0;
      $8_1 = $9_1 + $8_1 | 0;
      $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$3
      }
      if (!$7_1) {
       break label$3
      }
      $9_1 = $2_1 >>> 0 >= $7_1 >>> 0;
      if ($9_1) {
       continue label$6
      }
      if ($2_1 >>> 0 < 33 >>> 0) {
       break label$2
      }
      continue label$6;
     };
    }
    if (!$6_1) {
     break label$1
    }
   }
   if (!$7_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $10_1 = $8_1;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      label$11 : {
       $9_1 = $633($3_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
       if (($9_1 + 1 | 0) >>> 0 > 1 >>> 0) {
        break label$11
       }
       $8_1 = -1;
       if ($9_1) {
        break label$1
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = 0;
       break label$10;
      }
      $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
      $10_1 = $9_1 + $10_1 | 0;
      $7_1 = $7_1 - $9_1 | 0;
      if ($7_1) {
       break label$9
      }
     }
     $8_1 = $10_1;
     break label$1;
    }
    $3_1 = $3_1 + $9_1 | 0;
    $8_1 = $10_1;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$8
    }
    break label$8;
   };
  }
  label$12 : {
   if (!$0_1) {
    break label$12
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 272 | 0;
  return $8_1 | 0;
 }
 
 function $706($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3_1) {
               break label$12
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
               break label$12
              }
              label$13 : {
               if ($0_1) {
                break label$13
               }
               $3_1 = $2_1;
               break label$10;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break label$11;
             }
             label$14 : {
              label$15 : {
               if (HEAP32[(HEAP32[(($629() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0) {
                break label$15
               }
               if (!$0_1) {
                break label$14
               }
               if (!$2_1) {
                break label$1
               }
               $5_1 = $2_1;
               label$16 : {
                label$17 : while (1) {
                 $3_1 = HEAP8[$4_1 >> 0] | 0;
                 if (!$3_1) {
                  break label$16
                 }
                 HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                 $0_1 = $0_1 + 4 | 0;
                 $4_1 = $4_1 + 1 | 0;
                 $5_1 = $5_1 + -1 | 0;
                 if ($5_1) {
                  continue label$17
                 }
                 break label$1;
                };
               }
               HEAP32[$0_1 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
               break label$9
              }
              $3_1 = $2_1;
              $6_1 = 0;
              break label$7;
             }
             return $2022($4_1 | 0) | 0 | 0;
            }
            $6_1 = 1;
            break label$7;
           }
           $6_1 = 0;
           break label$8;
          }
          $6_1 = 1;
         }
         label$18 : while (1) {
          label$19 : {
           switch ($6_1 | 0) {
           case 0:
            $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
            if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
             break label$6
            }
            $6_1 = $4_1 + 1 | 0;
            label$21 : {
             label$22 : {
              if ($5_1 & 33554432 | 0) {
               break label$22
              }
              $4_1 = $6_1;
              break label$21;
             }
             label$23 : {
              if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
               break label$23
              }
              $4_1 = $4_1 + -1 | 0;
              break label$4;
             }
             $6_1 = $4_1 + 2 | 0;
             label$24 : {
              if ($5_1 & 524288 | 0) {
               break label$24
              }
              $4_1 = $6_1;
              break label$21;
             }
             label$25 : {
              if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
               break label$25
              }
              $4_1 = $4_1 + -1 | 0;
              break label$4;
             }
             $4_1 = $4_1 + 3 | 0;
            }
            $3_1 = $3_1 + -1 | 0;
            $6_1 = 1;
            continue label$18;
           default:
            break label$19;
           };
          }
          label$26 : while (1) {
           label$27 : {
            $5_1 = HEAPU8[$4_1 >> 0] | 0;
            if (($5_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$27
            }
            if ($4_1 & 3 | 0) {
             break label$27
            }
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
             break label$27
            }
            label$28 : while (1) {
             $3_1 = $3_1 + -4 | 0;
             $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             $6_1 = $4_1 + 4 | 0;
             $4_1 = $6_1;
             if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
              continue label$28
             }
             break label$28;
            };
            $4_1 = $6_1;
           }
           label$29 : {
            $6_1 = $5_1 & 255 | 0;
            if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$29
            }
            $3_1 = $3_1 + -1 | 0;
            $4_1 = $4_1 + 1 | 0;
            continue label$26;
           }
           break label$26;
          };
          $6_1 = $6_1 + -194 | 0;
          if ($6_1 >>> 0 > 50 >>> 0) {
           break label$5
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = HEAP32[(8176 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
          $6_1 = 0;
          continue label$18;
         };
        }
        label$30 : while (1) {
         label$31 : {
          switch ($6_1 | 0) {
          case 0:
           if (!$3_1) {
            break label$1
           }
           label$33 : {
            label$34 : while (1) {
             label$35 : {
              label$36 : {
               label$37 : {
                $6_1 = HEAPU8[$4_1 >> 0] | 0;
                $7_1 = $6_1 + -1 | 0;
                if ($7_1 >>> 0 <= 126 >>> 0) {
                 break label$37
                }
                $5_1 = $6_1;
                break label$36;
               }
               if ($4_1 & 3 | 0) {
                break label$35
               }
               if ($3_1 >>> 0 < 5 >>> 0) {
                break label$35
               }
               label$38 : {
                label$39 : while (1) {
                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                 if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                  break label$38
                 }
                 HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                 HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                 $0_1 = $0_1 + 16 | 0;
                 $4_1 = $4_1 + 4 | 0;
                 $3_1 = $3_1 + -4 | 0;
                 if ($3_1 >>> 0 > 4 >>> 0) {
                  continue label$39
                 }
                 break label$39;
                };
                $5_1 = HEAPU8[$4_1 >> 0] | 0;
               }
               $6_1 = $5_1 & 255 | 0;
               $7_1 = $6_1 + -1 | 0;
              }
              if ($7_1 >>> 0 > 126 >>> 0) {
               break label$33
              }
             }
             HEAP32[$0_1 >> 2] = $6_1;
             $0_1 = $0_1 + 4 | 0;
             $4_1 = $4_1 + 1 | 0;
             $3_1 = $3_1 + -1 | 0;
             if (!$3_1) {
              break label$1
             }
             continue label$34;
            };
           }
           $6_1 = $6_1 + -194 | 0;
           if ($6_1 >>> 0 > 50 >>> 0) {
            break label$5
           }
           $4_1 = $4_1 + 1 | 0;
           $5_1 = HEAP32[(8176 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
           $6_1 = 1;
           continue label$30;
          default:
           break label$31;
          };
         }
         $7_1 = HEAPU8[$4_1 >> 0] | 0;
         $6_1 = $7_1 >>> 3 | 0;
         if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
          break label$6
         }
         $8_1 = $4_1 + 1 | 0;
         label$40 : {
          label$41 : {
           label$42 : {
            label$43 : {
             $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$43
             }
             $4_1 = $8_1;
             break label$42;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$41
            }
            $8_1 = $4_1 + 2 | 0;
            label$44 : {
             $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$44
             }
             $4_1 = $8_1;
             break label$42;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$41
            }
            $4_1 = $4_1 + 3 | 0;
            $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $6_1;
           $3_1 = $3_1 + -1 | 0;
           $0_1 = $0_1 + 4 | 0;
           break label$40;
          }
          HEAP32[($605() | 0) >> 2] = 25;
          $4_1 = $4_1 + -1 | 0;
          break label$3;
         }
         $6_1 = 0;
         continue label$30;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break label$4
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break label$4
      }
      label$45 : {
       if (!$0_1) {
        break label$45
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($605() | 0) >> 2] = 25;
     if (!$0_1) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $707($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $3_1 : 256;
  $8_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$6_1) {
      break label$3
     }
     if (!$7_1) {
      break label$3
     }
     $9_1 = $2_1 >>> 2 | 0;
     $10_1 = $9_1 >>> 0 >= $7_1 >>> 0;
     $3_1 = 0;
     label$4 : {
      if ($2_1 >>> 0 > 131 >>> 0) {
       break label$4
      }
      if ($9_1 >>> 0 < $7_1 >>> 0) {
       break label$2
      }
     }
     label$5 : while (1) {
      $9_1 = $10_1 & 1 | 0 ? $7_1 : $9_1;
      $2_1 = $2_1 - $9_1 | 0;
      label$6 : {
       $9_1 = $706($8_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, $4_1 | 0) | 0;
       if (($9_1 | 0) != (-1 | 0)) {
        break label$6
       }
       $7_1 = 0;
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $3_1 = -1;
       break label$3;
      }
      $6_1 = ($8_1 | 0) == ($5_1 + 16 | 0 | 0);
      $7_1 = $7_1 - ($6_1 ? 0 : $9_1) | 0;
      $8_1 = $6_1 ? $8_1 : $8_1 + ($9_1 << 2 | 0) | 0;
      $3_1 = $9_1 + $3_1 | 0;
      $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$3
      }
      if (!$7_1) {
       break label$3
      }
      $9_1 = $2_1 >>> 2 | 0;
      $10_1 = $9_1 >>> 0 >= $7_1 >>> 0;
      if ($2_1 >>> 0 > 131 >>> 0) {
       continue label$5
      }
      if ($9_1 >>> 0 < $7_1 >>> 0) {
       break label$2
      }
      continue label$5;
     };
    }
    if (!$6_1) {
     break label$1
    }
   }
   if (!$7_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $9_1 = $3_1;
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      label$10 : {
       $3_1 = $681($8_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
       if (($3_1 + 2 | 0) >>> 0 > 2 >>> 0) {
        break label$10
       }
       label$11 : {
        switch ($3_1 + 1 | 0 | 0) {
        case 1:
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
         break label$9;
        case 0:
         break label$1;
        default:
         break label$11;
        };
       }
       HEAP32[$4_1 >> 2] = 0;
       break label$9;
      }
      $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $3_1 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
      $9_1 = $9_1 + 1 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       break label$8
      }
     }
     $3_1 = $9_1;
     break label$1;
    }
    $8_1 = $8_1 + 4 | 0;
    $2_1 = $2_1 - $3_1 | 0;
    $3_1 = $9_1;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  label$13 : {
   if (!$0_1) {
    break label$13
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $3_1 | 0;
 }
 
 function $708($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    $0_1 = $0_1 ? $0_1 : $3_1 + 12 | 0;
    label$4 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = ($4_1 << 24 | 0) >> 24 | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = $4_1;
     $1_1 = ($5_1 | 0) != (0 | 0);
     break label$1;
    }
    $4_1 = HEAP32[(HEAP32[(($629() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0;
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    label$5 : {
     if ($4_1) {
      break label$5
     }
     HEAP32[$0_1 >> 2] = $5_1 & 57343 | 0;
     $1_1 = 1;
     break label$1;
    }
    $4_1 = ($5_1 & 255 | 0) + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break label$3
    }
    $4_1 = HEAP32[(8176 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    label$6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break label$6
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break label$3
     }
    }
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $5_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$7 : {
     $2_1 = $5_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$7
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 2;
     break label$1;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    label$8 : {
     $2_1 = $4_1 | ($2_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$8
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 3;
     break label$1;
    }
    $1_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($1_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = $1_1 | ($2_1 << 6 | 0) | 0;
    $1_1 = 4;
    break label$1;
   }
   HEAP32[($605() | 0) >> 2] = 25;
   $1_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $709() {
  return (HEAP32[(HEAP32[(($629() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $710($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $681(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 22564) | 0) | 0 | 0;
 }
 
 function $711() {
  global$2 = 5271152;
  global$1 = (28268 + 15 | 0) & -16 | 0;
 }
 
 function $712() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $713() {
  return global$1 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $716($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $717($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $720($0_1) {
  $0_1 = $0_1 | 0;
  return $714($0_1 | 0) | 0 | 0;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  return $715($0_1 | 0) | 0 | 0;
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $629() | 0;
  $2_1 = HEAP32[($1_1 + 172 | 0) >> 2] | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[($1_1 + 172 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 22464 + 40 | 0 : $0_1;
  }
  return (($2_1 | 0) == (22464 + 40 | 0 | 0) ? -1 : $2_1) | 0;
 }
 
 function $723($0_1) {
  $0_1 = $0_1 | 0;
  $1549(2170 | 0);
  abort();
 }
 
 function $724($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $600($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $725($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $602($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $727($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = Math_fround($680($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $727($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $36_1 = 0, $36$hi = 0, $42_1 = 0, $42$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $2015($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $658($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $675($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $32_1 = $2_1;
   $33_1 = $1_1;
   $34_1 = $1_1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$0;
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $42_1 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $36$hi;
   i64toi32_i32$2 = $36_1;
   i64toi32_i32$0 = $42$hi;
   i64toi32_i32$3 = $42_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$32_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $33_1 : $34_1 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $728($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $727($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = +$638($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $729($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $727($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $730($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($726($0_1 | 0, $1_1 | 0)));
 }
 
 function $731($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$728($0_1 | 0, $1_1 | 0));
 }
 
 function $732($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $729($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $733($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $734($0_1) {
  $0_1 = $0_1 | 0;
  $718($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  $1844($733($0_1 | 0) | 0 | 0);
 }
 
 function $736($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP8[$1_1 >> 0] | 0;
     $7_1 = HEAP8[$3_1 >> 0] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $737($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $738($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $738($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $9($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $739($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $739($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1619($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1559($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $154($0_1 | 0, $4_1 | 0);
     $5_1 = $155($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1561($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1563($149($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1565($0_1 | 0, $5_1 | 0);
    $1566($0_1 | 0, $6_1 | 0);
    $1080($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $156($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $156($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $740($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $741($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  $1844($741($0_1 | 0) | 0 | 0);
 }
 
 function $743($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $744($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $745($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $745($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $746($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $747($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $746($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $139($1_1 | 0) | 0;
  $1621($0_1 | 0) | 0;
  $139($2_1 | 0) | 0;
  $1622($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $747($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1623($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1624($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1141($0_1 | 0, $4_1 | 0);
     $5_1 = $1140($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1625($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1626($1514($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1627($0_1 | 0, $5_1 | 0);
    $1628($0_1 | 0, $6_1 | 0);
    $1139($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1138($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1138($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $748($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $749($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($176($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $614($6_1 | 0, $3_1 | 0);
   $1_1 = $191($6_1 | 0) | 0;
   $750($6_1 | 0) | 0;
   $614($6_1 | 0, $3_1 | 0);
   $3_1 = $751($6_1 | 0) | 0;
   $750($6_1 | 0) | 0;
   $752($6_1 | 0, $3_1 | 0);
   $753($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($754($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1911($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  $1319(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22812 | 0) | 0 | 0;
 }
 
 function $752($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $753($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $754($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $756($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 63;
  $9_1 = 0;
  $10_1 = $757($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $2004($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $758($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        label$8 : {
         if (!($281($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$8
         }
         if ($8_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($759($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $282($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $760($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $283($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($122($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAPU8[($761($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $760($4_1 | 0, ($17_1 << 24 | 0) >> 24 | 0 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 & 255 | 0 | 0) != ($17_1 & 255 | 0 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($122($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $762($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($655($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1841();
  abort();
 }
 
 function $755($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1314(HEAP32[$0_1 >> 2] | 0 | 0, $1279($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1657($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $757($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1641($0_1 | 0, $3_1 + 12 | 0 | 0, $622($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $758($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1642($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1642($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1643($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $284($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($121($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $762($0_1) {
  $0_1 = $0_1 | 0;
  $758($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $763($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $764($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $764($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $766($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $767($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($771($282($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $772($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $765($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    $0_1 = ($176($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if (($0_1 | 0) != (64 | 0)) {
      break label$3
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break label$1
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $766($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $855($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $767($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $614($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $751($3_1 + 8 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $852($1_1 | 0) | 0;
  $853($0_1 | 0, $1_1 | 0);
  $750($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $768($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  label$1 : {
   if (!($15($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($151($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1922($0_1 | 0, $1_1 | 0, 0 | 0);
 }
 
 function $770($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($188($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $771($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      $12_1 = $0_1 & 255 | 0;
      if ((HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0) == ($12_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0) != ($12_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($122($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($804($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (22 | 0)) {
      break label$6
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 12496 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 12496 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $772($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $5_1 = 0, $42_1 = 0, $42$hi = 0, $46_1 = 0, $46$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = HEAP32[($605() | 0) >> 2] | 0;
       HEAP32[($605() | 0) >> 2] = 0;
       i64toi32_i32$0 = $725($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $802() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[($605() | 0) >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[($605() | 0) >> 2] = $5_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     $0_1 = 0;
     break label$1;
    }
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$0 = $477() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $42_1 = i64toi32_i32$0;
    $42$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $42$hi;
    i64toi32_i32$3 = $42_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$2
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $478() | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $46_1 = i64toi32_i32$1;
    $46$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = $46$hi;
    i64toi32_i32$0 = $46_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break label$2
    }
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    $0_1 = $6_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    if (($6$hi | 0) < (i64toi32_i32$2 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$8
    }
    $0_1 = $478() | 0;
    break label$1;
   }
   $0_1 = $477() | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $773($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($122($0_1 | 0) | 0)) {
    break label$1
   }
   if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
    break label$1
   }
   $1114($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $121($0_1 | 0) | 0;
   $5_1 = $2_1 + ($122($0_1 | 0) | 0) | 0;
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $0_1 = HEAP8[$2_1 >> 0] | 0;
      if ($1_1 >>> 0 >= $4_1 >>> 0) {
       break label$3
      }
      label$5 : {
       if (($0_1 | 0) < (1 | 0)) {
        break label$5
       }
       if (($0_1 | 0) >= ($457() | 0 | 0)) {
        break label$5
       }
       if ((HEAP32[$1_1 >> 2] | 0 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
        break label$2
       }
      }
      $2_1 = ($5_1 - $2_1 | 0 | 0) > (1 | 0) ? $2_1 + 1 | 0 : $2_1;
      $1_1 = $1_1 + 4 | 0;
      continue label$4;
     };
    }
    if (($0_1 | 0) < (1 | 0)) {
     break label$1
    }
    if (($0_1 | 0) >= ($457() | 0 | 0)) {
     break label$1
    }
    if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $774($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $775($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $775($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $766($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $767($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($771($282($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $776($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $776($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $5_1 = 0, $41_1 = 0, $41$hi = 0, $43$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = HEAP32[($605() | 0) >> 2] | 0;
       HEAP32[($605() | 0) >> 2] = 0;
       i64toi32_i32$0 = $725($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $802() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[($605() | 0) >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[($605() | 0) >> 2] = $5_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     i64toi32_i32$1 = 0;
     $6_1 = 0;
     $6$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $483() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $41_1 = i64toi32_i32$1;
    $41$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = $41$hi;
    i64toi32_i32$3 = $41_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $15_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $16_1 = 0
      } else {
       $16_1 = 1
      }
      $17_1 = $16_1;
     } else {
      $17_1 = 0
     }
     $15_1 = $17_1;
    }
    if ($15_1) {
     break label$2
    }
    i64toi32_i32$2 = $484() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $43$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $6_1;
    if ((i64toi32_i32$0 | 0) > ($6$hi | 0)) {
     $18_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $19_1 = 0
      } else {
       $19_1 = 1
      }
      $20_1 = $19_1;
     } else {
      $20_1 = 0
     }
     $18_1 = $20_1;
    }
    if ($18_1) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $21_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $22_1 = 0
      } else {
       $22_1 = 1
      }
      $23_1 = $22_1;
     } else {
      $23_1 = 0
     }
     $21_1 = $23_1;
    }
    if ($21_1) {
     break label$8
    }
    i64toi32_i32$1 = $484() | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $483() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $777($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $778($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $778($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $766($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $767($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($771($282($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $779($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $779($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($605() | 0) >> 2] | 0;
        HEAP32[($605() | 0) >> 2] = 0;
        i64toi32_i32$0 = $724($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $802() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($605() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($605() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($469() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $469() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $780($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $781($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $781($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $766($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $767($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($771($282($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $782($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $782($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($605() | 0) >> 2] | 0;
        HEAP32[($605() | 0) >> 2] = 0;
        i64toi32_i32$0 = $724($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $802() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($605() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($605() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($475() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $475() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $783($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $784($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $784($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $766($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $767($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($771($282($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $785($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $785($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($605() | 0) >> 2] | 0;
        HEAP32[($605() | 0) >> 2] = 0;
        i64toi32_i32$0 = $724($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $802() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($605() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($605() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($481() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $481() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $786($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $787($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $787($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $766($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $767($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($771($282($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $788($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $788($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $6_1 = 0, $51$hi = 0, $57$hi = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($605() | 0) >> 2] | 0;
        HEAP32[($605() | 0) >> 2] = 0;
        i64toi32_i32$0 = $724($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $802() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($605() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($605() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $487() | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $51$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $51$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$3 = $7_1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $7_1 >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    i64toi32_i32$2 = $487() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $7$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
   i64toi32_i32$5 = $57$hi;
   $16_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ? $16_1 : i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $7$hi;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $789($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $790($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $790($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $791($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $1_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $1_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($792($282($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($793($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $791($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $614($5_1 + 8 | 0 | 0, $1_1 | 0);
  $801($191($5_1 + 8 | 0 | 0) | 0 | 0, 12496 | 0, 12528 | 0, $2_1 | 0) | 0;
  $2_1 = $751($5_1 + 8 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $851($2_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $852($2_1 | 0) | 0;
  $853($0_1 | 0, $2_1 | 0);
  $750($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $792($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($122($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($122($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($854($11_1 | 0, $11_1 + 32 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (31 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[($11_1 + 12496 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      switch ($11_1 + -22 | 0 | 0) {
      case 2:
      case 3:
       label$9 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      case 0:
      case 1:
       HEAP8[$2_1 >> 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($122($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (21 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $793($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $4_1 = HEAP32[($605() | 0) >> 2] | 0;
      HEAP32[($605() | 0) >> 2] = 0;
      $5_1 = Math_fround($1658($0_1 | 0, $3_1 + 12 | 0 | 0));
      $0_1 = HEAP32[($605() | 0) >> 2] | 0;
      if (!$0_1) {
       break label$3
      }
      $6_1 = Math_fround(0.0);
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$2
      }
      $6_1 = $5_1;
      if (($0_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$2_1 >> 2] = 4;
     $5_1 = Math_fround(0.0);
     break label$1;
    }
    HEAP32[($605() | 0) >> 2] = $4_1;
    $6_1 = Math_fround(0.0);
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $5_1 = $6_1;
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $794($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $795($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $795($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $791($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $1_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $1_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($792($282($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$796($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $796($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0.0, $6_1 = 0.0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $4_1 = HEAP32[($605() | 0) >> 2] | 0;
      HEAP32[($605() | 0) >> 2] = 0;
      $5_1 = +$1659($0_1 | 0, $3_1 + 12 | 0 | 0);
      $0_1 = HEAP32[($605() | 0) >> 2] | 0;
      if (!$0_1) {
       break label$3
      }
      $6_1 = 0.0;
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$2
      }
      $6_1 = $5_1;
      if (($0_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$2_1 >> 2] = 4;
     $5_1 = 0.0;
     break label$1;
    }
    HEAP32[($605() | 0) >> 2] = $4_1;
    $6_1 = 0.0;
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $5_1 = $6_1;
  }
  global$0 = $3_1 + 16 | 0;
  return +$5_1;
 }
 
 function $797($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $798($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $798($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $123_1 = 0, $126_1 = 0;
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 280 | 0) >> 2] = $1_1;
  $791($6_1 + 224 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 239 | 0 | 0, $6_1 + 238 | 0 | 0);
  $3_1 = $127($6_1 + 208 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $1_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $1_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 204 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($792($282($6_1 + 280 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP8[($6_1 + 239 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 238 | 0) >> 0] | 0 | 0, $6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 280 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 224 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $799($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $773($6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($759($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 224 | 0 | 0) | 0;
  global$0 = $6_1 + 288 | 0;
  return $1_1 | 0;
 }
 
 function $799($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $9_1 = 0, $9$hi = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      $5_1 = HEAP32[($605() | 0) >> 2] | 0;
      HEAP32[($605() | 0) >> 2] = 0;
      $1660($4_1 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
      i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      $6_1 = i64toi32_i32$0;
      $6$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
      $1_1 = HEAP32[($605() | 0) >> 2] | 0;
      if (!$1_1) {
       break label$3
      }
      i64toi32_i32$0 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$0;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$2
      }
      i64toi32_i32$0 = $7$hi;
      $8_1 = $7_1;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      $9_1 = $6_1;
      $9$hi = i64toi32_i32$0;
      if (($1_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$3_1 >> 2] = 4;
     i64toi32_i32$0 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $6_1 = 0;
     $6$hi = i64toi32_i32$0;
     break label$1;
    }
    HEAP32[($605() | 0) >> 2] = $5_1;
    i64toi32_i32$0 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$0;
    if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = 4;
   i64toi32_i32$0 = $8$hi;
   $7_1 = $8_1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   $6_1 = $9_1;
   $6$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $800($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $2_1 = $127($6_1 + 208 | 0 | 0) | 0;
  $614($6_1 + 16 | 0 | 0, $3_1 | 0);
  $801($191($6_1 + 16 | 0 | 0) | 0 | 0, 12496 | 0, 12522 | 0, $6_1 + 224 | 0 | 0) | 0;
  $750($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $1_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($281($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $1_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($771($282($6_1 + 264 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $283($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $769($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $133($3_1 | 0) | 0;
  $7_1 = $802() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($803($1_1 | 0, $7_1 | 0, 2443 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($759($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($2_1 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $801($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $802() {
  label$1 : {
   if ((HEAPU8[(0 + 22732 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22732 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 22728 | 0) >> 2] = $693(2147483647 | 0, 4064 | 0, 0 | 0) | 0;
   $1961(22732 | 0);
  }
  return HEAP32[(0 + 22728 | 0) >> 2] | 0 | 0;
 }
 
 function $803($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $805($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $687($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $806($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $804($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $805($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $722(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $806($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $722($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $807($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($176($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $614($6_1 | 0, $3_1 | 0);
   $1_1 = $808($6_1 | 0) | 0;
   $750($6_1 | 0) | 0;
   $614($6_1 | 0, $3_1 | 0);
   $3_1 = $809($6_1 | 0) | 0;
   $750($6_1 | 0) | 0;
   $810($6_1 | 0, $3_1 | 0);
   $811($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($812($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1925($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $808($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22764 | 0) | 0 | 0;
 }
 
 function $809($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22820 | 0) | 0 | 0;
 }
 
 function $810($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $811($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $812($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $813($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 63;
  $9_1 = 0;
  $10_1 = $757($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $2004($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $758($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        label$8 : {
         if (!($814($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$8
         }
         if ($8_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($815($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $816($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $817($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $818($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($819($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAP32[($820($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $817($4_1 | 0, $17_1 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 | 0) != ($17_1 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($819($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $762($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($821($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1841();
  abort();
 }
 
 function $813($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1661($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $814($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($847($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $815($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $847($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  return $849(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $817($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  $850(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($968($0_1 | 0) | 0)) {
    break label$1
   }
   return $969($0_1 | 0) | 0 | 0;
  }
  return $970($0_1 | 0) | 0 | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($965($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  return !($819($0_1 | 0) | 0) | 0;
 }
 
 function $822($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $823($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $823($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $824($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $825($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($826($816($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $772($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $860($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $825($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $614($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $809($3_1 + 8 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $857($1_1 | 0) | 0;
  $858($0_1 | 0, $1_1 | 0);
  $750($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $826($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      if ((HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($122($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($848($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (92 | 0)) {
     break label$1
    }
    $6_1 = $9_1 >> 2 | 0;
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($6_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (88 | 0)) {
      break label$6
     }
     $9_1 = HEAP32[$3_1 >> 2] | 0;
     if (($9_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($9_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($9_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $9_1 + 1 | 0;
     HEAP8[$9_1 >> 0] = HEAPU8[($6_1 + 12496 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($6_1 + 12496 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $827($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $828($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $828($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $824($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $825($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($826($816($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $776($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $829($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $830($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $830($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $824($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $825($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($826($816($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $779($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $831($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $832($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $832($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $824($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $825($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($826($816($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $782($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $833($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $834($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $834($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $824($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $825($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($826($816($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $785($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $835($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $836($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $836($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $765($3_1 | 0) | 0;
  $2_1 = $824($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $825($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $0_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $0_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($826($816($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $788($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $773($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $837($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $838($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $838($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $839($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $127($6_1 + 184 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $1_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $1_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($840($816($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($793($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $773($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $839($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $614($5_1 + 8 | 0 | 0, $1_1 | 0);
  $846($808($5_1 + 8 | 0 | 0) | 0 | 0, 12496 | 0, 12528 | 0, $2_1 | 0) | 0;
  $2_1 = $809($5_1 + 8 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $856($2_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $857($2_1 | 0) | 0;
  $858($0_1 | 0, $2_1 | 0);
  $750($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $840($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($122($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($122($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($859($11_1 | 0, $11_1 + 128 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (124 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[(($11_1 >> 2 | 0) + 12496 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      switch (__wasm_rotl_i32($11_1 + -88 | 0 | 0, 30 | 0) | 0 | 0) {
      case 2:
      case 3:
       label$9 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      case 0:
      case 1:
       HEAP8[$2_1 >> 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($122($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (84 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $841($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $842($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $842($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $839($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $127($6_1 + 184 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $1_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $1_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($840($816($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$796($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $773($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $843($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $844($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $844($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $123_1 = 0, $126_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 368 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $1_1;
  $839($6_1 + 216 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $3_1 = $127($6_1 + 200 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $1_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0) != ($1_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $1_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 196 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($840($816($6_1 + 376 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 196 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 376 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($122($6_1 + 216 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $799($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $773($6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($815($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 376 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($6_1 + 216 | 0 | 0) | 0;
  global$0 = $6_1 + 384 | 0;
  return $1_1 | 0;
 }
 
 function $845($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $2_1 = $127($6_1 + 208 | 0 | 0) | 0;
  $614($6_1 + 16 | 0 | 0, $3_1 | 0);
  $846($808($6_1 + 16 | 0 | 0) | 0 | 0, 12496 | 0, 12522 | 0, $6_1 + 224 | 0 | 0) | 0;
  $750($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $127($6_1 + 192 | 0 | 0) | 0;
  $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
  $1_1 = $770($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($814($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($122($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $122($3_1 | 0) | 0;
     $769($3_1 | 0, ($122($3_1 | 0) | 0) << 1 | 0 | 0);
     $769($3_1 | 0, $768($3_1 | 0) | 0 | 0);
     $1_1 = $770($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($826($816($6_1 + 344 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $818($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $769($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $133($3_1 | 0) | 0;
  $7_1 = $802() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($803($1_1 | 0, $7_1 | 0, 2443 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($815($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1911($3_1 | 0) | 0;
  $1911($2_1 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $1_1 | 0;
 }
 
 function $846($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $847($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1662($0_1 | 0) | 0) ^ ($1662($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $848($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $849($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $1663(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $850($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $1663(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $851($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $853($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $854($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $855($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 12496 | 0;
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $857($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $859($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $860($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $614($3_1 + 8 | 0 | 0, $1_1 | 0);
  $846($808($3_1 + 8 | 0 | 0) | 0 | 0, 12496 | 0, 12522 | 0, $2_1 | 0) | 0;
  $750($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $861($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($176($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $614($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $751($5_1 + 24 | 0 | 0) | 0;
   $750($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $752($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $753($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $862($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $863($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($864($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1911($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP8[($865($5_1 + 16 | 0 | 0) | 0) >> 0] | 0;
    $867($866($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $868($5_1 + 16 | 0 | 0) | 0;
    $869($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $862($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($870($1_1 + 8 | 0 | 0, $188($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $863($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($870($1_1 + 8 | 0 | 0, ($188($0_1 | 0) | 0) + ($122($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($871($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $866($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($186($872($2_1 | 0, $1_1 | 0) | 0 | 0, $185() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $868($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $869($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $870($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1103($0_1 | 0) | 0 | 0) == ($1103($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $872($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $288($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP8[$2_1 >> 0] = $1_1;
  return $288($1_1 | 0) | 0 | 0;
 }
 
 function $873($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 12533 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 12534 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 12529 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 12530 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 12531 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 12532 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $874($6_1 + 24 | 0 | 1 | 0 | 0, 2718 | 0, 1 | 0, $176($2_1 | 0) | 0 | 0);
  $7_1 = $176($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $802() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($875($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $876($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $614($6_1 + 8 | 0 | 0, $2_1 | 0);
  $877($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $750($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $178($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $874($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (!($3_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($3_1 & 512 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break label$6
    }
    $1_1 = 111;
    break label$5;
   }
   label$7 : {
    if (($1_1 | 0) != (8 | 0)) {
     break label$7
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break label$5;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $875($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $2_1 = $805($5_1 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $652($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $806($2_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $876($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = ($176($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break label$1
   }
   return $1_1 | 0;
  }
  label$2 : {
   if (($2_1 | 0) != (16 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     switch ($2_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break label$2
   }
   if (($2_1 | 0) != (48 | 0)) {
    break label$2
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break label$2
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $877($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $191($6_1 | 0) | 0;
  $6_1 = $751($6_1 | 0) | 0;
  $853($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($655($7_1 | 0) | 0)) {
     break label$2
    }
    $801($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $192($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $192($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $10_1 = $192($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $878($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $852($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $878($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($770($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($770($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
     HEAP8[$10_1 >> 0] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($122($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $192($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $1911($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $878($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $931($0_1 | 0, $1_1 | 0);
 }
 
 function $879($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $874($6_1 + 24 | 0 | 1 | 0 | 0, 2695 | 0, 1 | 0, $176($2_1 | 0) | 0 | 0);
  $7_1 = $176($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $802() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($875($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $876($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $614($6_1 + 8 | 0 | 0, $2_1 | 0);
  $877($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $750($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $178($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $880($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 12533 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 12534 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 12529 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 12530 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 12531 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 12532 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $874($6_1 + 24 | 0 | 1 | 0 | 0, 2718 | 0, 0 | 0, $176($2_1 | 0) | 0 | 0);
  $7_1 = $176($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $802() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($875($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $876($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $614($6_1 + 8 | 0 | 0, $2_1 | 0);
  $877($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $750($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $178($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $881($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $874($6_1 + 24 | 0 | 1 | 0 | 0, 2695 | 0, 0 | 0, $176($2_1 | 0) | 0 | 0);
  $7_1 = $176($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $802() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($875($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $876($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $614($6_1 + 8 | 0 | 0, $2_1 | 0);
  $877($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $750($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $178($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $882($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 200 | 0) >> 2] = 37;
  HEAP32[($5_1 + 204 | 0) >> 2] = 0;
  $6_1 = $883($5_1 + 200 | 0 | 1 | 0 | 0, 5224 | 0, $176($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 156 | 0) >> 2] = $5_1 + 160 | 0;
  $7_1 = $802() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $884($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $875($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $875($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 63;
  $9_1 = $885($5_1 + 144 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  $10_1 = $5_1 + 160 | 0;
  $8_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $802() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $8_1 = $884($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $8_1;
      $7_1 = $886($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $886($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    if (($7_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $887($9_1 | 0, HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   }
   $6_1 = $8_1 + $7_1 | 0;
   $11_1 = $876($8_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 63;
   $8_1 = $885($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0) != ($5_1 + 160 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     break label$7;
    }
    $7_1 = $2004($7_1 << 1 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $887($8_1 | 0, $7_1 | 0);
    $10_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   }
   $614($5_1 + 56 | 0 | 0, $2_1 | 0);
   $888($10_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $750($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $178($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $889($8_1 | 0) | 0;
   $889($9_1 | 0) | 0;
   global$0 = $5_1 + 208 | 0;
   return $2_1 | 0;
  }
  $1841();
  abort();
 }
 
 function $883($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($2_1 & 1024 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   $3_1 = $2_1 & 260 | 0;
   if (($3_1 | 0) == (260 | 0)) {
    break label$3
   }
   $5_1 = 10798;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
  }
  $4_1 = $2_1 & 16384 | 0;
  label$4 : {
   label$5 : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break label$4
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (($3_1 | 0) == (256 | 0)) {
      break label$8
     }
     if (($3_1 | 0) != (4 | 0)) {
      break label$7
     }
     $1_1 = $4_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $4_1 ? 69 : 101;
    break label$6;
   }
   label$9 : {
    if (($3_1 | 0) != (260 | 0)) {
     break label$9
    }
    $1_1 = $4_1 ? 65 : 97;
    break label$6;
   }
   $1_1 = $4_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return ($3_1 | 0) != (260 | 0) | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $885($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $890($0_1 | 0, $3_1 + 12 | 0 | 0, $622($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $886($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $805($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $694($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $806($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $887($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($891($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($891($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($892($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $888($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $191($6_1 | 0) | 0;
  $9_1 = $751($6_1 | 0) | 0;
  $853($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $192($8_1 | 0, ($6_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $192($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $192($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($696(HEAP8[$6_1 >> 0] | 0 | 0, $802() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($631(HEAP8[$6_1 >> 0] | 0 | 0, $802() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($655($7_1 | 0) | 0)) {
     break label$8
    }
    $801($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break label$7;
   }
   $878($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $852($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $878($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($770($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($770($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($122($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $192($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : while (1) {
   label$13 : {
    label$14 : {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$14
     }
     $11_1 = HEAPU8[$6_1 >> 0] | 0;
     if (($11_1 | 0) != (46 | 0)) {
      break label$13
     }
     $11_1 = $851($9_1 | 0) | 0;
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $11_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $801($8_1 | 0, $6_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $6_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $1911($7_1 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $11_1 = $192($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
   HEAP8[$12_1 >> 0] = $11_1;
   $6_1 = $6_1 + 1 | 0;
   continue label$12;
  };
 }
 
 function $889($0_1) {
  $0_1 = $0_1 | 0;
  $887($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $890($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1665($0_1 | 0, $1664($1_1 | 0) | 0 | 0) | 0;
  $627($0_1 + 4 | 0 | 0, $626($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $891($0_1) {
  $0_1 = $0_1 | 0;
  return $1666($0_1 | 0) | 0 | 0;
 }
 
 function $892($0_1) {
  $0_1 = $0_1 | 0;
  return $628($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $893($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $883($6_1 + 248 | 0 | 1 | 0 | 0, 3943 | 0, $176($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $6_1 + 208 | 0;
  $8_1 = $802() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $884($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $875($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $875($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 63;
  $10_1 = $885($6_1 + 192 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  $11_1 = $6_1 + 208 | 0;
  $9_1 = $11_1;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $802() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $9_1 = $884($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $9_1;
      $8_1 = $886($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $886($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    if (($8_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $887($10_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   }
   $7_1 = $9_1 + $8_1 | 0;
   $12_1 = $876($9_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 63;
   $9_1 = $885($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($6_1 + 208 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     break label$7;
    }
    $8_1 = $2004($8_1 << 1 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $887($9_1 | 0, $8_1 | 0);
    $11_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   }
   $614($6_1 + 104 | 0 | 0, $2_1 | 0);
   $888($11_1 | 0, $12_1 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $750($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $178($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $889($9_1 | 0) | 0;
   $889($10_1 | 0) | 0;
   global$0 = $6_1 + 256 | 0;
   return $2_1 | 0;
  }
  $1841();
  abort();
 }
 
 function $894($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 92 | 0) >> 1] = HEAPU8[($10_1 + 12539 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 12540 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = HEAPU8[($9_1 + 12535 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 12536 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 12537 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 12538 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $802() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $875($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 88 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $876($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $614($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $191($5_1 + 16 | 0 | 0) | 0;
  $750($5_1 + 16 | 0 | 0) | 0;
  $801($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $178($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $895($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($176($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $614($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $809($5_1 + 24 | 0 | 0) | 0;
   $750($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $810($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $811($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $896($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $897($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($898($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1925($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP32[($899($5_1 + 16 | 0 | 0) | 0) >> 2] | 0;
    $901($900($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $902($5_1 + 16 | 0 | 0) | 0;
    $903($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $896($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($905($1_1 + 8 | 0 | 0, $904($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $897($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($905($1_1 + 8 | 0 | 0, ($904($0_1 | 0) | 0) + (($819($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $898($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($906($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $899($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $900($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $901($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($909($907($2_1 | 0, $1_1 | 0) | 0 | 0, $908() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $902($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $904($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($968($0_1 | 0) | 0)) {
    break label$1
   }
   return $1137($0_1 | 0) | 0 | 0;
  }
  return $1140($0_1 | 0) | 0 | 0;
 }
 
 function $905($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $906($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1163($0_1 | 0) | 0 | 0) == ($1163($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $907($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1663($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $1663($1_1 | 0) | 0 | 0;
 }
 
 function $908() {
  return -1 | 0;
 }
 
 function $909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $910($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 12533 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 12534 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 12529 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 12530 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 12531 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 12532 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $874($6_1 + 24 | 0 | 1 | 0 | 0, 2718 | 0, 1 | 0, $176($2_1 | 0) | 0 | 0);
  $7_1 = $176($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $802() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $4_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $7_1 = $8_1 + ($875($8_1 | 0, $4_1 + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $876($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 - ((($4_1 << 3 | 0) + 107 | 0) & 112 | 0) | 0;
  global$0 = $4_1;
  $614($6_1 + 8 | 0 | 0, $2_1 | 0);
  $911($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $750($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $912($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $911($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $808($6_1 | 0) | 0;
  $6_1 = $809($6_1 | 0) | 0;
  $858($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($655($7_1 | 0) | 0)) {
     break label$2
    }
    $846($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $913($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $913($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $10_1 = $913($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $878($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $857($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $914($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($770($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($770($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
     HEAP32[$10_1 >> 2] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($122($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $913($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1911($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $912($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   $8_1 = $180($4_1 | 0) | 0;
   $7_1 = 0;
   label$3 : {
    $9_1 = $2_1 - $1_1 | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = $9_1 >> 2 | 0;
    if (($915($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0 | 0) != ($9_1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    $7_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
    $1_1 = ($8_1 | 0) > ($7_1 | 0) ? $8_1 - $7_1 | 0 : 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$4
    }
    $7_1 = $916($6_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
    $8_1 = $915($0_1 | 0, $917($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    $1925($7_1 | 0) | 0;
    $7_1 = 0;
    if (($8_1 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   label$5 : {
    $1_1 = $3_1 - $2_1 | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$5
    }
    $7_1 = 0;
    $1_1 = $1_1 >> 2 | 0;
    if (($915($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $184($4_1 | 0, 0 | 0) | 0;
   $7_1 = $0_1;
  }
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $914($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $932($0_1 | 0, $1_1 | 0);
 }
 
 function $915($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $916($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $746($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1933($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $917($0_1) {
  $0_1 = $0_1 | 0;
  return $1639($904($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $918($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $874($6_1 + 24 | 0 | 1 | 0 | 0, 2695 | 0, 1 | 0, $176($2_1 | 0) | 0 | 0);
  $7_1 = $176($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $802() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($875($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $876($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 187 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $614($6_1 + 8 | 0 | 0, $2_1 | 0);
  $911($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $750($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $912($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $919($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 12533 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 12534 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 12529 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 12530 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 12531 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 12532 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $874($6_1 + 24 | 0 | 1 | 0 | 0, 2718 | 0, 0 | 0, $176($2_1 | 0) | 0 | 0);
  $7_1 = $176($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $802() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($875($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $876($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -96 | 0;
  global$0 = $4_1;
  $614($6_1 + 8 | 0 | 0, $2_1 | 0);
  $911($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $750($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $912($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $920($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $874($6_1 + 24 | 0 | 1 | 0 | 0, 2695 | 0, 0 | 0, $176($2_1 | 0) | 0 | 0);
  $7_1 = $176($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $802() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($875($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $876($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 187 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $614($6_1 + 8 | 0 | 0, $2_1 | 0);
  $911($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $750($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $912($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $921($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 376 | 0) >> 2] = 37;
  HEAP32[($5_1 + 380 | 0) >> 2] = 0;
  $6_1 = $883($5_1 + 376 | 0 | 1 | 0 | 0, 5224 | 0, $176($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 332 | 0) >> 2] = $5_1 + 336 | 0;
  $7_1 = $802() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $884($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $875($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $875($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 63;
  $9_1 = $885($5_1 + 320 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  $10_1 = $5_1 + 336 | 0;
  $8_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $802() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $8_1 = $884($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $8_1;
      $7_1 = $886($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $886($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    if (($7_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $887($9_1 | 0, HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   }
   $6_1 = $8_1 + $7_1 | 0;
   $11_1 = $876($8_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 63;
   $8_1 = $922($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0) != ($5_1 + 336 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     break label$7;
    }
    $7_1 = $2004($7_1 << 3 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $923($8_1 | 0, $7_1 | 0);
    $10_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   }
   $614($5_1 + 56 | 0 | 0, $2_1 | 0);
   $924($10_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $750($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $912($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $925($8_1 | 0) | 0;
   $889($9_1 | 0) | 0;
   global$0 = $5_1 + 384 | 0;
   return $2_1 | 0;
  }
  $1841();
  abort();
 }
 
 function $922($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $926($0_1 | 0, $3_1 + 12 | 0 | 0, $622($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $923($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($927($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($927($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($928($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $924($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $808($6_1 | 0) | 0;
  $9_1 = $809($6_1 | 0) | 0;
  $858($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $913($8_1 | 0, ($6_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $913($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $913($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($696(HEAP8[$6_1 >> 0] | 0 | 0, $802() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($631(HEAP8[$6_1 >> 0] | 0 | 0, $802() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($655($7_1 | 0) | 0)) {
     break label$8
    }
    $846($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break label$7;
   }
   $878($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $857($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $914($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($770($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($770($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
     HEAP32[$12_1 >> 2] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($122($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $913($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     label$15 : {
      $11_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($11_1 | 0) == (46 | 0)) {
       break label$15
      }
      $11_1 = $913($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $11_1;
      $6_1 = $6_1 + 1 | 0;
      continue label$14;
     }
     break label$14;
    };
    $12_1 = $856($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $11_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $11_1;
    HEAP32[$14_1 >> 2] = $12_1;
    $6_1 = $6_1 + 1 | 0;
    break label$12;
   }
   $11_1 = HEAP32[$5_1 >> 2] | 0;
  }
  $846($8_1 | 0, $6_1 | 0, $2_1 | 0, $11_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $6_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1911($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $925($0_1) {
  $0_1 = $0_1 | 0;
  $923($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $926($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1668($0_1 | 0, $1667($1_1 | 0) | 0 | 0) | 0;
  $627($0_1 + 4 | 0 | 0, $626($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  return $1669($0_1 | 0) | 0 | 0;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  return $628($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $929($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 424 | 0) >> 2] = 37;
  HEAP32[($6_1 + 428 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $883($6_1 + 424 | 0 | 1 | 0 | 0, 3943 | 0, $176($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 380 | 0) >> 2] = $6_1 + 384 | 0;
  $8_1 = $802() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $884($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $875($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $875($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 63;
  $10_1 = $885($6_1 + 368 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  $11_1 = $6_1 + 384 | 0;
  $9_1 = $11_1;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $802() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $9_1 = $884($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $9_1;
      $8_1 = $886($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $886($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    if (($8_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $887($10_1 | 0, HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   }
   $7_1 = $9_1 + $8_1 | 0;
   $12_1 = $876($9_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 63;
   $9_1 = $922($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) != ($6_1 + 384 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     break label$7;
    }
    $8_1 = $2004($8_1 << 3 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $923($9_1 | 0, $8_1 | 0);
    $11_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   }
   $614($6_1 + 104 | 0 | 0, $2_1 | 0);
   $924($11_1 | 0, $12_1 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $750($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $912($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $925($9_1 | 0) | 0;
   $889($10_1 | 0) | 0;
   global$0 = $6_1 + 432 | 0;
   return $2_1 | 0;
  }
  $1841();
  abort();
 }
 
 function $930($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 204 | 0) >> 1] = HEAPU8[($10_1 + 12539 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 12540 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAPU8[($9_1 + 12535 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 12536 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 12537 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 12538 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $802() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $875($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $876($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $614($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $808($5_1 + 16 | 0 | 0) | 0;
  $750($5_1 + 16 | 0 | 0) | 0;
  $846($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $912($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1670($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    continue label$2;
   };
  }
 }
 
 function $932($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1671($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $933($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $614($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $191($8_1 + 8 | 0 | 0) | 0;
  $750($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 1;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if (!($2_1 & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if ($759($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($934($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 1 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $934($1_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 2 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $934($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 2 | 0;
       break label$4;
      }
      label$8 : {
       if (!($935($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($935($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($281($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($935($1_1 | 0, 8192 | 0, $282($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $283($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($760($1_1 | 0, $282($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($760($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 1 | 0;
       $283($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = !(HEAP32[$4_1 >> 2] | 0);
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($759($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $934($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ((HEAPU16[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + (($2_1 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $937($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $0_1 = $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $938($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $121($6_1 | 0) | 0 | 0, ($121($6_1 | 0) | 0) + ($122($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $939($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $614($6_1 | 0, $3_1 | 0);
  $3_1 = $191($6_1 | 0) | 0;
  $750($6_1 | 0) | 0;
  $940($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $940($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($754($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $941($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $614($6_1 | 0, $3_1 | 0);
  $3_1 = $191($6_1 | 0) | 0;
  $750($6_1 | 0) | 0;
  $942($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $942($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($754($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $943($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $614($6_1 | 0, $3_1 | 0);
  $3_1 = $191($6_1 | 0) | 0;
  $750($6_1 | 0) | 0;
  $944($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $944($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($2_1 | 0) < (69 | 0) ? $2_1 + 2e3 | 0 : ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1) + -1900 | 0;
  }
 }
 
 function $945($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  $1_1 = 0;
  $6_1 = 6;
  label$1 : {
   label$2 : {
    if ($759($0_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $6_1 = 4;
    $7_1 = $282($0_1 | 0) | 0;
    if (!($935($3_1 | 0, 2048 | 0, $7_1 | 0) | 0)) {
     break label$2
    }
    $1_1 = $934($3_1 | 0, $7_1 | 0, 0 | 0) | 0;
    label$3 : {
     label$4 : while (1) {
      $283($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if (!($281($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
       break label$3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break label$3
      }
      $6_1 = $282($0_1 | 0) | 0;
      if (!($935($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
       break label$1
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($934($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label$4;
     };
    }
    $6_1 = 2;
    if (!($759($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $6_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $946($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $155_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $614($8_1 + 8 | 0 | 0, $3_1 | 0);
  $9_1 = $191($8_1 + 8 | 0 | 0) | 0;
  $750($8_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $940($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $942($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $121($6_1 | 0) | 0 | 0, ($121($6_1 | 0) | 0) + ($122($6_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $947($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623865125;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623728933;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 7:
       $948($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $949($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $950($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $951($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $952($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $953($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $954($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $14_1 = 0;
       $15_1 = HEAPU8[($14_1 + 12548 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 12549 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 12550 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 12551 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 15 | 0) >> 0] = $15_1;
       HEAP8[($8_1 + 16 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($8_1 + 17 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($8_1 + 18 | 0) >> 0] = $15_1 >>> 24 | 0;
       $13_1 = 0;
       i64toi32_i32$0 = HEAPU8[($13_1 + 12541 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 12542 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 12543 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 12544 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($13_1 + 12545 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 12546 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 12547 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 12548 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $155_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $155_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 19 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP8[($8_1 + 12 | 0) >> 0] = HEAPU8[(0 + 12556 | 0) >> 0] | 0;
       $16_1 = 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAPU8[($16_1 + 12552 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 12553 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 12554 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 12555 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 13 | 0 | 0) | 0;
       break label$2;
      case 18:
       $955($0_1 | 0, $5_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[($8_1 + 8 | 0) >> 2] = 624576549;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 54:
       $956($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $933($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $121($6_1 | 0) | 0 | 0, ($121($6_1 | 0) | 0) + ($122($6_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $944($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $957($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $958($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $947($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) > (31 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $948($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $949($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $950($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $951($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $952($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $953($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($281($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($935($4_1 | 0, 8192 | 0, $282($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $283($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($759($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $954($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($122($0_1 | 0) | 0 | 0) != (0 - ($122($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $2_1 = $754($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   $0_1 = $2_1 - $0_1 | 0;
   if ($0_1) {
    break label$2
   }
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $955($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $956($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $957($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $945($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $958($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($759($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($934($4_1 | 0, $282($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($759($283($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $959($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $614($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $808($8_1 + 8 | 0 | 0) | 0;
  $750($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 1;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if (!($2_1 & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if ($815($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($960($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 4 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $960($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 8 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $960($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 8 | 0;
       break label$4;
      }
      label$8 : {
       if (!($961($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 4 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($961($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($814($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($961($1_1 | 0, 8192 | 0, $816($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $818($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($817($1_1 | 0, $816($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($817($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 4 | 0;
       $818($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = !(HEAP32[$4_1 >> 2] | 0);
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($815($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $960($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $961($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $962($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $963($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12728 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12732 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12720 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12724 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12712 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12716 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12704 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12708 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $964($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $965($6_1 | 0) | 0 | 0, ($965($6_1 | 0) | 0) + (($819($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $965($0_1) {
  $0_1 = $0_1 | 0;
  return $967($966($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $966($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($968($0_1 | 0) | 0)) {
    break label$1
   }
   return $1054($0_1 | 0) | 0 | 0;
  }
  return $1672($0_1 | 0) | 0 | 0;
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1052($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1052($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $970($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(($1052($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function $971($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $614($6_1 | 0, $3_1 | 0);
  $3_1 = $808($6_1 | 0) | 0;
  $750($6_1 | 0) | 0;
  $972($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $972($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($812($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $973($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $614($6_1 | 0, $3_1 | 0);
  $3_1 = $808($6_1 | 0) | 0;
  $750($6_1 | 0) | 0;
  $974($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $974($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($812($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $975($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $614($6_1 | 0, $3_1 | 0);
  $3_1 = $808($6_1 | 0) | 0;
  $750($6_1 | 0) | 0;
  $976($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $976($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($2_1 | 0) < (69 | 0) ? $2_1 + 2e3 | 0 : ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1) + -1900 | 0;
  }
 }
 
 function $977($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  $1_1 = 0;
  $6_1 = 6;
  label$1 : {
   label$2 : {
    if ($815($0_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $6_1 = 4;
    $7_1 = $816($0_1 | 0) | 0;
    if (!($961($3_1 | 0, 2048 | 0, $7_1 | 0) | 0)) {
     break label$2
    }
    $1_1 = $960($3_1 | 0, $7_1 | 0, 0 | 0) | 0;
    label$3 : {
     label$4 : while (1) {
      $818($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if (!($814($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
       break label$3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break label$3
      }
      $6_1 = $816($0_1 | 0) | 0;
      if (!($961($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
       break label$1
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($960($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label$4;
     };
    }
    $6_1 = 2;
    if (!($815($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $6_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $978($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $72_1 = 0, $75_1 = 0, $77_1 = 0, $79_1 = 0, $93_1 = 0, $96_1 = 0, $98_1 = 0, $100_1 = 0, $183_1 = 0, $185_1 = 0, $206_1 = 0, $209_1 = 0, $211_1 = 0, $213_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $614($8_1 | 0, $3_1 | 0);
  $9_1 = $808($8_1 | 0) | 0;
  $750($8_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $972($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $974($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $965($6_1 | 0) | 0 | 0, ($965($6_1 | 0) | 0) + (($819($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $979($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12584 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12588 | 0) >> 2] | 0;
       $72_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $72_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12576 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12580 | 0) >> 2] | 0;
       $75_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $75_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12568 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12572 | 0) >> 2] | 0;
       $77_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $77_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12560 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12564 | 0) >> 2] | 0;
       $79_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $79_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12616 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12620 | 0) >> 2] | 0;
       $93_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $93_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12608 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12612 | 0) >> 2] | 0;
       $96_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $96_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12600 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12604 | 0) >> 2] | 0;
       $98_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $98_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12592 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12596 | 0) >> 2] | 0;
       $100_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $100_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 7:
       $980($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $981($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $982($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $983($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $984($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $985($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $986($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $6_1 = $2014($8_1 | 0, 12624 | 0, 44 | 0) | 0;
       HEAP32[($6_1 + 56 | 0) >> 2] = $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $6_1 + 44 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 12688 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12680 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12684 | 0) >> 2] | 0;
       $183_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $183_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12672 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12676 | 0) >> 2] | 0;
       $185_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $185_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break label$2;
      case 18:
       $987($0_1 | 0, $5_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12728 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12732 | 0) >> 2] | 0;
       $206_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $206_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12720 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12724 | 0) >> 2] | 0;
       $209_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $209_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12712 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12716 | 0) >> 2] | 0;
       $211_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $211_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12704 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12708 | 0) >> 2] | 0;
       $213_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $213_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 54:
       $988($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $965($6_1 | 0) | 0 | 0, ($965($6_1 | 0) | 0) + (($819($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $976($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $989($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $990($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $979($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) > (31 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $980($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $981($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $982($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $983($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $984($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $985($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($814($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($961($4_1 | 0, 8192 | 0, $816($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $818($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($815($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $986($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($819($0_1 | 0) | 0 | 0) != (0 - ($819($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $2_1 = $812($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   $0_1 = $2_1 - $0_1 | 0;
   if ($0_1) {
    break label$2
   }
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $987($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $988($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $989($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $990($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($815($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($960($4_1 | 0, $816($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($815($818($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $991($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $992($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $993($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $1_1 | 0;
 }
 
 function $992($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   $994($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + (fimport$72($1_1 | 0, $995($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $993($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $998($996($0_1 | 0) | 0 | 0, $996($1_1 | 0) | 0 | 0, $997($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $994($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = HEAPU8[($1484($0_1 | 0) | 0) >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[($1484($1_1 | 0) | 0) >> 0] | 0;
  HEAP8[$1_1 >> 0] = HEAPU8[($1484($2_1 + 15 | 0 | 0) | 0) >> 0] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $995($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $996($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $997($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $998($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1675($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $999($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $1000($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $1001($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $1_1 | 0;
 }
 
 function $1000($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $992($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  label$1 : {
   $0_1 = $1003($1_1 | 0, $6_1 + 12 | 0 | 0, $1002($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break label$1
   }
   $1004($6_1 | 0);
   abort();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $1001($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1007($1005($0_1 | 0) | 0 | 0, $1005($1_1 | 0) | 0 | 0, $1006($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1002($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1003($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $805($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $706($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $806($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1004($0_1) {
  $0_1 = $0_1 | 0;
  fimport$69();
  abort();
 }
 
 function $1005($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1006($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1007($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1676($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1008($0_1) {
  $0_1 = $0_1 | 0;
  return $457() | 0 | 0;
 }
 
 function $1009($0_1) {
  $0_1 = $0_1 | 0;
  return $457() | 0 | 0;
 }
 
 function $1010($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $127($0_1 | 0) | 0;
 }
 
 function $1011($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $127($0_1 | 0) | 0;
 }
 
 function $1012($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $127($0_1 | 0) | 0;
 }
 
 function $1013($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $182($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1014($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1015($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1016($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1017($0_1) {
  $0_1 = $0_1 | 0;
  return $457() | 0 | 0;
 }
 
 function $1018($0_1) {
  $0_1 = $0_1 | 0;
  return $457() | 0 | 0;
 }
 
 function $1019($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $127($0_1 | 0) | 0;
 }
 
 function $1020($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $127($0_1 | 0) | 0;
 }
 
 function $1021($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $127($0_1 | 0) | 0;
 }
 
 function $1022($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $182($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1023($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1024($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1025($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1026($0_1) {
  $0_1 = $0_1 | 0;
  return $1027() | 0 | 0;
 }
 
 function $1027() {
  return $1028() | 0 | 0;
 }
 
 function $1028() {
  return 2147483647 | 0;
 }
 
 function $1029($0_1) {
  $0_1 = $0_1 | 0;
  return $1027() | 0 | 0;
 }
 
 function $1030($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $127($0_1 | 0) | 0;
 }
 
 function $1031($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1032($0_1 | 0) | 0;
 }
 
 function $1032($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $746($0_1 | 0, $1_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1033($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1033($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1053($0_1 | 0) | 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($0_1 | 0) != (3 | 0)) {
     break label$2
    }
    return;
   }
   HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1034($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1032($0_1 | 0) | 0;
 }
 
 function $1035($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $916($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1036($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1037($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1038($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1039($0_1) {
  $0_1 = $0_1 | 0;
  return $1027() | 0 | 0;
 }
 
 function $1040($0_1) {
  $0_1 = $0_1 | 0;
  return $1027() | 0 | 0;
 }
 
 function $1041($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $127($0_1 | 0) | 0;
 }
 
 function $1042($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1032($0_1 | 0) | 0;
 }
 
 function $1043($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1032($0_1 | 0) | 0;
 }
 
 function $1044($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $916($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1045($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1046($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1047($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1048($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1050($1049($1_1 | 0) | 0 | 0);
  $3_1 = $1051($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($968($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $1052($1_1 | 0) | 0;
    $3_1 = $1053($3_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $1929($0_1 | 0, $967($1054($1_1 | 0) | 0 | 0) | 0 | 0, $969($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1049($0_1) {
  $0_1 = $0_1 | 0;
  return $1636($0_1 | 0) | 0 | 0;
 }
 
 function $1050($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1051($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $139($1_1 | 0) | 0;
  $1621($0_1 | 0) | 0;
  $1654($0_1 | 0, $1653($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1052($0_1) {
  $0_1 = $0_1 | 0;
  return $1517($0_1 | 0) | 0 | 0;
 }
 
 function $1053($0_1) {
  $0_1 = $0_1 | 0;
  return $1519($0_1 | 0) | 0 | 0;
 }
 
 function $1054($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1052($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1055($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 288 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 64;
  $1_1 = $885($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $614($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $191($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  label$1 : {
   if (!($1057($7_1 + 280 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $176($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 4681 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 4682 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 4683 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 4684 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 4678 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 4679 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 4680 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 4681 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 4674 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 4675 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 4676 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 4677 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $801($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 63;
   $8_1 = $885($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1058($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break label$3
     }
     $887($8_1 | 0, $2004(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1058($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1058($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $1058($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 143 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $1058($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($697($7_1 + 16 | 0 | 0, 3060 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $889($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($854($7_1 + 118 | 0 | 0, $1059($7_1 + 118 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue label$6;
     };
    }
    $1004($7_1 | 0);
    abort();
   }
   $1841();
   abort();
  }
  label$8 : {
   if (!($759($7_1 + 280 | 0 | 0, $7_1 + 272 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 280 | 0) >> 2] | 0;
  $750($7_1 + 144 | 0 | 0) | 0;
  $889($1_1 | 0) | 0;
  global$0 = $7_1 + 288 | 0;
  return $4_1 | 0;
 }
 
 function $1056($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1057($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0, $397_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 104 | 0) >> 2] = 64;
  $12_1 = $1060($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 104 | 0 | 0) | 0;
  $1_1 = $1061($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $127($11_1 + 104 | 0 | 0) | 0;
  $14_1 = $127($11_1 + 88 | 0 | 0) | 0;
  $15_1 = $127($11_1 + 72 | 0 | 0) | 0;
  $16_1 = $127($11_1 + 56 | 0 | 0) | 0;
  $17_1 = $127($11_1 + 40 | 0 | 0) | 0;
  $1062($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 119 | 0 | 0, $11_1 + 118 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 36 | 0 | 0);
  HEAP32[$9_1 >> 2] = $1058($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $19_1 = $18_1 >>> 9 | 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == (4 | 0)) {
        break label$5
       }
       if (!($281($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
        break label$5
       }
       $4_1 = 0;
       $2_1 = $10_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0 | 0) {
            case 1:
             if (($1_1 | 0) == (3 | 0)) {
              break label$3
             }
             label$12 : {
              if (!($935($7_1 | 0, 8192 | 0, $282($0_1 | 0) | 0 | 0) | 0)) {
               break label$12
              }
              $1063($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
              $1920($17_1 | 0, $1064($11_1 + 24 | 0 | 0) | 0 | 0);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == (3 | 0)) {
            break label$3
           }
          }
          label$13 : while (1) {
           if (!($281($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
            break label$3
           }
           if (!($935($7_1 | 0, 8192 | 0, $282($0_1 | 0) | 0 | 0) | 0)) {
            break label$3
           }
           $1063($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
           $1920($17_1 | 0, $1064($11_1 + 24 | 0 | 0) | 0 | 0);
           continue label$13;
          };
         }
         if (($122($15_1 | 0) | 0 | 0) == (0 - ($122($16_1 | 0) | 0) | 0 | 0)) {
          break label$3
         }
         label$14 : {
          label$15 : {
           if (!($122($15_1 | 0) | 0)) {
            break label$15
           }
           if ($122($16_1 | 0) | 0) {
            break label$14
           }
          }
          $4_1 = $122($15_1 | 0) | 0;
          $2_1 = $282($0_1 | 0) | 0;
          label$16 : {
           if (!$4_1) {
            break label$16
           }
           label$17 : {
            if (($2_1 & 255 | 0 | 0) != (HEAPU8[($770($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
             break label$17
            }
            $283($0_1 | 0) | 0;
            $2_1 = ($122($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 >> 0] = 1;
           break label$3;
          }
          if (($2_1 & 255 | 0 | 0) != (HEAPU8[($770($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$3
          }
          $283($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($122($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         label$18 : {
          if ((($282($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($770($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$18
          }
          $283($0_1 | 0) | 0;
          $2_1 = ($122($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
          break label$2;
         }
         label$19 : {
          if ((($282($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($770($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$19
          }
          $283($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($122($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$20 : {
         if ($10_1) {
          break label$20
         }
         if ($1_1 >>> 0 < 2 >>> 0) {
          break label$20
         }
         $2_1 = 0;
         if (($19_1 | (($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) | 0 | 0) != (1 | 0)) {
          break label$2
         }
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = $862($14_1 | 0) | 0;
        $4_1 = $1065($11_1 + 24 | 0 | 0, $11_1 + 16 | 0 | 0, 0 | 0) | 0;
        label$21 : {
         if (!$1_1) {
          break label$21
         }
         if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
          break label$21
         }
         label$22 : {
          label$23 : while (1) {
           HEAP32[($11_1 + 16 | 0) >> 2] = $863($14_1 | 0) | 0;
           if (!($1066($4_1 | 0, $11_1 + 16 | 0 | 0) | 0)) {
            break label$22
           }
           if (!($935($7_1 | 0, 8192 | 0, HEAP8[($1067($4_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
            break label$22
           }
           $1068($4_1 | 0) | 0;
           continue label$23;
          };
         }
         HEAP32[($11_1 + 16 | 0) >> 2] = $862($14_1 | 0) | 0;
         label$24 : {
          $4_1 = $1069($4_1 | 0, $11_1 + 16 | 0 | 0) | 0;
          if ($4_1 >>> 0 > ($122($17_1 | 0) | 0) >>> 0) {
           break label$24
          }
          HEAP32[($11_1 + 16 | 0) >> 2] = $863($17_1 | 0) | 0;
          if ($1071($1070($11_1 + 16 | 0 | 0, $4_1 | 0) | 0 | 0, $863($17_1 | 0) | 0 | 0, $862($14_1 | 0) | 0 | 0) | 0) {
           break label$21
          }
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $862($14_1 | 0) | 0;
         $1065($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
         HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          HEAP32[($11_1 + 8 | 0) >> 2] = $863($14_1 | 0) | 0;
          if (!($1066($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
           break label$25
          }
          if (!($281($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$25
          }
          if ((($282($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1067($11_1 + 16 | 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$25
          }
          $283($0_1 | 0) | 0;
          $1068($11_1 + 16 | 0 | 0) | 0;
          continue label$26;
         };
        }
        if (!$18_1) {
         break label$3
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = $863($14_1 | 0) | 0;
        if (!($1066($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$4;
       }
       label$27 : {
        label$28 : while (1) {
         if (!($281($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
          break label$27
         }
         label$29 : {
          label$30 : {
           $2_1 = $282($0_1 | 0) | 0;
           if (!($935($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
            break label$30
           }
           label$31 : {
            $3_1 = HEAP32[$9_1 >> 2] | 0;
            if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
             break label$31
            }
            $1072($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            $3_1 = HEAP32[$9_1 >> 2] | 0;
           }
           HEAP32[$9_1 >> 2] = $3_1 + 1 | 0;
           HEAP8[$3_1 >> 0] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          if (!($122($13_1 | 0) | 0)) {
           break label$27
          }
          if (!$4_1) {
           break label$27
          }
          if (($2_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 118 | 0) >> 0] | 0) & 255 | 0 | 0)) {
           break label$27
          }
          label$32 : {
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
            break label$32
           }
           $1073($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $283($0_1 | 0) | 0;
         continue label$28;
        };
       }
       label$33 : {
        $397_1 = $1061($12_1 | 0) | 0;
        $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        if (($397_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        if (!$4_1) {
         break label$33
        }
        label$34 : {
         if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
          break label$34
         }
         $1073($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
         $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if ($759($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$37
          }
          if ((($282($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 119 | 0) >> 0] | 0 | 0)) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$38 : while (1) {
         $283($0_1 | 0) | 0;
         if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$39 : {
          label$40 : {
           if ($759($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$40
           }
           if ($935($7_1 | 0, 2048 | 0, $282($0_1 | 0) | 0 | 0) | 0) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$4;
         }
         label$41 : {
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
           break label$41
          }
          $1072($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
         }
         $4_1 = $282($0_1 | 0) | 0;
         $2_1 = HEAP32[$9_1 >> 2] | 0;
         HEAP32[$9_1 >> 2] = $2_1 + 1 | 0;
         HEAP8[$2_1 >> 0] = $4_1;
         HEAP32[($11_1 + 36 | 0) >> 2] = (HEAP32[($11_1 + 36 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       $2_1 = $10_1;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1058($8_1 | 0) | 0 | 0)) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       $0_1 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       label$43 : while (1) {
        if ($4_1 >>> 0 >= ($122($10_1 | 0) | 0) >>> 0) {
         break label$42
        }
        label$44 : {
         label$45 : {
          if ($759($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$45
          }
          if ((($282($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($761($10_1 | 0, $4_1 | 0) | 0) >> 0] | 0 | 0)) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        $283($0_1 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        continue label$43;
       };
      }
      $0_1 = 1;
      if (($1061($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $0_1 = 0;
      HEAP32[($11_1 + 24 | 0) >> 2] = 0;
      $773($13_1 | 0, $1061($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 24 | 0 | 0);
      label$46 : {
       if (!(HEAP32[($11_1 + 24 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       break label$4;
      }
      $0_1 = 1;
     }
     $1911($17_1 | 0) | 0;
     $1911($16_1 | 0) | 0;
     $1911($15_1 | 0) | 0;
     $1911($14_1 | 0) | 0;
     $1911($13_1 | 0) | 0;
     $1074($12_1 | 0) | 0;
     global$0 = $11_1 + 560 | 0;
     return $0_1 | 0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1058($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1075($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1059($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $1060($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1082($0_1 | 0, $3_1 + 12 | 0 | 0, $622($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1061($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1083($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1062($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1084($1_1 | 0) | 0;
    $1085($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1086($10_1 | 0, $0_1 | 0);
    $132($8_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
    $1087($10_1 | 0, $0_1 | 0);
    $132($7_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
    HEAP8[$3_1 >> 0] = $1088($0_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $1089($0_1 | 0) | 0;
    $1090($10_1 | 0, $0_1 | 0);
    $132($5_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
    $1091($10_1 | 0, $0_1 | 0);
    $132($6_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
    $0_1 = $1092($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1093($1_1 | 0) | 0;
   $1094($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1095($10_1 | 0, $0_1 | 0);
   $132($8_1 | 0, $10_1 | 0) | 0;
   $1911($10_1 | 0) | 0;
   $1096($10_1 | 0, $0_1 | 0);
   $132($7_1 | 0, $10_1 | 0) | 0;
   $1911($10_1 | 0) | 0;
   HEAP8[$3_1 >> 0] = $1097($0_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $1098($0_1 | 0) | 0;
   $1099($10_1 | 0, $0_1 | 0);
   $132($5_1 | 0, $10_1 | 0) | 0;
   $1911($10_1 | 0) | 0;
   $1100($10_1 | 0, $0_1 | 0);
   $132($6_1 | 0, $10_1 | 0) | 0;
   $1911($10_1 | 0) | 0;
   $0_1 = $1101($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1063($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1102($0_1 | 0, (($286(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1064($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1065($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1103($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1066($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1104($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1067($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1068($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1069($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1105($0_1 | 0) | 0) - ($1103($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $1070($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1107($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1071($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1106($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1072($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1108($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1058($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($481() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $481() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1058($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (64 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1058($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $2006($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (64 | 0)) {
     break label$6
    }
    $1109($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 63;
   $4_1 = $885($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1110($0_1 | 0, $4_1 | 0) | 0;
   $889($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1058($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1058($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1841();
  abort();
 }
 
 function $1073($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1111($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1061($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($481() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $481() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1061($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (64 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1061($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $2006($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (64 | 0)) {
     break label$6
    }
    $1112($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 63;
   $4_1 = $1060($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1113($0_1 | 0, $4_1 | 0) | 0;
   $1074($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1061($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1061($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1841();
  abort();
 }
 
 function $1074($0_1) {
  $0_1 = $0_1 | 0;
  $1115($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1075($0_1) {
  $0_1 = $0_1 | 0;
  return $1677($0_1 | 0) | 0 | 0;
 }
 
 function $1076($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 64;
  $8_1 = $885($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $614($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $191($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1057($7_1 + 152 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $176($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break label$1
   }
   $1077($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $1920($6_1 | 0, $192($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $192($1_1 | 0, 48 | 0) | 0;
   $4_1 = $1058($8_1 | 0) | 0;
   $9_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $9_1 + -1 | 0;
   $3_1 = $4_1 >>> 0 > $2_1 >>> 0 ? $4_1 : $2_1;
   $1_1 = $1_1 & 255 | 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      if ($4_1 >>> 0 >= $2_1 >>> 0) {
       break label$5
      }
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $3_1 = $4_1;
     }
     $1078($6_1 | 0, $3_1 | 0, $9_1 | 0) | 0;
     break label$1;
    }
    $4_1 = $4_1 + 1 | 0;
    continue label$3;
   };
  }
  label$6 : {
   if (!($759($7_1 + 152 | 0 | 0, $7_1 + 144 | 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 152 | 0) >> 2] | 0;
  $750($7_1 + 16 | 0 | 0) | 0;
  $889($8_1 | 0) | 0;
  global$0 = $7_1 + 160 | 0;
  return $4_1 | 0;
 }
 
 function $1077($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1079($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($15($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $150($0_1 | 0) | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = 0;
    $156($2_1 | 0, $1_1 + 15 | 0 | 0);
    $1080($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $155($0_1 | 0) | 0;
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $156($2_1 | 0, $1_1 + 14 | 0 | 0);
   $154($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1078($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1081($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1079($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1080($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($17($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1081($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = $122($0_1 | 0) | 0;
  $5_1 = $768($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1678($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1679($169($1_1 | 0) | 0 | 0, $183($0_1 | 0) | 0 | 0, ($183($0_1 | 0) | 0) + ($122($0_1 | 0) | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1680($3_1 + 16 | 0 | 0, $1_1 | 0, $2_1 | 0, $149($0_1 | 0) | 0 | 0) | 0;
    $1918($0_1 | 0, $121($1_1 | 0) | 0 | 0, $122($1_1 | 0) | 0 | 0) | 0;
    $1911($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $1912($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($188($0_1 | 0) | 0) + $4_1 | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $156($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 1 | 0;
     $5_1 = $5_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $156($5_1 | 0, $3_1 + 15 | 0 | 0);
   $1681($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1082($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1688($0_1 | 0, $1687($1_1 | 0) | 0 | 0) | 0;
  $627($0_1 + 4 | 0 | 0, $626($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  return $1692($0_1 | 0) | 0 | 0;
 }
 
 function $1084($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22656 | 0) | 0 | 0;
 }
 
 function $1085($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1086($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1088($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1089($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1090($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1091($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1092($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1093($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22648 | 0) | 0 | 0;
 }
 
 function $1094($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1095($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1096($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1097($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1098($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1099($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1101($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1102($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $1103($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1105($0_1 | 0) | 0 | 0) == ($1103($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1105($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1106($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $864($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    if (!($1693($3_1 | 0, $865($3_1 + 24 | 0 | 0) | 0 | 0, $865($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $868($3_1 + 24 | 0 | 0) | 0;
    $868($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 ^ 1 | 0 | 0;
 }
 
 function $1107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1510($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1108($0_1) {
  $0_1 = $0_1 | 0;
  return $892($0_1 | 0) | 0 | 0;
 }
 
 function $1109($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($891($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($891($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $887($0_1 | 0, $1109($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($626($1108($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($892($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1111($0_1) {
  $0_1 = $0_1 | 0;
  return $1690($0_1 | 0) | 0 | 0;
 }
 
 function $1112($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1689($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1689($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1115($0_1 | 0, $1112($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($626($1111($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($1690($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1443($0_1 | 0, $1_1 | 0);
 }
 
 function $1115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1689($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1689($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1690($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1116($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 608 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 64;
  $1_1 = $922($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $614($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $808($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  label$1 : {
   if (!($1117($7_1 + 616 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $176($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 4681 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 4682 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 4683 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 4684 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 4678 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 4679 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 4680 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 4681 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 4674 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 4675 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 4676 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 4677 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $846($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 63;
   $8_1 = $885($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1118($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break label$3
     }
     $887($8_1 | 0, $2004((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1118($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1058($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $1058($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 191 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $1118($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($697($7_1 + 16 | 0 | 0, 3060 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $889($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($859($7_1 + 128 | 0 | 0, $1119($7_1 + 128 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 4 | 0;
      continue label$6;
     };
    }
    $1004($7_1 | 0);
    abort();
   }
   $1841();
   abort();
  }
  label$8 : {
   if (!($815($7_1 + 616 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 616 | 0) >> 2] | 0;
  $750($7_1 + 192 | 0 | 0) | 0;
  $925($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $4_1 | 0;
 }
 
 function $1117($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0, $387_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 96 | 0) >> 2] = 64;
  $12_1 = $1060($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 96 | 0 | 0) | 0;
  $1_1 = $1061($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $127($11_1 + 96 | 0 | 0) | 0;
  $14_1 = $1032($11_1 + 80 | 0 | 0) | 0;
  $15_1 = $1032($11_1 + 64 | 0 | 0) | 0;
  $16_1 = $1032($11_1 + 48 | 0 | 0) | 0;
  $17_1 = $1032($11_1 + 32 | 0 | 0) | 0;
  $1120($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 116 | 0 | 0, $11_1 + 112 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 28 | 0 | 0);
  HEAP32[$9_1 >> 2] = $1118($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $19_1 = $18_1 >>> 9 | 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == (4 | 0)) {
        break label$5
       }
       if (!($814($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
        break label$5
       }
       $4_1 = 0;
       $2_1 = $10_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0 | 0) {
            case 1:
             if (($1_1 | 0) == (3 | 0)) {
              break label$3
             }
             label$12 : {
              if (!($961($7_1 | 0, 8192 | 0, $816($0_1 | 0) | 0 | 0) | 0)) {
               break label$12
              }
              $1121($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
              $1934($17_1 | 0, $1122($11_1 + 16 | 0 | 0) | 0 | 0);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == (3 | 0)) {
            break label$3
           }
          }
          label$13 : while (1) {
           if (!($814($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
            break label$3
           }
           if (!($961($7_1 | 0, 8192 | 0, $816($0_1 | 0) | 0 | 0) | 0)) {
            break label$3
           }
           $1121($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
           $1934($17_1 | 0, $1122($11_1 + 16 | 0 | 0) | 0 | 0);
           continue label$13;
          };
         }
         if (($819($15_1 | 0) | 0 | 0) == (0 - ($819($16_1 | 0) | 0) | 0 | 0)) {
          break label$3
         }
         label$14 : {
          label$15 : {
           if (!($819($15_1 | 0) | 0)) {
            break label$15
           }
           if ($819($16_1 | 0) | 0) {
            break label$14
           }
          }
          $4_1 = $819($15_1 | 0) | 0;
          $2_1 = $816($0_1 | 0) | 0;
          label$16 : {
           if (!$4_1) {
            break label$16
           }
           label$17 : {
            if (($2_1 | 0) != (HEAP32[($1123($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
             break label$17
            }
            $818($0_1 | 0) | 0;
            $2_1 = ($819($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 >> 0] = 1;
           break label$3;
          }
          if (($2_1 | 0) != (HEAP32[($1123($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$3
          }
          $818($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($819($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         label$18 : {
          if (($816($0_1 | 0) | 0 | 0) != (HEAP32[($1123($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$18
          }
          $818($0_1 | 0) | 0;
          $2_1 = ($819($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
          break label$2;
         }
         label$19 : {
          if (($816($0_1 | 0) | 0 | 0) != (HEAP32[($1123($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$19
          }
          $818($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($819($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$20 : {
         if ($10_1) {
          break label$20
         }
         if ($1_1 >>> 0 < 2 >>> 0) {
          break label$20
         }
         $2_1 = 0;
         if (($19_1 | (($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) | 0 | 0) != (1 | 0)) {
          break label$2
         }
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = $896($14_1 | 0) | 0;
        $4_1 = $1124($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
        label$21 : {
         if (!$1_1) {
          break label$21
         }
         if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
          break label$21
         }
         label$22 : {
          label$23 : while (1) {
           HEAP32[($11_1 + 8 | 0) >> 2] = $897($14_1 | 0) | 0;
           if (!($1125($4_1 | 0, $11_1 + 8 | 0 | 0) | 0)) {
            break label$22
           }
           if (!($961($7_1 | 0, 8192 | 0, HEAP32[($1126($4_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
            break label$22
           }
           $1127($4_1 | 0) | 0;
           continue label$23;
          };
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $896($14_1 | 0) | 0;
         label$24 : {
          $4_1 = $1128($4_1 | 0, $11_1 + 8 | 0 | 0) | 0;
          if ($4_1 >>> 0 > ($819($17_1 | 0) | 0) >>> 0) {
           break label$24
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $897($17_1 | 0) | 0;
          if ($1130($1129($11_1 + 8 | 0 | 0, $4_1 | 0) | 0 | 0, $897($17_1 | 0) | 0 | 0, $896($14_1 | 0) | 0 | 0) | 0) {
           break label$21
          }
         }
         HEAP32[$11_1 >> 2] = $896($14_1 | 0) | 0;
         $1124($11_1 + 8 | 0 | 0, $11_1 | 0, 0 | 0) | 0;
         HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          HEAP32[$11_1 >> 2] = $897($14_1 | 0) | 0;
          if (!($1125($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
           break label$25
          }
          if (!($814($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$25
          }
          if (($816($0_1 | 0) | 0 | 0) != (HEAP32[($1126($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$25
          }
          $818($0_1 | 0) | 0;
          $1127($11_1 + 8 | 0 | 0) | 0;
          continue label$26;
         };
        }
        if (!$18_1) {
         break label$3
        }
        HEAP32[$11_1 >> 2] = $897($14_1 | 0) | 0;
        if (!($1125($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$4;
       }
       label$27 : {
        label$28 : while (1) {
         if (!($814($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
          break label$27
         }
         label$29 : {
          label$30 : {
           $2_1 = $816($0_1 | 0) | 0;
           if (!($961($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
            break label$30
           }
           label$31 : {
            $3_1 = HEAP32[$9_1 >> 2] | 0;
            if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
             break label$31
            }
            $1131($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            $3_1 = HEAP32[$9_1 >> 2] | 0;
           }
           HEAP32[$9_1 >> 2] = $3_1 + 4 | 0;
           HEAP32[$3_1 >> 2] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          if (!($122($13_1 | 0) | 0)) {
           break label$27
          }
          if (!$4_1) {
           break label$27
          }
          if (($2_1 | 0) != (HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0)) {
           break label$27
          }
          label$32 : {
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
            break label$32
           }
           $1073($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $818($0_1 | 0) | 0;
         continue label$28;
        };
       }
       label$33 : {
        $387_1 = $1061($12_1 | 0) | 0;
        $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        if (($387_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        if (!$4_1) {
         break label$33
        }
        label$34 : {
         if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
          break label$34
         }
         $1073($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
         $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if ($815($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$37
          }
          if (($816($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0)) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$38 : while (1) {
         $818($0_1 | 0) | 0;
         if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$39 : {
          label$40 : {
           if ($815($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$40
           }
           if ($961($7_1 | 0, 2048 | 0, $816($0_1 | 0) | 0 | 0) | 0) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$4;
         }
         label$41 : {
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
           break label$41
          }
          $1131($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
         }
         $4_1 = $816($0_1 | 0) | 0;
         $2_1 = HEAP32[$9_1 >> 2] | 0;
         HEAP32[$9_1 >> 2] = $2_1 + 4 | 0;
         HEAP32[$2_1 >> 2] = $4_1;
         HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 28 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       $2_1 = $10_1;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1118($8_1 | 0) | 0 | 0)) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       $0_1 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       label$43 : while (1) {
        if ($4_1 >>> 0 >= ($819($10_1 | 0) | 0) >>> 0) {
         break label$42
        }
        label$44 : {
         label$45 : {
          if ($815($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$45
          }
          if (($816($0_1 | 0) | 0 | 0) == (HEAP32[($820($10_1 | 0, $4_1 | 0) | 0) >> 2] | 0 | 0)) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        $818($0_1 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        continue label$43;
       };
      }
      $0_1 = 1;
      if (($1061($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $0_1 = 0;
      HEAP32[($11_1 + 16 | 0) >> 2] = 0;
      $773($13_1 | 0, $1061($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
      label$46 : {
       if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       break label$4;
      }
      $0_1 = 1;
     }
     $1925($17_1 | 0) | 0;
     $1925($16_1 | 0) | 0;
     $1925($15_1 | 0) | 0;
     $1925($14_1 | 0) | 0;
     $1911($13_1 | 0) | 0;
     $1074($12_1 | 0) | 0;
     global$0 = $11_1 + 560 | 0;
     return $0_1 | 0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1118($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1132($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1119($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $1120($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1143($1_1 | 0) | 0;
    $1144($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1145($10_1 | 0, $0_1 | 0);
    $1146($8_1 | 0, $10_1 | 0) | 0;
    $1925($10_1 | 0) | 0;
    $1147($10_1 | 0, $0_1 | 0);
    $1146($7_1 | 0, $10_1 | 0) | 0;
    $1925($10_1 | 0) | 0;
    HEAP32[$3_1 >> 2] = $1148($0_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $1149($0_1 | 0) | 0;
    $1150($10_1 | 0, $0_1 | 0);
    $132($5_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
    $1151($10_1 | 0, $0_1 | 0);
    $1146($6_1 | 0, $10_1 | 0) | 0;
    $1925($10_1 | 0) | 0;
    $0_1 = $1152($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1153($1_1 | 0) | 0;
   $1154($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1155($10_1 | 0, $0_1 | 0);
   $1146($8_1 | 0, $10_1 | 0) | 0;
   $1925($10_1 | 0) | 0;
   $1156($10_1 | 0, $0_1 | 0);
   $1146($7_1 | 0, $10_1 | 0) | 0;
   $1925($10_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $1157($0_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $1158($0_1 | 0) | 0;
   $1159($10_1 | 0, $0_1 | 0);
   $132($5_1 | 0, $10_1 | 0) | 0;
   $1911($10_1 | 0) | 0;
   $1160($10_1 | 0, $0_1 | 0);
   $1146($6_1 | 0, $10_1 | 0) | 0;
   $1925($10_1 | 0) | 0;
   $0_1 = $1161($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1121($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1162($0_1 | 0, $850(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1122($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($904($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1124($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1163($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1125($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1164($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1126($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1127($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1165($0_1 | 0) | 0) - ($1163($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1167($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1166($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1131($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1168($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1118($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($481() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $481() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1118($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (64 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1118($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $2006($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (64 | 0)) {
     break label$6
    }
    $1169($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 63;
   $4_1 = $922($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1170($0_1 | 0, $4_1 | 0) | 0;
   $925($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1118($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1118($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1841();
  abort();
 }
 
 function $1132($0_1) {
  $0_1 = $0_1 | 0;
  return $1694($0_1 | 0) | 0 | 0;
 }
 
 function $1133($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 432 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 64;
  $8_1 = $922($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $614($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $808($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1117($7_1 + 440 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $176($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$1
   }
   $1134($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $1934($6_1 | 0, $913($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $913($1_1 | 0, 48 | 0) | 0;
   $4_1 = $1118($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $3_1 + -4 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($4_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $4_1 = $4_1 + 4 | 0;
     continue label$4;
    };
   }
   $1135($6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($815($7_1 + 440 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
  $750($7_1 + 16 | 0 | 0) | 0;
  $925($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $4_1 | 0;
 }
 
 function $1134($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1136($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($968($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $1137($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $1138($2_1 | 0, $1_1 + 12 | 0 | 0);
    $1139($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $1140($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $1138($2_1 | 0, $1_1 + 8 | 0 | 0);
   $1141($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1135($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1142($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1136($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1137($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1053($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $1139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1053($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1140($0_1) {
  $0_1 = $0_1 | 0;
  return $1632($1053($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($1053($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $1142($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $819($0_1 | 0) | 0;
  $5_1 = $1480($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1479($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1695($1638($1_1 | 0) | 0 | 0, $917($0_1 | 0) | 0 | 0, ($917($0_1 | 0) | 0) + (($819($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1696($3_1 | 0, $1_1 | 0, $2_1 | 0, $1514($0_1 | 0) | 0 | 0) | 0;
    $1932($0_1 | 0, $965($1_1 | 0) | 0 | 0, $819($1_1 | 0) | 0 | 0) | 0;
    $1925($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $1926($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($904($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1138($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[$3_1 >> 2] = 0;
   $1138($5_1 | 0, $3_1 | 0);
   $1482($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1143($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22672 | 0) | 0 | 0;
 }
 
 function $1144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1171($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1148($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1149($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1152($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1153($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22664 | 0) | 0 | 0;
 }
 
 function $1154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1155($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1157($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1158($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1161($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1162($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1163($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1165($0_1 | 0) | 0 | 0) == ($1163($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1165($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1166($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $898($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    if (!($1701($3_1 | 0, $899($3_1 + 24 | 0 | 0) | 0 | 0, $899($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $902($3_1 + 24 | 0 | 0) | 0;
    $902($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 ^ 1 | 0 | 0;
 }
 
 function $1167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1511($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1168($0_1) {
  $0_1 = $0_1 | 0;
  return $928($0_1 | 0) | 0 | 0;
 }
 
 function $1169($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($927($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($927($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $923($0_1 | 0, $1169($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($626($1168($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($928($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!($968($0_1 | 0) | 0)) {
    break label$1
   }
   $1512($1514($0_1 | 0) | 0 | 0, $1137($0_1 | 0) | 0 | 0, $1516($0_1 | 0) | 0 | 0);
  }
  $1648($0_1 | 0, $1_1 | 0);
  $3_1 = $1053($1_1 | 0) | 0;
  $0_1 = $1053($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1141($1_1 | 0, 0 | 0);
  $0_1 = $1140($1_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1138($0_1 | 0, $2_1 + 12 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1172($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 464 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 348 | 0) >> 2] = $7_1 + 352 | 0;
  $8_1 = $654($7_1 + 352 | 0 | 0, 100 | 0, 3054 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 63;
  $9_1 = 0;
  $10_1 = $885($7_1 + 232 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 63;
  $11_1 = $885($7_1 + 224 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  $12_1 = $7_1 + 240 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $802() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $886($7_1 + 348 | 0 | 0, $8_1 | 0, 3054 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break label$1
    }
    $887($10_1 | 0, HEAP32[($7_1 + 348 | 0) >> 2] | 0 | 0);
    $887($11_1 | 0, $2004($8_1 | 0) | 0 | 0);
    if ($1173($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1058($11_1 | 0) | 0;
   }
   $614($7_1 + 216 | 0 | 0, $3_1 | 0);
   $13_1 = $191($7_1 + 216 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
   $801($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 348 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $127($7_1 + 192 | 0 | 0) | 0;
   $14_1 = $127($7_1 + 176 | 0 | 0) | 0;
   $16_1 = $127($7_1 + 160 | 0 | 0) | 0;
   $1174($2_1 | 0, $9_1 | 0, $7_1 + 216 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 207 | 0 | 0, $7_1 + 206 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 63;
   $17_1 = $885($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (((($8_1 - $2_1 | 0) << 1 | 0 | 1 | 0) + ($122($16_1 | 0) | 0) | 0) + ($122($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0;
     break label$4;
    }
    $18_1 = ((($122($16_1 | 0) | 0) + ($122($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $887($17_1 | 0, $2004($18_1 | 0) | 0 | 0);
    $2_1 = $1058($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1175($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $176($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 208 | 0 | 0, HEAP8[($7_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 206 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $178($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $889($17_1 | 0) | 0;
   $1911($16_1 | 0) | 0;
   $1911($14_1 | 0) | 0;
   $1911($15_1 | 0) | 0;
   $750($7_1 + 216 | 0 | 0) | 0;
   $889($11_1 | 0) | 0;
   $889($10_1 | 0) | 0;
   global$0 = $7_1 + 464 | 0;
   return $8_1 | 0;
  }
  $1841();
  abort();
 }
 
 function $1173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1176($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1174($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1084($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1085($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1086($10_1 | 0, $0_1 | 0);
      $132($8_1 | 0, $10_1 | 0) | 0;
      $1911($10_1 | 0) | 0;
      break label$3;
     }
     $1177($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1087($10_1 | 0, $0_1 | 0);
     $132($8_1 | 0, $10_1 | 0) | 0;
     $1911($10_1 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $1088($0_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $1089($0_1 | 0) | 0;
    $1090($10_1 | 0, $0_1 | 0);
    $132($6_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
    $1091($10_1 | 0, $0_1 | 0);
    $132($7_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
    $0_1 = $1092($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1093($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1094($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1095($10_1 | 0, $0_1 | 0);
     $132($8_1 | 0, $10_1 | 0) | 0;
     $1911($10_1 | 0) | 0;
     break label$5;
    }
    $1178($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1096($10_1 | 0, $0_1 | 0);
    $132($8_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
   }
   HEAP8[$4_1 >> 0] = $1097($0_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $1098($0_1 | 0) | 0;
   $1099($10_1 | 0, $0_1 | 0);
   $132($6_1 | 0, $10_1 | 0) | 0;
   $1911($10_1 | 0) | 0;
   $1100($10_1 | 0, $0_1 | 0);
   $132($7_1 | 0, $10_1 | 0) | 0;
   $1911($10_1 | 0) | 0;
   $0_1 = $1101($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1175($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $19_1 = 0, $18_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($17_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($122($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 8 | 0) >> 2] = $1179($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1182($1180($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $1181($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($18_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAP8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $192($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 3:
      if ($655($13_1 | 0) | 0) {
       break label$6
      }
      $18_1 = HEAPU8[($761($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 2:
      if ($655($12_1 | 0) | 0) {
       break label$6
      }
      if (!$16_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $1182($1179($12_1 | 0) | 0 | 0, $1181($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $7_1 ? $4_1 + 1 | 0 : $4_1;
    $18_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($935($6_1 | 0, 2048 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
       break label$12
      }
      $18_1 = $18_1 + 1 | 0;
      continue label$13;
     };
    }
    $19_1 = $14_1;
    label$14 : {
     if (($19_1 | 0) < (1 | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : while (1) {
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       if (($19_1 | 0) < (1 | 0)) {
        break label$15
       }
       $18_1 = $18_1 + -1 | 0;
       $21_1 = HEAPU8[$18_1 >> 0] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
       HEAP8[$22_1 >> 0] = $21_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if (($19_1 | 0) >= (1 | 0)) {
        break label$18
       }
       $22_1 = 0;
       break label$17;
      }
      $22_1 = $192($6_1 | 0, 48 | 0) | 0;
     }
     label$19 : {
      label$20 : while (1) {
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP8[$21_1 >> 0] = $22_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$20;
      };
     }
     HEAP8[$21_1 >> 0] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $18_1 = $192($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($655($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $475() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($761($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $21_1 = 0;
     $24_1 = 0;
     label$25 : while (1) {
      $19_1 = $21_1;
      if (($18_1 | 0) == ($4_1 | 0)) {
       break label$21
      }
      label$26 : {
       label$27 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break label$27
        }
        $21_1 = $19_1 + 1 | 0;
        break label$26;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       HEAP8[$21_1 >> 0] = $10_1;
       label$28 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($122($11_1 | 0) | 0) >>> 0) {
         break label$28
        }
        $21_1 = 1;
        $23_1 = $19_1;
        break label$26;
       }
       label$29 : {
        if ((HEAPU8[($761($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($457() | 0) & 255 | 0 | 0)) {
         break label$29
        }
        $21_1 = 1;
        $23_1 = $475() | 0;
        break label$26;
       }
       $23_1 = HEAP8[($761($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
       $21_1 = 1;
      }
      $18_1 = $18_1 + -1 | 0;
      $19_1 = HEAPU8[$18_1 >> 0] | 0;
      $22_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
      HEAP8[$22_1 >> 0] = $19_1;
      continue label$25;
     };
    }
    $878($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1176($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1075($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1179($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1198($1_1 + 8 | 0 | 0, $170($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1180($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1199($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1181($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1198($1_1 + 8 | 0 | 0, ($170($0_1 | 0) | 0) + ($122($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1197($1196($0_1 | 0) | 0 | 0, $1196($1_1 | 0) | 0 | 0, $996($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1183($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  $614($6_1 + 184 | 0 | 0, $3_1 | 0);
  $7_1 = $191($6_1 + 184 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($122($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAPU8[($761($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($192($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $127($6_1 + 160 | 0 | 0) | 0;
  $10_1 = $127($6_1 + 144 | 0 | 0) | 0;
  $11_1 = $127($6_1 + 128 | 0 | 0) | 0;
  $1174($2_1 | 0, $8_1 | 0, $6_1 + 184 | 0 | 0, $6_1 + 176 | 0 | 0, $6_1 + 175 | 0 | 0, $6_1 + 174 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 63;
  $12_1 = $885($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($122($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $122($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (((($122($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($122($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ((($122($11_1 | 0) | 0) + ($122($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $887($12_1 | 0, $2004($13_1 | 0) | 0 | 0);
   $2_1 = $1058($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1841();
   abort();
  }
  $1175($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $176($3_1 | 0) | 0 | 0, $121($5_1 | 0) | 0 | 0, ($121($5_1 | 0) | 0) + ($122($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 175 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 174 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $178($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $889($12_1 | 0) | 0;
  $1911($11_1 | 0) | 0;
  $1911($10_1 | 0) | 0;
  $1911($9_1 | 0) | 0;
  $750($6_1 + 184 | 0 | 0) | 0;
  global$0 = $6_1 + 192 | 0;
  return $5_1 | 0;
 }
 
 function $1184($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 1072 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 956 | 0) >> 2] = $7_1 + 960 | 0;
  $8_1 = $654($7_1 + 960 | 0 | 0, 100 | 0, 3054 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 63;
  $9_1 = 0;
  $10_1 = $885($7_1 + 536 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 63;
  $11_1 = $922($7_1 + 528 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  $12_1 = $7_1 + 544 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $802() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $886($7_1 + 956 | 0 | 0, $8_1 | 0, 3054 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break label$1
    }
    $887($10_1 | 0, HEAP32[($7_1 + 956 | 0) >> 2] | 0 | 0);
    $923($11_1 | 0, $2004($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($1185($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1118($11_1 | 0) | 0;
   }
   $614($7_1 + 520 | 0 | 0, $3_1 | 0);
   $13_1 = $808($7_1 + 520 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
   $846($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 956 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $127($7_1 + 488 | 0 | 0) | 0;
   $14_1 = $1032($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $1032($7_1 + 456 | 0 | 0) | 0;
   $1186($2_1 | 0, $9_1 | 0, $7_1 + 520 | 0 | 0, $7_1 + 512 | 0 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 452 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 63;
   $17_1 = $922($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (((($8_1 - $2_1 | 0) << 1 | 0 | 1 | 0) + ($819($16_1 | 0) | 0) | 0) + ($819($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0;
     break label$4;
    }
    $18_1 = ((($819($16_1 | 0) | 0) + ($819($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $923($17_1 | 0, $2004($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $1118($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1187($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $176($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 512 | 0 | 0, HEAP32[($7_1 + 508 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 504 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0);
   $8_1 = $912($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $925($17_1 | 0) | 0;
   $1925($16_1 | 0) | 0;
   $1925($14_1 | 0) | 0;
   $1911($15_1 | 0) | 0;
   $750($7_1 + 520 | 0 | 0) | 0;
   $925($11_1 | 0) | 0;
   $889($10_1 | 0) | 0;
   global$0 = $7_1 + 1072 | 0;
   return $8_1 | 0;
  }
  $1841();
  abort();
 }
 
 function $1185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1188($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1186($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1143($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1144($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1145($10_1 | 0, $0_1 | 0);
      $1146($8_1 | 0, $10_1 | 0) | 0;
      $1925($10_1 | 0) | 0;
      break label$3;
     }
     $1189($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1147($10_1 | 0, $0_1 | 0);
     $1146($8_1 | 0, $10_1 | 0) | 0;
     $1925($10_1 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $1148($0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $1149($0_1 | 0) | 0;
    $1150($10_1 | 0, $0_1 | 0);
    $132($6_1 | 0, $10_1 | 0) | 0;
    $1911($10_1 | 0) | 0;
    $1151($10_1 | 0, $0_1 | 0);
    $1146($7_1 | 0, $10_1 | 0) | 0;
    $1925($10_1 | 0) | 0;
    $0_1 = $1152($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1153($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1154($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1155($10_1 | 0, $0_1 | 0);
     $1146($8_1 | 0, $10_1 | 0) | 0;
     $1925($10_1 | 0) | 0;
     break label$5;
    }
    $1190($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1156($10_1 | 0, $0_1 | 0);
    $1146($8_1 | 0, $10_1 | 0) | 0;
    $1925($10_1 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = $1157($0_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $1158($0_1 | 0) | 0;
   $1159($10_1 | 0, $0_1 | 0);
   $132($6_1 | 0, $10_1 | 0) | 0;
   $1911($10_1 | 0) | 0;
   $1160($10_1 | 0, $0_1 | 0);
   $1146($7_1 | 0, $10_1 | 0) | 0;
   $1925($10_1 | 0) | 0;
   $0_1 = $1161($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1187($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($17_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($819($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 8 | 0) >> 2] = $1191($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1194($1192($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $1193($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($18_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAP8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $913($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $18_1;
      break label$6;
     case 3:
      if ($821($13_1 | 0) | 0) {
       break label$6
      }
      $18_1 = HEAP32[($820($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $18_1;
      break label$6;
     case 2:
      if ($821($12_1 | 0) | 0) {
       break label$6
      }
      if (!$16_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $1194($1191($12_1 | 0) | 0 | 0, $1193($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $7_1 ? $4_1 + 4 | 0 : $4_1;
    $18_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($961($6_1 | 0, 2048 | 0, HEAP32[$18_1 >> 2] | 0 | 0) | 0)) {
       break label$12
      }
      $18_1 = $18_1 + 4 | 0;
      continue label$13;
     };
    }
    $19_1 = $14_1;
    label$14 : {
     if (($19_1 | 0) < (1 | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : while (1) {
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       if (($19_1 | 0) < (1 | 0)) {
        break label$15
       }
       $18_1 = $18_1 + -4 | 0;
       $21_1 = HEAP32[$18_1 >> 2] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
       HEAP32[$22_1 >> 2] = $21_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if (($19_1 | 0) >= (1 | 0)) {
        break label$18
       }
       $23_1 = 0;
       break label$17;
      }
      $23_1 = $913($6_1 | 0, 48 | 0) | 0;
     }
     $21_1 = HEAP32[$2_1 >> 2] | 0;
     label$19 : {
      label$20 : while (1) {
       $22_1 = $21_1 + 4 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP32[$21_1 >> 2] = $23_1;
       $19_1 = $19_1 + -1 | 0;
       $21_1 = $22_1;
       continue label$20;
      };
     }
     HEAP32[$2_1 >> 2] = $22_1;
     HEAP32[$21_1 >> 2] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $19_1 = $913($6_1 | 0, 48 | 0) | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $21_1 + 4 | 0;
      HEAP32[$2_1 >> 2] = $18_1;
      HEAP32[$21_1 >> 2] = $19_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($655($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $475() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($761($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $21_1 = 0;
     $24_1 = 0;
     label$25 : {
      label$26 : while (1) {
       $19_1 = $21_1;
       if (($18_1 | 0) == ($4_1 | 0)) {
        break label$25
       }
       label$27 : {
        label$28 : {
         if (($19_1 | 0) == ($23_1 | 0)) {
          break label$28
         }
         $21_1 = $19_1 + 1 | 0;
         break label$27;
        }
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
        HEAP32[$21_1 >> 2] = $10_1;
        label$29 : {
         $24_1 = $24_1 + 1 | 0;
         if ($24_1 >>> 0 < ($122($11_1 | 0) | 0) >>> 0) {
          break label$29
         }
         $21_1 = 1;
         $23_1 = $19_1;
         break label$27;
        }
        label$30 : {
         if ((HEAPU8[($761($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($457() | 0) & 255 | 0 | 0)) {
          break label$30
         }
         $21_1 = 1;
         $23_1 = $475() | 0;
         break label$27;
        }
        $23_1 = HEAP8[($761($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
        $21_1 = 1;
       }
       $18_1 = $18_1 + -4 | 0;
       $19_1 = HEAP32[$18_1 >> 2] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
       HEAP32[$22_1 >> 2] = $19_1;
       continue label$26;
      };
     }
     $18_1 = HEAP32[$2_1 >> 2] | 0;
    }
    $914($20_1 | 0, $18_1 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1188($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1132($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1191($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1202($1_1 + 8 | 0 | 0, $966($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1203($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1193($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1202($1_1 + 8 | 0 | 0, ($966($0_1 | 0) | 0) + (($819($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1194($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1201($1200($0_1 | 0) | 0 | 0, $1200($1_1 | 0) | 0 | 0, $1005($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1195($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 496 | 0;
  global$0 = $6_1;
  $614($6_1 + 488 | 0 | 0, $3_1 | 0);
  $7_1 = $808($6_1 + 488 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($819($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAP32[($820($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($913($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $127($6_1 + 456 | 0 | 0) | 0;
  $10_1 = $1032($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $1032($6_1 + 424 | 0 | 0) | 0;
  $1186($2_1 | 0, $8_1 | 0, $6_1 + 488 | 0 | 0, $6_1 + 480 | 0 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 420 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 63;
  $12_1 = $922($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($819($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $819($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 420 | 0) >> 2] | 0;
    $13_1 = (((($819($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($819($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ((($819($11_1 | 0) | 0) + ($819($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $923($12_1 | 0, $2004($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $1118($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1841();
   abort();
  }
  $1187($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $176($3_1 | 0) | 0 | 0, $965($5_1 | 0) | 0 | 0, ($965($5_1 | 0) | 0) + (($819($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 480 | 0 | 0, HEAP32[($6_1 + 476 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 472 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0);
  $5_1 = $912($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $925($12_1 | 0) | 0;
  $1925($11_1 | 0) | 0;
  $1925($10_1 | 0) | 0;
  $1911($9_1 | 0) | 0;
  $750($6_1 + 488 | 0 | 0) | 0;
  global$0 = $6_1 + 496 | 0;
  return $5_1 | 0;
 }
 
 function $1196($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1105($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1197($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $1_1 - $0_1 | 0;
   if (!$1_1) {
    break label$1
   }
   $2016($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 + $1_1 | 0 | 0;
 }
 
 function $1198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1165($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1201($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $1_1 - $0_1 | 0;
   if (!$1_1) {
    break label$1
   }
   $2016($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 + $1_1 | 0 | 0;
 }
 
 function $1202($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1203($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $1205($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $11($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $1206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1207($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $1208($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1048($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $1209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1210($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12816;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($802() | 0 | 0)) {
    break label$1
   }
   $698(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12744;
  $1_1 = $1213($0_1 + 16 | 0 | 0, 30 | 0) | 0;
  $8($0_1 + 192 | 0 | 0, 4064 | 0) | 0;
  $1214($1_1 | 0);
  $1215();
  $1216($0_1 | 0, 24032 | 0);
  $1217();
  $1218($0_1 | 0, 24040 | 0);
  $1219();
  $1220($0_1 | 0, 24048 | 0);
  $1221();
  $1222($0_1 | 0, 24064 | 0);
  $1223();
  $1224($0_1 | 0, 24072 | 0);
  $1225();
  $1226($0_1 | 0, 24080 | 0);
  $1227();
  $1228($0_1 | 0, 24096 | 0);
  $1229();
  $1230($0_1 | 0, 24104 | 0);
  $1231();
  $1232($0_1 | 0, 24112 | 0);
  $1233();
  $1234($0_1 | 0, 24144 | 0);
  $1235();
  $1236($0_1 | 0, 24176 | 0);
  $1237();
  $1238($0_1 | 0, 24184 | 0);
  $1239();
  $1240($0_1 | 0, 24192 | 0);
  $1241();
  $1242($0_1 | 0, 24200 | 0);
  $1243();
  $1244($0_1 | 0, 24208 | 0);
  $1245();
  $1246($0_1 | 0, 24216 | 0);
  $1247();
  $1248($0_1 | 0, 24224 | 0);
  $1249();
  $1250($0_1 | 0, 24232 | 0);
  $1251();
  $1252($0_1 | 0, 24240 | 0);
  $1253();
  $1254($0_1 | 0, 24248 | 0);
  $1255();
  $1256($0_1 | 0, 24256 | 0);
  $1257();
  $1258($0_1 | 0, 24264 | 0);
  $1259();
  $1260($0_1 | 0, 24272 | 0);
  $1261();
  $1262($0_1 | 0, 24288 | 0);
  $1263();
  $1264($0_1 | 0, 24304 | 0);
  $1265();
  $1266($0_1 | 0, 24320 | 0);
  $1267();
  $1268($0_1 | 0, 24336 | 0);
  $1269();
  $1270($0_1 | 0, 24344 | 0);
  return $0_1 | 0;
 }
 
 function $1212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1271($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13192;
  return $0_1 | 0;
 }
 
 function $1213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1272($0_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1273($0_1 | 0, $1_1 | 0);
   $1274($0_1 | 0, $1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1214($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1275($0_1 | 0) | 0;
  $1276($0_1 | 0);
  $1277($0_1 | 0, $1_1 | 0);
  $1278($0_1 | 0);
 }
 
 function $1215() {
  $1281(24032 | 0, 1 | 0) | 0;
 }
 
 function $1216($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22568 | 0) | 0 | 0);
 }
 
 function $1217() {
  $1282(24040 | 0, 1 | 0) | 0;
 }
 
 function $1218($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22576 | 0) | 0 | 0);
 }
 
 function $1219() {
  $1283(24048 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $1220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22772 | 0) | 0 | 0);
 }
 
 function $1221() {
  $1284(24064 | 0, 1 | 0) | 0;
 }
 
 function $1222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22764 | 0) | 0 | 0);
 }
 
 function $1223() {
  $1285(24072 | 0, 1 | 0) | 0;
 }
 
 function $1224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22780 | 0) | 0 | 0);
 }
 
 function $1225() {
  $1286(24080 | 0, 1 | 0) | 0;
 }
 
 function $1226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22788 | 0) | 0 | 0);
 }
 
 function $1227() {
  $1287(24096 | 0, 1 | 0) | 0;
 }
 
 function $1228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22796 | 0) | 0 | 0);
 }
 
 function $1229() {
  $1288(24104 | 0, 1 | 0) | 0;
 }
 
 function $1230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22804 | 0) | 0 | 0);
 }
 
 function $1231() {
  $1289(24112 | 0, 1 | 0) | 0;
 }
 
 function $1232($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22812 | 0) | 0 | 0);
 }
 
 function $1233() {
  $1290(24144 | 0, 1 | 0) | 0;
 }
 
 function $1234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22820 | 0) | 0 | 0);
 }
 
 function $1235() {
  $1291(24176 | 0, 1 | 0) | 0;
 }
 
 function $1236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22584 | 0) | 0 | 0);
 }
 
 function $1237() {
  $1292(24184 | 0, 1 | 0) | 0;
 }
 
 function $1238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22592 | 0) | 0 | 0);
 }
 
 function $1239() {
  $1293(24192 | 0, 1 | 0) | 0;
 }
 
 function $1240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22600 | 0) | 0 | 0);
 }
 
 function $1241() {
  $1294(24200 | 0, 1 | 0) | 0;
 }
 
 function $1242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22608 | 0) | 0 | 0);
 }
 
 function $1243() {
  $1295(24208 | 0, 1 | 0) | 0;
 }
 
 function $1244($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22648 | 0) | 0 | 0);
 }
 
 function $1245() {
  $1296(24216 | 0, 1 | 0) | 0;
 }
 
 function $1246($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22656 | 0) | 0 | 0);
 }
 
 function $1247() {
  $1297(24224 | 0, 1 | 0) | 0;
 }
 
 function $1248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22664 | 0) | 0 | 0);
 }
 
 function $1249() {
  $1298(24232 | 0, 1 | 0) | 0;
 }
 
 function $1250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22672 | 0) | 0 | 0);
 }
 
 function $1251() {
  $1299(24240 | 0, 1 | 0) | 0;
 }
 
 function $1252($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22680 | 0) | 0 | 0);
 }
 
 function $1253() {
  $1300(24248 | 0, 1 | 0) | 0;
 }
 
 function $1254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22688 | 0) | 0 | 0);
 }
 
 function $1255() {
  $1301(24256 | 0, 1 | 0) | 0;
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22696 | 0) | 0 | 0);
 }
 
 function $1257() {
  $1302(24264 | 0, 1 | 0) | 0;
 }
 
 function $1258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22704 | 0) | 0 | 0);
 }
 
 function $1259() {
  $1303(24272 | 0, 1 | 0) | 0;
 }
 
 function $1260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22616 | 0) | 0 | 0);
 }
 
 function $1261() {
  $1304(24288 | 0, 1 | 0) | 0;
 }
 
 function $1262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22624 | 0) | 0 | 0);
 }
 
 function $1263() {
  $1305(24304 | 0, 1 | 0) | 0;
 }
 
 function $1264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22632 | 0) | 0 | 0);
 }
 
 function $1265() {
  $1306(24320 | 0, 1 | 0) | 0;
 }
 
 function $1266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22640 | 0) | 0 | 0);
 }
 
 function $1267() {
  $1307(24336 | 0, 1 | 0) | 0;
 }
 
 function $1268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22712 | 0) | 0 | 0);
 }
 
 function $1269() {
  $1308(24344 | 0, 1 | 0) | 0;
 }
 
 function $1270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1280($0_1 | 0, $1_1 | 0, $1279(22720 | 0) | 0 | 0);
 }
 
 function $1271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 12432 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1272($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1520($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  $1521($0_1 + 16 | 0 | 0, $1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (($1522($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $723($0_1 | 0);
   abort();
  }
  $2_1 = $1524($1523($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1525($0_1 | 0) | 0) >> 2] = $2_1 + ($1_1 << 2 | 0) | 0;
  $1526($0_1 | 0, 0 | 0);
 }
 
 function $1274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1527($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($4_1 | 0)) {
     break label$2
    }
    $1528($3_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return;
   }
   $1530($1523($0_1 | 0) | 0 | 0, $1529($1_1 | 0) | 0 | 0);
   $1_1 = $1_1 + 4 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   continue label$1;
  };
 }
 
 function $1275($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1276($0_1) {
  $0_1 = $0_1 | 0;
  $1569($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1542($0_1 | 0, $1540($0_1 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + (($1541($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + (($1275($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1278($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1279($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 65;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1342($0_1 | 0, $1341($1_1 + 16 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 32 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $1280($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1311($1_1 | 0);
  $4_1 = $1315($3_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   $1_1 = $0_1 + 16 | 0;
   if (($1275($1_1 | 0) | 0) >>> 0 > $2_1 >>> 0) {
    break label$1
   }
   $1318($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($1310($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break label$2
   }
   $1319(HEAP32[($1310($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $1320($4_1 | 0) | 0;
  HEAP32[($1310($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $1316($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14068;
  return $0_1 | 0;
 }
 
 function $1282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14100;
  return $0_1 | 0;
 }
 
 function $1283($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1212($0_1 | 0, $3_1 | 0) | 0;
  $1366($0_1 | 0) | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 12764;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $1352() | 0;
  }
  return $0_1 | 0;
 }
 
 function $1284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1366($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13248;
  return $0_1 | 0;
 }
 
 function $1285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1387($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13396;
  return $0_1 | 0;
 }
 
 function $1286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1387($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12816;
  HEAP32[($0_1 + 8 | 0) >> 2] = $802() | 0;
  return $0_1 | 0;
 }
 
 function $1287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1387($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13544;
  return $0_1 | 0;
 }
 
 function $1288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1387($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13660;
  return $0_1 | 0;
 }
 
 function $1289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$0_1 >> 2] = 12864;
  $127($0_1 + 12 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1290($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 46;
  HEAP32[($0_1 + 12 | 0) >> 2] = 44;
  HEAP32[$0_1 >> 2] = 12904;
  $127($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1291($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14132;
  return $0_1 | 0;
 }
 
 function $1292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14376;
  return $0_1 | 0;
 }
 
 function $1293($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14588;
  return $0_1 | 0;
 }
 
 function $1294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14820;
  return $0_1 | 0;
 }
 
 function $1295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1573($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15804;
  return $0_1 | 0;
 }
 
 function $1296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1573($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15952;
  return $0_1 | 0;
 }
 
 function $1297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1573($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16068;
  return $0_1 | 0;
 }
 
 function $1298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1573($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16184;
  return $0_1 | 0;
 }
 
 function $1299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1574($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16300;
  return $0_1 | 0;
 }
 
 function $1300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1575($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16464;
  return $0_1 | 0;
 }
 
 function $1301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1576($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16628;
  return $0_1 | 0;
 }
 
 function $1302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1577($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16792;
  return $0_1 | 0;
 }
 
 function $1303($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1578($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15020;
  HEAP32[$1_1 >> 2] = 15068;
  return $0_1 | 0;
 }
 
 function $1304($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1579($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15284;
  HEAP32[$1_1 >> 2] = 15332;
  return $0_1 | 0;
 }
 
 function $1305($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1580($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15520;
  return $0_1 | 0;
 }
 
 function $1306($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1580($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15676;
  return $0_1 | 0;
 }
 
 function $1307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1581($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16956;
  return $0_1 | 0;
 }
 
 function $1308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1212($0_1 | 0, $1_1 | 0) | 0;
  $1581($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 17076;
  return $0_1 | 0;
 }
 
 function $1309() {
  label$1 : {
   if ((HEAPU8[(0 + 22744 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22744 | 0) | 0)) {
    break label$1
   }
   $1312() | 0;
   HEAP32[(0 + 22740 | 0) >> 2] = 22736;
   $1961(22744 | 0);
  }
  return HEAP32[(0 + 22740 | 0) >> 2] | 0 | 0;
 }
 
 function $1310($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1311($0_1) {
  $0_1 = $0_1 | 0;
  $1313($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $1312() {
  $1334();
  HEAP32[(0 + 22736 | 0) >> 2] = 24352;
  return 22736 | 0;
 }
 
 function $1313($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1331($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $1332();
   abort();
  }
  return HEAP32[($1333($0_1 + 16 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1317($0_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1316($0_1) {
  $0_1 = $0_1 | 0;
  $1321($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $1317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1585($0_1 | 0, $1584($1_1 | 0) | 0 | 0) | 0;
  $139($2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1318($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $1275($0_1 | 0) | 0;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1328($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  label$2 : {
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$2
   }
   $1329($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $1319($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $1324($0_1 + 4 | 0 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  }
  return ($1_1 | 0) == (-1 | 0) | 0;
 }
 
 function $1320($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1330($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1330($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1321($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1330($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1330($0_1 | 0) | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1586($1_1 | 0);
  }
 }
 
 function $1322($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 12744;
  $1_1 = $0_1 + 16 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= ($1275($1_1 | 0) | 0) >>> 0) {
     break label$1
    }
    label$3 : {
     if (!(HEAP32[($1310($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break label$3
     }
     $1319(HEAP32[($1310($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  $1911($0_1 + 192 | 0 | 0) | 0;
  $1323($1_1 | 0) | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1323($0_1) {
  $0_1 = $0_1 | 0;
  $1325($0_1 | 0);
  $1326($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1324($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1325($0_1) {
  $0_1 = $0_1 | 0;
  $1542($0_1 | 0, $1540($0_1 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + (($1541($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + (($1275($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + (($1541($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1326($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1276($0_1 | 0);
   $1568($1523($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1555($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1327($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1322($0_1 | 0) | 0 | 0);
 }
 
 function $1328($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((((HEAP32[($1525($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $1274($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $1523($0_1 | 0) | 0;
   $3_1 = $1588($2_1 + 8 | 0 | 0, $1582($0_1 | 0, ($1275($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $1275($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $1589($3_1 | 0, $1_1 | 0);
   $1590($0_1 | 0, $3_1 | 0);
   $1591($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1583($0_1 | 0, $1_1 | 0);
  $2_1 = $1275($0_1 | 0) | 0;
  $1569($0_1 | 0, $1_1 | 0);
  $1277($0_1 | 0, $2_1 | 0);
 }
 
 function $1330($0_1) {
  $0_1 = $0_1 | 0;
  return $1587($0_1 | 0) | 0 | 0;
 }
 
 function $1331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = $0_1 + 16 | 0;
   if (($1275($0_1 | 0) | 0) >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = (HEAP32[($1333($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1332() {
  fimport$69();
  abort();
 }
 
 function $1333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1334() {
  $1211(24352 | 0, 1 | 0) | 0;
 }
 
 function $1335() {
  $1336(22748 | 0, $1309() | 0 | 0) | 0;
  return 22748 | 0;
 }
 
 function $1336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1311($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1337() {
  label$1 : {
   if ((HEAPU8[(0 + 22756 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22756 | 0) | 0)) {
    break label$1
   }
   $1335() | 0;
   HEAP32[(0 + 22752 | 0) >> 2] = 22748;
   $1961(22756 | 0);
  }
  return HEAP32[(0 + 22752 | 0) >> 2] | 0 | 0;
 }
 
 function $1338($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1337() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1311($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1331(HEAP32[$0_1 >> 2] | 0 | 0, $1279($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1340($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1349() | 0;
 }
 
 function $1341($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1345($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$1
   }
   $1347($2_1 | 0, $1346($2_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0) | 0;
   $1935($0_1 | 0, $2_1 | 0, 66 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1343($0_1) {
  $0_1 = $0_1 | 0;
  $1844($734($0_1 | 0) | 0 | 0);
 }
 
 function $1344($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $1345($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1611($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1348($0_1) {
  $0_1 = $0_1 | 0;
  $1612($0_1 | 0);
 }
 
 function $1349() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 22760 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 22760 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1350($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1351($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $3_1 = ((HEAPU16[(($1352() | 0) + ($2_1 << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1352() {
  return HEAP32[($701() | 0) >> 2] | 0 | 0;
 }
 
 function $1353($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAP32[$1_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     $4_1 = HEAPU16[(($1352() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
    }
    HEAP16[$3_1 >> 1] = $4_1;
    $3_1 = $3_1 + 2 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1354($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$2
     }
     if (!((HEAPU16[(($1352() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$2
     }
     $3_1 = $2_1;
    }
    return $3_1 | 0;
   }
   $2_1 = $2_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1355($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     if (!((HEAPU16[(($1352() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 4 | 0;
     continue label$2;
    }
    break label$2;
   };
   $3_1 = $2_1;
  }
  return $3_1 | 0;
 }
 
 function $1356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1357() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1357() {
  return HEAP32[($702() | 0) >> 2] | 0 | 0;
 }
 
 function $1358($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1357() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1359($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1360() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1360() {
  return HEAP32[($703() | 0) >> 2] | 0 | 0;
 }
 
 function $1361($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1360() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1363($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1365($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1366($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1367($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 12764;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   $1845($1_1 | 0);
  }
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1368($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1367($0_1 | 0) | 0 | 0);
 }
 
 function $1369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1357() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1370($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1357() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1371($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1360() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1372($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1360() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1374($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1375($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) > (-1 | 0) ? $1_1 : $2_1) | 0;
 }
 
 function $1376($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) > (-1 | 0) ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1377($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1378($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1379($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1380($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1381($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1382($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1383($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $3_1 = HEAP32[($1384($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1385($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1385($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $625($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1386($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1387($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1388($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1210($0_1 | 0) | 0 | 0);
 }
 
 function $1389($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      $10_1 = 1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $11_1 = $1390($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           switch ($11_1 + 1 | 0 | 0) {
           case 0:
            break label$12;
           case 1:
            break label$6;
           default:
            break label$11;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label$13 : {
           label$14 : while (1) {
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$13
            }
            $9_1 = $1391($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            if (($9_1 | 0) == (-1 | 0)) {
             break label$13
            }
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue label$14;
           };
          }
          HEAP32[$4_1 >> 2] = $2_1;
          break label$10;
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$8
         }
         label$15 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$15
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label$4;
         }
         $9_1 = $1391($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) != (-1 | 0)) {
          break label$9
         }
        }
        $10_1 = 2;
        break label$6;
       }
       $2_1 = $8_1 + 4 | 0;
       label$16 : {
        if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
         break label$16
        }
        $10_1 = 1;
        break label$6;
       }
       label$17 : {
        label$18 : while (1) {
         if (!$9_1) {
          break label$17
         }
         $5_1 = HEAPU8[$2_1 >> 0] | 0;
         $10_1 = HEAP32[$7_1 >> 2] | 0;
         HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
         HEAP8[$10_1 >> 0] = $5_1;
         $9_1 = $9_1 + -1 | 0;
         $2_1 = $2_1 + 1 | 0;
         continue label$18;
        };
       }
       $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = $2_1;
       label$19 : while (1) {
        label$20 : {
         if (($9_1 | 0) != ($3_1 | 0)) {
          break label$20
         }
         $9_1 = $3_1;
         break label$5;
        }
        if (!(HEAP32[$9_1 >> 2] | 0)) {
         break label$5
        }
        $9_1 = $9_1 + 4 | 0;
        continue label$19;
       };
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $10_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $10_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1390($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $805($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $705($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $806($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1391($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $805($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $633($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $806($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1392($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $10_1 = $1393($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break label$12
           }
           label$13 : {
            label$14 : while (1) {
             HEAP32[$7_1 >> 2] = $5_1;
             if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
              break label$13
             }
             label$15 : {
              label$16 : {
               label$17 : {
                label$18 : {
                 $5_1 = $1394($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
                 switch ($5_1 + 2 | 0 | 0) {
                 case 1:
                  break label$17;
                 case 2:
                  break label$18;
                 case 0:
                  break label$9;
                 default:
                  break label$16;
                 };
                }
                $2_1 = $2_1 + 1 | 0;
                break label$15;
               }
               HEAP32[$4_1 >> 2] = $2_1;
               break label$11;
              }
              $2_1 = $2_1 + $5_1 | 0;
             }
             $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
             continue label$14;
            };
           }
           HEAP32[$4_1 >> 2] = $2_1;
           break label$7;
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          label$19 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break label$19
           }
           $9_1 = $3_1;
           continue label$4;
          }
          if (!($1394($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break label$10
          }
         }
         $9_1 = 2;
         break label$6;
        }
        HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label$20 : while (1) {
         label$21 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$21
          }
          $9_1 = $3_1;
          break label$5;
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          break label$5
         }
         $9_1 = $9_1 + 1 | 0;
         continue label$20;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1393($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $805($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $707($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $806($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1394($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $805($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $681($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $806($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1395($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $2_1 = 2;
  label$1 : {
   $1_1 = $1391($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($1_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $2_1 = 1;
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break label$1
   }
   $2_1 = $5_1 + 12 | 0;
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $2_1 = 0;
     break label$1;
    }
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    $1_1 = $1_1 + -1 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1396($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = -1;
  label$1 : {
   label$2 : {
    if ($1397(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ($0_1) {
     break label$1
    }
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  return ($1398($0_1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $1397($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $805($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $708($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $806($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1398($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $805($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $709() | 0;
  $806($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1399($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1400($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break label$1
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $7_1 = 1;
    label$3 : {
     label$4 : {
      $8_1 = $1401($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      switch ($8_1 + 2 | 0 | 0) {
      case 0:
      case 1:
       break label$1;
      case 2:
       break label$3;
      default:
       break label$4;
      };
     }
     $7_1 = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function $1401($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $805($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $710($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $806($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1402($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return $1398($0_1 | 0) | 0 | 0;
 }
 
 function $1403($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1404($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1405($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1405($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $0_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($7_1 >>> 0 < $1_1 >>> 0) {
       break label$5
      }
      $0_1 = 0;
      break label$1;
     }
     $0_1 = 2;
     $3_1 = HEAPU16[$7_1 >> 1] | 0;
     if ($3_1 >>> 0 > $6_1 >>> 0) {
      break label$1
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break label$8
        }
        $0_1 = 1;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1;
        break label$7;
       }
       label$9 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break label$9
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$10 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break label$10
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$11 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break label$11
        }
        $0_1 = 1;
        if (($1_1 - $7_1 | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $8_1 = HEAPU16[($7_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break label$6
        }
        if (($4_1 - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $0_1 = $3_1 & 960 | 0;
        if ((($0_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $7_1 + 2 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        $0_1 = ($0_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$7_1 >> 0] = $0_1 >>> 2 | 0 | 240 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($0_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break label$1
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $7_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $7_1;
      continue label$4;
     }
     break label$4;
    };
    return 2 | 0;
   }
   return 1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1406($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1407($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1407($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $184_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       $0_1 = HEAP32[$2_1 >> 2] | 0;
       if ($0_1 >>> 0 >= $1_1 >>> 0) {
        break label$5
       }
       if ($3_1 >>> 0 >= $4_1 >>> 0) {
        break label$5
       }
       $8_1 = 2;
       $7_1 = HEAPU8[$0_1 >> 0] | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$2
       }
       label$7 : {
        label$8 : {
         if ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
          break label$8
         }
         HEAP16[$3_1 >> 1] = $7_1;
         $7_1 = $0_1 + 1 | 0;
         break label$7;
        }
        if ($7_1 >>> 0 < 194 >>> 0) {
         break label$2
        }
        label$9 : {
         if ($7_1 >>> 0 > 223 >>> 0) {
          break label$9
         }
         if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
          break label$3
         }
         $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
         if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
         if ($7_1 >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$3_1 >> 1] = $7_1;
         $7_1 = $0_1 + 2 | 0;
         break label$7;
        }
        label$10 : {
         if ($7_1 >>> 0 > 239 >>> 0) {
          break label$10
         }
         if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
          break label$3
         }
         $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
         $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
         label$11 : {
          label$12 : {
           label$13 : {
            if (($7_1 | 0) == (237 | 0)) {
             break label$13
            }
            if (($7_1 | 0) != (224 | 0)) {
             break label$12
            }
            if (($9_1 & 224 | 0 | 0) == (160 | 0)) {
             break label$11
            }
            break label$4;
           }
           if (($9_1 & 224 | 0 | 0) == (128 | 0)) {
            break label$11
           }
           break label$4;
          }
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
           break label$4
          }
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $7_1 = ($9_1 & 63 | 0) << 6 | 0 | ($7_1 << 12 | 0) | 0 | ($10_1 & 63 | 0) | 0;
         if (($7_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$3_1 >> 1] = $7_1;
         $7_1 = $0_1 + 3 | 0;
         break label$7;
        }
        if ($7_1 >>> 0 > 244 >>> 0) {
         break label$2
        }
        $8_1 = 1;
        if (($1_1 - $0_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $10_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
        $9_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        $0_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        label$14 : {
         label$15 : {
          switch ($7_1 + -240 | 0 | 0) {
          case 0:
           if ((($0_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
            break label$2
           }
           break label$14;
          case 4:
           if (($0_1 & 240 | 0 | 0) != (128 | 0)) {
            break label$2
           }
           break label$14;
          default:
           break label$15;
          };
         }
         if (($0_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
         }
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($4_1 - $3_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $8_1 = 2;
        $7_1 = $7_1 & 7 | 0;
        $11_1 = $9_1 << 6 | 0;
        $10_1 = $10_1 & 63 | 0;
        if ((($0_1 << 12 | 0) & 258048 | 0 | ($7_1 << 18 | 0) | 0 | ($11_1 & 4032 | 0) | 0 | $10_1 | 0) >>> 0 > $6_1 >>> 0) {
         break label$4
        }
        $184_1 = $7_1 << 8 | 0;
        $7_1 = $0_1 << 2 | 0;
        HEAP16[$3_1 >> 1] = ($184_1 | ($7_1 & 192 | 0) | 0 | ($7_1 & 60 | 0) | 0 | (($9_1 >>> 4 | 0) & 3 | 0) | 0) + 16320 | 0 | 55296 | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 2 | 0;
        HEAP16[($3_1 + 2 | 0) >> 1] = $11_1 & 960 | 0 | $10_1 | 0 | 56320 | 0;
        $7_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
       }
       HEAP32[$2_1 >> 2] = $7_1;
       $3_1 = (HEAP32[$5_1 >> 2] | 0) + 2 | 0;
       HEAP32[$5_1 >> 2] = $3_1;
       continue label$6;
      };
     }
     $8_1 = $0_1 >>> 0 < $1_1 >>> 0;
    }
    return $8_1 | 0;
   }
   return 1 | 0;
  }
  return 2 | 0;
 }
 
 function $1408($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1409($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1410($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1411($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1412($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1412($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? $0_1 + 3 | 0 : $0_1;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($4_1 >>> 0 > $3_1 >>> 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
       break label$5
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($7_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
        break label$2
       }
       $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($7_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       $5_1 = $5_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       break label$4;
      }
      if (($7_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 3 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1413($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1414($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1415($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1416($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1416($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $7_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : while (1) {
    label$4 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$4
     }
     $7_1 = 0;
     break label$1;
    }
    $7_1 = 2;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if (($3_1 & -2048 | 0 | 0) == (55296 | 0)) {
     break label$1
    }
    if ($3_1 >>> 0 > $6_1 >>> 0) {
     break label$1
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if ($3_1 >>> 0 > 127 >>> 0) {
        break label$7
       }
       $7_1 = 1;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       break label$6;
      }
      label$8 : {
       if ($3_1 >>> 0 > 2047 >>> 0) {
        break label$8
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      $0_1 = $4_1 - $7_1 | 0;
      label$9 : {
       if ($3_1 >>> 0 > 65535 >>> 0) {
        break label$9
       }
       if (($0_1 | 0) < (3 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      if (($0_1 | 0) < (4 | 0)) {
       break label$5
      }
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 >>> 18 | 0 | 240 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
     }
     $3_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     continue label$3;
    }
    break label$3;
   };
   return 1 | 0;
  }
  return $7_1 | 0;
 }
 
 function $1417($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1418($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1418($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$4
      }
      if ($3_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      $8_1 = HEAP8[$0_1 >> 0] | 0;
      $7_1 = $8_1 & 255 | 0;
      label$6 : {
       label$7 : {
        if (($8_1 | 0) < (0 | 0)) {
         break label$7
        }
        label$8 : {
         if ($7_1 >>> 0 <= $6_1 >>> 0) {
          break label$8
         }
         return 2 | 0;
        }
        $0_1 = $0_1 + 1 | 0;
        break label$6;
       }
       $8_1 = 2;
       if ($7_1 >>> 0 < 194 >>> 0) {
        break label$3
       }
       label$9 : {
        if ($7_1 >>> 0 > 223 >>> 0) {
         break label$9
        }
        if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
         break label$2
        }
        $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
        if ($7_1 >>> 0 > $6_1 >>> 0) {
         break label$3
        }
        $0_1 = $0_1 + 2 | 0;
        break label$6;
       }
       label$10 : {
        if ($7_1 >>> 0 > 239 >>> 0) {
         break label$10
        }
        if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($7_1 | 0) == (237 | 0)) {
            break label$13
           }
           if (($7_1 | 0) != (224 | 0)) {
            break label$12
           }
           if (($9_1 & 224 | 0 | 0) == (160 | 0)) {
            break label$11
           }
           break label$3;
          }
          if (($9_1 & 224 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$3;
         }
         if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$3
         }
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $7_1 = ($9_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($10_1 & 63 | 0) | 0;
        if ($7_1 >>> 0 > $6_1 >>> 0) {
         break label$3
        }
        $0_1 = $0_1 + 3 | 0;
        break label$6;
       }
       if ($7_1 >>> 0 > 244 >>> 0) {
        break label$3
       }
       if (($1_1 - $0_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $11_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
       label$14 : {
        label$15 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($9_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$14
          }
          break label$3;
         case 4:
          if (($9_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$14
          }
          break label$3;
         default:
          break label$15;
         };
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
       }
       if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       $7_1 = ($9_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($10_1 << 6 | 0) & 4032 | 0) | 0 | ($11_1 & 63 | 0) | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$3
       }
       $0_1 = $0_1 + 4 | 0;
      }
      HEAP32[$3_1 >> 2] = $7_1;
      HEAP32[$2_1 >> 2] = $0_1;
      $3_1 = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
      HEAP32[$5_1 >> 2] = $3_1;
      continue label$5;
     };
    }
    $8_1 = $0_1 >>> 0 < $1_1 >>> 0;
   }
   return $8_1 | 0;
  }
  return 1 | 0;
 }
 
 function $1419($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1420($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1421($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1422($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1423($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1423($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? $0_1 + 3 | 0 : $0_1;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $7_1 = HEAP8[$5_1 >> 0] | 0;
    $4_1 = $7_1 & 255 | 0;
    label$4 : {
     label$5 : {
      if (($7_1 | 0) < (0 | 0)) {
       break label$5
      }
      if ($4_1 >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($7_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($7_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       $5_1 = $5_1 + 4 | 0;
       break label$4;
      }
      if (($7_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 3 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1424($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1425($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12864;
  $1911($0_1 + 12 | 0 | 0) | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1426($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1425($0_1 | 0) | 0 | 0);
 }
 
 function $1427($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12904;
  $1911($0_1 + 16 | 0 | 0) | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1428($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1427($0_1 | 0) | 0 | 0);
 }
 
 function $1429($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $1430($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1431($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $1432($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $11($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $1434($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $11($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $8($0_1 | 0, 3153 | 0) | 0;
 }
 
 function $1436($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1437($0_1 | 0, 12936 | 0) | 0;
 }
 
 function $1437($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $746($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  $1928($0_1 | 0, $1_1 | 0, $1438($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1438($0_1) {
  $0_1 = $0_1 | 0;
  return $699($0_1 | 0) | 0 | 0;
 }
 
 function $1439($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $8($0_1 | 0, 3192 | 0) | 0;
 }
 
 function $1440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1437($0_1 | 0, 12956 | 0) | 0;
 }
 
 function $1441($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1442($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1917($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1640($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $1444($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22832 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22832 | 0) | 0)) {
    break label$1
   }
   $1445();
   HEAP32[(0 + 22828 | 0) >> 2] = 23008;
   $1961(22832 | 0);
  }
  return HEAP32[(0 + 22828 | 0) >> 2] | 0 | 0;
 }
 
 function $1445() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 23176 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(23176 | 0) | 0)) {
    break label$1
   }
   $0_1 = 23008;
   label$2 : while (1) {
    $0_1 = ($127($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (23176 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(67 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(23176 | 0);
  }
  $1441(23008 | 0, 1459 | 0) | 0;
  $1441(23020 | 0, 1466 | 0) | 0;
  $1441(23032 | 0, 1432 | 0) | 0;
  $1441(23044 | 0, 1440 | 0) | 0;
  $1441(23056 | 0, 1423 | 0) | 0;
  $1441(23068 | 0, 1473 | 0) | 0;
  $1441(23080 | 0, 1450 | 0) | 0;
  $1441(23092 | 0, 2450 | 0) | 0;
  $1441(23104 | 0, 2574 | 0) | 0;
  $1441(23116 | 0, 3158 | 0) | 0;
  $1441(23128 | 0, 3578 | 0) | 0;
  $1441(23140 | 0, 1608 | 0) | 0;
  $1441(23152 | 0, 2751 | 0) | 0;
  $1441(23164 | 0, 1971 | 0) | 0;
 }
 
 function $1446($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 23176;
  label$1 : while (1) {
   $1_1 = $1911($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (23008 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1447($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22840 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22840 | 0) | 0)) {
    break label$1
   }
   $1448();
   HEAP32[(0 + 22836 | 0) >> 2] = 23184;
   $1961(22840 | 0);
  }
  return HEAP32[(0 + 22836 | 0) >> 2] | 0 | 0;
 }
 
 function $1448() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 23352 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(23352 | 0) | 0)) {
    break label$1
   }
   $0_1 = 23184;
   label$2 : while (1) {
    $0_1 = ($1032($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (23352 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(68 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(23352 | 0);
  }
  $1450(23184 | 0, 17156 | 0) | 0;
  $1450(23196 | 0, 17184 | 0) | 0;
  $1450(23208 | 0, 17212 | 0) | 0;
  $1450(23220 | 0, 17244 | 0) | 0;
  $1450(23232 | 0, 17284 | 0) | 0;
  $1450(23244 | 0, 17320 | 0) | 0;
  $1450(23256 | 0, 17348 | 0) | 0;
  $1450(23268 | 0, 17384 | 0) | 0;
  $1450(23280 | 0, 17400 | 0) | 0;
  $1450(23292 | 0, 17416 | 0) | 0;
  $1450(23304 | 0, 17432 | 0) | 0;
  $1450(23316 | 0, 17448 | 0) | 0;
  $1450(23328 | 0, 17464 | 0) | 0;
  $1450(23340 | 0, 17480 | 0) | 0;
 }
 
 function $1449($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 23352;
  label$1 : while (1) {
   $1_1 = $1925($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (23184 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1450($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1485($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1451($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22848 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22848 | 0) | 0)) {
    break label$1
   }
   $1452();
   HEAP32[(0 + 22844 | 0) >> 2] = 23360;
   $1961(22848 | 0);
  }
  return HEAP32[(0 + 22844 | 0) >> 2] | 0 | 0;
 }
 
 function $1452() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 23648 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(23648 | 0) | 0)) {
    break label$1
   }
   $0_1 = 23360;
   label$2 : while (1) {
    $0_1 = ($127($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (23648 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(69 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(23648 | 0);
  }
  $1441(23360 | 0, 1366 | 0) | 0;
  $1441(23372 | 0, 1357 | 0) | 0;
  $1441(23384 | 0, 2848 | 0) | 0;
  $1441(23396 | 0, 2698 | 0) | 0;
  $1441(23408 | 0, 1480 | 0) | 0;
  $1441(23420 | 0, 3263 | 0) | 0;
  $1441(23432 | 0, 1374 | 0) | 0;
  $1441(23444 | 0, 1674 | 0) | 0;
  $1441(23456 | 0, 2345 | 0) | 0;
  $1441(23468 | 0, 2328 | 0) | 0;
  $1441(23480 | 0, 2336 | 0) | 0;
  $1441(23492 | 0, 2355 | 0) | 0;
  $1441(23504 | 0, 2656 | 0) | 0;
  $1441(23516 | 0, 3634 | 0) | 0;
  $1441(23528 | 0, 2394 | 0) | 0;
  $1441(23540 | 0, 2145 | 0) | 0;
  $1441(23552 | 0, 1480 | 0) | 0;
  $1441(23564 | 0, 2454 | 0) | 0;
  $1441(23576 | 0, 2686 | 0) | 0;
  $1441(23588 | 0, 2909 | 0) | 0;
  $1441(23600 | 0, 2430 | 0) | 0;
  $1441(23612 | 0, 1891 | 0) | 0;
  $1441(23624 | 0, 1604 | 0) | 0;
  $1441(23636 | 0, 3602 | 0) | 0;
 }
 
 function $1453($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 23648;
  label$1 : while (1) {
   $1_1 = $1911($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (23360 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1454($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22856 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22856 | 0) | 0)) {
    break label$1
   }
   $1455();
   HEAP32[(0 + 22852 | 0) >> 2] = 23664;
   $1961(22856 | 0);
  }
  return HEAP32[(0 + 22852 | 0) >> 2] | 0 | 0;
 }
 
 function $1455() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 23952 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(23952 | 0) | 0)) {
    break label$1
   }
   $0_1 = 23664;
   label$2 : while (1) {
    $0_1 = ($1032($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (23952 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(70 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(23952 | 0);
  }
  $1450(23664 | 0, 17496 | 0) | 0;
  $1450(23676 | 0, 17528 | 0) | 0;
  $1450(23688 | 0, 17564 | 0) | 0;
  $1450(23700 | 0, 17588 | 0) | 0;
  $1450(23712 | 0, 17612 | 0) | 0;
  $1450(23724 | 0, 17628 | 0) | 0;
  $1450(23736 | 0, 17648 | 0) | 0;
  $1450(23748 | 0, 17668 | 0) | 0;
  $1450(23760 | 0, 17696 | 0) | 0;
  $1450(23772 | 0, 17736 | 0) | 0;
  $1450(23784 | 0, 17768 | 0) | 0;
  $1450(23796 | 0, 17804 | 0) | 0;
  $1450(23808 | 0, 17840 | 0) | 0;
  $1450(23820 | 0, 17856 | 0) | 0;
  $1450(23832 | 0, 17872 | 0) | 0;
  $1450(23844 | 0, 17888 | 0) | 0;
  $1450(23856 | 0, 17612 | 0) | 0;
  $1450(23868 | 0, 17904 | 0) | 0;
  $1450(23880 | 0, 17920 | 0) | 0;
  $1450(23892 | 0, 17936 | 0) | 0;
  $1450(23904 | 0, 17952 | 0) | 0;
  $1450(23916 | 0, 17968 | 0) | 0;
  $1450(23928 | 0, 17984 | 0) | 0;
  $1450(23940 | 0, 18e3 | 0) | 0;
 }
 
 function $1456($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 23952;
  label$1 : while (1) {
   $1_1 = $1925($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (23664 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1457($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22864 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22864 | 0) | 0)) {
    break label$1
   }
   $1458();
   HEAP32[(0 + 22860 | 0) >> 2] = 23968;
   $1961(22864 | 0);
  }
  return HEAP32[(0 + 22860 | 0) >> 2] | 0 | 0;
 }
 
 function $1458() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 23992 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(23992 | 0) | 0)) {
    break label$1
   }
   $0_1 = 23968;
   label$2 : while (1) {
    $0_1 = ($127($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (23992 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(71 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(23992 | 0);
  }
  $1441(23968 | 0, 3923 | 0) | 0;
  $1441(23980 | 0, 3920 | 0) | 0;
 }
 
 function $1459($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 23992;
  label$1 : while (1) {
   $1_1 = $1911($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (23968 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1460($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22872 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22872 | 0) | 0)) {
    break label$1
   }
   $1461();
   HEAP32[(0 + 22868 | 0) >> 2] = 24e3;
   $1961(22872 | 0);
  }
  return HEAP32[(0 + 22868 | 0) >> 2] | 0 | 0;
 }
 
 function $1461() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 24024 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(24024 | 0) | 0)) {
    break label$1
   }
   $0_1 = 24e3;
   label$2 : while (1) {
    $0_1 = ($1032($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (24024 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(72 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(24024 | 0);
  }
  $1450(24e3 | 0, 18016 | 0) | 0;
  $1450(24012 | 0, 18028 | 0) | 0;
 }
 
 function $1462($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 24024;
  label$1 : while (1) {
   $1_1 = $1925($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (24e3 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1463($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22888 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22888 | 0) | 0)) {
    break label$1
   }
   $8(22876 | 0, 1484 | 0) | 0;
   fimport$0(73 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(22888 | 0);
  }
  return 22876 | 0;
 }
 
 function $1464($0_1) {
  $0_1 = $0_1 | 0;
  $1911(22876 | 0) | 0;
 }
 
 function $1465($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22904 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22904 | 0) | 0)) {
    break label$1
   }
   $1437(22892 | 0, 12980 | 0) | 0;
   fimport$0(74 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(22904 | 0);
  }
  return 22892 | 0;
 }
 
 function $1466($0_1) {
  $0_1 = $0_1 | 0;
  $1925(22892 | 0) | 0;
 }
 
 function $1467($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22920 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22920 | 0) | 0)) {
    break label$1
   }
   $8(22908 | 0, 3835 | 0) | 0;
   fimport$0(75 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(22920 | 0);
  }
  return 22908 | 0;
 }
 
 function $1468($0_1) {
  $0_1 = $0_1 | 0;
  $1911(22908 | 0) | 0;
 }
 
 function $1469($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22936 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22936 | 0) | 0)) {
    break label$1
   }
   $1437(22924 | 0, 13016 | 0) | 0;
   fimport$0(76 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(22936 | 0);
  }
  return 22924 | 0;
 }
 
 function $1470($0_1) {
  $0_1 = $0_1 | 0;
  $1925(22924 | 0) | 0;
 }
 
 function $1471($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22952 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22952 | 0) | 0)) {
    break label$1
   }
   $8(22940 | 0, 3765 | 0) | 0;
   fimport$0(77 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(22952 | 0);
  }
  return 22940 | 0;
 }
 
 function $1472($0_1) {
  $0_1 = $0_1 | 0;
  $1911(22940 | 0) | 0;
 }
 
 function $1473($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22968 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22968 | 0) | 0)) {
    break label$1
   }
   $1437(22956 | 0, 13052 | 0) | 0;
   fimport$0(78 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(22968 | 0);
  }
  return 22956 | 0;
 }
 
 function $1474($0_1) {
  $0_1 = $0_1 | 0;
  $1925(22956 | 0) | 0;
 }
 
 function $1475($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 22984 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(22984 | 0) | 0)) {
    break label$1
   }
   $8(22972 | 0, 2434 | 0) | 0;
   fimport$0(79 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(22984 | 0);
  }
  return 22972 | 0;
 }
 
 function $1476($0_1) {
  $0_1 = $0_1 | 0;
  $1911(22972 | 0) | 0;
 }
 
 function $1477($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 23e3 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(23e3 | 0) | 0)) {
    break label$1
   }
   $1437(22988 | 0, 13136 | 0) | 0;
   fimport$0(80 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(23e3 | 0);
  }
  return 22988 | 0;
 }
 
 function $1478($0_1) {
  $0_1 = $0_1 | 0;
  $1925(22988 | 0) | 0;
 }
 
 function $1479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1647($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1480($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if (!($968($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($1516($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1482($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($968($0_1 | 0) | 0)) {
    break label$1
   }
   $1139($0_1 | 0, $1_1 | 0);
   return;
  }
  $1141($0_1 | 0, $1_1 | 0);
 }
 
 function $1483($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($802() | 0 | 0)) {
    break label$1
   }
   $698(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1484($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1485($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1931($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1486($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1487($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1488($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1489($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1490($0_1) {
  $0_1 = $0_1 | 0;
  $1491($0_1 + 8 | 0 | 0) | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1491($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1492($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1490($0_1 | 0) | 0 | 0);
 }
 
 function $1493($0_1) {
  $0_1 = $0_1 | 0;
  $1494($0_1 + 8 | 0 | 0) | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1494($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1495($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1493($0_1 | 0) | 0 | 0);
 }
 
 function $1496($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1497($0_1 | 0) | 0 | 0);
 }
 
 function $1497($0_1) {
  $0_1 = $0_1 | 0;
  $1483($0_1 + 8 | 0 | 0) | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1498($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1499($0_1 | 0) | 0 | 0);
 }
 
 function $1499($0_1) {
  $0_1 = $0_1 | 0;
  $1483($0_1 + 8 | 0 | 0) | 0;
  $734($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1500($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1501($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1502($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1503($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1504($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1505($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1506($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1507($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1508($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1509($0_1) {
  $0_1 = $0_1 | 0;
  $734($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1512($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1513($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1513($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $161($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1514($0_1) {
  $0_1 = $0_1 | 0;
  return $1515($0_1 | 0) | 0 | 0;
 }
 
 function $1515($0_1) {
  $0_1 = $0_1 | 0;
  return $1518($0_1 | 0) | 0 | 0;
 }
 
 function $1516($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1052($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1517($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1518($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1519($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1520($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1521($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1532($0_1 | 0, $1531($1_1 | 0) | 0 | 0) | 0;
  $139($2_1 | 0) | 0;
  $1533($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1522($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $1536($1535($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $478() | 0;
  $0_1 = HEAP32[($1384($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1523($0_1) {
  $0_1 = $0_1 | 0;
  return $1538($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1524($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1537($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1525($0_1) {
  $0_1 = $0_1 | 0;
  return $1539($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1542($0_1 | 0, $1540($0_1 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + (($1541($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + (($1541($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1540($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0);
 }
 
 function $1527($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1528($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1529($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $1531($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1531($1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1533($0_1) {
  $0_1 = $0_1 | 0;
  $1534($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1534($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 128 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1535($0_1) {
  $0_1 = $0_1 | 0;
  return $1544($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1536($0_1) {
  $0_1 = $0_1 | 0;
  return $1543($0_1 | 0) | 0 | 0;
 }
 
 function $1537($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 128 | 0) >> 0] | 0) {
     break label$2
    }
    if ($1_1 >>> 0 > 30 >>> 0) {
     break label$2
    }
    HEAP8[($0_1 + 128 | 0) >> 0] = 1;
    break label$1;
   }
   $0_1 = $1547($1546($3_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1538($0_1) {
  $0_1 = $0_1 | 0;
  return $1553($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1539($0_1) {
  $0_1 = $0_1 | 0;
  return $1554($0_1 | 0) | 0 | 0;
 }
 
 function $1540($0_1) {
  $0_1 = $0_1 | 0;
  return $1529(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1541($0_1) {
  $0_1 = $0_1 | 0;
  return $1555($0_1 | 0) | 0 | 0;
 }
 
 function $1542($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $1543($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1544($0_1) {
  $0_1 = $0_1 | 0;
  return $1545($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1545($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1546($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1548($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1549(3064 | 0);
   abort();
  }
  return $1550($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1548($0_1) {
  $0_1 = $0_1 | 0;
  return $1551($0_1 | 0) | 0 | 0;
 }
 
 function $1549($0_1) {
  $0_1 = $0_1 | 0;
  fimport$69();
  abort();
 }
 
 function $1550($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1552($0_1 | 0) | 0 | 0;
 }
 
 function $1551($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1552($0_1) {
  $0_1 = $0_1 | 0;
  return $1842($0_1 | 0) | 0 | 0;
 }
 
 function $1553($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1554($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1555($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1556($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1556($0_1) {
  $0_1 = $0_1 | 0;
  return $1557($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1557($0_1) {
  $0_1 = $0_1 | 0;
  return $1558($0_1 | 0) | 0 | 0;
 }
 
 function $1558($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1559($0_1) {
  $0_1 = $0_1 | 0;
  return ($1560($12($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1560($0_1) {
  $0_1 = $0_1 | 0;
  return $1567($0_1 | 0) | 0 | 0;
 }
 
 function $1561($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $1562($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1562($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 15 | 0) & -16 | 0 | 0;
 }
 
 function $1563($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1564($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1564($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1560($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1549(3064 | 0);
   abort();
  }
  return $1550($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($17($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1566($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($17($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1567($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $1568($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1570($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + -4 | 0;
    $1571($1523($0_1 | 0) | 0 | 0, $1529($2_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $1570($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) != ($1_1 | 0)) {
     break label$2
    }
    HEAP8[($0_1 + 128 | 0) >> 0] = 0;
    break label$1;
   }
   $1572($1546($3_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1571($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1572($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $161($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1573($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1574($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1575($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1576($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1577($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1578($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 18048;
  return $0_1 | 0;
 }
 
 function $1579($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 18084;
  return $0_1 | 0;
 }
 
 function $1580($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $802() | 0;
  return $0_1 | 0;
 }
 
 function $1581($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = $1522($0_1 | 0) | 0;
   if ($3_1 >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    $0_1 = $1541($0_1 | 0) | 0;
    if ($0_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 << 1 | 0;
    $3_1 = HEAP32[($615($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $723($0_1 | 0);
  abort();
 }
 
 function $1583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1584($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1584($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1586($0_1) {
  $0_1 = $0_1 | 0;
  $1319($0_1 | 0) | 0;
 }
 
 function $1587($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1588($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $1592($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $5_1 = $1524($1593($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  $2_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1594($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1595($2_1 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $1530($1593($0_1 | 0) | 0 | 0, $1529(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue label$2;
   };
  }
  $1596($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1590($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1325($0_1 | 0);
  $2_1 = $1_1 + 4 | 0;
  $1597($1523($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
  $1598($0_1 | 0, $2_1 | 0);
  $1598($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $1598($1525($0_1 | 0) | 0 | 0, $1594($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $1526($0_1 | 0, $1275($0_1 | 0) | 0 | 0);
  $1278($0_1 | 0);
 }
 
 function $1591($0_1) {
  $0_1 = $0_1 | 0;
  $1599($0_1 | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1568($1593($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1600($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1592($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1532($0_1 | 0, $1531($1_1 | 0) | 0 | 0) | 0;
  $1602($0_1 + 4 | 0 | 0, $1601($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1593($0_1) {
  $0_1 = $0_1 | 0;
  return $1603($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1594($0_1) {
  $0_1 = $0_1 | 0;
  return $1604($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1595($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1596($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1597($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $2_1 = $2_1 - $1_1 | 0;
  $4_1 = (HEAP32[$3_1 >> 2] | 0) - $2_1 | 0;
  HEAP32[$3_1 >> 2] = $4_1;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2014($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
 }
 
 function $1598($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1606($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1606($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1606($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1599($0_1) {
  $0_1 = $0_1 | 0;
  $1607($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $1600($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1608($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1601($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1602($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1601($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1603($0_1) {
  $0_1 = $0_1 | 0;
  return $1605($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1604($0_1) {
  $0_1 = $0_1 | 0;
  return $1554($0_1 | 0) | 0 | 0;
 }
 
 function $1605($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1606($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1607($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1609($0_1 | 0, $1_1 | 0);
 }
 
 function $1608($0_1) {
  $0_1 = $0_1 | 0;
  return $1610($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1609($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $1593($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $1571($2_1 | 0, $1529($3_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
 }
 
 function $1610($0_1) {
  $0_1 = $0_1 | 0;
  return $1558($0_1 | 0) | 0 | 0;
 }
 
 function $1611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1613($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1612($0_1) {
  $0_1 = $0_1 | 0;
  $1614($0_1 | 0);
 }
 
 function $1613($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1614($0_1) {
  $0_1 = $0_1 | 0;
  $1616($1615(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $1615($0_1) {
  $0_1 = $0_1 | 0;
  return $1618($0_1 | 0) | 0 | 0;
 }
 
 function $1616($0_1) {
  $0_1 = $0_1 | 0;
  $1617($0_1 | 0);
 }
 
 function $1617($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = (HEAP32[$0_1 >> 2] | 0) + ($1_1 >> 1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $0_1 | 0) >> 2] | 0;
  }
  FUNCTION_TABLE[$0_1 | 0]($2_1);
 }
 
 function $1618($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1620($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1621($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1622($0_1) {
  $0_1 = $0_1 | 0;
  $1629($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1630($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1624($0_1) {
  $0_1 = $0_1 | 0;
  return ($1631($1049($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1625($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = $1633($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1626($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1634($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1627($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1053($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1628($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1053($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1629($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1630($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1631($0_1) {
  $0_1 = $0_1 | 0;
  return $1635($0_1 | 0) | 0 | 0;
 }
 
 function $1632($0_1) {
  $0_1 = $0_1 | 0;
  return $1638($0_1 | 0) | 0 | 0;
 }
 
 function $1633($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 3 | 0) & -4 | 0 | 0;
 }
 
 function $1634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1631($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1549(3064 | 0);
   abort();
  }
  return $1550($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1635($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1636($0_1) {
  $0_1 = $0_1 | 0;
  return $1637($0_1 | 0) | 0 | 0;
 }
 
 function $1637($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1638($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1639($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1640($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $623($0_1 | 0, $1_1 | 0);
 }
 
 function $1641($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1645($0_1 | 0, $1644($1_1 | 0) | 0 | 0) | 0;
  $627($0_1 + 4 | 0 | 0, $626($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1642($0_1) {
  $0_1 = $0_1 | 0;
  return $1646($0_1 | 0) | 0 | 0;
 }
 
 function $1643($0_1) {
  $0_1 = $0_1 | 0;
  return $628($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1644($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1645($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1644($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1646($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1647($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1648($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1649($0_1 | 0, $1_1 | 0);
 }
 
 function $1649($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1650($1514($1_1 | 0) | 0 | 0) | 0;
  $1514($0_1 | 0) | 0;
 }
 
 function $1650($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($15($0_1 | 0) | 0)) {
     break label$2
    }
    $3_1 = $150($0_1 | 0) | 0;
    HEAP8[($2_1 + 15 | 0) >> 0] = 0;
    $156($3_1 + $1_1 | 0 | 0, $2_1 + 15 | 0 | 0);
    $1080($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $155($0_1 | 0) | 0;
   HEAP8[($2_1 + 14 | 0) >> 0] = 0;
   $156($3_1 + $1_1 | 0 | 0, $2_1 + 14 | 0 | 0);
   $154($0_1 | 0, $1_1 | 0);
  }
  $1651($0_1 | 0, $1_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1653($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1654($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1653($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1655($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1656($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1655($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1655($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1655($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1657($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1658($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($730($0_1 | 0, $1_1 | 0, $802() | 0 | 0)));
 }
 
 function $1659($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$731($0_1 | 0, $1_1 | 0, $802() | 0 | 0));
 }
 
 function $1660($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $732($3_1 | 0, $1_1 | 0, $2_1 | 0, $802() | 0 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1661($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1662($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($909($849($1_1 | 0) | 0 | 0, $908() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $1663($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1664($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1665($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1664($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1666($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1667($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1667($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1669($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $994($0_1 | 0, $1_1 | 0);
 }
 
 function $1671($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1656($0_1 | 0, $1_1 | 0);
 }
 
 function $1672($0_1) {
  $0_1 = $0_1 | 0;
  return $1673($1052($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1673($0_1) {
  $0_1 = $0_1 | 0;
  return $1674($0_1 | 0) | 0 | 0;
 }
 
 function $1674($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1675($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP8[$0_1 >> 0] | 0;
    $867($866($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    $869($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1676($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $901($900($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $903($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1677($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1678($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1682($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1679($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1680($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1683($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1684($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($15($0_1 | 0) | 0)) {
    break label$1
   }
   $1080($0_1 | 0, $1_1 | 0);
   return;
  }
  $154($0_1 | 0, $1_1 | 0);
 }
 
 function $1682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1683($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $139($1_1 | 0) | 0;
  $140($0_1 | 0) | 0;
  $1686($0_1 | 0, $1685($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1684($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1678($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1559($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $154($0_1 | 0, $4_1 | 0);
     $5_1 = $155($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1561($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1563($149($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1565($0_1 | 0, $5_1 | 0);
    $1566($0_1 | 0, $6_1 | 0);
    $1080($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $156($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $156($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1685($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1685($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1687($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1687($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1689($0_1) {
  $0_1 = $0_1 | 0;
  return $1691($0_1 | 0) | 0 | 0;
 }
 
 function $1690($0_1) {
  $0_1 = $0_1 | 0;
  return $628($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1691($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1692($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1693($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAPU8[$1_1 >> 0] | 0 | 0) == (HEAPU8[$2_1 >> 0] | 0 | 0) | 0;
 }
 
 function $1694($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1695($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1696($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1697($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1698($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1697($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $139($1_1 | 0) | 0;
  $1621($0_1 | 0) | 0;
  $1700($0_1 | 0, $1699($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1698($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1479($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1624($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1141($0_1 | 0, $4_1 | 0);
     $5_1 = $1140($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1625($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1626($1514($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1627($0_1 | 0, $5_1 | 0);
    $1628($0_1 | 0, $6_1 | 0);
    $1139($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1138($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1138($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1699($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1700($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1699($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1702($0_1) {
  $0_1 = $0_1 | 0;
  $618($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1703($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1702($0_1 | 0) | 0 | 0);
 }
 
 function $1704($0_1) {
  $0_1 = $0_1 | 0;
  $618($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1705($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1704($0_1 | 0) | 0 | 0);
 }
 
 function $1706($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 18120;
  $750($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1707($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1706($0_1 | 0) | 0 | 0);
 }
 
 function $1708($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 18120;
  $1338($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $1709($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1710($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1711($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1712($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1712($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1713($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1712($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1714($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1715($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1716($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if ($5_1 >>> 0 >= $6_1 >>> 0) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
     HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
     $5_1 = $1717($3_1 + 12 | 0 | 0, $1717($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
     $5_1 = HEAP32[$5_1 >> 2] | 0;
     $1718($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
     $1719($0_1 | 0, $5_1 | 0);
     $4_1 = $5_1 + $4_1 | 0;
     $1_1 = $1_1 + $5_1 | 0;
     continue label$2;
    }
    $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
    if (($5_1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP8[$1_1 >> 0] = $1720($5_1 | 0) | 0;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1717($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1721($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1718($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $2014($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $1720($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1721($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1833($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1722($0_1) {
  $0_1 = $0_1 | 0;
  return $185() | 0 | 0;
 }
 
 function $1723($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($185() | 0 | 0)) {
    break label$1
   }
   return $185() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $288(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $1724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $185() | 0 | 0;
 }
 
 function $1725($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $185() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $288(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $1717($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $1718(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $185() | 0 | 0;
 }
 
 function $1727($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 18184;
  $750($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1728($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1727($0_1 | 0) | 0 | 0);
 }
 
 function $1729($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 18184;
  $1338($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $1730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1731($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1732($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1712($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1733($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1712($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1734($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1735($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1736($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if ($5_1 >>> 0 >= $6_1 >>> 0) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
     HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
     $5_1 = $1717($3_1 + 12 | 0 | 0, $1717($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
     $5_1 = HEAP32[$5_1 >> 2] | 0;
     $1737($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
     $1738($0_1 | 0, $5_1 | 0);
     $4_1 = $5_1 + $4_1 | 0;
     $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
     continue label$2;
    }
    $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
    if (($5_1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$1_1 >> 2] = $1739($5_1 | 0) | 0;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1737($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $700($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1738($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $1739($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1740($0_1) {
  $0_1 = $0_1 | 0;
  return $908() | 0 | 0;
 }
 
 function $1741($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($908() | 0 | 0)) {
    break label$1
   }
   return $908() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $1663(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1742($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $908() | 0 | 0;
 }
 
 function $1743($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $908() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1663(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $1717($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $1737(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    $7_1 = $6_1 << 2 | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $7_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1744($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $908() | 0 | 0;
 }
 
 function $1745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1746($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1745($0_1 | 0, 18280 | 0) | 0;
  $1702($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1747($0_1) {
  $0_1 = $0_1 | 0;
  return $1746($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1748($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1746($0_1 | 0) | 0 | 0);
 }
 
 function $1749($0_1) {
  $0_1 = $0_1 | 0;
  $1748($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1750($0_1) {
  $0_1 = $0_1 | 0;
  return $1753($0_1 | 0) | 0 | 0;
 }
 
 function $1751($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $1752($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($123($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $1754($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($174($2_1 | 0) | 0)) {
     break label$2
    }
    if (($1755($123($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $119($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $1756($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1753($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $1754($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($1750($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($1751($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1752($1751($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1755($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1756($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($123($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1750($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($176($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($1940() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1755($123($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $119($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $1758($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1760($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1759($0_1 | 0, 18328 | 0) | 0;
  $1704($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1761($0_1) {
  $0_1 = $0_1 | 0;
  return $1760($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1762($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1760($0_1 | 0) | 0 | 0);
 }
 
 function $1763($0_1) {
  $0_1 = $0_1 | 0;
  $1762($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1764($0_1) {
  $0_1 = $0_1 | 0;
  return $1753($0_1 | 0) | 0 | 0;
 }
 
 function $1765($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $1766($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($1768($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $1769($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($1770($2_1 | 0) | 0)) {
     break label$2
    }
    if (($1771($1768($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $1767($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $1772($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1767($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $187($0_1 | 0, $1_1 | 0);
 }
 
 function $1768($0_1) {
  $0_1 = $0_1 | 0;
  return $190($0_1 | 0) | 0 | 0;
 }
 
 function $1769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($1764($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($1765($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1766($1765($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1770($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1771($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1772($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1768($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1764($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($176($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($1940() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1771($1768($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1767($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1774($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1773($0_1 | 0, 18376 | 0) | 0;
  $1702($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1775($0_1) {
  $0_1 = $0_1 | 0;
  return $1774($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1776($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1774($0_1 | 0) | 0 | 0);
 }
 
 function $1777($0_1) {
  $0_1 = $0_1 | 0;
  $1776($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1778($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $1754($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   if (!($174($3_1 | 0) | 0)) {
    break label$1
   }
   $4_1 = $175($2_1 | 0, $0_1 | 0) | 0;
   $867($866($4_1 | 0) | 0 | 0, $1_1 | 0) | 0;
   if (!($179($4_1 | 0) | 0)) {
    break label$1
   }
   $119($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  $1756($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1779($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1780($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1779($0_1 | 0, 18424 | 0) | 0;
  $1704($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1781($0_1) {
  $0_1 = $0_1 | 0;
  return $1780($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1782($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1780($0_1 | 0) | 0 | 0);
 }
 
 function $1783($0_1) {
  $0_1 = $0_1 | 0;
  $1782($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1784($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1785($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1786($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $1787($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $1788($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $1789($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $1790($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
 }
 
 function $1791($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
 }
 
 function $1792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $1793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1336($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $1794($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $1795($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($186($0_1 | 0, $185() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($185() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1796($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($0_1 + 64 | 0) >> 2] | 0) {
     break label$2
    }
    $4_1 = $1797($2_1 | 0) | 0;
    if (!$4_1) {
     break label$2
    }
    $1_1 = $567($1_1 | 0, $4_1 | 0) | 0;
    HEAP32[($0_1 + 64 | 0) >> 2] = $1_1;
    if (!$1_1) {
     break label$2
    }
    HEAP32[($0_1 + 88 | 0) >> 2] = $2_1;
    if (!($2_1 & 2 | 0)) {
     break label$1
    }
    $3_1 = 0;
    if (!($570($1_1 | 0, 0 | 0, 2 | 0) | 0)) {
     break label$1
    }
    $574(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($0_1 + 64 | 0) >> 2] = 0;
   }
   return $3_1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1797($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1602;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                $0_1 = $0_1 & -3 | 0;
                switch ($0_1 + -1 | 0 | 0) {
                case 15:
                 break label$1;
                case 23:
                 break label$11;
                case 7:
                 break label$12;
                case 0:
                case 16:
                 break label$13;
                case 1:
                case 2:
                case 3:
                case 5:
                case 6:
                case 9:
                case 10:
                case 13:
                case 14:
                case 17:
                case 18:
                case 21:
                case 22:
                case 25:
                case 26:
                 break label$2;
                case 12:
                case 28:
                 break label$3;
                case 27:
                 break label$5;
                case 11:
                 break label$6;
                case 4:
                case 20:
                 break label$7;
                case 19:
                 break label$8;
                case 8:
                case 24:
                 break label$9;
                default:
                 break label$14;
                };
               }
               label$15 : {
                switch ($0_1 + -48 | 0 | 0) {
                case 0:
                 break label$1;
                case 1:
                case 2:
                case 3:
                 break label$2;
                case 4:
                 break label$8;
                default:
                 break label$15;
                };
               }
               switch ($0_1 + -56 | 0 | 0) {
               case 0:
                break label$10;
               case 4:
                break label$4;
               default:
                break label$2;
               };
              }
              return 3681 | 0;
             }
             return 2396 | 0;
            }
            return 4906 | 0;
           }
           return 4903 | 0;
          }
          return 4909 | 0;
         }
         return 3628 | 0;
        }
        return 3638 | 0;
       }
       return 3631 | 0;
      }
      return 3645 | 0;
     }
     return 3641 | 0;
    }
    return 3649 | 0;
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $1798($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1708($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 18440;
  $2015($0_1 + 52 | 0 | 0, 0 | 0, 47 | 0) | 0;
  $1793($1_1 + 8 | 0 | 0, $2_1 | 0);
  $3_1 = $1799($1_1 + 8 | 0 | 0) | 0;
  $750($1_1 + 8 | 0 | 0) | 0;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $1793($1_1 | 0, $2_1 | 0);
   HEAP32[($0_1 + 68 | 0) >> 2] = $1800($1_1 | 0) | 0;
   $750($1_1 | 0) | 0;
   HEAP8[($0_1 + 98 | 0) >> 0] = $1801(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, 0, 4096) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1799($0_1) {
  $0_1 = $0_1 | 0;
  return $1339($0_1 | 0, 22780 | 0) | 0 | 0;
 }
 
 function $1800($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22780 | 0) | 0 | 0;
 }
 
 function $1801($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1802($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 18440;
  $1803($0_1 | 0) | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 96 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $1845($1_1 | 0);
  }
  label$2 : {
   if (!(HEAPU8[($0_1 + 97 | 0) >> 0] | 0)) {
    break label$2
   }
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   $1845($1_1 | 0);
  }
  $1706($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1803($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if ($2_1) {
     break label$2
    }
    $0_1 = 0;
    break label$1;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = 306;
   $2_1 = $1804($1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
   $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
   $4_1 = $574($1805($2_1 | 0) | 0 | 0) | 0;
   HEAP32[($0_1 + 64 | 0) >> 2] = 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   $1806($2_1 | 0) | 0;
   $0_1 = $4_1 | $3_1 | 0 ? 0 : $0_1;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1804($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1809($0_1 | 0, $3_1 + 12 | 0 | 0, $1808($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1805($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1810($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1810($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1806($0_1) {
  $0_1 = $0_1 | 0;
  $1811($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1807($0_1) {
  $0_1 = $0_1 | 0;
  $1844($1802($0_1 | 0) | 0 | 0);
 }
 
 function $1808($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1809($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1835($0_1 | 0, $1834($1_1 | 0) | 0 | 0) | 0;
  $1837($0_1 + 4 | 0 | 0, $1836($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1810($0_1) {
  $0_1 = $0_1 | 0;
  return $1839($0_1 | 0) | 0 | 0;
 }
 
 function $1811($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1810($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1810($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1838($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1) | 0;
  }
 }
 
 function $1812($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[($0_1 + 64 | 0) >> 2] | 0) {
      break label$3
     }
     $2_1 = $185() | 0;
     break label$2;
    }
    $2_1 = $1813($0_1 | 0) | 0;
    label$4 : {
     if ($1785($0_1 | 0) | 0) {
      break label$4
     }
     $3_1 = $1_1 + 16 | 0;
     $1790($0_1 | 0, $1_1 + 15 | 0 | 0, $3_1 | 0, $3_1 | 0);
    }
    $3_1 = 0;
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $2_1 = $1786($0_1 | 0) | 0;
     $3_1 = $1784($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = 4;
     HEAP32[($1_1 + 8 | 0) >> 2] = ($2_1 - $3_1 | 0 | 0) / (2 | 0) | 0;
     $3_1 = HEAP32[($1384($1_1 + 8 | 0 | 0, $1_1 + 4 | 0 | 0) | 0) >> 2] | 0;
    }
    $2_1 = $185() | 0;
    label$6 : {
     label$7 : {
      if (($1785($0_1 | 0) | 0 | 0) != ($1786($0_1 | 0) | 0 | 0)) {
       break label$7
      }
      $2016($1784($0_1 | 0) | 0 | 0, ($1786($0_1 | 0) | 0) - $3_1 | 0 | 0, $3_1 | 0) | 0;
      label$8 : {
       if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
        break label$8
       }
       $4_1 = $1786($0_1 | 0) | 0;
       $5_1 = $1784($0_1 | 0) | 0;
       $4_1 = $577(($1784($0_1 | 0) | 0) + $3_1 | 0 | 0, 1 | 0, $4_1 - ($3_1 + $5_1 | 0) | 0 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0;
       if (!$4_1) {
        break label$6
       }
       $1790($0_1 | 0, $1784($0_1 | 0) | 0 | 0, ($1784($0_1 | 0) | 0) + $3_1 | 0 | 0, (($1784($0_1 | 0) | 0) + $3_1 | 0) + $4_1 | 0 | 0);
       $2_1 = $288(HEAP8[($1785($0_1 | 0) | 0) >> 0] | 0 | 0) | 0;
       break label$6;
      }
      label$9 : {
       label$10 : {
        $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$10
        }
        $6_1 = $4_1;
        break label$9;
       }
       $2016(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 - $5_1 | 0 | 0) | 0;
       $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       $6_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      }
      $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $4_1 = $5_1 + ($6_1 - $4_1 | 0) | 0;
      HEAP32[($0_1 + 36 | 0) >> 2] = $4_1;
      $5_1 = $5_1 + (wasm2js_i32$0 = 8, wasm2js_i32$1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0, wasm2js_i32$2 = ($5_1 | 0) == ($0_1 + 44 | 0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $5_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 60 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 - $4_1 | 0;
      $4_1 = HEAP32[($1384($1_1 + 8 | 0 | 0, $1_1 + 4 | 0 | 0) | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
      HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      HEAP32[($0_1 + 84 | 0) >> 2] = i64toi32_i32$1;
      $4_1 = $577(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0, $4_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0;
      if (!$4_1) {
       break label$6
      }
      $5_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$1
      }
      $4_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $4_1 | 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
      label$11 : {
       label$12 : {
        if (($1814($5_1 | 0, $0_1 + 72 | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $4_1 | 0, $0_1 + 36 | 0 | 0, ($1784($0_1 | 0) | 0) + $3_1 | 0 | 0, ($1784($0_1 | 0) | 0) + (HEAP32[($0_1 + 60 | 0) >> 2] | 0) | 0 | 0, $1_1 + 8 | 0 | 0) | 0 | 0) != (3 | 0)) {
         break label$12
        }
        $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $1790($0_1 | 0, $2_1 | 0, $2_1 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0);
        break label$11;
       }
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == (($1784($0_1 | 0) | 0) + $3_1 | 0 | 0)) {
        break label$6
       }
       $1790($0_1 | 0, $1784($0_1 | 0) | 0 | 0, ($1784($0_1 | 0) | 0) + $3_1 | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
      }
      $2_1 = $288(HEAP8[($1785($0_1 | 0) | 0) >> 0] | 0 | 0) | 0;
      break label$6;
     }
     $2_1 = $288(HEAP8[($1785($0_1 | 0) | 0) >> 0] | 0 | 0) | 0;
    }
    if (($1784($0_1 | 0) | 0 | 0) != ($1_1 + 15 | 0 | 0)) {
     break label$2
    }
    $1790($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
   }
   global$0 = $1_1 + 16 | 0;
   return $2_1 | 0;
  }
  $1332();
  abort();
 }
 
 function $1813($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $14_1 = 0, $24_1 = 0;
  label$1 : {
   $1_1 = (HEAP32[($0_1 + 92 | 0) >> 2] | 0) & 8 | 0;
   if ($1_1) {
    break label$1
   }
   $1791($0_1 | 0, 0 | 0, 0 | 0);
   label$2 : {
    label$3 : {
     if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
      break label$3
     }
     $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     $14_1 = $2_1;
     $2_1 = $2_1 + (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0;
     $1790($0_1 | 0, $14_1 | 0, $2_1 | 0, $2_1 | 0);
     break label$2;
    }
    $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $24_1 = $2_1;
    $2_1 = $2_1 + (HEAP32[($0_1 + 60 | 0) >> 2] | 0) | 0;
    $1790($0_1 | 0, $24_1 | 0, $2_1 | 0, $2_1 | 0);
   }
   HEAP32[($0_1 + 92 | 0) >> 2] = 8;
  }
  return !$1_1 | 0;
 }
 
 function $1814($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1815($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
    break label$1
   }
   if (($1784($0_1 | 0) | 0) >>> 0 >= ($1785($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    if (!($186($1_1 | 0, $185() | 0 | 0) | 0)) {
     break label$2
    }
    $1719($0_1 | 0, -1 | 0);
    return $1795($1_1 | 0) | 0 | 0;
   }
   label$3 : {
    if ((HEAPU8[($0_1 + 88 | 0) >> 0] | 0) & 16 | 0) {
     break label$3
    }
    if (!($1757($1720($1_1 | 0) | 0 | 0, HEAP8[(($1785($0_1 | 0) | 0) + -1 | 0) >> 0] | 0 | 0) | 0)) {
     break label$1
    }
   }
   $1719($0_1 | 0, -1 | 0);
   $2_1 = $1720($1_1 | 0) | 0;
   HEAP8[($1785($0_1 | 0) | 0) >> 0] = $2_1;
   return $1_1 | 0;
  }
  return $185() | 0 | 0;
 }
 
 function $1816($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $7_1 = 0, $70_1 = 0, $72_1 = 0, $111_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
     break label$2
    }
    $1817($0_1 | 0);
    $3_1 = $1787($0_1 | 0) | 0;
    $4_1 = $1789($0_1 | 0) | 0;
    label$3 : {
     if ($186($1_1 | 0, $185() | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      if ($1788($0_1 | 0) | 0) {
       break label$4
      }
      $1791($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 16 | 0 | 0);
     }
     $5_1 = $1720($1_1 | 0) | 0;
     HEAP8[($1788($0_1 | 0) | 0) >> 0] = $5_1;
     $1794($0_1 | 0, 1 | 0);
    }
    label$5 : {
     if (($1788($0_1 | 0) | 0 | 0) == ($1787($0_1 | 0) | 0 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
        break label$7
       }
       $5_1 = $1788($0_1 | 0) | 0;
       $6_1 = $1787($0_1 | 0) | 0;
       $5_1 = $5_1 - $6_1 | 0;
       if (($2019($1787($0_1 | 0) | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
        break label$2
       }
       break label$6;
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $7_1 = $0_1 + 72 | 0;
      label$8 : {
       label$9 : while (1) {
        $5_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$8
        }
        $70_1 = $1787($0_1 | 0) | 0;
        $72_1 = $1788($0_1 | 0) | 0;
        $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $5_1 = $1818($5_1 | 0, $7_1 | 0, $70_1 | 0, $72_1 | 0, $2_1 + 4 | 0 | 0, $6_1 | 0, $6_1 + (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
        if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) == ($1787($0_1 | 0) | 0 | 0)) {
         break label$2
        }
        label$10 : {
         if (($5_1 | 0) != (3 | 0)) {
          break label$10
         }
         $5_1 = $1788($0_1 | 0) | 0;
         $6_1 = $1787($0_1 | 0) | 0;
         $5_1 = $5_1 - $6_1 | 0;
         if (($2019($1787($0_1 | 0) | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
          break label$2
         }
         break label$6;
        }
        if ($5_1 >>> 0 > 1 >>> 0) {
         break label$2
        }
        $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $111_1 = $6_1;
        $6_1 = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $6_1 | 0;
        if (($2019($111_1 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
         break label$2
        }
        if (($5_1 | 0) != (1 | 0)) {
         break label$6
        }
        $1791($0_1 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $1788($0_1 | 0) | 0 | 0);
        $1792($0_1 | 0, ($1789($0_1 | 0) | 0) - ($1787($0_1 | 0) | 0) | 0 | 0);
        continue label$9;
       };
      }
      $1332();
      abort();
     }
     $1791($0_1 | 0, $3_1 | 0, $4_1 | 0);
    }
    $0_1 = $1795($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $185() | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1817($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAPU8[($0_1 + 92 | 0) >> 0] | 0) & 16 | 0) {
    break label$1
   }
   $1790($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if ($1_1 >>> 0 < 9 >>> 0) {
      break label$3
     }
     label$4 : {
      if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
       break label$4
      }
      $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $1791($0_1 | 0, $2_1 | 0, ($1_1 + $2_1 | 0) + -1 | 0 | 0);
      break label$2;
     }
     $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $1791($0_1 | 0, $1_1 | 0, ($1_1 + (HEAP32[($0_1 + 60 | 0) >> 2] | 0) | 0) + -1 | 0 | 0);
     break label$2;
    }
    $1791($0_1 | 0, 0 | 0, 0 | 0);
   }
   HEAP32[($0_1 + 92 | 0) >> 2] = 16;
  }
 }
 
 function $1818($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1819($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $1790($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
  $1791($0_1 | 0, 0 | 0, 0 | 0);
  label$1 : {
   if (!(HEAPU8[($0_1 + 96 | 0) >> 0] | 0)) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $1845($4_1 | 0);
  }
  label$2 : {
   if (!(HEAPU8[($0_1 + 97 | 0) >> 0] | 0)) {
    break label$2
   }
   $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   $1845($4_1 | 0);
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($2_1 >>> 0 < 9 >>> 0) {
       break label$6
      }
      label$7 : {
       $4_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
       if (!$4_1) {
        break label$7
       }
       if (!$1_1) {
        break label$7
       }
       HEAP8[($0_1 + 96 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
       break label$4;
      }
      $2_1 = $1843($2_1 | 0) | 0;
      HEAP8[($0_1 + 96 | 0) >> 0] = 1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
      break label$5;
     }
     HEAP8[($0_1 + 96 | 0) >> 0] = 0;
     HEAP32[($0_1 + 52 | 0) >> 2] = 8;
     HEAP32[($0_1 + 32 | 0) >> 2] = $0_1 + 44 | 0;
     $4_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
    }
    if ($4_1 & 255 | 0) {
     break label$4
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = 8;
    $4_1 = HEAP32[($1820($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = $4_1;
    label$8 : {
     if (!$1_1) {
      break label$8
     }
     $2_1 = 0;
     if ($4_1 >>> 0 > 7 >>> 0) {
      break label$3
     }
    }
    $2_1 = 1;
    $1_1 = $1843($4_1 | 0) | 0;
    break label$3;
   }
   $1_1 = 0;
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
   $2_1 = 0;
  }
  HEAP8[($0_1 + 97 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1821($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1821($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1833($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1822($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $36_1 = 0, $38$hi = 0, $17_1 = 0, $68_1 = 0, $71_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  label$1 : {
   $6_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$1
   }
   $6_1 = $1823($6_1 | 0) | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
       break label$4
      }
      label$5 : {
       if (($6_1 | 0) > (0 | 0)) {
        break label$5
       }
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
        break label$4
       }
      }
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
       break label$3
      }
     }
     i64toi32_i32$2 = -1;
     $1712($0_1 | 0, -1 | 0, i64toi32_i32$2 | 0) | 0;
     break label$2;
    }
    label$6 : {
     if ($3_1 >>> 0 < 3 >>> 0) {
      break label$6
     }
     i64toi32_i32$2 = -1;
     $1712($0_1 | 0, -1 | 0, i64toi32_i32$2 | 0) | 0;
     break label$2;
    }
    label$7 : {
     $36_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $38$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $38$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     i64toi32_i32$4 = ($6_1 | 0) > (0 | 0);
     $17_1 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 ? $17_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
     if (!($569($36_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, $3_1 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$3 = -1;
     $1712($0_1 | 0, -1 | 0, i64toi32_i32$3 | 0) | 0;
     break label$2;
    }
    i64toi32_i32$3 = $582(HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $6_1 = $1712($5_1 + 16 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 72 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 76 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $5_1;
    HEAP32[i64toi32_i32$1 >> 2] = $2_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
    $1824($6_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$4 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $68_1 = i64toi32_i32$3;
    i64toi32_i32$3 = $0_1 + 8 | 0;
    HEAP32[i64toi32_i32$3 >> 2] = $68_1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $71_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
   }
   global$0 = $5_1 + 32 | 0;
   return;
  }
  $1332();
  abort();
 }
 
 function $1823($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1824($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $1825($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $20_1 = 0, $32_1 = 0, $37_1 = 0, $40_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
      break label$3
     }
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
      break label$2
     }
    }
    i64toi32_i32$0 = -1;
    $1712($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    $20_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = $1758($2_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    if (!($569($20_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0) | 0)) {
     break label$4
    }
    i64toi32_i32$1 = -1;
    $1712($0_1 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
    break label$1;
   }
   $1826($4_1 + 8 | 0 | 0, $2_1 | 0);
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   $32_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $32_1;
   HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $37_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $37_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $40_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1826($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $1827($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $51_1 = 0, $73_1 = 0, $100$hi = 0, $128$hi = 0, $140_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
       if (!($2_1 & 16 | 0)) {
        break label$5
       }
       label$6 : {
        if (($1788($0_1 | 0) | 0 | 0) == ($1787($0_1 | 0) | 0 | 0)) {
         break label$6
        }
        $2_1 = -1;
        if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $185() | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($185() | 0 | 0)) {
         break label$2
        }
       }
       $4_1 = $0_1 + 72 | 0;
       label$7 : while (1) {
        $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $3_1 = $1828(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0, $4_1 | 0, $2_1 | 0, $2_1 + (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
        $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $51_1 = $2_1;
        $2_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) - $2_1 | 0;
        if (($2019($51_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($2_1 | 0)) {
         break label$3
        }
        $2_1 = -1;
        label$8 : {
         switch ($3_1 + -1 | 0 | 0) {
         case 1:
          break label$2;
         case 0:
          continue label$7;
         default:
          break label$8;
         };
        }
        break label$7;
       };
       if (!($578(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0)) {
        break label$4
       }
       break label$2;
      }
      if (!($2_1 & 8 | 0)) {
       break label$4
      }
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
      $73_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[i64toi32_i32$0 >> 2] = $73_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
           break label$12
          }
          i64toi32_i32$0 = ($1786($0_1 | 0) | 0) - ($1785($0_1 | 0) | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
          $5_1 = i64toi32_i32$0;
          $5$hi = i64toi32_i32$1;
          break label$11;
         }
         $2_1 = $1823($3_1 | 0) | 0;
         i64toi32_i32$0 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) - (HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
         $5_1 = i64toi32_i32$0;
         $5$hi = i64toi32_i32$1;
         label$13 : {
          if (($2_1 | 0) < (1 | 0)) {
           break label$13
          }
          i64toi32_i32$0 = Math_imul(($1786($0_1 | 0) | 0) - ($1785($0_1 | 0) | 0) | 0, $2_1);
          i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
          $100$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $5$hi;
          i64toi32_i32$1 = $100$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $5$hi;
          i64toi32_i32$3 = $5_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $5_1 = i64toi32_i32$4;
          $5$hi = i64toi32_i32$5;
          break label$11;
         }
         if (($1785($0_1 | 0) | 0 | 0) != ($1786($0_1 | 0) | 0 | 0)) {
          break label$10
         }
        }
        $2_1 = 0;
        break label$9;
       }
       $2_1 = $1829(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, ($1785($0_1 | 0) | 0) - ($1784($0_1 | 0) | 0) | 0 | 0) | 0;
       i64toi32_i32$2 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) - ($2_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $128$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $5$hi;
       i64toi32_i32$5 = $128$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$2 = $5$hi;
       i64toi32_i32$3 = $5_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + $5$hi | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $5_1 = i64toi32_i32$0;
       $5$hi = i64toi32_i32$4;
       $2_1 = 1;
      }
      i64toi32_i32$4 = $5$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
      i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      if ($569(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 | 0, 1 | 0) | 0) {
       break label$3
      }
      label$14 : {
       if (!$2_1) {
        break label$14
       }
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
       $140_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $0_1;
       HEAP32[($0_1 + 72 | 0) >> 2] = $140_1;
       HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$5;
      }
      $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
      HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
      $1790($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
      HEAP32[($0_1 + 92 | 0) >> 2] = 0;
     }
     $2_1 = 0;
     break label$2;
    }
    $2_1 = -1;
   }
   global$0 = $1_1 + 16 | 0;
   return $2_1 | 0;
  }
  $1332();
  abort();
 }
 
 function $1828($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1829($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1830($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1800($1_1 | 0) | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1;
  $2_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
  $1_1 = $1801($1_1 | 0) | 0;
  HEAP8[($0_1 + 98 | 0) >> 0] = $1_1;
  label$1 : {
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $1790($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
   $1791($0_1 | 0, 0 | 0, 0 | 0);
   $1_1 = HEAPU8[($0_1 + 96 | 0) >> 0] | 0;
   label$2 : {
    if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 255 | 0)) {
      break label$3
     }
     $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     $1845($1_1 | 0);
    }
    HEAP8[($0_1 + 96 | 0) >> 0] = HEAPU8[($0_1 + 97 | 0) >> 0] | 0;
    HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
    $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    HEAP32[($0_1 + 56 | 0) >> 2] = 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = 0;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 97 | 0) >> 0] = 0;
    return;
   }
   label$4 : {
    if ($1_1 & 255 | 0) {
     break label$4
    }
    $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    if (($1_1 | 0) == ($0_1 + 44 | 0 | 0)) {
     break label$4
    }
    HEAP8[($0_1 + 97 | 0) >> 0] = 0;
    HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
    $1_1 = $1843($1_1 | 0) | 0;
    HEAP8[($0_1 + 96 | 0) >> 0] = 1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    return;
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
   $1_1 = $1843($1_1 | 0) | 0;
   HEAP8[($0_1 + 97 | 0) >> 0] = 1;
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  }
 }
 
 function $1831($0_1) {
  $0_1 = $0_1 | 0;
  $1844($115($0_1 | 0) | 0 | 0);
 }
 
 function $1832($0_1) {
  $0_1 = $0_1 | 0;
  $1831($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1833($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1834($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1835($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1834($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1836($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1837($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1836($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1838($0_1) {
  $0_1 = $0_1 | 0;
  return $1840($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1839($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1840($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1841() {
  fimport$69();
  abort();
 }
 
 function $1842($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $0_1 = $2004($1_1 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    label$3 : {
     $0_1 = $1968() | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[$0_1 | 0]();
     continue label$2;
    }
    break label$2;
   };
   fimport$69();
   abort();
  }
  return $0_1 | 0;
 }
 
 function $1843($0_1) {
  $0_1 = $0_1 | 0;
  return $1842($0_1 | 0) | 0 | 0;
 }
 
 function $1844($0_1) {
  $0_1 = $0_1 | 0;
  $2005($0_1 | 0);
 }
 
 function $1845($0_1) {
  $0_1 = $0_1 | 0;
  $1844($0_1 | 0);
 }
 
 function $1846($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1847($0_1 | 0);
 }
 
 function $1847($0_1) {
  $0_1 = $0_1 | 0;
  $2005($0_1 | 0);
 }
 
 function $1848($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1849($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $1850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $3_1 = $2020($1_1 | 0) | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1) {
        break label$6
       }
       $576($1_1 | 0) | 0;
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$5
       }
      }
      if ($2_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
       break label$4
      }
     }
     $2_1 = -1;
     if ($3_1) {
      break label$3
     }
     break label$1;
    }
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    HEAP8[$2_1 >> 0] = $0_1;
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
    $2_1 = $0_1;
    if (!$3_1) {
     break label$1
    }
   }
   $2021($1_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1851($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($2020($0_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $657($0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$4;
   }
   $1_1 = $657($0_1 | 0) | 0;
  }
  $2021($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $1852() {
  $1853(27320 | 0) | 0;
 }
 
 function $1853($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 27680 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1953(27680 | 0) | 0)) {
    break label$1
   }
   $1854(27676 | 0) | 0;
   fimport$0(371 | 0, 0 | 0, 1024 | 0) | 0;
   $1961(27680 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1854($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[(0 + 19264 | 0) >> 2] | 0;
  $1855(27324 | 0, $1_1 | 0, 27380 | 0) | 0;
  $1856(26640 | 0, 27324 | 0) | 0;
  $1857(27388 | 0, $1_1 | 0, 27444 | 0) | 0;
  $1858(26728 | 0, 27388 | 0) | 0;
  $1_1 = HEAP32[(0 + 19268 | 0) >> 2] | 0;
  $1859(27452 | 0, $1_1 | 0, 27500 | 0) | 0;
  $1860(26816 | 0, 27452 | 0) | 0;
  $1861(27508 | 0, $1_1 | 0, 27556 | 0) | 0;
  $1862(26900 | 0, 27508 | 0) | 0;
  $1_1 = HEAP32[(0 + 19272 | 0) >> 2] | 0;
  $1859(27564 | 0, $1_1 | 0, 27612 | 0) | 0;
  $1860(26984 | 0, 27564 | 0) | 0;
  $1860(27152 | 0, $123((HEAP32[((HEAP32[(0 + 26984 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 26984 | 0 | 0) | 0 | 0) | 0;
  $1861(27620 | 0, $1_1 | 0, 27668 | 0) | 0;
  $1862(27068 | 0, 27620 | 0) | 0;
  $1862(27236 | 0, $1768((HEAP32[((HEAP32[(0 + 27068 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 27068 | 0 | 0) | 0 | 0) | 0;
  $1863((HEAP32[((HEAP32[(0 + 26640 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 26640 | 0 | 0, 26816 | 0) | 0;
  $1864((HEAP32[((HEAP32[(0 + 26728 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 26728 | 0 | 0, 26900 | 0) | 0;
  $1865((HEAP32[((HEAP32[(0 + 26984 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 26984 | 0 | 0) | 0;
  $1865((HEAP32[((HEAP32[(0 + 27068 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 27068 | 0 | 0) | 0;
  $1863((HEAP32[((HEAP32[(0 + 26984 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 26984 | 0 | 0, 26816 | 0) | 0;
  $1864((HEAP32[((HEAP32[(0 + 27068 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 27068 | 0 | 0, 26900 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1855($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1708($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 19284;
  $1_1 = $185() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  $1793($3_1 + 8 | 0 | 0, $4_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 8 | 0);
  $750($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1856($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $116($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18240 + 12 | 0;
  HEAP32[$2_1 >> 2] = 18240 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $279($0_1 + (HEAP32[(0 + 18240 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1857($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1729($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 19384;
  $1_1 = $908() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  $1866($3_1 + 8 | 0 | 0, $4_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 8 | 0);
  $750($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1867($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18288 + 12 | 0;
  HEAP32[$2_1 >> 2] = 18288 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1868($0_1 + (HEAP32[(0 + 18288 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1859($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1708($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 19484;
  $1793($3_1 + 8 | 0 | 0, $4_1 | 0);
  $1_1 = $1800($3_1 + 8 | 0 | 0) | 0;
  $750($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1801($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $116($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18336 + 12 | 0;
  HEAP32[$2_1 >> 2] = 18336 + 32 | 0;
  $279($0_1 + (HEAP32[(0 + 18336 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1861($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1729($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 19588;
  $1866($3_1 + 8 | 0 | 0, $4_1 | 0);
  $1_1 = $1869($3_1 + 8 | 0 | 0) | 0;
  $750($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1870($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1867($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18384 + 12 | 0;
  HEAP32[$2_1 >> 2] = 18384 + 32 | 0;
  $1868($0_1 + (HEAP32[(0 + 18384 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1865($0_1) {
  $0_1 = $0_1 | 0;
  $1871($0_1 | 0, 8192 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1336($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $1867($0_1) {
  $0_1 = $0_1 | 0;
  $278($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 18568 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $621($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $908() | 0;
 }
 
 function $1869($0_1) {
  $0_1 = $0_1 | 0;
  return $755($0_1 | 0, 22788 | 0) | 0 | 0;
 }
 
 function $1870($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $1872($0_1) {
  $0_1 = $0_1 | 0;
  $1752(26816 | 0) | 0;
  $1766(26900 | 0) | 0;
  $1752(27152 | 0) | 0;
  $1766(27236 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1873($0_1) {
  $0_1 = $0_1 | 0;
  $1872(27676 | 0) | 0;
 }
 
 function $1874($0_1) {
  $0_1 = $0_1 | 0;
  $1706($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1800($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1823($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $1801(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $1004(1612 | 0);
   abort();
  }
 }
 
 function $1876($0_1) {
  $0_1 = $0_1 | 0;
  return $1877($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $185() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $3_1 = 0;
   $5_1 = HEAP32[($1880($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      $4_1 = $1851(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    label$6 : {
     label$7 : {
      if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
      break label$6;
     }
     $6_1 = ($2_1 + 23 | 0) + 1 | 0;
     label$8 : {
      label$9 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$10 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($1814(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 0:
         break label$10;
        case 1:
         break label$3;
        case 2:
         break label$8;
        default:
         break label$6;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $1851(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$9;
      };
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$11 : {
     label$12 : {
      if ($1_1) {
       break label$12
      }
      label$13 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($1850($288(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$13;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $288(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    }
    $3_1 = $288(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $185() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1878($0_1) {
  $0_1 = $0_1 | 0;
  return $1877($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1879($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $186($1_1 | 0, $185() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$3_1) {
      break label$3
     }
     $3_1 = $1_1;
     if ($4_1 & 255 | 0) {
      break label$1
     }
     $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     $3_1 = ($186($1_1 | 0, $185() | 0 | 0) | 0) ^ 1 | 0;
     break label$2;
    }
    label$4 : {
     if (!($4_1 & 255 | 0)) {
      break label$4
     }
     HEAP8[($2_1 + 19 | 0) >> 0] = $1720(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     label$5 : {
      label$6 : {
       switch (($1818(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, ($2_1 + 19 | 0) + 1 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
       case 2:
        $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = ($2_1 + 24 | 0) + 1 | 0;
        HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
       default:
        label$9 : while (1) {
         label$10 : {
          $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          if ($3_1 >>> 0 > ($2_1 + 24 | 0) >>> 0) {
           break label$10
          }
          $4_1 = 1;
          break label$5;
         }
         $3_1 = $3_1 + -1 | 0;
         HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
         if (($1850(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
          continue label$9
         }
         break label$9;
        };
        break;
       case 0:
       case 1:
        break label$6;
       };
      }
      $4_1 = 0;
      $3_1 = $185() | 0;
     }
     if (!$4_1) {
      break label$1
     }
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
    $3_1 = 1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = $3_1;
   $3_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1880($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1881($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1881($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1882($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1882($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1883($0_1) {
  $0_1 = $0_1 | 0;
  $1727($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1884($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1869($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1885($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $1870(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $1004(1612 | 0);
   abort();
  }
 }
 
 function $1885($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1886($0_1) {
  $0_1 = $0_1 | 0;
  return $1887($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1887($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $908() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $3_1 = 0;
   $5_1 = HEAP32[($1880($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      $4_1 = $1851(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    label$6 : {
     label$7 : {
      if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
      break label$6;
     }
     $6_1 = $2_1 + 24 | 0;
     label$8 : {
      label$9 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$10 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($1891(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 0:
         break label$10;
        case 1:
         break label$3;
        case 2:
         break label$8;
        default:
         break label$6;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $1851(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$9;
      };
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$11 : {
     label$12 : {
      if ($1_1) {
       break label$12
      }
      label$13 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($1850($1663(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$13;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $1663(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    }
    $3_1 = $1663(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $908() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1888($0_1) {
  $0_1 = $0_1 | 0;
  return $1887($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1889($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $909($1_1 | 0, $908() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$3_1) {
      break label$3
     }
     $3_1 = $1_1;
     if ($4_1 & 255 | 0) {
      break label$1
     }
     $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     $3_1 = ($909($1_1 | 0, $908() | 0 | 0) | 0) ^ 1 | 0;
     break label$2;
    }
    label$4 : {
     if (!($4_1 & 255 | 0)) {
      break label$4
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1739(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     label$5 : {
      label$6 : {
       switch (($1890(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
       case 2:
        $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
        HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
       default:
        label$9 : while (1) {
         label$10 : {
          $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          if ($3_1 >>> 0 > ($2_1 + 24 | 0) >>> 0) {
           break label$10
          }
          $4_1 = 1;
          break label$5;
         }
         $3_1 = $3_1 + -1 | 0;
         HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
         if (($1850(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
          continue label$9
         }
         break label$9;
        };
        break;
       case 0:
       case 1:
        break label$6;
       };
      }
      $4_1 = 0;
      $3_1 = $908() | 0;
     }
     if (!$4_1) {
      break label$1
     }
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
    $3_1 = 1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = $3_1;
   $3_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1890($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1891($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1892($0_1) {
  $0_1 = $0_1 | 0;
  $1706($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1893($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1800($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1801($1_1 | 0) | 0;
 }
 
 function $1894($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1828(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($2019($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $578(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1895($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $288(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($185() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $2019($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1896($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($186($1_1 | 0, $185() | 0 | 0) | 0) {
      break label$3
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = $1720($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($2019($2_1 + 23 | 0 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = ($2_1 + 23 | 0) + 1 | 0;
     $5_1 = $2_1 + 23 | 0;
     label$5 : while (1) {
      $6_1 = $1818(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($2019($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($2019($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $1795($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $185() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1897($0_1) {
  $0_1 = $0_1 | 0;
  $1727($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1898($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1869($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1870($1_1 | 0) | 0;
 }
 
 function $1899($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1900(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($2019($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $578(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1900($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1901($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1663(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($908() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $2019($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($909($1_1 | 0, $908() | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $1739($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($2019($2_1 + 20 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = $2_1 + 24 | 0;
     $5_1 = $2_1 + 20 | 0;
     label$5 : while (1) {
      $6_1 = $1890(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($2019($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($2019($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $1903($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $908() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1903($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($909($0_1 | 0, $908() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($908() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1904() {
  $1852();
 }
 
 function $1905() {
  
 }
 
 function $1906($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((($0_1 - $1_1 | 0) >> 2 | 0) >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = $2_1 + -1 | 0;
     $3_1 = $2_1 << 2 | 0;
     HEAP32[($0_1 + $3_1 | 0) >> 2] = HEAP32[($1_1 + $3_1 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$4 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$4
    }
    break label$4;
   };
  }
  return $0_1 | 0;
 }
 
 function $1907($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = $1_1;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1908($0_1) {
  $0_1 = $0_1 | 0;
  $1549(2959 | 0);
  abort();
 }
 
 function $1909($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $2016($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1910($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1559($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $188($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1561(HEAP32[($615($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $11_1 = $2_1 + 1 | 0;
   $2_1 = $1563($149($0_1 | 0) | 0 | 0, $11_1 | 0) | 0;
   $1079($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $1718($189($2_1 | 0) | 0 | 0, $189($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $1718(($189($2_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $9_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$9_1) {
     break label$6
    }
    $1718((($189($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($189($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $9_1 | 0) | 0;
   }
   label$7 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$7
    }
    $152($149($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1565($0_1 | 0, $2_1 | 0);
   $1566($0_1 | 0, $11_1 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $9_1 | 0;
   $1080($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 7 | 0) >> 0] = 0;
   $156($2_1 + $4_1 | 0 | 0, $8_1 + 7 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1911($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($15($0_1 | 0) | 0)) {
    break label$1
   }
   $152($149($0_1 | 0) | 0 | 0, $150($0_1 | 0) | 0 | 0, $151($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1912($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1559($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $188($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1561(HEAP32[($615($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1563($149($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $1079($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $1718($189($2_1 | 0) | 0 | 0, $189($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$3_1) {
     break label$5
    }
    $1718((($189($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($189($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$6
    }
    $152($149($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1565($0_1 | 0, $2_1 | 0);
   $1566($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1913($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2015($0_1 | 0, $288($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1914($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1559($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $154($0_1 | 0, $2_1 | 0);
     $4_1 = $155($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1561($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1563($149($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1565($0_1 | 0, $4_1 | 0);
    $1566($0_1 | 0, $5_1 | 0);
    $1080($0_1 | 0, $2_1 | 0);
   }
   $1718($189($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $156($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1915($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $3_1 = $155($0_1 | 0) | 0;
     $154($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if (($1559($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $3_1 = $1561($2_1 | 0) | 0;
    $4_1 = $3_1 + 1 | 0;
    $3_1 = $1563($149($0_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    $1565($0_1 | 0, $3_1 | 0);
    $1566($0_1 | 0, $4_1 | 0);
    $1080($0_1 | 0, $2_1 | 0);
   }
   $1718($189($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1916($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $768($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $189($188($0_1 | 0) | 0 | 0) | 0;
    $1909($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $156($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    $1681($0_1 | 0, $2_1 | 0);
    $1651($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $122($0_1 | 0) | 0;
   $1910($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1917($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1916($0_1 | 0, $1_1 | 0, $10($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1918($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $768($0_1 | 0) | 0;
    $5_1 = $122($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $189($188($0_1 | 0) | 0 | 0) | 0;
    $1718($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1681($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $156($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break label$1;
   }
   $1910($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1919($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1559($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $154($0_1 | 0, $1_1 | 0);
     $4_1 = $155($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1561($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1563($149($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1565($0_1 | 0, $4_1 | 0);
    $1566($0_1 | 0, $5_1 | 0);
    $1080($0_1 | 0, $1_1 | 0);
   }
   $1913($189($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $156($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1920($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($15($0_1 | 0) | 0)) {
        break label$5
       }
       $1_1 = $151($0_1 | 0) | 0;
       $3_1 = $20($0_1 | 0) | 0;
       $4_1 = $1_1 + -1 | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $3_1 = 10;
      $4_1 = 10;
      $1_1 = $280($0_1 | 0) | 0;
      if (($1_1 | 0) != (10 | 0)) {
       break label$3
      }
     }
     $1912($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1_1 = $3_1;
     if ($15($0_1 | 0) | 0) {
      break label$2
     }
    }
    $4_1 = $155($0_1 | 0) | 0;
    $154($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$1;
   }
   $4_1 = $150($0_1 | 0) | 0;
   $1080($0_1 | 0, $3_1 + 1 | 0 | 0);
   $1_1 = $3_1;
  }
  $0_1 = $4_1 + $1_1 | 0;
  $156($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $156($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1921($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $4_1 = $768($0_1 | 0) | 0;
   $5_1 = $122($0_1 | 0) | 0;
   $6_1 = $5_1 + $1_1 | 0;
   label$2 : {
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $1912($0_1 | 0, $4_1 | 0, $6_1 - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $4_1 = $188($0_1 | 0) | 0;
   $1913(($189($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1681($0_1 | 0, $6_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $156($4_1 + $6_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1922($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $122($0_1 | 0) | 0;
   if ($3_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1921($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $1652($0_1 | 0, $1_1 | 0);
 }
 
 function $1923($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $1906($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1924($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1624($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $904($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1625(HEAP32[($615($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $11_1 = $2_1 + 1 | 0;
   $2_1 = $1626($1514($0_1 | 0) | 0 | 0, $11_1 | 0) | 0;
   $1136($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $1737($1639($2_1 | 0) | 0 | 0, $1639($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $1737(($1639($2_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $9_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$9_1) {
     break label$6
    }
    $3_1 = $4_1 << 2 | 0;
    $1737((($1639($2_1 | 0) | 0) + $3_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1639($10_1 | 0) | 0) + $3_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $9_1 | 0) | 0;
   }
   label$7 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$7
    }
    $1512($1514($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1627($0_1 | 0, $2_1 | 0);
   $1628($0_1 | 0, $11_1 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $9_1 | 0;
   $1139($0_1 | 0, $4_1 | 0);
   HEAP32[($8_1 + 4 | 0) >> 2] = 0;
   $1138($2_1 + ($4_1 << 2 | 0) | 0 | 0, $8_1 + 4 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1925($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($968($0_1 | 0) | 0)) {
    break label$1
   }
   $1512($1514($0_1 | 0) | 0 | 0, $1137($0_1 | 0) | 0 | 0, $1516($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1926($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1624($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $904($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1625(HEAP32[($615($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1626($1514($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $1136($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $1737($1639($2_1 | 0) | 0 | 0, $1639($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$3_1) {
     break label$5
    }
    $4_1 = $4_1 << 2 | 0;
    $1737((($1639($2_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1639($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$6
    }
    $1512($1514($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1627($0_1 | 0, $2_1 | 0);
   $1628($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1927($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = $1907($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1928($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1624($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1141($0_1 | 0, $2_1 | 0);
     $4_1 = $1140($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1625($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1626($1514($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1627($0_1 | 0, $4_1 | 0);
    $1628($0_1 | 0, $5_1 | 0);
    $1139($0_1 | 0, $2_1 | 0);
   }
   $1737($1639($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1138($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1929($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $3_1 = $1140($0_1 | 0) | 0;
     $1141($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if (($1624($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $3_1 = $1625($2_1 | 0) | 0;
    $4_1 = $3_1 + 1 | 0;
    $3_1 = $1626($1514($0_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    $1627($0_1 | 0, $3_1 | 0);
    $1628($0_1 | 0, $4_1 | 0);
    $1139($0_1 | 0, $2_1 | 0);
   }
   $1737($1639($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1930($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1480($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1639($904($0_1 | 0) | 0 | 0) | 0;
    $1923($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1138($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    $1482($0_1 | 0, $2_1 | 0);
    $1481($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $819($0_1 | 0) | 0;
   $1924($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1930($0_1 | 0, $1_1 | 0, $1438($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1932($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1480($0_1 | 0) | 0;
    $5_1 = $819($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1639($904($0_1 | 0) | 0 | 0) | 0;
    $1737($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1482($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1138($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break label$1;
   }
   $1924($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1933($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1624($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1141($0_1 | 0, $1_1 | 0);
     $4_1 = $1140($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1625($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1626($1514($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1627($0_1 | 0, $4_1 | 0);
    $1628($0_1 | 0, $5_1 | 0);
    $1139($0_1 | 0, $1_1 | 0);
   }
   $1927($1639($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1138($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1908($0_1 | 0);
  abort();
 }
 
 function $1934($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($968($0_1 | 0) | 0)) {
        break label$5
       }
       $1_1 = $1516($0_1 | 0) | 0;
       $3_1 = $969($0_1 | 0) | 0;
       $4_1 = $1_1 + -1 | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $3_1 = 1;
      $4_1 = 1;
      $1_1 = $970($0_1 | 0) | 0;
      if (($1_1 | 0) != (1 | 0)) {
       break label$3
      }
     }
     $1926($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1_1 = $3_1;
     if ($968($0_1 | 0) | 0) {
      break label$2
     }
    }
    $4_1 = $1140($0_1 | 0) | 0;
    $1141($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$1;
   }
   $4_1 = $1137($0_1 | 0) | 0;
   $1139($0_1 | 0, $3_1 + 1 | 0 | 0);
   $1_1 = $3_1;
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $1138($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $1138($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $720(27684 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    $1936(27712 | 0, 27684 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$3
   }
   $1937($0_1 | 0);
   $721(27684 | 0) | 0;
   FUNCTION_TABLE[$2_1 | 0]($1_1);
   $720(27684 | 0) | 0;
   $1938($0_1 | 0);
   $721(27684 | 0) | 0;
   $1939(27712 | 0) | 0;
   return;
  }
  $721(27684 | 0) | 0;
 }
 
 function $1936($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $716($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1937($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $1938($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $1939($0_1) {
  $0_1 = $0_1 | 0;
  return $717($0_1 | 0) | 0 | 0;
 }
 
 function $1940() {
  return ($1941() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $1941() {
  return $2003() | 0 | 0;
 }
 
 function $1942($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1943($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $9_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1944($1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $9_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $31(i64toi32_i32$0 + 8 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1944($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  i64toi32_i32$0 = $1945($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  global$0 = $1_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1945($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $10_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1942($1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $10_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $137(i64toi32_i32$0 + 8 | 0 | 0, i64toi32_i32$0 | 0, 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1946($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1947() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1948() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1948() {
  var $0_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $23_1 = 0;
  $0_1 = global$0 - 48 | 0;
  global$0 = $0_1;
  label$1 : {
   if (!(fimport$73(1 | 0, $0_1 + 32 | 0 | 0) | 0)) {
    break label$1
   }
   $656(HEAP32[($605() | 0) >> 2] | 0 | 0, 3540 | 0);
   abort();
  }
  i64toi32_i32$0 = $1950($1946($0_1 + 16 | 0 | 0, $0_1 + 32 | 0 | 0, 0 | 0) | 0 | 0, $1949($0_1 + 8 | 0 | 0, $0_1 + 32 | 0 | 4 | 0 | 0, 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $23_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1951($0_1 + 40 | 0 | 0, $0_1 + 24 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  global$0 = $0_1 + 48 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1949($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1950($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $14_1 = 0, $15_1 = 0, $18_1 = 0, $18$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $31($1943($2_1 + 8 | 0 | 0, $0_1 | 0, 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $14_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $31(i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $18_1 = i64toi32_i32$0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $15_1;
  HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$1 = $137($2_1 + 24 | 0 | 0, $2_1 + 16 | 0 | 0, 0 | 0) | 0;
  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$2;
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $1951($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1952($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  abort();
 }
 
 function $1953($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $1955($1954($1_1 | 0, $0_1 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1956($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1955($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   if ($1958($1957($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
    break label$1
   }
   $2_1 = $1960($1959($0_1 | 0) | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1957($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1958($0_1) {
  $0_1 = $0_1 | 0;
  return $1965(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1959($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1960($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    if (($0_1 | 0) == (1 | 0)) {
     break label$2
    }
    if ($0_1 & 2 | 0) {
     break label$1
    }
    HEAP8[$2_1 >> 0] = 2;
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  $1952(2478 | 0, 0 | 0);
  abort();
 }
 
 function $1961($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1962($1954($1_1 | 0, $0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1962($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1963($1957($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  $1964($1959($0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1963($0_1) {
  $0_1 = $0_1 | 0;
  $1966(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1964($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 0] = 1;
 }
 
 function $1965($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1966($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[$0_1 >> 0] = 1;
 }
 
 function $1967($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1968() {
  return $1967(27760 | 0) | 0 | 0;
 }
 
 function $1969() {
  $1952(5047 | 0, 0 | 0);
  abort();
 }
 
 function $1970($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1971($0_1) {
  $0_1 = $0_1 | 0;
  $1970($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1972($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1973($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1974($0_1) {
  $0_1 = $0_1 | 0;
  $1971($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1975($0_1) {
  $0_1 = $0_1 | 0;
  $1971($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1976($0_1) {
  $0_1 = $0_1 | 0;
  $1971($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1977($0_1) {
  $0_1 = $0_1 | 0;
  $1971($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1978($0_1) {
  $0_1 = $0_1 | 0;
  $1971($0_1 | 0) | 0;
  $1844($0_1 | 0);
 }
 
 function $1979($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1980($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1980($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($595($419($0_1 | 0) | 0 | 0, $419($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $1981($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($1980($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $1982($1_1 | 0, 19744 | 0, 19792 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $2015($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $1982($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $2015($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $5_1 | 0;
  label$1 : {
   label$2 : {
    if (!($1980($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $1983($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $1984($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1983($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $1985($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1983($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1986($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = $1987(HEAP32[$2_1 >> 2] | 0 | 0, $5_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $1987($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
 }
 
 function $1988($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1983($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $1986($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $1986($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $1989($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 24 | 0) {
     break label$2
    }
    $3_1 = 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $1982($1_1 | 0, 19744 | 0, 19840 | 0, 0 | 0) | 0;
    if (!$4_1) {
     break label$1
    }
    $3_1 = ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
   }
   $3_1 = $1980($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $1990($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($1980($1_1 | 0, 20108 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 1;
    break label$1;
   }
   label$3 : {
    if (!($1989($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
     break label$3
    }
    $4_1 = 1;
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $4_1 = 0;
    $1_1 = $1982($1_1 | 0, 19744 | 0, 19888 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    label$5 : {
     $5_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($5_1 & ($6_1 ^ -1 | 0) | 0) & 7 | 0) {
     break label$1
    }
    if ((($5_1 ^ -1 | 0) & $6_1 | 0) & 96 | 0) {
     break label$1
    }
    $4_1 = 1;
    if ($1980(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$1
    }
    label$6 : {
     if (!($1980(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 20096 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$1
     }
     $4_1 = !($1982($1_1 | 0, 19744 | 0, 19940 | 0, 0 | 0) | 0);
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    $4_1 = 0;
    label$7 : {
     $5_1 = $1982($5_1 | 0, 19744 | 0, 19888 | 0, 0 | 0) | 0;
     if (!$5_1) {
      break label$7
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $1991($5_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    $4_1 = 0;
    label$8 : {
     $5_1 = $1982($5_1 | 0, 19744 | 0, 2e4 | 0, 0 | 0) | 0;
     if (!$5_1) {
      break label$8
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $1992($5_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    $4_1 = 0;
    $0_1 = $1982($0_1 | 0, 19744 | 0, 19792 | 0, 0 | 0) | 0;
    if (!$0_1) {
     break label$1
    }
    $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = 0;
    $1_1 = $1982($1_1 | 0, 19744 | 0, 19792 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $2015($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = 1;
    HEAP32[($3_1 + 20 | 0) >> 2] = -1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
    label$9 : {
     $1_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     if (($1_1 | 0) != (1 | 0)) {
      break label$9
     }
     if (!(HEAP32[$2_1 >> 2] | 0)) {
      break label$9
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    }
    $4_1 = ($1_1 | 0) == (1 | 0);
    break label$1;
   }
   $4_1 = 0;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $1991($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     return 0 | 0;
    }
    $2_1 = 0;
    $1_1 = $1982($1_1 | 0, 19744 | 0, 19888 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if (!($1980(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     return 1 | 0;
    }
    if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     $3_1 = $1982($3_1 | 0, 19744 | 0, 19888 | 0, 0 | 0) | 0;
     if (!$3_1) {
      break label$5
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $0_1 = $3_1;
     continue label$2;
    }
    break label$2;
   };
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = 0;
   $0_1 = $1982($0_1 | 0, 19744 | 0, 2e4 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = $1992($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1992($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = $1982($1_1 | 0, 19744 | 0, 2e4 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
    break label$1
   }
   $2_1 = 0;
   if (!($1980(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = $1980(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1993($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break label$3
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($4_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break label$4
     }
     label$5 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $1994($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $1995($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1994($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1980($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $1996($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $8_1 = $0_1 + 16 | 0;
   $1997($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   if (($5_1 | 0) < (2 | 0)) {
    break label$2
   }
   $8_1 = $8_1 + ($5_1 << 3 | 0) | 0;
   $5_1 = $0_1 + 24 | 0;
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $1997($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $1997($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $1997($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $1996($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = $1987(HEAP32[$3_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $1997($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = $1987(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $1998($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1994($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1980($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $1999($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1994($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($1980($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $2000($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1993($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $1996($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   if (($7_1 | 0) < (2 | 0)) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $1996($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $2001($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1993($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $2002($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1980($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1993($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $2003() {
  return 0 | 0;
 }
 
 function $2004($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $12_1 = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $80_1 = 0, $93_1 = 0, $104_1 = 0, $112_1 = 0, $120_1 = 0, $211_1 = 0, $222_1 = 0, $230_1 = 0, $238_1 = 0, $273_1 = 0, $346_1 = 0, $353_1 = 0, $360_1 = 0, $451_1 = 0, $462_1 = 0, $470_1 = 0, $478_1 = 0, $1170_1 = 0, $1177_1 = 0, $1184_1 = 0, $1306_1 = 0, $1308_1 = 0, $1369_1 = 0, $1376_1 = 0, $1383_1 = 0, $1616_1 = 0, $1623_1 = 0, $1630_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0_1 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2_1 = HEAP32[(0 + 27764 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                 break label$14
                }
                $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $6_1 = $5_1 << 3 | 0;
                $4_1 = HEAP32[($6_1 + 27812 | 0) >> 2] | 0;
                $0_1 = $4_1 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $6_1 = $6_1 + 27804 | 0;
                  if (($3_1 | 0) != ($6_1 | 0)) {
                   break label$16
                  }
                  HEAP32[(0 + 27764 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                  break label$15;
                 }
                 HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
                 HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
                }
                $5_1 = $5_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
                $4_1 = $4_1 + $5_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7_1 = HEAP32[(0 + 27772 | 0) >> 2] | 0;
               if ($3_1 >>> 0 <= $7_1 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0_1) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $80_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $0_1 = $80_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                  $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                  $93_1 = $0_1;
                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                  $4_1 = $93_1 >>> $0_1 | 0;
                  $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                  $104_1 = $5_1 | $0_1 | 0;
                  $0_1 = $4_1 >>> $5_1 | 0;
                  $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                  $112_1 = $104_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                  $120_1 = $112_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                  $5_1 = ($120_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                  $6_1 = $5_1 << 3 | 0;
                  $4_1 = HEAP32[($6_1 + 27812 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $6_1 = $6_1 + 27804 | 0;
                  if (($0_1 | 0) != ($6_1 | 0)) {
                   break label$19
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                  HEAP32[(0 + 27764 | 0) >> 2] = $2_1;
                  break label$18;
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
                 HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
                }
                $0_1 = $4_1 + 8 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $6_1 = $4_1 + $3_1 | 0;
                $8_1 = $5_1 << 3 | 0;
                $5_1 = $8_1 - $3_1 | 0;
                HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
                label$20 : {
                 if (!$7_1) {
                  break label$20
                 }
                 $8_1 = $7_1 >>> 3 | 0;
                 $3_1 = ($8_1 << 3 | 0) + 27804 | 0;
                 $4_1 = HEAP32[(0 + 27784 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8_1 = 1 << $8_1 | 0;
                   if ($2_1 & $8_1 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 27764 | 0) >> 2] = $2_1 | $8_1 | 0;
                   $8_1 = $3_1;
                   break label$21;
                  }
                  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                 HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                 HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                HEAP32[(0 + 27784 | 0) >> 2] = $6_1;
                HEAP32[(0 + 27772 | 0) >> 2] = $5_1;
                break label$1;
               }
               $9_1 = HEAP32[(0 + 27768 | 0) >> 2] | 0;
               if (!$9_1) {
                break label$12
               }
               $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
               $211_1 = $0_1;
               $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
               $4_1 = $211_1 >>> $0_1 | 0;
               $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
               $222_1 = $5_1 | $0_1 | 0;
               $0_1 = $4_1 >>> $5_1 | 0;
               $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
               $230_1 = $222_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
               $238_1 = $230_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
               $6_1 = HEAP32[(((($238_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 28068 | 0) >> 2] | 0;
               $4_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $5_1 = $6_1;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$23
                  }
                 }
                 $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 $273_1 = $5_1;
                 $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                 $4_1 = $5_1 ? $273_1 : $4_1;
                 $6_1 = $5_1 ? $0_1 : $6_1;
                 $5_1 = $0_1;
                 continue label$24;
                };
               }
               $10_1 = $6_1 + $3_1 | 0;
               if ($10_1 >>> 0 <= $6_1 >>> 0) {
                break label$11
               }
               $11_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
                if (($8_1 | 0) == ($6_1 | 0)) {
                 break label$26
                }
                $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
                HEAP32[(0 + 27780 | 0) >> 2] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
                HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
                break label$2;
               }
               label$27 : {
                $5_1 = $6_1 + 20 | 0;
                $0_1 = HEAP32[$5_1 >> 2] | 0;
                if ($0_1) {
                 break label$27
                }
                $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$10
                }
                $5_1 = $6_1 + 16 | 0;
               }
               label$28 : while (1) {
                $12_1 = $5_1;
                $8_1 = $0_1;
                $5_1 = $0_1 + 20 | 0;
                $0_1 = HEAP32[$5_1 >> 2] | 0;
                if ($0_1) {
                 continue label$28
                }
                $5_1 = $8_1 + 16 | 0;
                $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$28
                }
                break label$28;
               };
               HEAP32[$12_1 >> 2] = 0;
               break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0_1 = $0_1 + 11 | 0;
              $3_1 = $0_1 & -8 | 0;
              $7_1 = HEAP32[(0 + 27768 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$12
              }
              $12_1 = 0;
              label$29 : {
               if ($3_1 >>> 0 < 256 >>> 0) {
                break label$29
               }
               $12_1 = 31;
               if ($3_1 >>> 0 > 16777215 >>> 0) {
                break label$29
               }
               $0_1 = $0_1 >>> 8 | 0;
               $346_1 = $0_1;
               $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4_1 = $346_1 << $0_1 | 0;
               $353_1 = $4_1;
               $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $5_1 = $353_1 << $4_1 | 0;
               $360_1 = $5_1;
               $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0_1 = (($360_1 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
               $12_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$30 : {
               label$31 : {
                label$32 : {
                 label$33 : {
                  $5_1 = HEAP32[(($12_1 << 2 | 0) + 28068 | 0) >> 2] | 0;
                  if ($5_1) {
                   break label$33
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$32;
                 }
                 $0_1 = 0;
                 $6_1 = $3_1 << (($12_1 | 0) == (31 | 0) ? 0 : 25 - ($12_1 >>> 1 | 0) | 0) | 0;
                 $8_1 = 0;
                 label$34 : while (1) {
                  label$35 : {
                   $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                   if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$35
                   }
                   $4_1 = $2_1;
                   $8_1 = $5_1;
                   if ($4_1) {
                    break label$35
                   }
                   $4_1 = 0;
                   $8_1 = $5_1;
                   $0_1 = $5_1;
                   break label$31;
                  }
                  $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                  $5_1 = HEAP32[(($5_1 + (($6_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $6_1 = $6_1 << 1 | 0;
                  if ($5_1) {
                   continue label$34
                  }
                  break label$34;
                 };
                }
                label$36 : {
                 if ($0_1 | $8_1 | 0) {
                  break label$36
                 }
                 $8_1 = 0;
                 $0_1 = 2 << $12_1 | 0;
                 $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                 if (!$0_1) {
                  break label$12
                 }
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $451_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $5_1 = $451_1 >>> $0_1 | 0;
                 $6_1 = ($5_1 >>> 5 | 0) & 8 | 0;
                 $462_1 = $6_1 | $0_1 | 0;
                 $0_1 = $5_1 >>> $6_1 | 0;
                 $5_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $470_1 = $462_1 | $5_1 | 0;
                 $0_1 = $0_1 >>> $5_1 | 0;
                 $5_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $478_1 = $470_1 | $5_1 | 0;
                 $0_1 = $0_1 >>> $5_1 | 0;
                 $5_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $0_1 = HEAP32[(((($478_1 | $5_1 | 0) + ($0_1 >>> $5_1 | 0) | 0) << 2 | 0) + 28068 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                 break label$30
                }
               }
               label$37 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $6_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$38 : {
                 $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                 if ($5_1) {
                  break label$38
                 }
                 $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $6_1 ? $2_1 : $4_1;
                $8_1 = $6_1 ? $0_1 : $8_1;
                $0_1 = $5_1;
                if ($0_1) {
                 continue label$37
                }
                break label$37;
               };
              }
              if (!$8_1) {
               break label$12
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 27772 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
               break label$12
              }
              $12_1 = $8_1 + $3_1 | 0;
              if ($12_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              $9_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$39 : {
               $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($8_1 | 0)) {
                break label$39
               }
               $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 27780 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$3;
              }
              label$40 : {
               $5_1 = $8_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                break label$40
               }
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$9
               }
               $5_1 = $8_1 + 16 | 0;
              }
              label$41 : while (1) {
               $2_1 = $5_1;
               $6_1 = $0_1;
               $5_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                continue label$41
               }
               $5_1 = $6_1 + 16 | 0;
               $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$41
               }
               break label$41;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
             }
             label$42 : {
              $0_1 = HEAP32[(0 + 27772 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
               break label$42
              }
              $4_1 = HEAP32[(0 + 27784 | 0) >> 2] | 0;
              label$43 : {
               label$44 : {
                $5_1 = $0_1 - $3_1 | 0;
                if ($5_1 >>> 0 < 16 >>> 0) {
                 break label$44
                }
                HEAP32[(0 + 27772 | 0) >> 2] = $5_1;
                $6_1 = $4_1 + $3_1 | 0;
                HEAP32[(0 + 27784 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$43;
               }
               HEAP32[(0 + 27784 | 0) >> 2] = 0;
               HEAP32[(0 + 27772 | 0) >> 2] = 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
               $0_1 = $4_1 + $0_1 | 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0_1 = $4_1 + 8 | 0;
              break label$1;
             }
             label$45 : {
              $6_1 = HEAP32[(0 + 27776 | 0) >> 2] | 0;
              if ($6_1 >>> 0 <= $3_1 >>> 0) {
               break label$45
              }
              $4_1 = $6_1 - $3_1 | 0;
              HEAP32[(0 + 27776 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 27788 | 0) >> 2] | 0;
              $5_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 27788 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
             }
             label$46 : {
              label$47 : {
               if (!(HEAP32[(0 + 28236 | 0) >> 2] | 0)) {
                break label$47
               }
               $4_1 = HEAP32[(0 + 28244 | 0) >> 2] | 0;
               break label$46;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 28248 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 28252 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 28240 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 28244 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 28236 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 28256 | 0) >> 2] = 0;
              HEAP32[(0 + 28208 | 0) >> 2] = 0;
              $4_1 = 4096;
             }
             $0_1 = 0;
             $7_1 = $3_1 + 47 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $12_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $12_1 | 0;
             if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
             }
             $0_1 = 0;
             label$48 : {
              $4_1 = HEAP32[(0 + 28204 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$48
              }
              $5_1 = HEAP32[(0 + 28196 | 0) >> 2] | 0;
              $9_1 = $5_1 + $8_1 | 0;
              if ($9_1 >>> 0 <= $5_1 >>> 0) {
               break label$1
              }
              if ($9_1 >>> 0 > $4_1 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 28208 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$49 : {
              label$50 : {
               label$51 : {
                $4_1 = HEAP32[(0 + 27788 | 0) >> 2] | 0;
                if (!$4_1) {
                 break label$51
                }
                $0_1 = 28212;
                label$52 : while (1) {
                 label$53 : {
                  $5_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($5_1 >>> 0 > $4_1 >>> 0) {
                   break label$53
                  }
                  if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                   break label$50
                  }
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$52
                 }
                 break label$52;
                };
               }
               $6_1 = $2010(0 | 0) | 0;
               if (($6_1 | 0) == (-1 | 0)) {
                break label$7
               }
               $2_1 = $8_1;
               label$54 : {
                $0_1 = HEAP32[(0 + 28240 | 0) >> 2] | 0;
                $4_1 = $0_1 + -1 | 0;
                if (!($4_1 & $6_1 | 0)) {
                 break label$54
                }
                $2_1 = ($8_1 - $6_1 | 0) + (($4_1 + $6_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
               }
               if ($2_1 >>> 0 <= $3_1 >>> 0) {
                break label$7
               }
               if ($2_1 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$55 : {
                $0_1 = HEAP32[(0 + 28204 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$55
                }
                $4_1 = HEAP32[(0 + 28196 | 0) >> 2] | 0;
                $5_1 = $4_1 + $2_1 | 0;
                if ($5_1 >>> 0 <= $4_1 >>> 0) {
                 break label$7
                }
                if ($5_1 >>> 0 > $0_1 >>> 0) {
                 break label$7
                }
               }
               $0_1 = $2010($2_1 | 0) | 0;
               if (($0_1 | 0) != ($6_1 | 0)) {
                break label$49
               }
               break label$5;
              }
              $2_1 = ($2_1 - $6_1 | 0) & $12_1 | 0;
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $6_1 = $2010($2_1 | 0) | 0;
              if (($6_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0_1 = $6_1;
             }
             label$56 : {
              if (($0_1 | 0) == (-1 | 0)) {
               break label$56
              }
              if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
               break label$56
              }
              label$57 : {
               $4_1 = HEAP32[(0 + 28244 | 0) >> 2] | 0;
               $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                break label$57
               }
               $6_1 = $0_1;
               break label$5;
              }
              label$58 : {
               if (($2010($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$58
               }
               $2_1 = $4_1 + $2_1 | 0;
               $6_1 = $0_1;
               break label$5;
              }
              $2010(0 - $2_1 | 0 | 0) | 0;
              break label$7;
             }
             $6_1 = $0_1;
             if (($0_1 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8_1 = 0;
           break label$2;
          }
          $6_1 = 0;
          break label$3;
         }
         if (($6_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 28208 | 0) >> 2] = HEAP32[(0 + 28208 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $6_1 = $2010($8_1 | 0) | 0;
       $0_1 = $2010(0 | 0) | 0;
       if (($6_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       $2_1 = $0_1 - $6_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 28196 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 28196 | 0) >> 2] = $0_1;
      label$59 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 28200 | 0) >> 2] | 0) >>> 0) {
        break label$59
       }
       HEAP32[(0 + 28200 | 0) >> 2] = $0_1;
      }
      label$60 : {
       label$61 : {
        label$62 : {
         label$63 : {
          $4_1 = HEAP32[(0 + 27788 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$63
          }
          $0_1 = 28212;
          label$64 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($6_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break label$62
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$64
           }
           break label$61;
          };
         }
         label$65 : {
          label$66 : {
           $0_1 = HEAP32[(0 + 27780 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$66
           }
           if ($6_1 >>> 0 >= $0_1 >>> 0) {
            break label$65
           }
          }
          HEAP32[(0 + 27780 | 0) >> 2] = $6_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 28216 | 0) >> 2] = $2_1;
         HEAP32[(0 + 28212 | 0) >> 2] = $6_1;
         HEAP32[(0 + 27796 | 0) >> 2] = -1;
         HEAP32[(0 + 27800 | 0) >> 2] = HEAP32[(0 + 28236 | 0) >> 2] | 0;
         HEAP32[(0 + 28224 | 0) >> 2] = 0;
         label$67 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 27804 | 0;
          HEAP32[($4_1 + 27812 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 27816 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$67
          }
          break label$67;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 27776 | 0) >> 2] = $5_1;
         $4_1 = $6_1 + $4_1 | 0;
         HEAP32[(0 + 27788 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 27792 | 0) >> 2] = HEAP32[(0 + 28252 | 0) >> 2] | 0;
         break label$60;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$61
        }
        if ($5_1 >>> 0 > $4_1 >>> 0) {
         break label$61
        }
        if ($6_1 >>> 0 <= $4_1 >>> 0) {
         break label$61
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 27788 | 0) >> 2] = $5_1;
        $6_1 = (HEAP32[(0 + 27776 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $6_1 - $0_1 | 0;
        HEAP32[(0 + 27776 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $6_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 27792 | 0) >> 2] = HEAP32[(0 + 28252 | 0) >> 2] | 0;
        break label$60;
       }
       label$68 : {
        $8_1 = HEAP32[(0 + 27780 | 0) >> 2] | 0;
        if ($6_1 >>> 0 >= $8_1 >>> 0) {
         break label$68
        }
        HEAP32[(0 + 27780 | 0) >> 2] = $6_1;
        $8_1 = $6_1;
       }
       $5_1 = $6_1 + $2_1 | 0;
       $0_1 = 28212;
       label$69 : {
        label$70 : {
         label$71 : {
          label$72 : {
           label$73 : {
            label$74 : {
             label$75 : {
              label$76 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$75
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$76
               }
               break label$74;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$73
             }
            }
            $0_1 = 28212;
            label$77 : while (1) {
             label$78 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$78
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$72
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$77;
            };
           }
           HEAP32[$0_1 >> 2] = $6_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $12_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $12_1 + $3_1 | 0;
           $5_1 = $2_1 - $3_1 | 0;
           label$79 : {
            if (($4_1 | 0) != ($2_1 | 0)) {
             break label$79
            }
            HEAP32[(0 + 27788 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 27776 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 27776 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$70;
           }
           label$80 : {
            if ((HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$80
            }
            HEAP32[(0 + 27784 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 27772 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 27772 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$70;
           }
           label$81 : {
            $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($0_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$81
            }
            $7_1 = $0_1 & -8 | 0;
            label$82 : {
             label$83 : {
              if ($0_1 >>> 0 > 255 >>> 0) {
               break label$83
              }
              $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $0_1 >>> 3 | 0;
              $6_1 = ($8_1 << 3 | 0) + 27804 | 0;
              label$84 : {
               $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($0_1 | 0) != ($4_1 | 0)) {
                break label$84
               }
               HEAP32[(0 + 27764 | 0) >> 2] = (HEAP32[(0 + 27764 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
               break label$82;
              }
              HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
              break label$82;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$85 : {
              label$86 : {
               $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($2_1 | 0)) {
                break label$86
               }
               $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$85;
              }
              label$87 : {
               $0_1 = $2_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$87
               }
               $0_1 = $2_1 + 16 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$87
               }
               $6_1 = 0;
               break label$85;
              }
              label$88 : while (1) {
               $8_1 = $0_1;
               $6_1 = $4_1;
               $0_1 = $4_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                continue label$88
               }
               $0_1 = $6_1 + 16 | 0;
               $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($4_1) {
                continue label$88
               }
               break label$88;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$82
             }
             label$89 : {
              label$90 : {
               $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $0_1 = ($4_1 << 2 | 0) + 28068 | 0;
               if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                break label$90
               }
               HEAP32[$0_1 >> 2] = $6_1;
               if ($6_1) {
                break label$89
               }
               HEAP32[(0 + 27768 | 0) >> 2] = (HEAP32[(0 + 27768 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
               break label$82;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
              if (!$6_1) {
               break label$82
              }
             }
             HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
             label$91 : {
              $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$91
              }
              HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
             }
             $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$82
             }
             HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
            }
            $5_1 = $7_1 + $5_1 | 0;
            $2_1 = $2_1 + $7_1 | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
           HEAP32[($3_1 + $5_1 | 0) >> 2] = $5_1;
           label$92 : {
            if ($5_1 >>> 0 > 255 >>> 0) {
             break label$92
            }
            $4_1 = $5_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 27804 | 0;
            label$93 : {
             label$94 : {
              $5_1 = HEAP32[(0 + 27764 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($5_1 & $4_1 | 0) {
               break label$94
              }
              HEAP32[(0 + 27764 | 0) >> 2] = $5_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$93;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
            break label$70;
           }
           $0_1 = 31;
           label$95 : {
            if ($5_1 >>> 0 > 16777215 >>> 0) {
             break label$95
            }
            $0_1 = $5_1 >>> 8 | 0;
            $1170_1 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4_1 = $1170_1 << $0_1 | 0;
            $1177_1 = $4_1;
            $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $6_1 = $1177_1 << $4_1 | 0;
            $1184_1 = $6_1;
            $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1184_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($5_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4_1 = ($0_1 << 2 | 0) + 28068 | 0;
           label$96 : {
            label$97 : {
             $6_1 = HEAP32[(0 + 27768 | 0) >> 2] | 0;
             $8_1 = 1 << $0_1 | 0;
             if ($6_1 & $8_1 | 0) {
              break label$97
             }
             HEAP32[(0 + 27768 | 0) >> 2] = $6_1 | $8_1 | 0;
             HEAP32[$4_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
             break label$96;
            }
            $0_1 = $5_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $6_1 = HEAP32[$4_1 >> 2] | 0;
            label$98 : while (1) {
             $4_1 = $6_1;
             if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5_1 | 0)) {
              break label$71
             }
             $6_1 = $0_1 >>> 29 | 0;
             $0_1 = $0_1 << 1 | 0;
             $8_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
             $6_1 = HEAP32[$8_1 >> 2] | 0;
             if ($6_1) {
              continue label$98
             }
             break label$98;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$70;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
          $12_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 27776 | 0) >> 2] = $12_1;
          $8_1 = $6_1 + $8_1 | 0;
          HEAP32[(0 + 27788 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
          HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 27792 | 0) >> 2] = HEAP32[(0 + 28252 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28220 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28224 | 0) >> 2] | 0;
          $1306_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1306_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28212 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28216 | 0) >> 2] | 0;
          $1308_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1308_1;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 28220 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 28216 | 0) >> 2] = $2_1;
          HEAP32[(0 + 28212 | 0) >> 2] = $6_1;
          HEAP32[(0 + 28224 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$99 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $6_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($5_1 >>> 0 > $6_1 >>> 0) {
            continue label$99
           }
           break label$99;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$60
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$100 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$100
           }
           $5_1 = $2_1 >>> 3 | 0;
           $0_1 = ($5_1 << 3 | 0) + 27804 | 0;
           label$101 : {
            label$102 : {
             $6_1 = HEAP32[(0 + 27764 | 0) >> 2] | 0;
             $5_1 = 1 << $5_1 | 0;
             if ($6_1 & $5_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 27764 | 0) >> 2] = $6_1 | $5_1 | 0;
             $5_1 = $0_1;
             break label$101;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$60;
          }
          $0_1 = 31;
          label$103 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$103
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1369_1 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5_1 = $1369_1 << $0_1 | 0;
           $1376_1 = $5_1;
           $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $6_1 = $1376_1 << $5_1 | 0;
           $1383_1 = $6_1;
           $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1383_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $6_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $5_1 = ($0_1 << 2 | 0) + 28068 | 0;
          label$104 : {
           label$105 : {
            $6_1 = HEAP32[(0 + 27768 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($6_1 & $8_1 | 0) {
             break label$105
            }
            HEAP32[(0 + 27768 | 0) >> 2] = $6_1 | $8_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$104;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $6_1 = HEAP32[$5_1 >> 2] | 0;
           label$106 : while (1) {
            $5_1 = $6_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$69
            }
            $6_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
            $6_1 = HEAP32[$8_1 >> 2] | 0;
            if ($6_1) {
             continue label$106
            }
            break label$106;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$60;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $12_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 27776 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 27776 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 27788 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 27788 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($605() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$107 : {
     if (!$9_1) {
      break label$107
     }
     label$108 : {
      label$109 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 28068 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$109
       }
       HEAP32[$0_1 >> 2] = $6_1;
       if ($6_1) {
        break label$108
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 27768 | 0) >> 2] = $7_1;
       break label$107;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$107
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
     label$110 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$110
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$107
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
    }
    label$111 : {
     label$112 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$112
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$111;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($12_1 + $4_1 | 0) >> 2] = $4_1;
     label$113 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$113
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 27804 | 0;
      label$114 : {
       label$115 : {
        $5_1 = HEAP32[(0 + 27764 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($5_1 & $4_1 | 0) {
         break label$115
        }
        HEAP32[(0 + 27764 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$114;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $12_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $4_1;
      break label$111;
     }
     $0_1 = 31;
     label$116 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$116
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1616_1 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5_1 = $1616_1 << $0_1 | 0;
      $1623_1 = $5_1;
      $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1623_1 << $5_1 | 0;
      $1630_1 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1630_1 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 0;
     HEAP32[($12_1 + 16 | 0) >> 2] = 0;
     HEAP32[($12_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 28068 | 0;
     label$117 : {
      label$118 : {
       label$119 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$119
        }
        HEAP32[(0 + 27768 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $12_1;
        HEAP32[($12_1 + 24 | 0) >> 2] = $5_1;
        break label$118;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$120 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$117
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $6_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$6_1 >> 2] | 0;
        if ($3_1) {
         continue label$120
        }
        break label$120;
       };
       HEAP32[$6_1 >> 2] = $12_1;
       HEAP32[($12_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($12_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $12_1;
      break label$111;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $12_1;
     HEAP32[($12_1 + 24 | 0) >> 2] = 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($12_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$121 : {
    if (!$11_1) {
     break label$121
    }
    label$122 : {
     label$123 : {
      $5_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 28068 | 0;
      if (($6_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$123
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$122
      }
      HEAP32[(0 + 27768 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$121;
     }
     HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($6_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$121
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $11_1;
    label$124 : {
     $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$124
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$121
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$125 : {
    label$126 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$126
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $6_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$125;
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($10_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($10_1 + $4_1 | 0) >> 2] = $4_1;
    label$127 : {
     if (!$7_1) {
      break label$127
     }
     $3_1 = $7_1 >>> 3 | 0;
     $5_1 = ($3_1 << 3 | 0) + 27804 | 0;
     $0_1 = HEAP32[(0 + 27784 | 0) >> 2] | 0;
     label$128 : {
      label$129 : {
       $3_1 = 1 << $3_1 | 0;
       if ($3_1 & $2_1 | 0) {
        break label$129
       }
       HEAP32[(0 + 27764 | 0) >> 2] = $3_1 | $2_1 | 0;
       $3_1 = $5_1;
       break label$128;
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    HEAP32[(0 + 27784 | 0) >> 2] = $10_1;
    HEAP32[(0 + 27772 | 0) >> 2] = $4_1;
   }
   $0_1 = $6_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2005($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $379_1 = 0, $386_1 = 0, $393_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 27780 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 27804 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       HEAP32[(0 + 27764 | 0) >> 2] = (HEAP32[(0 + 27764 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 28068 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       HEAP32[(0 + 27768 | 0) >> 2] = (HEAP32[(0 + 27768 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 27772 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 27788 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 27788 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 27776 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 27776 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 27772 | 0) >> 2] = 0;
      HEAP32[(0 + 27784 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 27784 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 27772 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 27772 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 27804 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 27764 | 0) >> 2] = (HEAP32[(0 + 27764 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 27780 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 28068 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 27768 | 0) >> 2] = (HEAP32[(0 + 27768 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 27772 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 27804 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 27764 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 27764 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$28;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = $0_1 >>> 8 | 0;
    $379_1 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $379_1 << $2_1 | 0;
    $386_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $386_1 << $4_1 | 0;
    $393_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($393_1 << $6_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 28068 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 27768 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 27768 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 27796 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 27796 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $2006($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $2004($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($605() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $2007($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $2004($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $2014($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $2005($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $2007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 28244 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$5 : {
    label$6 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $2008($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $4_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 27788 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $3_1 = (HEAP32[(0 + 27776 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 27776 | 0) >> 2] = $1_1;
     HEAP32[(0 + 27788 | 0) >> 2] = $2_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 27772 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 27784 | 0) >> 2] = $1_1;
     HEAP32[(0 + 27772 | 0) >> 2] = $4_1;
     break label$5;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      $9_1 = $6_1 >>> 3 | 0;
      $6_1 = ($9_1 << 3 | 0) + 27804 | 0;
      label$13 : {
       $4_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        break label$13
       }
       HEAP32[(0 + 27764 | 0) >> 2] = (HEAP32[(0 + 27764 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$15
       }
       $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 27780 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$14;
      }
      label$16 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $6_1 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9_1 = $3_1;
       $6_1 = $4_1;
       $3_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       $3_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 28068 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$19
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$18
       }
       HEAP32[(0 + 27768 | 0) >> 2] = (HEAP32[(0 + 27768 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$11
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $10_1;
     label$20 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$11
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    }
    label$21 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $2008($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $2008($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $360_1 = 0, $367_1 = 0, $374_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      $0_1 = $0_1 - $3_1 | 0;
      if ((HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 27804 | 0;
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$3
       }
       HEAP32[(0 + 27764 | 0) >> 2] = (HEAP32[(0 + 27764 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($0_1 | 0)) {
         break label$7
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 27780 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$6;
       }
       label$8 : {
        $3_1 = $0_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $3_1 = $0_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $6_1 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5_1 = $3_1;
        $6_1 = $4_1;
        $3_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        $3_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 28068 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
         break label$11
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$10
        }
        HEAP32[(0 + 27768 | 0) >> 2] = (HEAP32[(0 + 27768 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$2;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$2
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$12 : {
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$12
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      break label$2;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 27772 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   }
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 27788 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 27788 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 27776 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 27776 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 27772 | 0) >> 2] = 0;
      HEAP32[(0 + 27784 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 27784 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 27772 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 27772 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$17 : {
      label$18 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 27804 | 0;
       label$19 : {
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 27764 | 0) >> 2] = (HEAP32[(0 + 27764 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$21
        }
        $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 27780 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$20;
       }
       label$22 : {
        $4_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $4_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $4_1;
        $6_1 = $3_1;
        $4_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        $4_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 28068 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$25
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 27768 | 0) >> 2] = (HEAP32[(0 + 27768 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 27784 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 27772 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$27 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 27804 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 27764 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($4_1 & $3_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 27764 | 0) >> 2] = $4_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$28;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 31;
   label$30 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3_1 = $1_1 >>> 8 | 0;
    $360_1 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $360_1 << $3_1 | 0;
    $367_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $367_1 << $4_1 | 0;
    $374_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($374_1 << $6_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $4_1 = ($3_1 << 2 | 0) + 28068 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6_1 = HEAP32[(0 + 27768 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 27768 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$32;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$4_1 >> 2] | 0;
     label$34 : while (1) {
      $4_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$31
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $2009() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $2010($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 22016 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($2009() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$74($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 22016 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($605() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $2011($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11$hi = 0, $64_1 = 0, $6_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134_1 = 0, $135$hi = 0, $156_1 = 0, $156$hi = 0, $158$hi = 0, $161_1 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178_1 = 0, $179$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $219_1 = 0, $220_1 = 0, $220$hi = 0, $222_1 = 0, $222$hi = 0, $228$hi = 0, $229_1 = 0, $229$hi = 0, $236_1 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($667($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     if (!($2013($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6_1 = $64_1;
     $7_1 = $6_1 & 32767 | 0;
     if (($7_1 | 0) != (32767 | 0)) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $662($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $673($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($667($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($667($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $662($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$7_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $662($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($8_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $662($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($7_1 | 0) <= ($8_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134_1;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $662($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156_1 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156_1;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161_1 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161_1;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     if (($7_1 | 0) > ($8_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $7_1 = $8_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178_1 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $662($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208_1 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208_1;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $8_1 = $6_1 & 32768 | 0;
   label$18 : {
    if (($7_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219_1 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220_1 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $7_1 + 120 | 0 | $8_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222_1;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $662($219_1 | 0, $220_1 | 0, i64toi32_i32$0 | 0, $229_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $7_1 | $8_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236_1;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $2012($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $2013($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $2014($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$75($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $2015($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $2016($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = $0_1 + $2_1 | 0;
    if (($1_1 - $3_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $2014($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4_1) {
       break label$9
      }
      label$10 : {
       if (!($3_1 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $2017($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $2018($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($2017($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) <= (-1 | 0)) {
      break label$5
     }
     $4_1 = $1_1;
     label$6 : while (1) {
      label$7 : {
       $3_1 = $4_1;
       if ($3_1) {
        break label$7
       }
       $3_1 = $1_1;
       break label$4;
      }
      $4_1 = $3_1 + -1 | 0;
      if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      break label$1
     }
     $0_1 = $0_1 + $3_1 | 0;
     $3_1 = $1_1 - $3_1 | 0;
     $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     break label$4;
    }
    $3_1 = $1_1;
   }
   $2014($5_1 | 0, $0_1 | 0, $3_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
   $4_1 = $1_1;
  }
  return $4_1 | 0;
 }
 
 function $2019($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $2018($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $2020($3_1 | 0) | 0;
   $0_1 = $2018($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $2021($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $2020($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $2021($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2022($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    $1_1 = $0_1;
    label$3 : while (1) {
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    if ($3_1 & 255 | 0) {
     break label$5
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$6 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $2023() {
  return global$0 | 0;
 }
 
 function $2024($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $2025($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $2026($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 28260 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 28264 | 0) >> 2] = $1_1;
   HEAP32[(0 + 28260 | 0) >> 2] = $0_1;
  }
 }
 
 function $2027($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2028($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $2029($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $2030($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $2031($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $2032($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $2027($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$76($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $2033($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $2028($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2034($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $2029($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2035($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $2030($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2036($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $2031($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $2037($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = $3$hi;
  $9_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12_1 = $18_1;
  i64toi32_i32$1 = $4$hi;
  $14_1 = $4_1;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$77($5_1 | 0, $6_1 | 0, $7_1 | 0, $9_1 | 0, $12_1 | 0, $14_1 | 0, $19_1 | 0);
 }
 
 function $2038($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$78($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, $3, $23, $25, $40, $35, $36, $37, $45, $48, $56, $58, $60, $62, $65, $71, $74, $82, $83, $87, $88, $38, $93, $97, $101, $204, $209, $221, $233, $234, $227, $254, $105, $128, $130, $21, $28, $1969, $270, $271, $355, $356, $357, $366, $367, $368, $369, $311, $312, $313, $519, $583, $584, $585, $587, $618, $619, $649, $650, $653, $688, $718, $719, $2005, $1056, $1340, $1348, $1446, $1449, $1453, $1456, $1459, $1462, $1464, $1466, $1468, $1470, $1472, $1474, $1476, $1478, $1322, $1327, $1344, $1367, $1368, $1369, $1370, $1371, $1372, $1373, $1374, $1375, $1376, $1210, $1388, $1389, $1392, $1395, $1396, $1399, $1400, $1402, $1425, $1426, $1429, $1431, $1433, $1435, $1439, $1427, $1428, $1430, $1432, $1434, $1436, $1440, $734, $1343, $1350, $1351, $1353, $1354, $1355, $1356, $1358, $1359, $1361, $1362, $1363, $1364, $1365, $1377, $1378, $1379, $1380, $1381, $1382, $1383, $1386, $1403, $1404, $1406, $1408, $1409, $1410, $1411, $1413, $1414, $1415, $1417, $1419, $1420, $1421, $1422, $1424, $733, $735, $736, $737, $740, $741, $742, $743, $744, $748, $1486, $749, $763, $774, $777, $780, $783, $786, $789, $794, $797, $800, $1487, $807, $822, $827, $829, $831, $833, $835, $837, $841, $843, $845, $1488, $861, $873, $879, $880, $881, $882, $893, $894, $1489, $895, $910, $918, $919, $920, $921, $929, $930, $1490, $1492, $936, $937, $938, $939, $941, $943, $946, $1444, $1451, $1457, $1471, $1475, $1463, $1467, $1493, $1495, $962, $963, $964, $971, $973, $975, $978, $1447, $1454, $1460, $1473, $1477, $1465, $1469, $1497, $1496, $991, $1499, $1498, $999, $1500, $1008, $1009, $1010, $1011, $1012, $1013, $1014, $1015, $1016, $1501, $1017, $1018, $1019, $1020, $1021, $1022, $1023, $1024, $1025, $1502, $1026, $1029, $1030, $1031, $1034, $1035, $1036, $1037, $1038, $1503, $1039, $1040, $1041, $1042, $1043, $1044, $1045, $1046, $1047, $1504, $1055, $1076, $1505, $1116, $1133, $1506, $1172, $1183, $1507, $1184, $1195, $1508, $1204, $1205, $1206, $1509, $1207, $1208, $1209, $574, $1706, $1707, $1709, $1710, $1711, $1713, $1714, $1715, $1716, $1722, $1723, $1724, $1725, $1726, $1727, $1728, $1730, $1731, $1732, $1733, $1734, $1735, $1736, $1740, $1741, $1742, $1743, $1744, $1746, $1748, $1747, $1749, $1760, $1762, $1761, $1763, $1774, $1776, $1775, $1777, $1780, $1782, $1781, $1783, $1802, $1807, $1830, $1819, $1822, $1825, $1827, $1812, $1815, $1816, $1702, $1703, $1704, $1705, $115, $1831, $138, $1832, $1848, $1849, $1873, $1874, $1875, $1876, $1878, $1879, $1883, $1884, $1886, $1888, $1889, $1892, $1893, $1894, $1895, $1896, $1897, $1898, $1899, $1901, $1902, $1971, $1974, $1972, $1973, $1979, $1975, $1981, $2002, $1999, $1984, $1976, $2001, $1998, $1985, $1977, $2000, $1995, $1988, $1978, $1990]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "stbi_load": $291, 
  "stbi_image_free": $290, 
  "main": $131, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "free": $2005, 
  "stbi_load_from_memory": $299, 
  "malloc": $2004, 
  "__getTypeName": $418, 
  "__embind_register_native_and_builtin_types": $420, 
  "__errno_location": $605, 
  "fflush": $578, 
  "stackSave": $2023, 
  "stackRestore": $2024, 
  "stackAlloc": $2025, 
  "emscripten_stack_init": $711, 
  "emscripten_stack_get_free": $712, 
  "emscripten_stack_get_end": $713, 
  "setThrew": $2026, 
  "dynCall_jiji": $2032, 
  "dynCall_iiiiij": $2033, 
  "dynCall_iiiiijj": $2034, 
  "dynCall_iiiiiijj": $2035, 
  "dynCall_viijii": $2036
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

  var wasmBinaryFile = 'asmjs.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      var result = WebAssembly.instantiate(binary, info);
      return result;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiationResult, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  var runtimeKeepaliveCounter=0;
  function keepRuntimeAlive() {
      return noExitRuntime || runtimeKeepaliveCounter > 0;
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function _atexit(func, arg) {
    }
  function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().includes('EOF')) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 65536);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};
  var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        assert(typeof parent === 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = 0;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAP32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        HEAP32[(((buf)+(32))>>2)] = 0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)] = 0;
        HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)] = 0;
        HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = varargs ? SYSCALLS.get() : 0;
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var char_0=48;
  
  var char_9=57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
      switch (value) {
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var PureVirtualError=undefined;
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes=undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  var deletionQueue=[];
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }
  
  var delayFunction=undefined;
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances={};
  
  var BindingError=undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  function registerInheritedInstance(class_, ptr, instance) {
      ptr = getBasestPointer(class_, ptr);
      if (registeredInstances.hasOwnProperty(ptr)) {
          throwBindingError('Tried to register registered instance: ' + ptr);
      } else {
          registeredInstances[ptr] = instance;
      }
    }
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }
  
  var registeredTypes={};
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  
  function unregisterInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      if (registeredInstances.hasOwnProperty(ptr)) {
          delete registeredInstances[ptr];
      } else {
          throwBindingError('Tried to unregister unregistered instance: ' + ptr);
      }
    }
  
  function detachFinalizer(handle) {}
  
  var finalizationGroup=false;
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }
  function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {
      constructorName = readLatin1String(constructorName);
      wrapperType = requireRegisteredType(wrapperType, 'wrapper');
      properties = requireHandle(properties);
  
      var arraySlice = [].slice;
  
      var registeredClass = wrapperType.registeredClass;
      var wrapperPrototype = registeredClass.instancePrototype;
      var baseClass = registeredClass.baseClass;
      var baseClassPrototype = baseClass.instancePrototype;
      var baseConstructor = registeredClass.baseClass.constructor;
      var ctor = createNamedFunction(constructorName, function() {
          registeredClass.baseClass.pureVirtualFunctions.forEach(function(name) {
              if (this[name] === baseClassPrototype[name]) {
                  throw new PureVirtualError('Pure virtual function ' + name + ' must be implemented in JavaScript');
              }
          }.bind(this));
  
          Object.defineProperty(this, '__parent', {
              value: wrapperPrototype
          });
          this["__construct"].apply(this, arraySlice.call(arguments));
      });
  
      // It's a little nasty that we're modifying the wrapper prototype here.
  
      wrapperPrototype["__construct"] = function __construct() {
          if (this === wrapperPrototype) {
              throwBindingError("Pass correct 'this' to __construct");
          }
  
          var inner = baseConstructor["implement"].apply(
              undefined,
              [this].concat(arraySlice.call(arguments)));
          detachFinalizer(inner);
          var $$ = inner.$$;
          inner["notifyOnDestruction"]();
          $$.preservePointerOnDelete = true;
          Object.defineProperties(this, { $$: {
              value: $$
          }});
          attachFinalizer(this);
          registerInheritedInstance(registeredClass, $$.ptr, this);
      };
  
      wrapperPrototype["__destruct"] = function __destruct() {
          if (this === wrapperPrototype) {
              throwBindingError("Pass correct 'this' to __destruct");
          }
  
          detachFinalizer(this);
          unregisterInheritedInstance(registeredClass, this.$$.ptr);
      };
  
      ctor.prototype = Object.create(wrapperPrototype);
      for (var p in properties) {
          ctor.prototype[p] = properties[p];
      }
      return __emval_register(ctor);
    }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  var awaitingDependencies={};
  
  var typeDependencies={};
  
  var InternalError=undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  var registeredPointers={};
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  /** @constructor */
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module["dynCall_" + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args)
    }
  function getDynCaller(sig, ptr) {
      assert(sig.includes('j'), 'getDynCaller should only be called with i64 sigs')
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError=undefined;
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for (var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  function __embind_register_class_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      fn
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          if (methodName.startsWith("@@")) {
              methodName = Symbol[methodName.substring(2)];
          }
  
          var proto = classType.registeredClass.constructor;
          if (undefined === proto[methodName]) {
              // This is the first function to be registered with this name.
              unboundTypesHandler.argCount = argCount-1;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
              // the function handlers go into an overload table.
              var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
              var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
              if (undefined === proto[methodName].overloadTable) {
                  func.argCount = argCount-1;
                  proto[methodName] = func;
              } else {
                  proto[methodName].overloadTable[argCount-1] = func;
              }
              return [];
          });
          return [];
      });
    }

  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  destructors.length = 0;
                  args.length = argCount;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (methodName.startsWith("@@")) {
              methodName = Symbol[methodName.substring(2)];
          }
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.includes('unsigned'));
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }
  
  var emval_symbols={};
  function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  var emval_methodCallers=[];
  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function _abort() {
      abort();
    }

  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance.now(); }
  ;
  
  var _emscripten_get_now_is_monotonic=true;;
  function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
        now = _emscripten_get_now();
      } else {
        setErrNo(28);
        return -1;
      }
      HEAP32[((tp)>>2)] = (now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)] = ((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _emscripten_run_script(ptr) {
      eval(UTF8ToString(ptr));
    }

  function callUserCallback(func, synchronous) {
      if (ABORT) {
        err('user callback triggered after application aborted.  Ignoring.');
        return;
      }
      // For synchronous calls, let any exceptions propagate, and don't let the runtime exit.
      if (synchronous) {
        func();
        return;
      }
      try {
        func();
      } catch (e) {
        if (e instanceof ExitStatus) {
          return;
        } else if (e !== 'unwind') {
          // And actual unexpected user-exectpion occured
          if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
          throw e;
        }
      }
    }
  
  function runtimeKeepalivePush() {
      runtimeKeepaliveCounter += 1;
    }
  
  function runtimeKeepalivePop() {
      assert(runtimeKeepaliveCounter > 0);
      runtimeKeepaliveCounter -= 1;
    }
  var Browser={mainLoop:{running:false,scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          // Incrementing this signals the previous main loop that it's now become old, and it must return.
          Browser.mainLoop.currentlyRunningMainloop++;
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          // do not set timing and call scheduler, we will do it on the next lines
          setMainLoop(func, 0, false, Browser.mainLoop.arg, true);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          callUserCallback(func);
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: (typeof WebGL2RenderingContext !== 'undefined') ? 2 : 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        canvasContainer.requestFullscreen();
      },requestFullScreen:function() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeRequestAnimationFrame:function(func) {
        
        return Browser.requestAnimationFrame(function() {
          
          callUserCallback(func);
        });
      },safeSetTimeout:function(func, timeout) {
        
        return setTimeout(function() {
          
          callUserCallback(func);
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if (!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch (event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        readAsync(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (!Browser.mainLoop.running) {
        
        Browser.mainLoop.running = true;
      }
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = /** @type{function(function(): ?, ...?): number} */(function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          })
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }
  function maybeExit() {
      if (!keepRuntimeAlive()) {
        try {
          _exit(EXITSTATUS);
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          }
          throw e;
        }
      }
    }
  function setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming) {
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = browserIterationFunc;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
      function checkIsRunning() {
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) {
          
          maybeExit();
          return false;
        }
        return true;
      }
  
      // We create the loop runner here but it is not actually running until
      // _emscripten_set_main_loop_timing is called (which might happen a
      // later time).  This member signifies that the current runner has not
      // yet been started so that we can call runtimeKeepalivePush when it
      // gets it timing set for the first time.
      Browser.mainLoop.running = false;
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (!checkIsRunning()) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (!checkIsRunning()) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          warnOnce('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (!checkIsRunning()) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    }
  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
      var browserIterationFunc = wasmTable.get(func);
      setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop);
    }

  var ENV={};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  function _environ_get(__environ, environ_buf) {try {
  
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)] = ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {try {
  
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }


  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function __webgl_enable_ANGLE_instanced_arrays(ctx) {
      // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('ANGLE_instanced_arrays');
      if (ext) {
        ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
        ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
        ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        return 1;
      }
    }
  
  function __webgl_enable_OES_vertex_array_object(ctx) {
      // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('OES_vertex_array_object');
      if (ext) {
        ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
        ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
        ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
        ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        return 1;
      }
    }
  
  function __webgl_enable_WEBGL_draw_buffers(ctx) {
      // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('WEBGL_draw_buffers');
      if (ext) {
        ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        return 1;
      }
    }
  
  function __webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(ctx) {
      // Closure is expected to be allowed to minify the '.dibvbi' property, so not accessing it quoted.
      return !!(ctx.dibvbi = ctx.getExtension('WEBGL_draw_instanced_base_vertex_base_instance'));
    }
  
  function __webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(ctx) {
      // Closure is expected to be allowed to minify the '.mdibvbi' property, so not accessing it quoted.
      return !!(ctx.mdibvbi = ctx.getExtension('WEBGL_multi_draw_instanced_base_vertex_base_instance'));
    }
  
  function __webgl_enable_WEBGL_multi_draw(ctx) {
      // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
      return !!(ctx.multiDrawWebgl = ctx.getExtension('WEBGL_multi_draw'));
    }
  var GL={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:[],offscreenCanvases:{},queries:[],samplers:[],transformFeedbacks:[],syncs:[],stringCache:{},stringiCache:{},unpackAlignment:4,recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(canvas, webGLContextAttributes) {
  
        // BUG: Workaround Safari WebGL issue: After successfully acquiring WebGL context on a canvas,
        // calling .getContext() will always return that context independent of which 'webgl' or 'webgl2'
        // context version was passed. See https://bugs.webkit.org/show_bug.cgi?id=222758 and
        // https://github.com/emscripten-core/emscripten/issues/13295.
        // TODO: Once the bug is fixed and shipped in Safari, adjust the Safari version field in above check.
        if (!canvas.getContextSafariWebGL2Fixed) {
          canvas.getContextSafariWebGL2Fixed = canvas.getContext;
          canvas.getContext = function(ver, attrs) {
            var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
            return ((ver == 'webgl') == (gl instanceof WebGLRenderingContext)) ? gl : null;
          }
        }
  
        var ctx = 
          (webGLContextAttributes.majorVersion > 1)
          ?
            canvas.getContext("webgl2", webGLContextAttributes)
          :
          (canvas.getContext("webgl", webGLContextAttributes)
            // https://caniuse.com/#feat=webgl
            );
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        // without pthreads a context is just an integer ID
        var handle = GL.getNewId(GL.contexts);
  
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        // Extensions that are only available in WebGL 1 (the calls will be no-ops if called on a WebGL 2 context active)
        __webgl_enable_ANGLE_instanced_arrays(GLctx);
        __webgl_enable_OES_vertex_array_object(GLctx);
        __webgl_enable_WEBGL_draw_buffers(GLctx);
        // Extensions that are available from WebGL >= 2 (no-op if called on a WebGL 1 context active)
        __webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(GLctx);
        __webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(GLctx);
  
        // On WebGL 2, EXT_disjoint_timer_query is replaced with an alternative
        // that's based on core APIs, and exposes only the queryCounterEXT()
        // entrypoint.
        if (context.version >= 2) {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query_webgl2");
        }
  
        // However, Firefox exposes the WebGL 1 version on WebGL 2 as well and
        // thus we look for the WebGL 1 version again if the WebGL 2 version
        // isn't present. https://bugzilla.mozilla.org/show_bug.cgi?id=1328882
        if (context.version < 2 || !GLctx.disjointTimerQueryExt)
        {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        }
  
        __webgl_enable_WEBGL_multi_draw(GLctx);
  
        // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        var exts = GLctx.getSupportedExtensions() || [];
        exts.forEach(function(ext) {
          // WEBGL_lose_context, WEBGL_debug_renderer_info and WEBGL_debug_shaders are not enabled by default.
          if (!ext.includes('lose_context') && !ext.includes('debug')) {
            // Call .getExtension() to enable that extension permanently.
            GLctx.getExtension(ext);
          }
        });
      }};
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _glBufferData(target, size, data, usage) {
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (data) {
          GLctx.bufferData(target, HEAPU8, usage, data, size);
        } else {
          GLctx.bufferData(target, size, usage);
        }
      } else {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
      }
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      // Store additional information needed for each shader program:
      program.name = id;
      // Lazy cache results of glGetProgramiv(GL_ACTIVE_UNIFORM_MAX_LENGTH/GL_ACTIVE_ATTRIBUTE_MAX_LENGTH/GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)
      program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
      program.uniformIdCounter = 1;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
  
      return id;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)] = id;
      }
    }
  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      program = GL.programs[program];
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(program);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)] = log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        if (!program.maxUniformLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/); ++i) {
            program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (!program.maxAttributeLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/); ++i) {
            program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (!program.maxUniformBlockNameLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/); ++i) {
            program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getProgramParameter(program, pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        HEAP32[((p)>>2)] = logLength;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        HEAP32[((p)>>2)] = sourceLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glLinkProgram(program) {
      program = GL.programs[program];
      GLctx.linkProgram(program);
      // Invalidate earlier computed uniform->ID mappings, those have now become stale
      program.uniformLocsById = 0; // Mark as null-like so that glGetUniformLocation() knows to populate this again.
      program.uniformSizeAndIdsByName = {};
  
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function __colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
        // 0x1903 /* GL_RED */ - 0x1902: 1,
        26917: 2,
        26918: 2,
        // 0x8D94 /* GL_RED_INTEGER */ - 0x1902: 1,
        29846: 3,
        29847: 4
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
      if (type == 0) return HEAP8;
  
      if (type == 1) return HEAPU8;
  
      if (type == 2) return HEAP16;
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        || type == 28520
        || type == 30779
        || type == 30782
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }
  function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = heapObjectForWebGLType(type);
      var shift = heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }
  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.version >= 2) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels) {
          var heap = heapObjectForWebGLType(type);
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glUseProgram(program) {
      program = GL.programs[program];
      GLctx.useProgram(program);
      // Record the currently active program so that we can access the uniform
      // mapping table of that program.
      GLctx.currentProgram = program;
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  /** @constructor */
  function GLFW_Window(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      }
  var GLFW={WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        wasmTable.get(GLFW.active.charFunc)(GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
        if (repeat) status = 2; // GLFW_REPEAT
        wasmTable.get(GLFW.active.keyFunc)(GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        wasmTable.get(GLFW.active.cursorPosFunc)(GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        wasmTable.get(GLFW.active.cursorEnterFunc)(GLFW.active.id, 1);
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        wasmTable.get(GLFW.active.cursorEnterFunc)(GLFW.active.id, 0);
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
        wasmTable.get(GLFW.active.mouseButtonFunc)(GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        wasmTable.get(GLFW.active.scrollFunc)(GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
        wasmTable.get(GLFW.active.windowSizeFunc)(GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        wasmTable.get(GLFW.active.framebufferSizeFunc)(GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  wasmTable.get(GLFW.joystickFunc)(joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  wasmTable.get(GLFW.joystickFunc)(joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.keyFunc;
        win.keyFunc = cbfun;
        return prevcbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.charFunc;
        win.charFunc = cbfun;
        return prevcbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.mouseButtonFunc;
        win.mouseButtonFunc = cbfun;
        return prevcbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.cursorPosFunc;
        win.cursorPosFunc = cbfun;
        return prevcbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.scrollFunc;
        win.scrollFunc = cbfun;
        return prevcbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.dropFunc;
        win.dropFunc = cbfun;
        return prevcbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              wasmTable.get(GLFW.active.dropFunc)(GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowSizeFunc;
        win.windowSizeFunc = cbfun;
  
        return prevcbfun;
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowCloseFunc;
        win.windowCloseFunc = cbfun;
        return prevcbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowRefreshFunc;
        win.windowRefreshFunc = cbfun;
        return prevcbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch (mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch (value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        if (x) {
          setValue(x, wx, 'i32');
        }
  
        if (y) {
          setValue(y, wy, 'i32');
        }
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        if (width) {
          setValue(width, ww, 'i32');
        }
  
        if (height) {
          setValue(height, wh, 'i32');
        }
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            Browser.requestFullscreen();
          } else {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
        wasmTable.get(win.windowSizeFunc)(win.id, width, height);
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++) {
          // no-op
        }
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          Browser.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++) {
          // no-op
        }
        var useWebGL = GLFW.hints[0x00022001] > 0; // Use WebGL when we are told to based on GLFW_CLIENT_API
        if (i == GLFW.windows.length) {
          if (useWebGL) {
            var contextAttributes = {
              antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
              depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
              stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
              alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS
            }
            Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
          } else {
            Browser.init();
          }
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx && useWebGL) return 0;
  
        // Get non alive id
        var win = new GLFW_Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          wasmTable.get(win.windowCloseFunc)(win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};
  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwGetCurrentContext() {
      return GLFW.active ? GLFW.active.id : 0;
    }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  function _glfwGetMouseButton(winid, button) {
      return GLFW.getMouseButton(winid, button);
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("touchmove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("touchstart", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("touchcancel", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener("touchend", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwPollEvents() {}

  function _glfwSetCursorPosCallback(winid, cbfun) {
      return GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("touchmove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("touchstart", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("touchcancel", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener("touchend", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }

  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];
  function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.includes(rule)) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)] = ret;
      }
      return ret;
    }

var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
init_emval();;
PureVirtualError = Module['PureVirtualError'] = extendError(Error, 'PureVirtualError');;
embind_init_charCodes();
init_embind();;
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) { Browser.requestFullscreen(lockPointer, resizeCanvas) };
  Module["requestFullScreen"] = function Module_requestFullScreen() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
var GLctx;;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__assert_fail": ___assert_fail,
  "__cxa_atexit": ___cxa_atexit,
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "_embind_create_inheriting_constructor": __embind_create_inheriting_constructor,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_class_function": __embind_register_class_class_function,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "_emval_call_void_method": __emval_call_void_method,
  "_emval_decref": __emval_decref,
  "_emval_get_method_caller": __emval_get_method_caller,
  "_emval_incref": __emval_incref,
  "abort": _abort,
  "clock_gettime": _clock_gettime,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "emscripten_run_script": _emscripten_run_script,
  "emscripten_set_main_loop": _emscripten_set_main_loop,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "glAttachShader": _glAttachShader,
  "glBindBuffer": _glBindBuffer,
  "glBindTexture": _glBindTexture,
  "glBindVertexArray": _glBindVertexArray,
  "glBufferData": _glBufferData,
  "glClear": _glClear,
  "glClearColor": _glClearColor,
  "glCompileShader": _glCompileShader,
  "glCreateProgram": _glCreateProgram,
  "glCreateShader": _glCreateShader,
  "glDeleteShader": _glDeleteShader,
  "glDrawElements": _glDrawElements,
  "glEnableVertexAttribArray": _glEnableVertexAttribArray,
  "glGenBuffers": _glGenBuffers,
  "glGenTextures": _glGenTextures,
  "glGenVertexArrays": _glGenVertexArrays,
  "glGenerateMipmap": _glGenerateMipmap,
  "glGetProgramInfoLog": _glGetProgramInfoLog,
  "glGetProgramiv": _glGetProgramiv,
  "glGetShaderInfoLog": _glGetShaderInfoLog,
  "glGetShaderiv": _glGetShaderiv,
  "glLinkProgram": _glLinkProgram,
  "glShaderSource": _glShaderSource,
  "glTexImage2D": _glTexImage2D,
  "glUseProgram": _glUseProgram,
  "glVertexAttribPointer": _glVertexAttribPointer,
  "glViewport": _glViewport,
  "glfwCreateWindow": _glfwCreateWindow,
  "glfwGetCurrentContext": _glfwGetCurrentContext,
  "glfwGetKey": _glfwGetKey,
  "glfwGetMouseButton": _glfwGetMouseButton,
  "glfwInit": _glfwInit,
  "glfwMakeContextCurrent": _glfwMakeContextCurrent,
  "glfwPollEvents": _glfwPollEvents,
  "glfwSetCursorPosCallback": _glfwSetCursorPosCallback,
  "glfwSetWindowShouldClose": _glfwSetWindowShouldClose,
  "glfwSwapBuffers": _glfwSwapBuffers,
  "glfwTerminate": _glfwTerminate,
  "glfwWindowHint": _glfwWindowHint,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0,
  "strftime_l": _strftime_l,
  "time": _time
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _stbi_load = Module["_stbi_load"] = createExportWrapper("stbi_load");

/** @type {function(...*):?} */
var _stbi_image_free = Module["_stbi_image_free"] = createExportWrapper("stbi_image_free");

/** @type {function(...*):?} */
var _main = Module["_main"] = createExportWrapper("main");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _stbi_load_from_memory = Module["_stbi_load_from_memory"] = createExportWrapper("stbi_load_from_memory");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij");

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj");

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj");

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepaliveCounter")) Module["runtimeKeepaliveCounter"] = function() { abort("'runtimeKeepaliveCounter' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetIndexed")) Module["emscriptenWebGLGetIndexed"] = function() { abort("'emscriptenWebGLGetIndexed' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];

  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  try {

    var ret = entryFunction(argc, argv);

    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as
    // execution is asynchronously handed off to a pthread.
      // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;

  }
}

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && keepRuntimeAlive() && status === 0) {
    return;
  }

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;

run();





