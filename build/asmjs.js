

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// See https://caniuse.com/mdn-javascript_builtins_object_assign

// See https://caniuse.com/mdn-javascript_builtins_bigint64array

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
  }

  Module.expectedDataFileDownloads++;
  (function() {
    // When running as a pthread, FS operations are proxied to the main thread, so we don't need to
    // fetch the .data bundle on the worker
    if (Module['ENVIRONMENT_IS_PTHREAD']) return;
    var loadPackage = function(metadata) {

      var PACKAGE_PATH = '';
      if (typeof window === 'object') {
        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
      } else if (typeof process === 'undefined' && typeof location !== 'undefined') {
        // web worker
        PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
      }
      var PACKAGE_NAME = 'build/asmjs.data';
      var REMOTE_PACKAGE_BASE = 'asmjs.data';
      if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
        Module['locateFile'] = Module['locateFilePackage'];
        err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
      }
      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];

      function fetchRemotePackage(packageName, packageSize, callback, errback) {
        if (typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string') {
          require('fs').readFile(packageName, function(err, contents) {
            if (err) {
              errback(err);
            } else {
              callback(contents.buffer);
            }
          });
          return;
        }
        var xhr = new XMLHttpRequest();
        xhr.open('GET', packageName, true);
        xhr.responseType = 'arraybuffer';
        xhr.onprogress = function(event) {
          var url = packageName;
          var size = packageSize;
          if (event.total) size = event.total;
          if (event.loaded) {
            if (!xhr.addedTotal) {
              xhr.addedTotal = true;
              if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
              Module.dataFileDownloads[url] = {
                loaded: event.loaded,
                total: size
              };
            } else {
              Module.dataFileDownloads[url].loaded = event.loaded;
            }
            var total = 0;
            var loaded = 0;
            var num = 0;
            for (var download in Module.dataFileDownloads) {
            var data = Module.dataFileDownloads[download];
              total += data.total;
              loaded += data.loaded;
              num++;
            }
            total = Math.ceil(total * Module.expectedDataFileDownloads/num);
            if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
          } else if (!Module.dataFileDownloads) {
            if (Module['setStatus']) Module['setStatus']('Downloading data...');
          }
        };
        xhr.onerror = function(event) {
          throw new Error("NetworkError for: " + packageName);
        }
        xhr.onload = function(event) {
          if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            var packageData = xhr.response;
            callback(packageData);
          } else {
            throw new Error(xhr.statusText + " : " + xhr.responseURL);
          }
        };
        xhr.send(null);
      };

      function handleError(error) {
        console.error('package error:', error);
      };

      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);

    function runWithFS() {

      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
Module['FS_createPath']("/", "data", true, true);

      /** @constructor */
      function DataRequest(start, end, audio) {
        this.start = start;
        this.end = end;
        this.audio = audio;
      }
      DataRequest.prototype = {
        requests: {},
        open: function(mode, name) {
          this.name = name;
          this.requests[name] = this;
          Module['addRunDependency']('fp ' + this.name);
        },
        send: function() {},
        onload: function() {
          var byteArray = this.byteArray.subarray(this.start, this.end);
          this.finish(byteArray);
        },
        finish: function(byteArray) {
          var that = this;
          // canOwn this data in the filesystem, it is a slide into the heap that will never change
          Module['FS_createDataFile'](this.name, null, byteArray, true, true, true);
          Module['removeRunDependency']('fp ' + that.name);
          this.requests[this.name] = null;
        }
      };

      var files = metadata['files'];
      for (var i = 0; i < files.length; ++i) {
        new DataRequest(files[i]['start'], files[i]['end'], files[i]['audio'] || 0).open('GET', files[i]['filename']);
      }

      function processPackageData(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer.constructor.name === ArrayBuffer.name, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        // Reuse the bytearray from the XHR as the source for file reads.
          DataRequest.prototype.byteArray = byteArray;
          var files = metadata['files'];
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }          Module['removeRunDependency']('datafile_build/asmjs.data');

      };
      Module['addRunDependency']('datafile_build/asmjs.data');

      if (!Module.preloadResults) Module.preloadResults = {};

      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }

    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    }
    loadPackage({"files": [{"filename": "/data/awesomeface.png", "start": 0, "end": 59277}, {"filename": "/data/container.jpg", "start": 59277, "end": 244216}, {"filename": "/data/file.js", "start": 244216, "end": 244999}, {"filename": "/data/file.txt", "start": 244999, "end": 245178}, {"filename": "/data/shader.fs", "start": 245178, "end": 245468}, {"filename": "/data/shader.vs", "start": 245468, "end": 245711}], "remote_package_size": 245711});

  })();


    // All the pre-js content up to here must remain later on, we need to run
    // it.
    if (Module['ENVIRONMENT_IS_PTHREAD']) Module['preRun'] = [];
    var necessaryPreJSTasks = Module['preRun'].slice();
  
    if (!Module['preRun']) throw 'Module.preRun should exist because file support used it; did a pre-js delete it?';
    necessaryPreJSTasks.forEach(function(task) {
      if (Module['preRun'].indexOf(task) < 0) throw 'All preRun tasks that exist before user pre-js code should remain after; did you replace Module or modify Module.preRun?';
    });
  

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  let toLog = e;
  if (e && typeof e == 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  // `require()` is no-op in an ESM module, use `createRequire()` to construct
  // the require()` function.  This is only necessary for multi-environment
  // builds, `-sENVIRONMENT=node` emits a static import declaration instead.
  // TODO: Swap all `require()`'s with `import()`'s?
  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require('fs');
  var nodePath = require('path');

  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = nodePath.dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = (filename, binary) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  // We need to re-wrap `file://` strings to URLs. Normalizing isn't
  // necessary in that case, the path should already be absolute.
  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
  return fs.readFileSync(filename, binary ? undefined : 'utf8');
};

readBinary = (filename) => {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = (filename, onload, onerror) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  // See the comment in the `read_` function.
  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
  fs.readFile(filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  process['on']('unhandledRejection', function(reason) { throw reason; });

  quit_ = (status, toThrow) => {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      const data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    let data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(() => onload(readBinary(f)), 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js


  read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");




var STACK_ALIGN = 16;
var POINTER_SIZE = 4;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': case 'u8': return 1;
    case 'i16': case 'u16': return 2;
    case 'i32': case 'u32': return 4;
    case 'i64': case 'u64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length - 1] === '*') {
        return POINTER_SIZE;
      }
      if (type[0] === 'i') {
        const bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      }
      return 0;
    }
  }
}

// include: runtime_debug.js


function legacyModuleProp(prop, newName) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get: function() {
        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

function missingLibrarySymbol(sym) {
  if (typeof globalThis !== 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get: function() {
        // Can't `abort()` here because it would break code that does runtime
        // checks.  e.g. `if (typeof SDL === 'undefined')`.
        var msg = '`' + sym + '` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line';
        // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
        // library.js, which means $name for a JS name with no prefix, or name
        // for a JS name like _name.
        var librarySymbol = sym;
        if (!librarySymbol.startsWith('_')) {
          librarySymbol = '$' + sym;
        }
        msg += " (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=" + librarySymbol + ")";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        warnOnce(msg);
        return undefined;
      }
    });
  }
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get: function() {
        var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// end include: runtime_debug.js


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');
var noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 65536, "");
  base64DecodeToExistingUint8Array(bufferView, 96416, "IAMAAFgCAAAuuug+AACAP1hYWFggUE5HIGNodW5rIG5vdCBrbm93bgAAAABwkwEACQAAAAAAAAAAAAAANQAAAAAAAAAAAAAAAAAAAAAAAAA0AAAAAAAAADIAAABofgEAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAigAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwAAAIsAAAB4ggEAAAQAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAP////8KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYHkBAAAAAAAFAAAAAAAAAAAAAAA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAAAAMgAAAICGAQAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4eQEA");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.glfwInit;
 var fimport$1 = env.glfwWindowHint;
 var fimport$2 = env.glfwGetCurrentContext;
 var fimport$3 = env.glfwCreateWindow;
 var fimport$4 = env.glfwTerminate;
 var fimport$5 = env.glfwMakeContextCurrent;
 var fimport$6 = env.glfwSetCursorPosCallback;
 var fimport$7 = env.glEnable;
 var fimport$8 = env.glfwGetMouseButton;
 var fimport$9 = env.glClearColor;
 var fimport$10 = env.glfwGetKey;
 var fimport$11 = env.glfwSetWindowShouldClose;
 var fimport$12 = env.glClear;
 var fimport$13 = env.glfwSwapBuffers;
 var fimport$14 = env.glfwPollEvents;
 var fimport$15 = env.glViewport;
 var fimport$16 = env.exit;
 var fimport$17 = env.emscripten_run_script;
 var fimport$18 = env.emscripten_set_main_loop;
 var fimport$19 = env._embind_register_class;
 var fimport$20 = env._embind_register_class_class_function;
 var fimport$21 = env._embind_register_function;
 var fimport$22 = env.glGenVertexArrays;
 var fimport$23 = env.glGenBuffers;
 var fimport$24 = env.glBindVertexArray;
 var fimport$25 = env.glBindBuffer;
 var fimport$26 = env.glBufferData;
 var fimport$27 = env.glVertexAttribPointer;
 var fimport$28 = env.glEnableVertexAttribArray;
 var fimport$29 = env.glGenTextures;
 var fimport$30 = env.glBindTexture;
 var fimport$31 = env.glTexParameteri;
 var fimport$32 = env.glTexImage2D;
 var fimport$33 = env.glGenerateMipmap;
 var fimport$34 = env.glActiveTexture;
 var fimport$35 = env.glfwGetTime;
 var fimport$36 = env.glGetUniformLocation;
 var fimport$37 = env.glUniformMatrix4fv;
 var fimport$38 = env.glDrawArrays;
 var fimport$39 = env._embind_register_class_constructor;
 var fimport$40 = env._embind_register_class_function;
 var fimport$41 = env.glCreateShader;
 var fimport$42 = env.glShaderSource;
 var fimport$43 = env.glCompileShader;
 var fimport$44 = env.glCreateProgram;
 var fimport$45 = env.glAttachShader;
 var fimport$46 = env.glLinkProgram;
 var fimport$47 = env.glDeleteShader;
 var fimport$48 = env.glUseProgram;
 var fimport$49 = env.glUniform1i;
 var fimport$50 = env.glGetShaderiv;
 var fimport$51 = env.glGetShaderInfoLog;
 var fimport$52 = env.glGetProgramiv;
 var fimport$53 = env.glGetProgramInfoLog;
 var fimport$54 = env.__assert_fail;
 var fimport$55 = env._embind_create_inheriting_constructor;
 var fimport$56 = env._emval_decref;
 var fimport$57 = env._emval_call_void_method;
 var fimport$58 = env._emval_get_method_caller;
 var fimport$59 = env._emval_incref;
 var fimport$60 = env._embind_register_void;
 var fimport$61 = env._embind_register_bool;
 var fimport$62 = env._embind_register_integer;
 var fimport$63 = env._embind_register_float;
 var fimport$64 = env._embind_register_std_string;
 var fimport$65 = env._embind_register_std_wstring;
 var fimport$66 = env._embind_register_emval;
 var fimport$67 = env._embind_register_memory_view;
 var fimport$68 = env.emscripten_memcpy_big;
 var fimport$69 = env.emscripten_date_now;
 var fimport$70 = env._emscripten_get_now_is_monotonic;
 var fimport$71 = env.emscripten_get_now;
 var fimport$72 = env.__syscall_openat;
 var fimport$73 = env.__syscall_fcntl64;
 var fimport$74 = env.__syscall_ioctl;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var fimport$75 = wasi_snapshot_preview1.fd_write;
 var fimport$76 = wasi_snapshot_preview1.fd_read;
 var fimport$77 = wasi_snapshot_preview1.fd_close;
 var fimport$78 = env.emscripten_resize_heap;
 var fimport$79 = env.abort;
 var fimport$80 = wasi_snapshot_preview1.environ_sizes_get;
 var fimport$81 = wasi_snapshot_preview1.environ_get;
 var fimport$82 = env.strftime_l;
 var fimport$83 = env._embind_register_bigint;
 var fimport$84 = wasi_snapshot_preview1.fd_seek;
 var global$0 = 65536;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $2071();
  $849();
  $889();
  $344();
  $403();
  $787();
 }
 
 function $1($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 65536 + 8 | 0;
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
  $2($4_1 + 24 | 0 | 0, 66708 | 0) | 0;
  $2($3_1 | 0, 67516 | 0) | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0]($4_1, $3_1, HEAP32[(0 + 96416 | 0) >> 2] | 0, HEAP32[(0 + 96420 | 0) >> 2] | 0, 0 & 1 | 0) | 0;
  $1989($3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $2($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $3($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  $1994($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  $5($5_1 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $3($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $280($6_1 | 0) | 0;
  $281($6_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $472(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $6($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $19_1 = 0, $21_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $81_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  $8($7(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  $9($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (($10(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $19_1 = $11(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $20_1 = $12($5_1 | 0) | 0;
    i64toi32_i32$0 = HEAP32[$19_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($19_1 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $20_1;
    HEAP32[i64toi32_i32$0 >> 2] = $81_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $21_1 = 8;
    HEAP32[(i64toi32_i32$0 + $21_1 | 0) >> 2] = HEAP32[($19_1 + $21_1 | 0) >> 2] | 0;
    break label$1;
   }
   $1995($5_1 | 0, $14($13(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, $15(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  $5($5_1 | 0);
  $30_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $30_1 | 0;
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $289(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $9($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $280($6_1 | 0) | 0;
  $290($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($11(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $198(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $288(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($11(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[(($11(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $16($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $26_1 = 0, $45_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP8[($7_1 + 15 | 0) >> 0] = $4_1;
  $9_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  fimport$0() | 0;
  fimport$1(139266 | 0, 3 | 0);
  fimport$1(139267 | 0, 3 | 0);
  fimport$1(139272 | 0, 204801 | 0);
  label$1 : {
   label$2 : {
    if (!((fimport$2() | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $26_1 = 0;
    HEAP32[($9_1 + 36 | 0) >> 2] = fimport$3(800 | 0, 600 | 0, 68212 | 0, $26_1 | 0, $26_1 | 0) | 0;
    label$3 : {
     if (!((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$3
     }
     $19($17(100264 | 0, 65755 | 0) | 0 | 0, 1 | 0) | 0;
     fimport$4();
     HEAP32[($7_1 + 28 | 0) >> 2] = -1;
     break label$1;
    }
    fimport$5(HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0);
    fimport$6(HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, 2 | 0) | 0;
   }
   fimport$7(2929 | 0);
   HEAP32[($7_1 + 28 | 0) >> 2] = 0;
  }
  $45_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $45_1 | 0;
 }
 
 function $17($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $21(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $4(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $12_1 = 0, $16_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $12_1 = 24;
  $16_1 = 24;
  $563(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, (($22($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, (10 << $12_1 | 0) >> $12_1 | 0 | 0) | 0) << $16_1 | 0) >> $16_1 | 0 | 0) | 0;
  $540(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $20_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $20($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = fimport$8(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   fimport$9(Math_fround(Math_fround(Math_fround((($466() | 0 | 0) % (255 | 0) | 0) + 1 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(Math_fround((($466() | 0 | 0) % (255 | 0) | 0) + 1 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(Math_fround((($466() | 0 | 0) % (255 | 0) | 0) + 1 | 0 | 0) / Math_fround(255.0))), Math_fround(Math_fround(1.0)));
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $21($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0, $39_1 = 0, $45_1 = 0, $51_1 = 0, $59_1 = 0, $69_1 = 0, $20_1 = 0, $44_1 = 0, $50_1 = 0, $57_1 = 0, $79_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $556($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(($314($5_1 + 24 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $315($5_1 + 8 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   $20_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   $21_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((($316($21_1 + (HEAP32[((HEAP32[$21_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$3
     }
     $39_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
     break label$2;
    }
    $39_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   }
   $44_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
   $45_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $50_1 = $45_1 + (HEAP32[((HEAP32[$45_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $51_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $57_1 = $317($51_1 + (HEAP32[((HEAP32[$51_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $59_1 = 24;
   HEAP32[($5_1 + 16 | 0) >> 2] = $318(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $20_1 | 0, $39_1 | 0, $44_1 | 0, $50_1 | 0, ($57_1 << $59_1 | 0) >> $59_1 | 0 | 0) | 0;
   label$4 : {
    if (!(($319($5_1 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    $69_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $49($69_1 + (HEAP32[((HEAP32[$69_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
   }
  }
  $557($5_1 + 24 | 0 | 0) | 0;
  $79_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $79_1 | 0;
 }
 
 function $22($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $15_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $771($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $10_1 = 24;
  $13_1 = $330($329($4_1 | 0) | 0 | 0, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $10_1 | 0) >> $10_1 | 0 | 0) | 0;
  $1537($4_1 | 0) | 0;
  $15_1 = 24;
  global$0 = $4_1 + 16 | 0;
  return ($13_1 << $15_1 | 0) >> $15_1 | 0 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $34_1 = 0, $42_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  i64toi32_i32$0 = $24() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $34_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $34_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $25(i64toi32_i32$0 + 8 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $42_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $26(i64toi32_i32$1 + 16 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0)) / Math_fround(1.0e9));
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $24() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $60_1 = 0, $65_1 = 0, $74_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!((((HEAPU8[(0 + 96944 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $495() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $60_1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$0 + 96936 | 0) >> 2] = $60_1;
   HEAP32[(i64toi32_i32$0 + 96940 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[(0 + 96944 | 0) >> 0] = 1;
  }
  i64toi32_i32$1 = $495() | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $65_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $65_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $27(i64toi32_i32$1 + 8 | 0 | 0, 96936 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $74_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $74_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  $28(i64toi32_i32$0 + 24 | 0 | 0, i64toi32_i32$0 + 16 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $18_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  i64toi32_i32$2 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $26($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  i64toi32_i32$2 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $31_1 = 0, $37_1 = 0, $47_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = $70(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $31_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $31_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $70(HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $37_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $71(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $47_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $47_1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $23_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  i64toi32_i32$2 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((fimport$10(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, 256 | 0) | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   fimport$11(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  fimport$12(16384 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($4_1);
  fimport$13(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
  fimport$14();
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $30($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAPF32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])) * Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))));
 }
 
 function $31($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAPF32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  fimport$9(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])), Math_fround(Math_fround(1.0)));
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $32($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  fimport$15(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 96912 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $34() {
  $35(96916 | 0) | 0;
  return;
 }
 
 function $35($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $37($4_1 | 0, 3 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $36() {
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $39_1 = 0, $43_1 = 0, $53_1 = 0, $83_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $24_1 = 0, $25_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $37_1 = 0, $287_1 = 0, $41_1 = 0, $42_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $315_1 = 0, $328_1 = 0, $51_1 = 0, $52_1 = 0, $54_1 = 0, $55_1 = 0, $354_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $71_1 = 0, $72_1 = 0, $74_1 = 0, $75_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $431_1 = 0, $85_1 = 0, $86_1 = 0, $89_1 = 0, $90_1 = 0, $91_1 = 0, $462_1 = 0, $475_1 = 0, $96_1 = 0, $97_1 = 0, $98_1 = 0, $99_1 = 0, $100_1 = 0, $503_1 = 0, $105_1 = 0, $106_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $119_1 = 0, $120_1 = 0, $122_1 = 0, $123_1 = 0, $125_1 = 0, $126_1 = 0, $127_1 = 0, $135_1 = 0, $144_1 = 0, $146_1 = 0, $147_1 = 0, $151_1 = 0, $155_1 = 0, $163_1 = 0, $164_1 = 0, $168_1 = 0, $172_1 = 0;
  $2_1 = global$0 - 464 | 0;
  global$0 = $2_1;
  $73(66623 | 0, 4 | 0);
  $74(66396 | 0, 5 | 0);
  $75(65907 | 0, 6 | 0);
  HEAP32[($2_1 + 136 | 0) >> 2] = $2_1 + 112 | 0;
  HEAP32[($2_1 + 132 | 0) >> 2] = 67663;
  $76();
  HEAP32[($2_1 + 128 | 0) >> 2] = 7;
  HEAP32[($2_1 + 124 | 0) >> 2] = $78() | 0;
  HEAP32[($2_1 + 120 | 0) >> 2] = $79() | 0;
  HEAP32[($2_1 + 116 | 0) >> 2] = 8;
  $16_1 = $81() | 0;
  $17_1 = $82() | 0;
  $18_1 = $83() | 0;
  $19_1 = $84() | 0;
  HEAP32[($2_1 + 320 | 0) >> 2] = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
  $21_1 = $85() | 0;
  $22_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
  HEAP32[($2_1 + 336 | 0) >> 2] = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
  $24_1 = $86() | 0;
  $25_1 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
  HEAP32[($2_1 + 332 | 0) >> 2] = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
  $27_1 = $86() | 0;
  $28_1 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
  $29_1 = HEAP32[($2_1 + 132 | 0) >> 2] | 0;
  HEAP32[($2_1 + 340 | 0) >> 2] = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
  fimport$19($16_1 | 0, $17_1 | 0, $18_1 | 0, $19_1 | 0, $21_1 | 0, $22_1 | 0, $24_1 | 0, $25_1 | 0, $27_1 | 0, $28_1 | 0, $29_1 | 0, $87() | 0 | 0, HEAP32[($2_1 + 116 | 0) >> 2] | 0 | 0);
  HEAP32[($2_1 + 140 | 0) >> 2] = $2_1 + 112 | 0;
  HEAP32[($2_1 + 348 | 0) >> 2] = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
  HEAP32[($2_1 + 344 | 0) >> 2] = 9;
  $37_1 = HEAP32[($2_1 + 348 | 0) >> 2] | 0;
  $89(HEAP32[($2_1 + 344 | 0) >> 2] | 0 | 0);
  $39_1 = 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = $39_1;
  HEAP32[($2_1 + 104 | 0) >> 2] = 10;
  i64toi32_i32$0 = HEAP32[($2_1 + 104 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
  $287_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 176 | 0) >> 2] = $287_1;
  HEAP32[($2_1 + 180 | 0) >> 2] = i64toi32_i32$1;
  $41_1 = HEAP32[($2_1 + 176 | 0) >> 2] | 0;
  $42_1 = HEAP32[($2_1 + 180 | 0) >> 2] | 0;
  HEAP32[($2_1 + 204 | 0) >> 2] = $37_1;
  $43_1 = 66617;
  HEAP32[($2_1 + 200 | 0) >> 2] = $43_1;
  HEAP32[($2_1 + 196 | 0) >> 2] = $42_1;
  HEAP32[($2_1 + 192 | 0) >> 2] = $41_1;
  $44_1 = HEAP32[($2_1 + 204 | 0) >> 2] | 0;
  $45_1 = HEAP32[($2_1 + 200 | 0) >> 2] | 0;
  $46_1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
  HEAP32[($2_1 + 188 | 0) >> 2] = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
  HEAP32[($2_1 + 184 | 0) >> 2] = $46_1;
  i64toi32_i32$1 = HEAP32[($2_1 + 184 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 188 | 0) >> 2] | 0;
  $315_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 24 | 0) >> 2] = $315_1;
  HEAP32[($2_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $91($45_1 | 0, $2_1 + 24 | 0 | 0);
  HEAP32[($2_1 + 100 | 0) >> 2] = $39_1;
  HEAP32[($2_1 + 96 | 0) >> 2] = 11;
  i64toi32_i32$0 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
  $328_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 144 | 0) >> 2] = $328_1;
  HEAP32[($2_1 + 148 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = HEAP32[($2_1 + 144 | 0) >> 2] | 0;
  $52_1 = HEAP32[($2_1 + 148 | 0) >> 2] | 0;
  HEAP32[($2_1 + 172 | 0) >> 2] = $44_1;
  $53_1 = 65789;
  HEAP32[($2_1 + 168 | 0) >> 2] = $53_1;
  HEAP32[($2_1 + 164 | 0) >> 2] = $52_1;
  HEAP32[($2_1 + 160 | 0) >> 2] = $51_1;
  $54_1 = HEAP32[($2_1 + 168 | 0) >> 2] | 0;
  $55_1 = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
  HEAP32[($2_1 + 156 | 0) >> 2] = HEAP32[($2_1 + 164 | 0) >> 2] | 0;
  HEAP32[($2_1 + 152 | 0) >> 2] = $55_1;
  i64toi32_i32$1 = HEAP32[($2_1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 156 | 0) >> 2] | 0;
  $354_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = $354_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $91($54_1 | 0, $2_1 + 16 | 0 | 0);
  HEAP32[($2_1 + 228 | 0) >> 2] = $2_1 + 88 | 0;
  HEAP32[($2_1 + 224 | 0) >> 2] = 66708;
  $93();
  HEAP32[($2_1 + 220 | 0) >> 2] = 12;
  HEAP32[($2_1 + 216 | 0) >> 2] = $95() | 0;
  HEAP32[($2_1 + 212 | 0) >> 2] = $96() | 0;
  HEAP32[($2_1 + 208 | 0) >> 2] = 13;
  $66_1 = $98() | 0;
  $67_1 = $99() | 0;
  $68_1 = $100() | 0;
  $69_1 = $84() | 0;
  HEAP32[($2_1 + 352 | 0) >> 2] = HEAP32[($2_1 + 220 | 0) >> 2] | 0;
  $71_1 = $85() | 0;
  $72_1 = HEAP32[($2_1 + 220 | 0) >> 2] | 0;
  HEAP32[($2_1 + 328 | 0) >> 2] = HEAP32[($2_1 + 216 | 0) >> 2] | 0;
  $74_1 = $86() | 0;
  $75_1 = HEAP32[($2_1 + 216 | 0) >> 2] | 0;
  HEAP32[($2_1 + 324 | 0) >> 2] = HEAP32[($2_1 + 212 | 0) >> 2] | 0;
  $77_1 = $86() | 0;
  $78_1 = HEAP32[($2_1 + 212 | 0) >> 2] | 0;
  $79_1 = HEAP32[($2_1 + 224 | 0) >> 2] | 0;
  HEAP32[($2_1 + 356 | 0) >> 2] = HEAP32[($2_1 + 208 | 0) >> 2] | 0;
  fimport$19($66_1 | 0, $67_1 | 0, $68_1 | 0, $69_1 | 0, $71_1 | 0, $72_1 | 0, $74_1 | 0, $75_1 | 0, $77_1 | 0, $78_1 | 0, $79_1 | 0, $87() | 0 | 0, HEAP32[($2_1 + 208 | 0) >> 2] | 0 | 0);
  $83_1 = 1;
  HEAP32[($2_1 + 76 | 0) >> 2] = $83_1;
  HEAP32[($2_1 + 72 | 0) >> 2] = 12;
  i64toi32_i32$0 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
  $431_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 264 | 0) >> 2] = $431_1;
  HEAP32[($2_1 + 268 | 0) >> 2] = i64toi32_i32$1;
  $85_1 = HEAP32[($2_1 + 264 | 0) >> 2] | 0;
  $86_1 = HEAP32[($2_1 + 268 | 0) >> 2] | 0;
  HEAP32[($2_1 + 292 | 0) >> 2] = $2_1 + 88 | 0;
  HEAP32[($2_1 + 288 | 0) >> 2] = $43_1;
  HEAP32[($2_1 + 284 | 0) >> 2] = $86_1;
  HEAP32[($2_1 + 280 | 0) >> 2] = $85_1;
  $89_1 = HEAP32[($2_1 + 292 | 0) >> 2] | 0;
  $90_1 = HEAP32[($2_1 + 288 | 0) >> 2] | 0;
  $91_1 = HEAP32[($2_1 + 280 | 0) >> 2] | 0;
  HEAP32[($2_1 + 276 | 0) >> 2] = HEAP32[($2_1 + 284 | 0) >> 2] | 0;
  HEAP32[($2_1 + 272 | 0) >> 2] = $91_1;
  i64toi32_i32$1 = HEAP32[($2_1 + 272 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 276 | 0) >> 2] | 0;
  $462_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $462_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $101($90_1 | 0, $2_1 + 8 | 0 | 0);
  HEAP32[($2_1 + 60 | 0) >> 2] = $83_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = 8;
  i64toi32_i32$0 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
  $475_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 232 | 0) >> 2] = $475_1;
  HEAP32[($2_1 + 236 | 0) >> 2] = i64toi32_i32$1;
  $96_1 = HEAP32[($2_1 + 232 | 0) >> 2] | 0;
  $97_1 = HEAP32[($2_1 + 236 | 0) >> 2] | 0;
  HEAP32[($2_1 + 260 | 0) >> 2] = $89_1;
  HEAP32[($2_1 + 256 | 0) >> 2] = $53_1;
  HEAP32[($2_1 + 252 | 0) >> 2] = $97_1;
  HEAP32[($2_1 + 248 | 0) >> 2] = $96_1;
  $98_1 = HEAP32[($2_1 + 260 | 0) >> 2] | 0;
  $99_1 = HEAP32[($2_1 + 256 | 0) >> 2] | 0;
  $100_1 = HEAP32[($2_1 + 248 | 0) >> 2] | 0;
  HEAP32[($2_1 + 244 | 0) >> 2] = HEAP32[($2_1 + 252 | 0) >> 2] | 0;
  HEAP32[($2_1 + 240 | 0) >> 2] = $100_1;
  i64toi32_i32$1 = HEAP32[($2_1 + 240 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 244 | 0) >> 2] | 0;
  $503_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 32 | 0) >> 2] = $503_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  $101($99_1 | 0, $2_1 + 32 | 0 | 0);
  HEAP32[($2_1 + 316 | 0) >> 2] = $98_1;
  HEAP32[($2_1 + 312 | 0) >> 2] = 66445;
  $105_1 = HEAP32[($2_1 + 316 | 0) >> 2] | 0;
  $106_1 = HEAP32[($2_1 + 312 | 0) >> 2] | 0;
  HEAP32[($2_1 + 380 | 0) >> 2] = $2_1 + 304 | 0;
  HEAP32[($2_1 + 376 | 0) >> 2] = $106_1;
  $102();
  HEAP32[($2_1 + 372 | 0) >> 2] = 14;
  HEAP32[($2_1 + 368 | 0) >> 2] = $104() | 0;
  HEAP32[($2_1 + 364 | 0) >> 2] = $105() | 0;
  HEAP32[($2_1 + 360 | 0) >> 2] = 15;
  $114_1 = $107() | 0;
  $115_1 = $108() | 0;
  $116_1 = $109() | 0;
  $117_1 = $110() | 0;
  HEAP32[($2_1 + 440 | 0) >> 2] = HEAP32[($2_1 + 372 | 0) >> 2] | 0;
  $119_1 = $85() | 0;
  $120_1 = HEAP32[($2_1 + 372 | 0) >> 2] | 0;
  HEAP32[($2_1 + 444 | 0) >> 2] = HEAP32[($2_1 + 368 | 0) >> 2] | 0;
  $122_1 = $85() | 0;
  $123_1 = HEAP32[($2_1 + 368 | 0) >> 2] | 0;
  HEAP32[($2_1 + 448 | 0) >> 2] = HEAP32[($2_1 + 364 | 0) >> 2] | 0;
  $125_1 = $85() | 0;
  $126_1 = HEAP32[($2_1 + 364 | 0) >> 2] | 0;
  $127_1 = HEAP32[($2_1 + 376 | 0) >> 2] | 0;
  HEAP32[($2_1 + 452 | 0) >> 2] = HEAP32[($2_1 + 360 | 0) >> 2] | 0;
  fimport$19($114_1 | 0, $115_1 | 0, $116_1 | 0, $117_1 | 0, $119_1 | 0, $120_1 | 0, $122_1 | 0, $123_1 | 0, $125_1 | 0, $126_1 | 0, $127_1 | 0, $87() | 0 | 0, HEAP32[($2_1 + 360 | 0) >> 2] | 0 | 0);
  $135_1 = $112($111($2_1 + 296 | 0 | 0) | 0 | 0) | 0;
  HEAP32[($2_1 + 392 | 0) >> 2] = $2_1 + 304 | 0;
  HEAP32[($2_1 + 388 | 0) >> 2] = 66677;
  HEAP32[($2_1 + 384 | 0) >> 2] = $135_1;
  $113(HEAP32[($2_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 384 | 0) >> 2] | 0 | 0);
  HEAP32[($2_1 + 416 | 0) >> 2] = $105_1;
  HEAP32[($2_1 + 412 | 0) >> 2] = 66024;
  HEAP32[($2_1 + 408 | 0) >> 2] = 16;
  $144_1 = HEAP32[($2_1 + 416 | 0) >> 2] | 0;
  HEAP32[($2_1 + 396 | 0) >> 2] = 17;
  $146_1 = $98() | 0;
  $147_1 = HEAP32[($2_1 + 412 | 0) >> 2] | 0;
  $151_1 = $116($2_1 + 400 | 0 | 0) | 0;
  $155_1 = $117($2_1 + 400 | 0 | 0) | 0;
  HEAP32[($2_1 + 456 | 0) >> 2] = HEAP32[($2_1 + 396 | 0) >> 2] | 0;
  fimport$20($146_1 | 0, $147_1 | 0, $151_1 | 0, $155_1 | 0, $118() | 0 | 0, HEAP32[($2_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 408 | 0) >> 2] | 0 | 0);
  HEAP32[($2_1 + 436 | 0) >> 2] = $144_1;
  HEAP32[($2_1 + 432 | 0) >> 2] = 67746;
  HEAP32[($2_1 + 428 | 0) >> 2] = 18;
  HEAP32[($2_1 + 420 | 0) >> 2] = 19;
  $163_1 = $98() | 0;
  $164_1 = HEAP32[($2_1 + 432 | 0) >> 2] | 0;
  $168_1 = $121($2_1 + 424 | 0 | 0) | 0;
  $172_1 = $122($2_1 + 424 | 0 | 0) | 0;
  HEAP32[($2_1 + 460 | 0) >> 2] = HEAP32[($2_1 + 420 | 0) >> 2] | 0;
  fimport$20($163_1 | 0, $164_1 | 0, $168_1 | 0, $172_1 | 0, $123() | 0 | 0, HEAP32[($2_1 + 420 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 428 | 0) >> 2] | 0 | 0);
  $124(66665 | 0, 20 | 0);
  global$0 = $2_1 + 464 | 0;
  return;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0]();
  $401($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 224 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 220 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 216 | 0) >> 2] = $1_1;
  $39($4_1 + 24 | 0 | 0, HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0, 8 | 0) | 0;
  label$1 : {
   if (($40($4_1 + 24 | 0 | 0) | 0) & 1 | 0) {
    break label$1
   }
   $19($17($41($17(100432 | 0, 69394 | 0) | 0 | 0, HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0) | 0 | 0, 69420 | 0) | 0 | 0, 1 | 0) | 0;
   fimport$16(1 | 0);
   wasm2js_trap();
  }
  $42($4_1 + 16 | 0 | 0, $4_1 + 24 | 0 | 0) | 0;
  $43($4_1 + 8 | 0 | 0) | 0;
  $44($0_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $45($4_1 + 24 | 0 | 0) | 0;
  global$0 = $4_1 + 224 | 0;
  return;
 }
 
 function $39($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0, $47_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $46($6_1 + 108 | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 83596 + 12 | 0;
  HEAP32[($6_1 + 108 | 0) >> 2] = 83596 + 32 | 0;
  $47($6_1 | 0, 83636 + 4 | 0 | 0, $6_1 + 8 | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 83596 + 12 | 0;
  HEAP32[($6_1 + 108 | 0) >> 2] = 83596 + 32 | 0;
  $658($6_1 + 8 | 0 | 0) | 0;
  label$1 : {
   if (!(($48($6_1 + 8 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 8 | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$1
   }
   $49($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 4 | 0);
  }
  $47_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $47_1 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $9_1 = ($50((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $10_1 = $21(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $51(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $52(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $53($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $43($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $44($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $3($6_1 | 0, $5_1 + 24 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  $54($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
  $5($6_1 | 0);
  global$0 = $5_1 + 48 | 0;
  return $6_1 | 0;
 }
 
 function $45($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $55($4_1 | 0, 83636 | 0) | 0;
  $509($4_1 + 108 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $188($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 82480 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $47($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = 0;
  $189($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $48($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $10_1 = $656(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $63(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $192(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0 | 0;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $14($311(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $52($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($10($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $15($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $197($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $328(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $54($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $20_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $59($6_1 | 0);
  label$1 : {
   label$2 : while (1) {
    if (!(($331($5_1 + 24 | 0 | 0, $5_1 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    $20_1 = 24;
    $2000($6_1 | 0, (($332($5_1 + 24 | 0 | 0) | 0) << $20_1 | 0) >> $20_1 | 0 | 0);
    $333($5_1 + 24 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $662($5_1 + 8 | 0 | 0) | 0;
  $533($5_1 | 0, $6_1 + 4 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $56() {
  $57(96924 | 0) | 0;
  $404(21 | 0, 0 | 0, 65536 | 0) | 0;
  return;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $3($4_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $5($4_1 | 0);
  $59($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1989(96924 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $287(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $60() {
  $29(HEAP32[(0 + 96912 | 0) >> 2] | 0 | 0);
  return;
 }
 
 function $61($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $34_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  $2($4_1 + 24 | 0 | 0, 66260 | 0) | 0;
  $38($4_1 + 8 | 0 | 0, $4_1 + 24 | 0 | 0);
  $62(96924 | 0, $4_1 + 8 | 0 | 0) | 0;
  $1989($4_1 + 8 | 0 | 0) | 0;
  i64toi32_i32$0 = $413($4_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $465(i64toi32_i32$0 | 0);
  fimport$17($63(96924 | 0) | 0 | 0);
  fimport$18(22 | 0, 0 | 0, 1 | 0);
  fimport$4();
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  $1989($4_1 + 24 | 0 | 0) | 0;
  $34_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $34_1 | 0;
 }
 
 function $62($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $64($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $51(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, i64toi32_i32$1 = 0, $71_1 = 0, $23_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   if (!(($10($5_1 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $295($292($5_1 | 0) | 0 | 0, $293($5_1 | 0) | 0 | 0, $294($5_1 | 0) | 0 | 0);
  }
  $296($5_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
  $14_1 = $12(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $12($5_1 | 0) | 0;
  i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
  $71_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $15_1;
  HEAP32[i64toi32_i32$0 >> 2] = $71_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $16_1 = 8;
  HEAP32[(i64toi32_i32$0 + $16_1 | 0) >> 2] = HEAP32[($14_1 + $16_1 | 0) >> 2] | 0;
  $297(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0);
  $23_1 = $298(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($4_1 + 15 | 0) >> 0] = 0;
  $299($23_1 | 0, $4_1 + 15 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $65($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAPF32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $68($0_1 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2])))) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  $69($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $67($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $2_1;
  $68($0_1 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])))) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $68($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$7_1 >> 2] = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
  HEAPF32[($7_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
  HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[$6_1 >> 2]);
  return $7_1 | 0;
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  $67($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($340(Math_fround(Math_fround($339(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0)))))));
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $70($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $18_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  i64toi32_i32$2 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $71($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $23$hi = 0, $25$hi = 0, i64toi32_i32$3 = 0, $42_1 = 0, $23_1 = 0, $54_1 = 0, $62_1 = 0, $65_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $1_1;
  i64toi32_i32$2 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $42_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $26(i64toi32_i32$0 + 16 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $23_1 = i64toi32_i32$1;
  $23$hi = i64toi32_i32$0;
  i64toi32_i32$2 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $26(i64toi32_i32$0 + 8 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $25$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$0 = $25$hi;
  $62_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $25$hi;
  i64toi32_i32$3 = $62_1;
  i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
  $65_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $65_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$5;
  $72($4_1 + 40 | 0 | 0, $4_1 + 24 | 0 | 0, 0 | 0) | 0;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
  global$0 = i64toi32_i32$0 + 48 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $72($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $26_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  i64toi32_i32$2 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $26_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $73($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 23;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $126($4_1 + 16 | 0 | 0) | 0;
  $14_1 = $127($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$21($6_1 | 0, $10_1 | 0, $14_1 | 0, $128() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $74($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 24;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $130($4_1 + 16 | 0 | 0) | 0;
  $14_1 = $131($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$21($6_1 | 0, $10_1 | 0, $14_1 | 0, $132() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $75($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 25;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $134($4_1 + 16 | 0 | 0) | 0;
  $14_1 = $135($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$21($6_1 | 0, $10_1 | 0, $14_1 | 0, $136() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $76() {
  
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $157(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $78() {
  return 0 | 0;
 }
 
 function $79() {
  return 0 | 0;
 }
 
 function $80($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $1979($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $81() {
  return $158() | 0 | 0;
 }
 
 function $82() {
  return $159() | 0 | 0;
 }
 
 function $83() {
  return $160() | 0 | 0;
 }
 
 function $84() {
  return 0 | 0;
 }
 
 function $85() {
  return 69804 | 0;
 }
 
 function $86() {
  return 69807 | 0;
 }
 
 function $87() {
  return 69809 | 0;
 }
 
 function $88() {
  var $1_1 = 0;
  $1_1 = $1977(20 | 0) | 0;
  $161($1_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = 26;
  $5_1 = $81() | 0;
  $9_1 = $163($3_1 + 16 | 0 | 0) | 0;
  $13_1 = $164($3_1 + 16 | 0 | 0) | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$39($5_1 | 0, $9_1 | 0, $13_1 | 0, $85() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $27_1 = 0, $85_1 = 0, $86_1 = 0, $134_1 = 0;
  $3_1 = global$0 - 784 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 780 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 780 | 0) >> 2] | 0;
  $137($4_1 + 16 | 0 | 0, 66201 | 0, 66308 | 0, 0 | 0);
  $410($3_1 + 48 | 0 | 0, 69840 | 0, 720 | 0) | 0;
  fimport$22(1 | 0, $4_1 + 4 | 0 | 0);
  fimport$23(1 | 0, $4_1 | 0);
  fimport$24(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  fimport$25(34962 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  fimport$26(34962 | 0, 720 | 0, $3_1 + 48 | 0 | 0, 35044 | 0);
  $27_1 = 0;
  fimport$27($27_1 | 0, 3 | 0, 5126 | 0, 0 & 255 | 0 | 0, 20 | 0, $27_1 | 0);
  fimport$28(0 | 0);
  fimport$27(1 | 0, 2 | 0, 5126 | 0, 0 & 255 | 0 | 0, 20 | 0, 12 | 0);
  fimport$28(1 | 0);
  fimport$29(1 | 0, $4_1 + 8 | 0 | 0);
  fimport$30(3553 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  fimport$31(3553 | 0, 10242 | 0, 10497 | 0);
  fimport$31(3553 | 0, 10243 | 0, 10497 | 0);
  fimport$31(3553 | 0, 10241 | 0, 9729 | 0);
  fimport$31(3553 | 0, 10240 | 0, 9729 | 0);
  $346(1 | 0);
  HEAP32[($3_1 + 32 | 0) >> 2] = $347(67199 | 0, $3_1 + 44 | 0 | 0, $3_1 + 40 | 0 | 0, $3_1 + 36 | 0 | 0, 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $85_1 = 0;
    $86_1 = 6407;
    fimport$32(3553 | 0, $85_1 | 0, $86_1 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, $85_1 | 0, $86_1 | 0, 5121 | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0);
    fimport$33(3553 | 0);
    break label$1;
   }
   $19($17(100264 | 0, 67419 | 0) | 0 | 0, 1 | 0) | 0;
  }
  $345(HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0);
  fimport$29(1 | 0, $4_1 + 12 | 0 | 0);
  fimport$30(3553 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  fimport$31(3553 | 0, 10242 | 0, 10497 | 0);
  fimport$31(3553 | 0, 10243 | 0, 10497 | 0);
  fimport$31(3553 | 0, 10241 | 0, 9729 | 0);
  fimport$31(3553 | 0, 10240 | 0, 9729 | 0);
  HEAP32[($3_1 + 32 | 0) >> 2] = $347(67218 | 0, $3_1 + 44 | 0 | 0, $3_1 + 40 | 0 | 0, $3_1 + 36 | 0 | 0, 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    $134_1 = 0;
    fimport$32(3553 | 0, $134_1 | 0, 6407 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, $134_1 | 0, 6408 | 0, 5121 | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0);
    fimport$33(3553 | 0);
    break label$3;
   }
   $19($17(100264 | 0, 67419 | 0) | 0 | 0, 1 | 0) | 0;
  }
  $345(HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0);
  $138($4_1 + 16 | 0 | 0);
  $2($3_1 + 16 | 0 | 0, 69112 | 0) | 0;
  $139($4_1 + 16 | 0 | 0, $3_1 + 16 | 0 | 0, 0 | 0);
  $1989($3_1 + 16 | 0 | 0) | 0;
  $2($3_1 | 0, 69103 | 0) | 0;
  $139($4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  $1989($3_1 | 0) | 0;
  global$0 = $3_1 + 784 | 0;
  return;
 }
 
 function $91($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 27;
  $8_1 = $81() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $169($4_1 + 8 | 0 | 0) | 0;
  $17_1 = $170($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$40($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $171() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $172($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $320_1 = 0, $39_1 = 0, $4_1 = 0, $10_1 = 0, $12_1 = 0, $16_1 = 0, $20_1 = 0, $24_1 = 0, $28_1 = 0, $35_1 = 0, $40_1 = 0, $44_1 = 0, $7_1 = 0, $23_1 = 0, $56_1 = 0, $83_1 = 0, $115_1 = 0, $122_1 = 0, $129_1 = 0, $136_1 = 0, $143_1 = 0, $150_1 = 0, $157_1 = 0, $350_1 = Math_fround(0), $177_1 = 0, $184_1 = 0, $191_1 = 0, $198_1 = 0, $205_1 = 0, $212_1 = 0, $219_1 = 0, $229_1 = 0, $236_1 = 0, $243_1 = 0, $250_1 = 0, $257_1 = 0, $264_1 = 0, $271_1 = 0, $346_1 = Math_fround(0), $659_1 = 0, $675_1 = 0, $691_1 = 0, $707_1 = 0, $723_1 = 0, $739_1 = 0, $755_1 = 0, $759_1 = 0, $801_1 = 0, $817_1 = 0, $833_1 = 0, $849_1 = 0, $865_1 = 0, $881_1 = 0, $897_1 = 0, $901_1 = 0, $928_1 = 0, $944_1 = 0, $960_1 = 0, $976_1 = 0, $992_1 = 0, $1008_1 = 0, $1024_1 = 0, $1028_1 = 0;
  $3_1 = global$0 - 448 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 444 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 444 | 0) >> 2] | 0;
  fimport$34(33984 | 0);
  $7_1 = 3553;
  fimport$30($7_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  fimport$34(33985 | 0);
  fimport$30($7_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $10_1 = 16;
  $138($4_1 + $10_1 | 0 | 0);
  $12_1 = 56;
  i64toi32_i32$0 = 0;
  $320_1 = 0;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16_1 = 48;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $16_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $20_1 = 40;
  $23_1 = ($3_1 + 376 | 0) + $20_1 | 0;
  i64toi32_i32$1 = $23_1;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $24_1 = 32;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $24_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $28_1 = 24;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $28_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $10_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $35_1 = 8;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $35_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 376 | 0) >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 380 | 0) >> 2] = i64toi32_i32$0;
  $39_1 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 376 | 0) >> 2] = $39_1;
  $40_1 = 20;
  HEAP32[((i64toi32_i32$1 + 376 | 0) + $40_1 | 0) >> 2] = $39_1;
  HEAP32[$23_1 >> 2] = $39_1;
  $44_1 = 60;
  HEAP32[((i64toi32_i32$1 + 376 | 0) + $44_1 | 0) >> 2] = $39_1;
  i64toi32_i32$1 = (i64toi32_i32$1 + 312 | 0) + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 312 | 0) + $16_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $56_1 = ($3_1 + 312 | 0) + $20_1 | 0;
  i64toi32_i32$1 = $56_1;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 312 | 0) + $24_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 312 | 0) + $28_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 312 | 0) + $10_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 312 | 0) + $35_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 312 | 0) >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 316 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 312 | 0) >> 2] = $39_1;
  HEAP32[((i64toi32_i32$1 + 312 | 0) + $40_1 | 0) >> 2] = $39_1;
  HEAP32[$56_1 >> 2] = $39_1;
  HEAP32[((i64toi32_i32$1 + 312 | 0) + $44_1 | 0) >> 2] = $39_1;
  i64toi32_i32$1 = (i64toi32_i32$1 + 248 | 0) + $12_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 248 | 0) + $16_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $83_1 = ($3_1 + 248 | 0) + $20_1 | 0;
  i64toi32_i32$1 = $83_1;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 248 | 0) + $24_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 248 | 0) + $28_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 248 | 0) + $10_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 248 | 0) + $35_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] = $39_1;
  HEAP32[((i64toi32_i32$1 + 248 | 0) + $40_1 | 0) >> 2] = $39_1;
  HEAP32[$83_1 >> 2] = $39_1;
  HEAP32[((i64toi32_i32$1 + 248 | 0) + $44_1 | 0) >> 2] = $39_1;
  $346_1 = Math_fround(+fimport$35());
  $68(i64toi32_i32$1 + 168 | 0 | 0, Math_fround(Math_fround(.5)), Math_fround(Math_fround(1.0)), Math_fround(Math_fround(0 | 0))) | 0;
  $140(i64toi32_i32$1 + 184 | 0 | 0, i64toi32_i32$1 + 376 | 0 | 0, Math_fround($346_1), i64toi32_i32$1 + 168 | 0 | 0);
  $115_1 = 56;
  i64toi32_i32$2 = (i64toi32_i32$1 + 184 | 0) + $115_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $659_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 376 | 0) + $115_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $659_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $122_1 = 48;
  i64toi32_i32$2 = ($3_1 + 184 | 0) + $122_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $675_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $122_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $675_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $129_1 = 40;
  i64toi32_i32$2 = ($3_1 + 184 | 0) + $129_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $691_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 376 | 0) + $129_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $691_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $136_1 = 32;
  i64toi32_i32$2 = ($3_1 + 184 | 0) + $136_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $707_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $136_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $707_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $143_1 = 24;
  i64toi32_i32$2 = ($3_1 + 184 | 0) + $143_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $723_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 376 | 0) + $143_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $723_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $150_1 = 16;
  i64toi32_i32$2 = ($3_1 + 184 | 0) + $150_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $739_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 376 | 0) + $150_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $739_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $157_1 = 8;
  i64toi32_i32$2 = ($3_1 + 184 | 0) + $157_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $755_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 376 | 0) + $157_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $755_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
  $759_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 376 | 0) >> 2] = $759_1;
  HEAP32[(i64toi32_i32$1 + 380 | 0) >> 2] = i64toi32_i32$0;
  $350_1 = Math_fround(0 | 0);
  $68(i64toi32_i32$1 + 88 | 0 | 0, Math_fround($350_1), Math_fround($350_1), Math_fround(Math_fround(-3.0))) | 0;
  $141(i64toi32_i32$1 + 104 | 0 | 0, i64toi32_i32$1 + 312 | 0 | 0, i64toi32_i32$1 + 88 | 0 | 0);
  $177_1 = 56;
  i64toi32_i32$2 = (i64toi32_i32$1 + 104 | 0) + $177_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $801_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 312 | 0) + $177_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $801_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $184_1 = 48;
  i64toi32_i32$2 = ($3_1 + 104 | 0) + $184_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $817_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 312 | 0) + $184_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $817_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $191_1 = 40;
  i64toi32_i32$2 = ($3_1 + 104 | 0) + $191_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $833_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 312 | 0) + $191_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $833_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $198_1 = 32;
  i64toi32_i32$2 = ($3_1 + 104 | 0) + $198_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $849_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 312 | 0) + $198_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $849_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $205_1 = 24;
  i64toi32_i32$2 = ($3_1 + 104 | 0) + $205_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $865_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 312 | 0) + $205_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $865_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $212_1 = 16;
  i64toi32_i32$2 = ($3_1 + 104 | 0) + $212_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $881_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 312 | 0) + $212_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $881_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $219_1 = 8;
  i64toi32_i32$2 = ($3_1 + 104 | 0) + $219_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $897_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 312 | 0) + $219_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $897_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
  $901_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 312 | 0) >> 2] = $901_1;
  HEAP32[(i64toi32_i32$1 + 316 | 0) >> 2] = i64toi32_i32$0;
  $143(i64toi32_i32$1 + 24 | 0 | 0, Math_fround(Math_fround($142(Math_fround(Math_fround(45.0))))), Math_fround(Math_fround(1.3333333730697632)), Math_fround(Math_fround(.10000000149011612)), Math_fround(Math_fround(100.0)));
  $229_1 = 56;
  i64toi32_i32$2 = (i64toi32_i32$1 + 24 | 0) + $229_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $928_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 248 | 0) + $229_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $928_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $236_1 = 48;
  i64toi32_i32$2 = ($3_1 + 24 | 0) + $236_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $944_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 248 | 0) + $236_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $944_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $243_1 = 40;
  i64toi32_i32$2 = ($3_1 + 24 | 0) + $243_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $960_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 248 | 0) + $243_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $960_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $250_1 = 32;
  i64toi32_i32$2 = ($3_1 + 24 | 0) + $250_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $976_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 248 | 0) + $250_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $976_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $257_1 = 24;
  i64toi32_i32$2 = ($3_1 + 24 | 0) + $257_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $992_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 248 | 0) + $257_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $992_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $264_1 = 16;
  i64toi32_i32$2 = ($3_1 + 24 | 0) + $264_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1008_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 248 | 0) + $264_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1008_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $271_1 = 8;
  i64toi32_i32$2 = ($3_1 + 24 | 0) + $271_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1024_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 248 | 0) + $271_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1024_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $1028_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] = $1028_1;
  HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = fimport$36(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 66997 | 0) | 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = fimport$36(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 65784 | 0) | 0;
  fimport$37(HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0 | 0, 1 | 0, 0 & 255 | 0 | 0, $144(i64toi32_i32$1 + 376 | 0 | 0) | 0 | 0);
  fimport$37(HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0 | 0, 1 | 0, 0 & 255 | 0 | 0, $146($145(i64toi32_i32$1 + 312 | 0 | 0, 0 | 0) | 0 | 0, 0 | 0) | 0 | 0);
  $2(i64toi32_i32$1 | 0, 66697 | 0) | 0;
  $147($4_1 + 16 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 248 | 0 | 0);
  $1989(i64toi32_i32$1 | 0) | 0;
  fimport$24(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  fimport$38(4 | 0, 0 | 0, 36 | 0);
  global$0 = i64toi32_i32$1 + 448 | 0;
  return;
 }
 
 function $93() {
  
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $222(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $95() {
  return 0 | 0;
 }
 
 function $96() {
  return 0 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $223($4_1 | 0) | 0;
   $1979($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $98() {
  return $224() | 0 | 0;
 }
 
 function $99() {
  return $225() | 0 | 0;
 }
 
 function $100() {
  return $226() | 0 | 0;
 }
 
 function $101($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 28;
  $8_1 = $98() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $228($4_1 + 8 | 0 | 0) | 0;
  $17_1 = $229($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$40($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $171() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $230($4_1 + 16 | 0 | 0) | 0 | 0, 1 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $102() {
  
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $237(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $104() {
  return 29 | 0;
 }
 
 function $105() {
  return 30 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $240($4_1 | 0) | 0;
   $1979($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $107() {
  return $241() | 0 | 0;
 }
 
 function $108() {
  return $242() | 0 | 0;
 }
 
 function $109() {
  return $243() | 0 | 0;
 }
 
 function $110() {
  return $98() | 0 | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 31 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 32;
  $6_1 = $107() | 0;
  $7_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $11_1 = $259($4_1 + 16 | 0 | 0) | 0;
  $15_1 = $260($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$40($6_1 | 0, $7_1 | 0, $11_1 | 0, $15_1 | 0, $171() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $261($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1977(48 | 0) | 0;
  $234($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $266($4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $10_1 = $267(FUNCTION_TABLE[$5_1 | 0]($4_1) | 0 | 0) | 0;
  $246($4_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $268() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $118() {
  return 70936 | 0;
 }
 
 function $119($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $236($0_1 | 0, fimport$55($63(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $107() | 0 | 0, $235(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $120($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $27_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $276($5_1 + 16 | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0);
  $269($5_1 + 8 | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
  FUNCTION_TABLE[$6_1 | 0]($5_1 + 32 | 0, $5_1 + 16 | 0, $5_1 + 8 | 0);
  $27_1 = $277($5_1 + 32 | 0 | 0) | 0;
  $246($5_1 + 32 | 0 | 0) | 0;
  $246($5_1 + 8 | 0 | 0) | 0;
  $1989($5_1 + 16 | 0 | 0) | 0;
  global$0 = $5_1 + 48 | 0;
  return $27_1 | 0;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $278() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $123() {
  return 71048 | 0;
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 33;
  $6_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $10_1 = $149($4_1 + 8 | 0 | 0) | 0;
  $14_1 = $150($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  fimport$21($6_1 | 0, $10_1 | 0, $14_1 | 0, $118() | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $125($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0, $20_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(FUNCTION_TABLE[$7_1 | 0](Math_fround($151(Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2])))), Math_fround($151(Math_fround(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2])))), Math_fround($151(Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]))))));
  $20_1 = Math_fround($152($6_1 + 12 | 0 | 0));
  global$0 = $6_1 + 32 | 0;
  return Math_fround($20_1);
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $127($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $153() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $128() {
  return 69664 | 0;
 }
 
 function $129($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[$7_1 | 0](Math_fround($151(Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2])))), Math_fround($151(Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2])))), Math_fround($151(Math_fround(Math_fround(HEAPF32[$6_1 >> 2])))));
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $130($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $131($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $154() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $132() {
  return 69696 | 0;
 }
 
 function $133($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  FUNCTION_TABLE[$8_1 | 0]($155(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0, $155(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0, $155(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0, $155(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $134($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 5 | 0;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $156() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $136() {
  return 69732 | 0;
 }
 
 function $137($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $191_1 = 0, $211_1 = 0, $242_1 = 0, $268_1 = 0;
  $6_1 = global$0 - 1216 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 1212 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 1208 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 1204 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 1200 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 1212 | 0) >> 2] | 0;
  $57($6_1 + 1184 | 0 | 0) | 0;
  $57($6_1 + 1168 | 0 | 0) | 0;
  $57($6_1 + 1152 | 0 | 0) | 0;
  $175($6_1 + 960 | 0 | 0) | 0;
  $175($6_1 + 768 | 0 | 0) | 0;
  $175($6_1 + 576 | 0 | 0) | 0;
  $176(($6_1 + 960 | 0) + (HEAP32[((HEAP32[($6_1 + 960 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  $176(($6_1 + 768 | 0) + (HEAP32[((HEAP32[($6_1 + 768 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  $176(($6_1 + 576 | 0) + (HEAP32[((HEAP32[($6_1 + 576 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  $655($6_1 + 960 | 0 | 0, HEAP32[($6_1 + 1208 | 0) >> 2] | 0 | 0, 8 | 0);
  $655($6_1 + 768 | 0 | 0, HEAP32[($6_1 + 1204 | 0) >> 2] | 0 | 0, 8 | 0);
  $177($6_1 + 432 | 0 | 0) | 0;
  $177($6_1 + 288 | 0 | 0) | 0;
  $558(($6_1 + 432 | 0) + 8 | 0 | 0, $178($6_1 + 960 | 0 | 0) | 0 | 0) | 0;
  $558(($6_1 + 288 | 0) + 8 | 0 | 0, $178($6_1 + 768 | 0 | 0) | 0 | 0) | 0;
  $179($6_1 + 960 | 0 | 0);
  $179($6_1 + 768 | 0 | 0);
  $180($6_1 + 272 | 0 | 0, $6_1 + 432 | 0 | 0);
  $62($6_1 + 1184 | 0 | 0, $6_1 + 272 | 0 | 0) | 0;
  $1989($6_1 + 272 | 0 | 0) | 0;
  $180($6_1 + 256 | 0 | 0, $6_1 + 288 | 0 | 0);
  $62($6_1 + 1168 | 0 | 0, $6_1 + 256 | 0 | 0) | 0;
  $1989($6_1 + 256 | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 1200 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $655($6_1 + 576 | 0 | 0, HEAP32[($6_1 + 1200 | 0) >> 2] | 0 | 0, 8 | 0);
   $177($6_1 + 112 | 0 | 0) | 0;
   $558(($6_1 + 112 | 0) + 8 | 0 | 0, $178($6_1 + 576 | 0 | 0) | 0 | 0) | 0;
   $179($6_1 + 576 | 0 | 0);
   $180($6_1 + 96 | 0 | 0, $6_1 + 112 | 0 | 0);
   $62($6_1 + 1152 | 0 | 0, $6_1 + 96 | 0 | 0) | 0;
   $1989($6_1 + 96 | 0 | 0) | 0;
   $181($6_1 + 112 | 0 | 0) | 0;
  }
  $181($6_1 + 288 | 0 | 0) | 0;
  $181($6_1 + 432 | 0 | 0) | 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = $63($6_1 + 1184 | 0 | 0) | 0;
  HEAP32[($6_1 + 88 | 0) >> 2] = $63($6_1 + 1168 | 0 | 0) | 0;
  HEAP32[($6_1 + 84 | 0) >> 2] = fimport$41(35633 | 0) | 0;
  fimport$42(HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0, 1 | 0, $6_1 + 92 | 0 | 0, 0 | 0);
  fimport$43(HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0);
  $191_1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
  $2($6_1 + 64 | 0 | 0, 68033 | 0) | 0;
  $182($7_1 | 0, $191_1 | 0, $6_1 + 64 | 0 | 0);
  $1989($6_1 + 64 | 0 | 0) | 0;
  HEAP32[($6_1 + 80 | 0) >> 2] = fimport$41(35632 | 0) | 0;
  fimport$42(HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0, 1 | 0, $6_1 + 88 | 0 | 0, 0 | 0);
  fimport$43(HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0);
  $211_1 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
  $2($6_1 + 48 | 0 | 0, 68046 | 0) | 0;
  $182($7_1 | 0, $211_1 | 0, $6_1 + 48 | 0 | 0);
  $1989($6_1 + 48 | 0 | 0) | 0;
  label$2 : {
   if (!((HEAP32[($6_1 + 1200 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($6_1 + 40 | 0) >> 2] = $63($6_1 + 1152 | 0 | 0) | 0;
   HEAP32[($6_1 + 44 | 0) >> 2] = fimport$41(36313 | 0) | 0;
   fimport$42(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, 1 | 0, $6_1 + 40 | 0 | 0, 0 | 0);
   fimport$43(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0);
   $242_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $2($6_1 + 24 | 0 | 0, 67997 | 0) | 0;
   $182($7_1 | 0, $242_1 | 0, $6_1 + 24 | 0 | 0);
   $1989($6_1 + 24 | 0 | 0) | 0;
  }
  HEAP32[$7_1 >> 2] = fimport$44() | 0;
  fimport$45(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0);
  fimport$45(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0);
  label$3 : {
   if (!((HEAP32[($6_1 + 1200 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   fimport$45(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0);
  }
  fimport$46(HEAP32[$7_1 >> 2] | 0 | 0);
  $268_1 = HEAP32[$7_1 >> 2] | 0;
  $2($6_1 + 8 | 0 | 0, 68197 | 0) | 0;
  $182($7_1 | 0, $268_1 | 0, $6_1 + 8 | 0 | 0);
  $1989($6_1 + 8 | 0 | 0) | 0;
  fimport$47(HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0);
  fimport$47(HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0);
  label$4 : {
   if (!((HEAP32[($6_1 + 1200 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   fimport$47(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0);
  }
  $45($6_1 + 576 | 0 | 0) | 0;
  $45($6_1 + 768 | 0 | 0) | 0;
  $45($6_1 + 960 | 0 | 0) | 0;
  $1989($6_1 + 1152 | 0 | 0) | 0;
  $1989($6_1 + 1168 | 0 | 0) | 0;
  $1989($6_1 + 1184 | 0 | 0) | 0;
  global$0 = $6_1 + 1216 | 0;
  return;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$48(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $139($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  fimport$49(fimport$36(HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, $63(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $140($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $258_1 = 0, $259_1 = 0, $322_1 = 0, $323_1 = 0, $386_1 = 0, $387_1 = 0, $396_1 = 0, $397_1 = 0, $410_1 = Math_fround(0), $414_1 = Math_fround(0), $421_1 = Math_fround(0), $429_1 = Math_fround(0), $437_1 = Math_fround(0), $438_1 = Math_fround(0), $442_1 = Math_fround(0), $449_1 = Math_fround(0), $456_1 = Math_fround(0), $464_1 = Math_fround(0), $465_1 = Math_fround(0), $469_1 = Math_fround(0), $1051_1 = 0, $1064_1 = 0, $1167_1 = 0, $1180_1 = 0, $1283_1 = 0, $1296_1 = 0, $394_1 = 0, $1308_1 = 0, $1318_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 364 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 360 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 356 | 0) >> 2] = $3_1;
  HEAPF32[($6_1 + 352 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 360 | 0) >> 2]);
  HEAPF32[($6_1 + 348 | 0) >> 2] = Math_fround($199(Math_fround(Math_fround(HEAPF32[($6_1 + 352 | 0) >> 2]))));
  HEAPF32[($6_1 + 344 | 0) >> 2] = Math_fround($200(Math_fround(Math_fround(HEAPF32[($6_1 + 352 | 0) >> 2]))));
  $66($6_1 + 328 | 0 | 0, HEAP32[($6_1 + 356 | 0) >> 2] | 0 | 0);
  $65($6_1 + 312 | 0 | 0, Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($6_1 + 348 | 0) >> 2]))), $6_1 + 328 | 0 | 0);
  $410_1 = Math_fround(HEAPF32[($6_1 + 348 | 0) >> 2]);
  $414_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 0 | 0) | 0) >> 2])) + $410_1);
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 0 | 0) | 0 | 0, 0 | 0) | 0) >> 2] = $414_1;
  $421_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 1 | 0) | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($6_1 + 344 | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 2 | 0) | 0) >> 2])));
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 0 | 0) | 0 | 0, 1 | 0) | 0) >> 2] = $421_1;
  $429_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 2 | 0) | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($6_1 + 344 | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 1 | 0) | 0) >> 2]))));
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 0 | 0) | 0 | 0, 2 | 0) | 0) >> 2] = $429_1;
  $437_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 1 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 0 | 0) | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($6_1 + 344 | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 2 | 0) | 0) >> 2]))));
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 1 | 0) | 0 | 0, 0 | 0) | 0) >> 2] = $437_1;
  $438_1 = Math_fround(HEAPF32[($6_1 + 348 | 0) >> 2]);
  $442_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 1 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 1 | 0) | 0) >> 2])) + $438_1);
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 1 | 0) | 0 | 0, 1 | 0) | 0) >> 2] = $442_1;
  $449_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 1 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 2 | 0) | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($6_1 + 344 | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 0 | 0) | 0) >> 2])));
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 1 | 0) | 0 | 0, 2 | 0) | 0) >> 2] = $449_1;
  $456_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 0 | 0) | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($6_1 + 344 | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 1 | 0) | 0) >> 2])));
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 2 | 0) | 0 | 0, 0 | 0) | 0) >> 2] = $456_1;
  $464_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 1 | 0) | 0) >> 2])) + Math_fround(-Math_fround(Math_fround(HEAPF32[($6_1 + 344 | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 0 | 0) | 0) >> 2]))));
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 2 | 0) | 0 | 0, 1 | 0) | 0) >> 2] = $464_1;
  $465_1 = Math_fround(HEAPF32[($6_1 + 348 | 0) >> 2]);
  $469_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($201($6_1 + 312 | 0 | 0, 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($201($6_1 + 328 | 0 | 0, 2 | 0) | 0) >> 2])) + $465_1);
  HEAPF32[($146($145($6_1 + 248 | 0 | 0, 2 | 0) | 0 | 0, 2 | 0) | 0) >> 2] = $469_1;
  $203($6_1 + 200 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 0 | 0) | 0 | 0, 0 | 0) | 0 | 0);
  $203($6_1 + 184 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 0 | 0) | 0 | 0, 1 | 0) | 0 | 0);
  $204($6_1 + 216 | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 184 | 0 | 0);
  $203($6_1 + 168 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 2 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 0 | 0) | 0 | 0, 2 | 0) | 0 | 0);
  $204($6_1 + 232 | 0 | 0, $6_1 + 216 | 0 | 0, $6_1 + 168 | 0 | 0);
  $258_1 = $145($0_1 | 0, 0 | 0) | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 236 | 0) >> 2] | 0;
  $1051_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $258_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1051_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $259_1 = 8;
  i64toi32_i32$2 = ($6_1 + 232 | 0) + $259_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1064_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $258_1 + $259_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1064_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $203($6_1 + 120 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 1 | 0) | 0 | 0, 0 | 0) | 0 | 0);
  $203($6_1 + 104 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 1 | 0) | 0 | 0, 1 | 0) | 0 | 0);
  $204($6_1 + 136 | 0 | 0, $6_1 + 120 | 0 | 0, $6_1 + 104 | 0 | 0);
  $203($6_1 + 88 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 2 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 1 | 0) | 0 | 0, 2 | 0) | 0 | 0);
  $204($6_1 + 152 | 0 | 0, $6_1 + 136 | 0 | 0, $6_1 + 88 | 0 | 0);
  $322_1 = $145($0_1 | 0, 1 | 0) | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[($6_1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
  $1167_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $322_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1167_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $323_1 = 8;
  i64toi32_i32$2 = ($6_1 + 152 | 0) + $323_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1180_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $322_1 + $323_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1180_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $203($6_1 + 40 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 2 | 0) | 0 | 0, 0 | 0) | 0 | 0);
  $203($6_1 + 24 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 2 | 0) | 0 | 0, 1 | 0) | 0 | 0);
  $204($6_1 + 56 | 0 | 0, $6_1 + 40 | 0 | 0, $6_1 + 24 | 0 | 0);
  $203($6_1 + 8 | 0 | 0, $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 2 | 0) | 0 | 0, $146($145($6_1 + 248 | 0 | 0, 2 | 0) | 0 | 0, 2 | 0) | 0 | 0);
  $204($6_1 + 72 | 0 | 0, $6_1 + 56 | 0 | 0, $6_1 + 8 | 0 | 0);
  $386_1 = $145($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  $1283_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $386_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1283_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $387_1 = 8;
  i64toi32_i32$2 = ($6_1 + 72 | 0) + $387_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1296_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $386_1 + $387_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1296_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $394_1 = $202(HEAP32[($6_1 + 364 | 0) >> 2] | 0 | 0, 3 | 0) | 0;
  $396_1 = $145($0_1 | 0, 3 | 0) | 0;
  i64toi32_i32$2 = $394_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1308_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $396_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1308_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $397_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $397_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1318_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $396_1 + $397_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1318_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $6_1 + 368 | 0;
  return;
 }
 
 function $141($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $13_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $25_1 = 0, $83_1 = 0, $84_1 = 0, $115_1 = 0, $125_1 = 0, $135_1 = 0, $145_1 = 0, $155_1 = 0, $165_1 = 0, $175_1 = 0, $185_1 = 0, $289_1 = 0, $302_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 108 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 104 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $115_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $115_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $7_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $125_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $7_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $125_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = 48;
  i64toi32_i32$2 = $6_1 + $10_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $135_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $10_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $135_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $13_1 = 40;
  i64toi32_i32$2 = $6_1 + $13_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $145_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $13_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $145_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16_1 = 32;
  i64toi32_i32$2 = $6_1 + $16_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $155_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $16_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $155_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $19_1 = 24;
  i64toi32_i32$2 = $6_1 + $19_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $165_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $19_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $165_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $22_1 = 16;
  i64toi32_i32$2 = $6_1 + $22_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $175_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + $22_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $175_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $25_1 = 8;
  i64toi32_i32$2 = $6_1 + $25_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $185_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $25_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $185_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $203($5_1 + 40 | 0 | 0, $202(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0, $205(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0);
  $203($5_1 + 24 | 0 | 0, $202(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0, $205(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0);
  $204($5_1 + 56 | 0 | 0, $5_1 + 40 | 0 | 0, $5_1 + 24 | 0 | 0);
  $203($5_1 + 8 | 0 | 0, $202(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, 2 | 0) | 0 | 0, $205(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0, 2 | 0) | 0 | 0);
  $204($5_1 + 72 | 0 | 0, $5_1 + 56 | 0 | 0, $5_1 + 8 | 0 | 0);
  $204($5_1 + 88 | 0 | 0, $5_1 + 72 | 0 | 0, $202(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0, 3 | 0) | 0 | 0);
  $83_1 = $145($0_1 | 0, 3 | 0) | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
  $289_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $83_1;
  HEAP32[i64toi32_i32$0 >> 2] = $289_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $84_1 = 8;
  i64toi32_i32$2 = ($5_1 + 88 | 0) + $84_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $302_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $83_1 + $84_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $302_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 112 | 0;
  return;
 }
 
 function $142($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * Math_fround(.01745329238474369)));
 }
 
 function $143($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 8 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 4 | 0) >> 2] = $3_1;
  HEAPF32[$7_1 >> 2] = $4_1;
  $206($0_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[$7_1 >> 2])));
  global$0 = $7_1 + 16 | 0;
  return;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $145(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < ($207() | 0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$54(69375 | 0, 66905 | 0, 291 | 0, 67986 | 0);
   wasm2js_trap();
  }
  $20_1 = $5_1 + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $24_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < ($208() | 0 | 0) & 1 | 0) {
     break label$1
    }
   }
   fimport$54(69365 | 0, 66934 | 0, 479 | 0, 67986 | 0);
   wasm2js_trap();
  }
  $24_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    switch ($24_1 | 0) {
    default:
    case 0:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
     break label$3;
    case 1:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 4 | 0;
     break label$3;
    case 2:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 8 | 0;
     break label$3;
    case 3:
     break label$4;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 12 | 0;
  }
  $32_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $32_1 | 0;
 }
 
 function $147($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  fimport$37(fimport$36(HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, $63(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, 1 | 0, 0 & 255 | 0 | 0, $209($202(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0, 0 | 0) | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = $284(FUNCTION_TABLE[$5_1 | 0]($231(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $150($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $285() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $151($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2]));
 }
 
 function $153() {
  return 69648 | 0;
 }
 
 function $154() {
  return 69680 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $156() {
  return 69712 | 0;
 }
 
 function $157($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 69748 | 0;
 }
 
 function $158() {
  return 69748 | 0;
 }
 
 function $159() {
  return 69764 | 0;
 }
 
 function $160() {
  return 69788 | 0;
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $167($4_1 + 16 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $165(FUNCTION_TABLE[HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0]() | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $166() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $166() {
  return 69812 | 0;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $18_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $173(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[$7_1 >> 2] | 0;
  $12_1 = $6_1 + ($8_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($8_1 & 1 | 0)) {
     break label$2
    }
    $18_1 = HEAP32[((HEAP32[$12_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0;
    break label$1;
   }
   $18_1 = $9_1;
  }
  FUNCTION_TABLE[$18_1 | 0]($12_1);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $174() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $171() {
  return 69824 | 0;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1977(8 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $174() {
  return 69816 | 0;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $46($4_1 + 108 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 83596 + 12 | 0;
  HEAP32[($4_1 + 108 | 0) >> 2] = 83596 + 32 | 0;
  $47($4_1 | 0, 83636 + 4 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 83596 + 12 | 0;
  HEAP32[($4_1 + 108 | 0) >> 2] = 83596 + 32 | 0;
  $658($4_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $176($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $183(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $46($4_1 + 64 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 83272 + 12 | 0;
  HEAP32[($4_1 + 64 | 0) >> 2] = 83272 + 52 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 83272 + 32 | 0;
  $184($4_1 | 0, 83332 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 83272 + 12 | 0;
  HEAP32[($4_1 + 64 | 0) >> 2] = 83272 + 52 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 83272 + 32 | 0;
  $185($4_1 + 12 | 0 | 0, 24 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($663($4_1 + 8 | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$1
   }
   $49($4_1 + (HEAP32[((HEAP32[$4_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 4 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $180($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $639($0_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $181($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $186($4_1 | 0, 83332 | 0) | 0;
  $509($4_1 + 64 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 1036 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 1032 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($187($2_1 | 0, 68197 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    fimport$50(HEAP32[($5_1 + 1032 | 0) >> 2] | 0 | 0, 35713 | 0, $5_1 + 1028 | 0 | 0);
    label$3 : {
     if (HEAP32[($5_1 + 1028 | 0) >> 2] | 0) {
      break label$3
     }
     fimport$51(HEAP32[($5_1 + 1032 | 0) >> 2] | 0 | 0, 1024 | 0, 0 | 0, $5_1 | 0);
     $19($17($17($17($41($17(100264 | 0, 69472 | 0) | 0 | 0, $2_1 | 0) | 0 | 0, 69624 | 0) | 0 | 0, $5_1 | 0) | 0 | 0, 69553 | 0) | 0 | 0, 1 | 0) | 0;
    }
    break label$1;
   }
   fimport$52(HEAP32[($5_1 + 1032 | 0) >> 2] | 0 | 0, 35714 | 0, $5_1 + 1028 | 0 | 0);
   label$4 : {
    if (HEAP32[($5_1 + 1028 | 0) >> 2] | 0) {
     break label$4
    }
    fimport$53(HEAP32[($5_1 + 1032 | 0) >> 2] | 0 | 0, 1024 | 0, 0 | 0, $5_1 | 0);
    $19($17($17($17($41($17(100264 | 0, 69514 | 0) | 0 | 0, $2_1 | 0) | 0 | 0, 69624 | 0) | 0 | 0, $5_1 | 0) | 0 | 0, 69553 | 0) | 0 | 0, 1 | 0) | 0;
   }
  }
  global$0 = $5_1 + 1040 | 0;
  return;
 }
 
 function $183($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $773($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $184($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $47($6_1 | 0, $7_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $191($6_1 + 8 | 0 | 0, $7_1 + 12 | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $513($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 82352 + 8 | 0;
  $57($5_1 + 32 | 0 | 0) | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
  $193($5_1 + 12 | 0 | 0) | 0;
  $564($5_1 | 0, $6_1 + 4 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($196(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 83812 + 8 | 0;
  return $4_1 | 0;
 }
 
 function $189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $778($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 72 | 0) >> 2] = 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = $190() | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $190() {
  return -1 | 0;
 }
 
 function $191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $773($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 82352 + 8 | 0;
  $1989($4_1 + 32 | 0 | 0) | 0;
  $511($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $7_1 = $181($4_1 + -8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $10_1 = $181($4_1 + (HEAP32[((HEAP32[$4_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = $4(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != ($52(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[($4_1 + 15 | 0) >> 0] = 0 & 1 | 0;
    break label$1;
   }
   HEAP8[($4_1 + 15 | 0) >> 0] = ($2002(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, -1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
  }
  $32_1 = (HEAPU8[($4_1 + 15 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $32_1 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $10_1 = ((HEAPU8[(($11(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $199($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($409(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $200($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($468(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $24_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < ($210() | 0 | 0) & 1 | 0) {
     break label$1
    }
   }
   fimport$54(69365 | 0, 66961 | 0, 170 | 0, 67986 | 0);
   wasm2js_trap();
  }
  $24_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    switch ($24_1 | 0) {
    default:
    case 0:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
     break label$3;
    case 1:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 4 | 0;
     break label$3;
    case 2:
     break label$4;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 8 | 0;
  }
  $30_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $30_1 | 0;
 }
 
 function $202($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < ($207() | 0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$54(69375 | 0, 66905 | 0, 298 | 0, 67986 | 0);
   wasm2js_trap();
  }
  $20_1 = $5_1 + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $203($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $17_1 = 0, $22_1 = Math_fround(0), $54_1 = 0, $58_1 = 0, $69_1 = 0, $79_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $2_1;
  $22_1 = Math_fround(HEAPF32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2]);
  $7_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $8_1 = 8;
  i64toi32_i32$2 = $7_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 8 | 0) + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $54_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $58_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $58_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $212(i64toi32_i32$1 + 8 | 0 | 0, Math_fround($22_1)) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $69_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $69_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $17_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $17_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $79_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $17_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $79_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $17_1 = 0, $6_1 = 0, $51_1 = 0, $55_1 = 0, $66_1 = 0, $76_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $8_1 = 8;
  i64toi32_i32$2 = $7_1 + $8_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $51_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 8 | 0) + $8_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $51_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $55_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $55_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $211(i64toi32_i32$1 + 8 | 0 | 0, $6_1 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $66_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $66_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $17_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $17_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $76_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + $17_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $76_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $24_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < ($210() | 0 | 0) & 1 | 0) {
     break label$1
    }
   }
   fimport$54(69365 | 0, 66961 | 0, 186 | 0, 67986 | 0);
   wasm2js_trap();
  }
  $24_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    switch ($24_1 | 0) {
    default:
    case 0:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
     break label$3;
    case 1:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 4 | 0;
     break label$3;
    case 2:
     break label$4;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 8 | 0;
  }
  $30_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $30_1 | 0;
 }
 
 function $206($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $88_1 = 0, $65_1 = Math_fround(0), $68_1 = Math_fround(0), $76_1 = Math_fround(0), $87_1 = Math_fround(0);
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAPF32[($7_1 + 28 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $4_1;
  label$1 : {
   if (Math_fround($218(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) - Math_fround($217()))))) > Math_fround(0 | 0) & 1 | 0) {
    break label$1
   }
   fimport$54(69234 | 0, 66871 | 0, 251 | 0, 68173 | 0);
   wasm2js_trap();
  }
  HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround($219(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]) / Math_fround(2.0)))));
  i64toi32_i32$0 = 0;
  $88_1 = 0;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $65_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])));
  HEAPF32[($146($145($0_1 | 0, 0 | 0) | 0 | 0, 0 | 0) | 0) >> 2] = $65_1;
  $68_1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]));
  HEAPF32[($146($145($0_1 | 0, 1 | 0) | 0 | 0, 1 | 0) | 0) >> 2] = $68_1;
  $76_1 = Math_fround(Math_fround(-Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]))) / Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2])));
  HEAPF32[($146($145($0_1 | 0, 2 | 0) | 0 | 0, 2 | 0) | 0) >> 2] = $76_1;
  HEAPF32[($146($145($0_1 | 0, 2 | 0) | 0 | 0, 3 | 0) | 0) >> 2] = Math_fround(-1.0);
  $87_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround(2.0) * Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]))) / Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2])));
  HEAPF32[($146($145($0_1 | 0, 3 | 0) | 0 | 0, 2 | 0) | 0) >> 2] = $87_1;
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $207() {
  return 4 | 0;
 }
 
 function $208() {
  return 4 | 0;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $24_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < ($208() | 0 | 0) & 1 | 0) {
     break label$1
    }
   }
   fimport$54(69365 | 0, 66934 | 0, 497 | 0, 67986 | 0);
   wasm2js_trap();
  }
  $24_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    switch ($24_1 | 0) {
    default:
    case 0:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
     break label$3;
    case 1:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 4 | 0;
     break label$3;
    case 2:
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 8 | 0;
     break label$3;
    case 3:
     break label$4;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 12 | 0;
  }
  $32_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $32_1 | 0;
 }
 
 function $210() {
  return 3 | 0;
 }
 
 function $211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $18_1 = 0, $54_1 = 0, $58_1 = 0, $73_1 = 0, $86_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  $7_1 = 8;
  i64toi32_i32$2 = $6_1 + $7_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + $7_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $54_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $58_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $58_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $213(i64toi32_i32$1 + 24 | 0 | 0, $5_1 | 0, i64toi32_i32$1 + 8 | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
  $73_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $73_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $18_1 = 8;
  i64toi32_i32$2 = ($4_1 + 24 | 0) + $18_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $18_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $86_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
  return $5_1 | 0;
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $15_1 = 0, $59_1 = 0, $72_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  $215($4_1 + 8 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]))) | 0;
  $216($4_1 + 24 | 0 | 0, $5_1 | 0, $4_1 + 8 | 0 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $59_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $59_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $15_1 = 8;
  i64toi32_i32$2 = ($4_1 + 24 | 0) + $15_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $72_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $15_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $72_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
  return $5_1 | 0;
 }
 
 function $213($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $214($0_1 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2]) + Math_fround(HEAPF32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2])))) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $214($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[$8_1 >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
  return $8_1 | 0;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  return $5_1 | 0;
 }
 
 function $216($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $214($0_1 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2])))) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $217() {
  return Math_fround(Math_fround($221()));
 }
 
 function $218($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($220(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $219($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = Math_fround($481(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $220($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $11_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) >= Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    $11_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
    break label$1;
   }
   $11_1 = Math_fround(-Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
  }
  return Math_fround($11_1);
 }
 
 function $221() {
  return Math_fround(Math_fround(1.1920928955078125e-07));
 }
 
 function $222($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + -4 | 0) >> 2] | 0 | 0;
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 65536 + 8 | 0;
  $1989($4_1 + 24 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $224() {
  return 69640 | 0;
 }
 
 function $225() {
  return 70576 | 0;
 }
 
 function $226() {
  return 70608 | 0;
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $18_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $231(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[$7_1 >> 2] | 0;
  $12_1 = $6_1 + ($8_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($8_1 & 1 | 0)) {
     break label$2
    }
    $18_1 = HEAP32[((HEAP32[$12_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0;
    break label$1;
   }
   $18_1 = $9_1;
  }
  FUNCTION_TABLE[$18_1 | 0]($12_1);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $229($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $232() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1977(8 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $231($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $232() {
  return 70624 | 0;
 }
 
 function $233($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $264($3_1 + 8 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $271($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 70940 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $270($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + -4 | 0) >> 2] | 0 | 0;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $239($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $244($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $241() {
  return 70800 | 0;
 }
 
 function $242() {
  return 70836 | 0;
 }
 
 function $243() {
  return 70876 | 0;
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[$4_1 >> 2] = 70632 + 8 | 0;
  label$1 : {
   if (!((HEAPU8[($4_1 + 40 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $245($4_1 | 0, 66082 | 0);
  }
  $246($4_1 + 44 | 0 | 0) | 0;
  $223($4_1 | 0) | 0;
  $14_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $245($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $247((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 44 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $246($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$56(HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $247($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $248(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $249() | 0;
  $250($4_1 + 8 | 0 | 0) | 0;
  fimport$57(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $251($4_1 + 8 | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $249() {
  var $2_1 = 0, $28_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!((((HEAPU8[(0 + 96952 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[96948 >> 2] = fimport$58($252($2_1 + 8 | 0 | 0) | 0 | 0, $253($2_1 + 8 | 0 | 0) | 0 | 0) | 0;
   HEAP8[(0 + 96952 | 0) >> 0] = 1;
  }
  $28_1 = HEAP32[96948 >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $28_1 | 0;
 }
 
 function $250($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $254($4_1 | 0) | 0;
  $255($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $256(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $252($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1 | 0;
 }
 
 function $253($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $257() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 0 | 0;
 }
 
 function $255($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 0 | 0;
 }
 
 function $257() {
  return 70772 | 0;
 }
 
 function $258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  FUNCTION_TABLE[$6_1 | 0]($262(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $259($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $263() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $261($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1977(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $263() {
  return 70892 | 0;
 }
 
 function $264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $265((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 40 | 0 | 0, 1 & 1 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] = (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 1 | 0;
  return;
 }
 
 function $266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $269($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $268() {
  return 70900 | 0;
 }
 
 function $269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $236($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1($5_1 | 0) | 0;
  $272($5_1 + 40 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 70632 + 8 | 0;
  $273($5_1 + 44 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $272($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[$4_1 >> 0] = 0;
  return $4_1 | 0;
 }
 
 function $273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $274($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $245(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 65789 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $275($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $245(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 66617 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $279($0_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $277($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$59(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $7_1 = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $278() {
  return 70964 | 0;
 }
 
 function $279($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $13_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $6_1;
  $3($6_1 | 0, $5_1 + 8 | 0 | 0, $5_1 | 0) | 0;
  $13_1 = 1;
  label$1 : {
   if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
    break label$1
   }
   $13_1 = (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  $1994($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  $5($6_1 | 0);
  $21_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $21_1 | 0;
 }
 
 function $280($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $281($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $282($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $283($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $284($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $285() {
  return 71056 | 0;
 }
 
 function $286($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $10_1 = $45($4_1 + (HEAP32[((HEAP32[$4_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $287($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $4_1 = 0, $8_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $12($4_1 | 0) | 0;
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $8_1;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $9_1 = 8;
  HEAP32[(i64toi32_i32$0 + $9_1 | 0) >> 2] = HEAP32[($3_1 + $9_1 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $288($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $289($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $291(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $290($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $292($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $301(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $293($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($12(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $294($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $10_1 = ((HEAP32[(($11(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0) << 0 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $295($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $300(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $302(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
  $7_1 = $12($5_1 | 0) | 0;
  $9_1 = 127;
  HEAP8[($7_1 + 11 | 0) >> 0] = (HEAPU8[($7_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($6_1 & $9_1 | 0) | 0;
  $14_1 = $12($5_1 | 0) | 0;
  HEAP8[($14_1 + 11 | 0) >> 0] = (HEAPU8[($14_1 + 11 | 0) >> 0] | 0) & $9_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $298($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $303($12(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
  return;
 }
 
 function $300($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $304(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 0 | 0 | 0, 1 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $310(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $292(HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $292($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $304($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!(($305(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $306(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
    break label$1;
   }
   $307(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $305($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0 | 0;
 }
 
 function $306($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $308(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $309(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $1983(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $309($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1979(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($10($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $13($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $312($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $313($11(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $53($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $317($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($325($190() | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $11_1 = 24;
   $15_1 = 24;
   HEAP32[($4_1 + 76 | 0) >> 2] = (($22($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0;
  }
  $19_1 = 24;
  $21_1 = ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << $19_1 | 0) >> $19_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $318($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $67_1 = 0, $115_1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 47 | 0) >> 0] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 36 | 0) >> 2] = $320(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0;
     break label$3;
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = 0;
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   label$5 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!(($321(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$7 : {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$7
    }
    $67_1 = 24;
    $322($8_1 + 16 | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 47 | 0) >> 0] | 0) << $67_1 | 0) >> $67_1 | 0 | 0) | 0;
    label$8 : {
     label$9 : {
      if (!(($321(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, $323($8_1 + 16 | 0 | 0) | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($8_1 + 64 | 0) >> 2] = 0;
      HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = 1;
      break label$8;
     }
     HEAP32[($8_1 + 12 | 0) >> 2] = 0;
    }
    $1989($8_1 + 16 | 0 | 0) | 0;
    label$10 : {
     switch (HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) {
     case 1:
      break label$1;
     default:
      break label$10;
     };
    }
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 56 | 0) >> 2] | 0) | 0;
   label$11 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!(($321(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   $324(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
  }
  $115_1 = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
  global$0 = $8_1 + 80 | 0;
  return $115_1 | 0;
 }
 
 function $319($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $321($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 23 | 0) >> 0] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $3($6_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $15_1 = 24;
  $1999($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 23 | 0) >> 0] | 0) << $15_1 | 0) >> $15_1 | 0 | 0);
  $5($6_1 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $323($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $327($326(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $324($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $325($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($10($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $293($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $298($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $959(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 101404 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = 24;
  $13_1 = 24;
  $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($334(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $9_1 = (($335(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) << $7_1 | 0) >> $7_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $333($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $336(HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $17_1 = (($337(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0 | 0) == (($337(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $17_1 | 0;
 }
 
 function $335($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $17_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($4_1) | 0;
    break label$1;
   }
   $17_1 = 24;
   HEAP32[($3_1 + 12 | 0) >> 2] = $338(((HEAPU8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $17_1 | 0) >> $17_1 | 0 | 0) | 0;
  }
  $21_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $336($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0, $19_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($4_1) | 0;
    break label$1;
   }
   $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = $15_1 + 1 | 0;
   $19_1 = 24;
   HEAP32[($3_1 + 12 | 0) >> 2] = $338(((HEAPU8[$15_1 >> 0] | 0) << $19_1 | 0) >> $19_1 | 0 | 0) | 0;
  }
  $23_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $23_1 | 0;
 }
 
 function $337($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!(($325($335(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, $190() | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = 0;
  }
  $25_1 = (HEAP32[$4_1 >> 2] | 0 | 0) == (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $338($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0 | 0;
 }
 
 function $339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = Math_fround($342(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0));
  global$0 = $4_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $340($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $9_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $9_1 = Math_fround(Math_fround(1.0) / Math_fround($341(Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])))));
  global$0 = $3_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $341($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_sqrt(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
 }
 
 function $342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = Math_fround(0);
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $343($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  $16_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]));
  global$0 = $4_1 + 32 | 0;
  return Math_fround($16_1);
 }
 
 function $343($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $68($0_1 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2])))) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $344() {
  $34();
  $56();
  return;
 }
 
 function $345($0_1) {
  $0_1 = $0_1 | 0;
  $484($0_1 | 0);
 }
 
 function $346($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(0 + 96960 | 0) >> 2] = $0_1;
 }
 
 function $347($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   $0_1 = $429($0_1 | 0, 67852 | 0) | 0;
   if ($0_1) {
    break label$1
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 66754;
   return 0 | 0;
  }
  $4_1 = $348($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $418($0_1 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $348($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $11_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $17_1 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $16_1 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[(0 + 71072 | 0) >> 2] | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = $0_1;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 128;
  HEAP32[($5_1 + 40 | 0) >> 2] = 1;
  HEAP32[($5_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 71064 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 71068 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $17_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = $5_1 + 48 | 0;
  HEAP32[($5_1 + 184 | 0) >> 2] = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = FUNCTION_TABLE[$17_1 | 0]($0_1, $6_1, 128) | 0;
    if ($7_1) {
     break label$2
    }
    HEAP8[($5_1 + 48 | 0) >> 0] = 0;
    HEAP32[($5_1 + 40 | 0) >> 2] = 0;
    $7_1 = $5_1 + 49 | 0;
    break label$1;
   }
   $7_1 = $6_1 + $7_1 | 0;
  }
  HEAP32[($5_1 + 188 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 180 | 0) >> 2] = $7_1;
  HEAP32[($5_1 + 176 | 0) >> 2] = $6_1;
  $7_1 = $349($5_1 + 8 | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(HEAP32[(0 + 96960 | 0) >> 2] | 0)) {
      break label$5
     }
     if (!$7_1) {
      break label$5
     }
     $8_1 = HEAP32[$2_1 >> 2] | 0;
     label$6 : {
      if ($4_1) {
       break label$6
      }
      $4_1 = HEAP32[$3_1 >> 2] | 0;
     }
     if (($8_1 | 0) < (2 | 0)) {
      break label$4
     }
     $9_1 = HEAP32[$1_1 >> 2] | 0;
     $10_1 = $8_1 >>> 1 | 0;
     $11_1 = 0;
     label$7 : while (1) {
      label$8 : {
       if (($9_1 | 0) < (1 | 0)) {
        break label$8
       }
       $12_1 = Math_imul($11_1, $9_1);
       $13_1 = Math_imul($8_1 + ($11_1 ^ -1 | 0) | 0, $9_1);
       $14_1 = 0;
       label$9 : while (1) {
        label$10 : {
         if (($4_1 | 0) < (1 | 0)) {
          break label$10
         }
         $15_1 = Math_imul($14_1 + $13_1 | 0, $4_1);
         $16_1 = Math_imul($14_1 + $12_1 | 0, $4_1);
         $6_1 = 0;
         label$11 : while (1) {
          $2_1 = $7_1 + ($6_1 + $16_1 | 0) | 0;
          $1_1 = HEAPU8[$2_1 >> 0] | 0;
          $3_1 = $7_1 + ($6_1 + $15_1 | 0) | 0;
          HEAP8[$2_1 >> 0] = HEAPU8[$3_1 >> 0] | 0;
          HEAP8[$3_1 >> 0] = $1_1;
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($4_1 | 0)) {
           continue label$11
          }
          break label$11;
         };
        }
        $14_1 = $14_1 + 1 | 0;
        if (($14_1 | 0) != ($9_1 | 0)) {
         continue label$9
        }
        break label$9;
       };
      }
      $11_1 = $11_1 + 1 | 0;
      if (($11_1 | 0) != ($10_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    if (!$7_1) {
     break label$3
    }
   }
   $434($0_1 | 0, (HEAP32[($5_1 + 176 | 0) >> 2] | 0) - (HEAP32[($5_1 + 180 | 0) >> 2] | 0) | 0 | 0, 1 | 0) | 0;
  }
  global$0 = $5_1 + 192 | 0;
  return $7_1 | 0;
 }
 
 function $349($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $11_1 = 0, $5_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $13_1 = 0, $8_1 = 0, $14_1 = 0, $21_1 = 0, $9_1 = 0, $19_1 = 0, $18_1 = 0, $20_1 = 0, $16_1 = 0, $23_1 = 0, $17_1 = 0, $22_1 = 0, $15_1 = 0, $35_1 = 0, i64toi32_i32$1 = 0, $27_1 = 0, i64toi32_i32$0 = 0, $24_1 = 0, $28_1 = 0, $25_1 = 0, $26_1 = 0, $30_1 = 0, $32_1 = 0, $34_1 = 0, $33_1 = 0, $31_1 = 0, $39_1 = 0, $37_1 = 0, $38_1 = 0, $36_1 = 0, $29_1 = 0, $40_1 = 0, $41_1 = 0, $48_1 = 0, $64_1 = 0, $2249 = 0, $3343 = 0, $4288 = 0, $4293 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5_1 = global$0 - 18672 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 18328 | 0) >> 2] = 39;
  HEAP32[($5_1 + 18324 | 0) >> 2] = 40;
  HEAP32[($5_1 + 18320 | 0) >> 2] = 41;
  HEAP32[($5_1 + 144 | 0) >> 2] = $0_1;
  HEAP8[($5_1 + 18260 | 0) >> 0] = 255;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($367($5_1 + 144 | 0 | 0) | 0 | 0) != (216 | 0)) {
       break label$4
      }
      i64toi32_i32$0 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
      $64_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[($0_1 + 168 | 0) >> 2] = $64_1;
      HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($5_1 + 18328 | 0) >> 2] = 39;
      HEAP32[($5_1 + 18324 | 0) >> 2] = 40;
      HEAP32[($5_1 + 18320 | 0) >> 2] = 41;
      HEAP32[($5_1 + 144 | 0) >> 2] = $0_1;
      $6_1 = 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = 0;
      label$5 : {
       if ($4_1 >>> 0 >= 5 >>> 0) {
        break label$5
       }
       label$6 : while (1) {
        i64toi32_i32$0 = (($5_1 + 144 | 0) + Math_imul($6_1, 72) | 0) + 17868 | 0;
        i64toi32_i32$1 = 0;
        HEAP32[i64toi32_i32$0 >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $6_1 = $6_1 + 1 | 0;
        if (($6_1 | 0) != (4 | 0)) {
         continue label$6
        }
        break label$6;
       };
       $7_1 = 0;
       HEAP32[($5_1 + 18312 | 0) >> 2] = 0;
       if (!($356($5_1 + 144 | 0 | 0, 0 | 0) | 0)) {
        break label$2
       }
       $8_1 = ($5_1 + 144 | 0) + 6724 | 0;
       $9_1 = $5_1 + 144 | 0 | 4 | 0;
       $6_1 = $367($5_1 + 144 | 0 | 0) | 0;
       label$7 : while (1) {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               label$15 : {
                $6_1 = $6_1 & 255 | 0;
                switch ($6_1 + -217 | 0 | 0) {
                case 0:
                 break label$13;
                case 1:
                 break label$15;
                default:
                 break label$14;
                };
               }
               label$16 : {
                label$17 : {
                 $6_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                 $10_1 = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($6_1 + 172 | 0) >> 2] | 0;
                 if ($10_1 >>> 0 >= $0_1 >>> 0) {
                  break label$17
                 }
                 $11_1 = $10_1 + 1 | 0;
                 HEAP32[($6_1 + 168 | 0) >> 2] = $11_1;
                 $12_1 = HEAPU8[$10_1 >> 0] | 0;
                 break label$16;
                }
                label$18 : {
                 if (HEAP32[($6_1 + 32 | 0) >> 2] | 0) {
                  break label$18
                 }
                 $12_1 = 0;
                 $11_1 = $10_1;
                 break label$16;
                }
                label$19 : {
                 label$20 : {
                  $11_1 = $6_1 + 40 | 0;
                  $0_1 = FUNCTION_TABLE[HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($6_1 + 28 | 0) >> 2] | 0, $11_1, HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0;
                  if ($0_1) {
                   break label$20
                  }
                  $12_1 = 0;
                  HEAP8[($6_1 + 40 | 0) >> 0] = 0;
                  HEAP32[($6_1 + 32 | 0) >> 2] = 0;
                  $0_1 = $6_1 + 41 | 0;
                  break label$19;
                 }
                 $0_1 = $11_1 + $0_1 | 0;
                 $12_1 = HEAPU8[$11_1 >> 0] | 0;
                }
                HEAP32[($6_1 + 172 | 0) >> 2] = $0_1;
                $11_1 = $6_1 + 41 | 0;
                HEAP32[($6_1 + 168 | 0) >> 2] = $11_1;
               }
               label$21 : {
                label$22 : {
                 if ($11_1 >>> 0 >= $0_1 >>> 0) {
                  break label$22
                 }
                 HEAP32[($6_1 + 168 | 0) >> 2] = $11_1 + 1 | 0;
                 $0_1 = HEAPU8[$11_1 >> 0] | 0;
                 break label$21;
                }
                label$23 : {
                 if (HEAP32[($6_1 + 32 | 0) >> 2] | 0) {
                  break label$23
                 }
                 $0_1 = 0;
                 break label$21;
                }
                label$24 : {
                 label$25 : {
                  $11_1 = $6_1 + 40 | 0;
                  $0_1 = FUNCTION_TABLE[HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($6_1 + 28 | 0) >> 2] | 0, $11_1, HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = 0;
                  HEAP8[($6_1 + 40 | 0) >> 0] = 0;
                  HEAP32[($6_1 + 32 | 0) >> 2] = 0;
                  $10_1 = $6_1 + 41 | 0;
                  break label$24;
                 }
                 $10_1 = $11_1 + $0_1 | 0;
                 $0_1 = HEAPU8[$11_1 >> 0] | 0;
                }
                HEAP32[($6_1 + 172 | 0) >> 2] = $10_1;
                HEAP32[($6_1 + 168 | 0) >> 2] = $6_1 + 41 | 0;
               }
               label$26 : {
                label$27 : {
                 $6_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                 $11_1 = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
                 if ($11_1 >>> 0 >= (HEAP32[($6_1 + 172 | 0) >> 2] | 0) >>> 0) {
                  break label$27
                 }
                 HEAP32[($6_1 + 168 | 0) >> 2] = $11_1 + 1 | 0;
                 $11_1 = HEAPU8[$11_1 >> 0] | 0;
                 break label$26;
                }
                label$28 : {
                 if (HEAP32[($6_1 + 32 | 0) >> 2] | 0) {
                  break label$28
                 }
                 HEAP32[($5_1 + 18292 | 0) >> 2] = 0;
                 $10_1 = 65967;
                 break label$3;
                }
                label$29 : {
                 label$30 : {
                  $11_1 = $6_1 + 40 | 0;
                  $10_1 = FUNCTION_TABLE[HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($6_1 + 28 | 0) >> 2] | 0, $11_1, HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0;
                  if ($10_1) {
                   break label$30
                  }
                  $11_1 = 0;
                  HEAP8[($6_1 + 40 | 0) >> 0] = 0;
                  HEAP32[($6_1 + 32 | 0) >> 2] = 0;
                  $10_1 = $6_1 + 41 | 0;
                  break label$29;
                 }
                 $10_1 = $11_1 + $10_1 | 0;
                 $11_1 = HEAPU8[$11_1 >> 0] | 0;
                }
                HEAP32[($6_1 + 172 | 0) >> 2] = $10_1;
                HEAP32[($6_1 + 168 | 0) >> 2] = $6_1 + 41 | 0;
               }
               $6_1 = $11_1 & 255 | 0;
               HEAP32[($5_1 + 18292 | 0) >> 2] = $6_1;
               $10_1 = 65967;
               if ((($11_1 + -5 | 0) & 255 | 0) >>> 0 < 252 >>> 0) {
                break label$3
               }
               $11_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
               if ((HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0) < ($6_1 | 0)) {
                break label$3
               }
               $13_1 = 0;
               label$31 : {
                if ((($12_1 & 255 | 0) << 8 | 0 | ($0_1 & 255 | 0) | 0 | 0) == (($6_1 << 1 | 0) + 6 | 0 | 0)) {
                 break label$31
                }
                $10_1 = 66766;
                break label$3;
               }
               label$32 : while (1) {
                label$33 : {
                 label$34 : {
                  $10_1 = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($11_1 + 172 | 0) >> 2] | 0;
                  if ($10_1 >>> 0 >= $0_1 >>> 0) {
                   break label$34
                  }
                  $6_1 = $10_1 + 1 | 0;
                  HEAP32[($11_1 + 168 | 0) >> 2] = $6_1;
                  $14_1 = HEAPU8[$10_1 >> 0] | 0;
                  break label$33;
                 }
                 label$35 : {
                  if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
                   break label$35
                  }
                  $14_1 = 0;
                  $6_1 = $10_1;
                  break label$33;
                 }
                 label$36 : {
                  label$37 : {
                   $6_1 = $11_1 + 40 | 0;
                   $0_1 = FUNCTION_TABLE[HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
                   if ($0_1) {
                    break label$37
                   }
                   $14_1 = 0;
                   HEAP8[($11_1 + 40 | 0) >> 0] = 0;
                   HEAP32[($11_1 + 32 | 0) >> 2] = 0;
                   $0_1 = $11_1 + 41 | 0;
                   break label$36;
                  }
                  $0_1 = $6_1 + $0_1 | 0;
                  $14_1 = HEAPU8[$6_1 >> 0] | 0;
                 }
                 HEAP32[($11_1 + 172 | 0) >> 2] = $0_1;
                 HEAP32[($11_1 + 168 | 0) >> 2] = $11_1 + 41 | 0;
                 $11_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($11_1 + 172 | 0) >> 2] | 0;
                 $6_1 = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
                }
                label$38 : {
                 label$39 : {
                  if ($6_1 >>> 0 >= $0_1 >>> 0) {
                   break label$39
                  }
                  HEAP32[($11_1 + 168 | 0) >> 2] = $6_1 + 1 | 0;
                  $12_1 = HEAPU8[$6_1 >> 0] | 0;
                  break label$38;
                 }
                 label$40 : {
                  if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
                   break label$40
                  }
                  $12_1 = 0;
                  break label$38;
                 }
                 label$41 : {
                  label$42 : {
                   $6_1 = $11_1 + 40 | 0;
                   $0_1 = FUNCTION_TABLE[HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
                   if ($0_1) {
                    break label$42
                   }
                   $12_1 = 0;
                   HEAP8[($11_1 + 40 | 0) >> 0] = 0;
                   HEAP32[($11_1 + 32 | 0) >> 2] = 0;
                   $0_1 = $11_1 + 41 | 0;
                   break label$41;
                  }
                  $0_1 = $6_1 + $0_1 | 0;
                  $12_1 = HEAPU8[$6_1 >> 0] | 0;
                 }
                 HEAP32[($11_1 + 172 | 0) >> 2] = $0_1;
                 HEAP32[($11_1 + 168 | 0) >> 2] = $11_1 + 41 | 0;
                 $11_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                }
                $6_1 = 0;
                label$43 : {
                 $0_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
                 if (($0_1 | 0) < (1 | 0)) {
                  break label$43
                 }
                 $10_1 = $14_1 & 255 | 0;
                 label$44 : while (1) {
                  if ((HEAP32[((($5_1 + 144 | 0) + Math_imul($6_1, 72) | 0) + 17820 | 0) >> 2] | 0 | 0) == ($10_1 | 0)) {
                   break label$43
                  }
                  $6_1 = $6_1 + 1 | 0;
                  if (($6_1 | 0) != ($0_1 | 0)) {
                   continue label$44
                  }
                  break label$2;
                 };
                }
                if (($6_1 | 0) == ($0_1 | 0)) {
                 break label$2
                }
                $10_1 = ($5_1 + 144 | 0) + Math_imul($6_1, 72) | 0;
                $0_1 = $12_1 & 255 | 0;
                HEAP32[($10_1 + 17836 | 0) >> 2] = $0_1 >>> 4 | 0;
                label$45 : {
                 if ($0_1 >>> 0 <= 63 >>> 0) {
                  break label$45
                 }
                 $10_1 = 67337;
                 break label$3;
                }
                $0_1 = $0_1 & 15 | 0;
                HEAP32[($10_1 + 17840 | 0) >> 2] = $0_1;
                label$46 : {
                 if ($0_1 >>> 0 <= 3 >>> 0) {
                  break label$46
                 }
                 $10_1 = 67349;
                 break label$3;
                }
                HEAP32[((($5_1 + 144 | 0) + ($13_1 << 2 | 0) | 0) + 18152 | 0) >> 2] = $6_1;
                $13_1 = $13_1 + 1 | 0;
                if (($13_1 | 0) < (HEAP32[($5_1 + 18292 | 0) >> 2] | 0 | 0)) {
                 continue label$32
                }
                break label$32;
               };
               label$47 : {
                label$48 : {
                 $10_1 = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
                 $6_1 = HEAP32[($11_1 + 172 | 0) >> 2] | 0;
                 if ($10_1 >>> 0 >= $6_1 >>> 0) {
                  break label$48
                 }
                 $0_1 = $10_1 + 1 | 0;
                 HEAP32[($11_1 + 168 | 0) >> 2] = $0_1;
                 $13_1 = HEAPU8[$10_1 >> 0] | 0;
                 break label$47;
                }
                label$49 : {
                 if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
                  break label$49
                 }
                 $13_1 = 0;
                 $0_1 = $10_1;
                 break label$47;
                }
                label$50 : {
                 label$51 : {
                  $6_1 = $11_1 + 40 | 0;
                  $0_1 = FUNCTION_TABLE[HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
                  if ($0_1) {
                   break label$51
                  }
                  $13_1 = 0;
                  HEAP8[($11_1 + 40 | 0) >> 0] = 0;
                  HEAP32[($11_1 + 32 | 0) >> 2] = 0;
                  $0_1 = $11_1 + 41 | 0;
                  break label$50;
                 }
                 $0_1 = $6_1 + $0_1 | 0;
                 $13_1 = HEAPU8[$6_1 >> 0] | 0;
                }
                HEAP32[($11_1 + 172 | 0) >> 2] = $0_1;
                HEAP32[($11_1 + 168 | 0) >> 2] = $11_1 + 41 | 0;
                $11_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                $6_1 = HEAP32[($11_1 + 172 | 0) >> 2] | 0;
                $0_1 = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
               }
               HEAP32[($5_1 + 18272 | 0) >> 2] = $13_1 & 255 | 0;
               label$52 : {
                label$53 : {
                 if ($0_1 >>> 0 >= $6_1 >>> 0) {
                  break label$53
                 }
                 $10_1 = $0_1 + 1 | 0;
                 HEAP32[($11_1 + 168 | 0) >> 2] = $10_1;
                 $13_1 = HEAPU8[$0_1 >> 0] | 0;
                 break label$52;
                }
                label$54 : {
                 if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
                  break label$54
                 }
                 $13_1 = 0;
                 $10_1 = $0_1;
                 break label$52;
                }
                label$55 : {
                 label$56 : {
                  $6_1 = $11_1 + 40 | 0;
                  $0_1 = FUNCTION_TABLE[HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
                  if ($0_1) {
                   break label$56
                  }
                  $13_1 = 0;
                  HEAP8[($11_1 + 40 | 0) >> 0] = 0;
                  HEAP32[($11_1 + 32 | 0) >> 2] = 0;
                  $0_1 = $11_1 + 41 | 0;
                  break label$55;
                 }
                 $0_1 = $6_1 + $0_1 | 0;
                 $13_1 = HEAPU8[$6_1 >> 0] | 0;
                }
                HEAP32[($11_1 + 172 | 0) >> 2] = $0_1;
                HEAP32[($11_1 + 168 | 0) >> 2] = $11_1 + 41 | 0;
                $11_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                $6_1 = HEAP32[($11_1 + 172 | 0) >> 2] | 0;
                $10_1 = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
               }
               HEAP32[($5_1 + 18276 | 0) >> 2] = $13_1 & 255 | 0;
               label$57 : {
                label$58 : {
                 if ($10_1 >>> 0 >= $6_1 >>> 0) {
                  break label$58
                 }
                 HEAP32[($11_1 + 168 | 0) >> 2] = $10_1 + 1 | 0;
                 $6_1 = HEAPU8[$10_1 >> 0] | 0;
                 break label$57;
                }
                label$59 : {
                 if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
                  break label$59
                 }
                 $6_1 = 0;
                 break label$57;
                }
                label$60 : {
                 label$61 : {
                  $6_1 = $11_1 + 40 | 0;
                  $0_1 = FUNCTION_TABLE[HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
                  if ($0_1) {
                   break label$61
                  }
                  $6_1 = 0;
                  HEAP8[($11_1 + 40 | 0) >> 0] = 0;
                  HEAP32[($11_1 + 32 | 0) >> 2] = 0;
                  $0_1 = $11_1 + 41 | 0;
                  break label$60;
                 }
                 $0_1 = $6_1 + $0_1 | 0;
                 $6_1 = HEAPU8[$6_1 >> 0] | 0;
                }
                HEAP32[($11_1 + 172 | 0) >> 2] = $0_1;
                HEAP32[($11_1 + 168 | 0) >> 2] = $11_1 + 41 | 0;
               }
               $0_1 = $6_1 & 15 | 0;
               HEAP32[($5_1 + 18284 | 0) >> 2] = $0_1;
               HEAP32[($5_1 + 18280 | 0) >> 2] = ($6_1 & 240 | 0) >>> 4 | 0;
               $11_1 = HEAP32[($5_1 + 18272 | 0) >> 2] | 0;
               label$62 : {
                label$63 : {
                 $13_1 = HEAP32[($5_1 + 18268 | 0) >> 2] | 0;
                 if (!$13_1) {
                  break label$63
                 }
                 $10_1 = 68084;
                 if (($11_1 | 0) > (63 | 0)) {
                  break label$3
                 }
                 $12_1 = HEAP32[($5_1 + 18276 | 0) >> 2] | 0;
                 if (($12_1 | 0) > (63 | 0)) {
                  break label$3
                 }
                 if (($11_1 | 0) > ($12_1 | 0)) {
                  break label$3
                 }
                 if (($6_1 & 255 | 0) >>> 0 > 223 >>> 0) {
                  break label$3
                 }
                 if ($0_1 >>> 0 > 13 >>> 0) {
                  break label$3
                 }
                 break label$62;
                }
                $10_1 = 68084;
                if ($11_1) {
                 break label$3
                }
                if (($6_1 & 255 | 0) >>> 0 > 15 >>> 0) {
                 break label$3
                }
                if ($0_1) {
                 break label$3
                }
                HEAP32[($5_1 + 18276 | 0) >> 2] = 63;
               }
               HEAP32[($5_1 + 18264 | 0) >> 2] = 0;
               i64toi32_i32$0 = $5_1;
               i64toi32_i32$1 = 0;
               HEAP32[($5_1 + 18252 | 0) >> 2] = 0;
               HEAP32[($5_1 + 18256 | 0) >> 2] = i64toi32_i32$1;
               HEAP32[($5_1 + 18132 | 0) >> 2] = 0;
               HEAP32[($5_1 + 18060 | 0) >> 2] = 0;
               HEAP8[($5_1 + 18260 | 0) >> 0] = 255;
               HEAP32[($5_1 + 17988 | 0) >> 2] = 0;
               HEAP32[($5_1 + 18288 | 0) >> 2] = 0;
               $6_1 = HEAP32[($5_1 + 18312 | 0) >> 2] | 0;
               $11_1 = $6_1 ? $6_1 : 2147483647;
               HEAP32[($5_1 + 18316 | 0) >> 2] = $11_1;
               $6_1 = HEAP32[($5_1 + 18292 | 0) >> 2] | 0;
               label$64 : {
                if ($13_1) {
                 break label$64
                }
                label$65 : {
                 if (($6_1 | 0) != (1 | 0)) {
                  break label$65
                 }
                 label$66 : {
                  $0_1 = HEAP32[($5_1 + 18296 | 0) >> 2] | 0;
                  $6_1 = ($5_1 + 144 | 0) + Math_imul($0_1, 72) | 0;
                  $11_1 = HEAP32[($6_1 + 17852 | 0) >> 2] | 0;
                  if (($11_1 | 0) >= (1 | 0)) {
                   break label$66
                  }
                  if (!1) {
                   break label$2
                  }
                  break label$10;
                 }
                 $15_1 = HEAP32[($6_1 + 17848 | 0) >> 2] | 0;
                 $10_1 = ($15_1 + 7 | 0) >> 3 | 0;
                 $16_1 = ($10_1 | 0) > (1 | 0) ? $10_1 : 1;
                 $17_1 = ($11_1 + 7 | 0) >>> 3 | 0;
                 $18_1 = $6_1 + 17856 | 0;
                 $19_1 = $6_1 + 17864 | 0;
                 $10_1 = $6_1 + 17832 | 0;
                 $13_1 = $6_1 + 17836 | 0;
                 $12_1 = $6_1 + 17840 | 0;
                 $20_1 = 0;
                 label$67 : while (1) {
                  label$68 : {
                   if (($15_1 | 0) < (1 | 0)) {
                    break label$68
                   }
                   $14_1 = $20_1 << 3 | 0;
                   $21_1 = 0;
                   $6_1 = 0;
                   label$69 : while (1) {
                    $11_1 = HEAP32[$12_1 >> 2] | 0;
                    if (!($368($5_1 + 144 | 0 | 0, $5_1 + 16 | 0 | 0, $9_1 + Math_imul(HEAP32[$13_1 >> 2] | 0, 1680) | 0 | 0, $8_1 + Math_imul($11_1, 1680) | 0 | 0, (($5_1 + 144 | 0) + ($11_1 << 10 | 0) | 0) + 13700 | 0 | 0, $0_1 | 0, (($5_1 + 144 | 0) + ((HEAP32[$10_1 >> 2] | 0) << 6 | 0) | 0) + 13444 | 0 | 0) | 0)) {
                     break label$11
                    }
                    $11_1 = HEAP32[$18_1 >> 2] | 0;
                    FUNCTION_TABLE[HEAP32[($5_1 + 18320 | 0) >> 2] | 0 | 0](((HEAP32[$19_1 >> 2] | 0) + Math_imul($14_1, $11_1) | 0) + ($6_1 << 3 | 0) | 0, $11_1, $5_1 + 16 | 0);
                    $11_1 = HEAP32[($5_1 + 18316 | 0) >> 2] | 0;
                    HEAP32[($5_1 + 18316 | 0) >> 2] = $11_1 + -1 | 0;
                    label$70 : {
                     if (($11_1 | 0) > (1 | 0)) {
                      break label$70
                     }
                     label$71 : {
                      if ((HEAP32[($5_1 + 18256 | 0) >> 2] | 0 | 0) > (23 | 0)) {
                       break label$71
                      }
                      $369($5_1 + 144 | 0 | 0);
                     }
                     label$72 : {
                      if (((HEAPU8[($5_1 + 18260 | 0) >> 0] | 0) & 248 | 0 | 0) == (208 | 0)) {
                       break label$72
                      }
                      if (!1) {
                       break label$2
                      }
                      break label$10;
                     }
                     HEAP32[($5_1 + 18264 | 0) >> 2] = 0;
                     i64toi32_i32$0 = $5_1;
                     i64toi32_i32$1 = 0;
                     HEAP32[($5_1 + 18252 | 0) >> 2] = 0;
                     HEAP32[($5_1 + 18256 | 0) >> 2] = i64toi32_i32$1;
                     HEAP32[($5_1 + 18132 | 0) >> 2] = 0;
                     HEAP32[($5_1 + 18060 | 0) >> 2] = 0;
                     HEAP8[($5_1 + 18260 | 0) >> 0] = 255;
                     HEAP32[($5_1 + 17988 | 0) >> 2] = 0;
                     HEAP32[($5_1 + 18288 | 0) >> 2] = 0;
                     $11_1 = HEAP32[($5_1 + 18312 | 0) >> 2] | 0;
                     HEAP32[($5_1 + 18316 | 0) >> 2] = $11_1 ? $11_1 : 2147483647;
                    }
                    $6_1 = $6_1 + 1 | 0;
                    if (($6_1 | 0) != ($16_1 | 0)) {
                     continue label$69
                    }
                    break label$69;
                   };
                  }
                  $21_1 = 1;
                  $20_1 = $20_1 + 1 | 0;
                  if (($20_1 | 0) != ($17_1 | 0)) {
                   continue label$67
                  }
                  break label$11;
                 };
                }
                label$73 : {
                 $0_1 = HEAP32[($5_1 + 17952 | 0) >> 2] | 0;
                 if (($0_1 | 0) >= (1 | 0)) {
                  break label$73
                 }
                 if (!1) {
                  break label$2
                 }
                 break label$10;
                }
                $19_1 = 0;
                $6_1 = HEAP32[($5_1 + 17948 | 0) >> 2] | 0;
                label$74 : while (1) {
                 $14_1 = 0;
                 label$75 : {
                  if (($6_1 | 0) < (1 | 0)) {
                   break label$75
                  }
                  label$76 : while (1) {
                   $22_1 = 0;
                   label$77 : {
                    $10_1 = HEAP32[($5_1 + 18292 | 0) >> 2] | 0;
                    if (($10_1 | 0) < (1 | 0)) {
                     break label$77
                    }
                    label$78 : while (1) {
                     label$79 : {
                      $18_1 = HEAP32[((($5_1 + 144 | 0) + ($22_1 << 2 | 0) | 0) + 18152 | 0) >> 2] | 0;
                      $6_1 = ($5_1 + 144 | 0) + Math_imul($18_1, 72) | 0;
                      $12_1 = $6_1 + 17828 | 0;
                      $0_1 = HEAP32[$12_1 >> 2] | 0;
                      if (($0_1 | 0) < (1 | 0)) {
                       break label$79
                      }
                      $15_1 = $6_1 + 17856 | 0;
                      $17_1 = $6_1 + 17864 | 0;
                      $16_1 = $6_1 + 17832 | 0;
                      $20_1 = $6_1 + 17836 | 0;
                      $21_1 = $6_1 + 17840 | 0;
                      $23_1 = $6_1 + 17824 | 0;
                      $11_1 = HEAP32[$23_1 >> 2] | 0;
                      $13_1 = 0;
                      label$80 : while (1) {
                       $6_1 = 0;
                       label$81 : {
                        if (($11_1 | 0) < (1 | 0)) {
                         break label$81
                        }
                        label$82 : while (1) {
                         $10_1 = HEAP32[$12_1 >> 2] | 0;
                         label$83 : {
                          $0_1 = HEAP32[$21_1 >> 2] | 0;
                          if ($368($5_1 + 144 | 0 | 0, $5_1 + 16 | 0 | 0, $9_1 + Math_imul(HEAP32[$20_1 >> 2] | 0, 1680) | 0 | 0, $8_1 + Math_imul($0_1, 1680) | 0 | 0, (($5_1 + 144 | 0) + ($0_1 << 10 | 0) | 0) + 13700 | 0 | 0, $18_1 | 0, (($5_1 + 144 | 0) + ((HEAP32[$16_1 >> 2] | 0) << 6 | 0) | 0) + 13444 | 0 | 0) | 0) {
                           break label$83
                          }
                          if (!0) {
                           break label$2
                          }
                          break label$10;
                         }
                         $0_1 = HEAP32[$15_1 >> 2] | 0;
                         FUNCTION_TABLE[HEAP32[($5_1 + 18320 | 0) >> 2] | 0 | 0](((HEAP32[$17_1 >> 2] | 0) + (Math_imul(Math_imul($10_1, $19_1) + $13_1 | 0, $0_1) << 3 | 0) | 0) + ((Math_imul($11_1, $14_1) + $6_1 | 0) << 3 | 0) | 0, $0_1, $5_1 + 16 | 0);
                         $6_1 = $6_1 + 1 | 0;
                         $11_1 = HEAP32[$23_1 >> 2] | 0;
                         if (($6_1 | 0) < ($11_1 | 0)) {
                          continue label$82
                         }
                         break label$82;
                        };
                        $0_1 = HEAP32[$12_1 >> 2] | 0;
                       }
                       $13_1 = $13_1 + 1 | 0;
                       if (($13_1 | 0) < ($0_1 | 0)) {
                        continue label$80
                       }
                       break label$80;
                      };
                      $10_1 = HEAP32[($5_1 + 18292 | 0) >> 2] | 0;
                     }
                     $22_1 = $22_1 + 1 | 0;
                     if (($22_1 | 0) < ($10_1 | 0)) {
                      continue label$78
                     }
                     break label$78;
                    };
                    $11_1 = HEAP32[($5_1 + 18316 | 0) >> 2] | 0;
                   }
                   $10_1 = $11_1 + -1 | 0;
                   HEAP32[($5_1 + 18316 | 0) >> 2] = $10_1;
                   label$84 : {
                    if (($11_1 | 0) > (1 | 0)) {
                     break label$84
                    }
                    label$85 : {
                     if ((HEAP32[($5_1 + 18256 | 0) >> 2] | 0 | 0) > (23 | 0)) {
                      break label$85
                     }
                     $369($5_1 + 144 | 0 | 0);
                    }
                    label$86 : {
                     if (((HEAPU8[($5_1 + 18260 | 0) >> 0] | 0) & 248 | 0 | 0) == (208 | 0)) {
                      break label$86
                     }
                     if (!1) {
                      break label$2
                     }
                     break label$10;
                    }
                    HEAP32[($5_1 + 18264 | 0) >> 2] = 0;
                    i64toi32_i32$0 = $5_1;
                    i64toi32_i32$1 = 0;
                    HEAP32[($5_1 + 18252 | 0) >> 2] = 0;
                    HEAP32[($5_1 + 18256 | 0) >> 2] = i64toi32_i32$1;
                    HEAP32[($5_1 + 18132 | 0) >> 2] = 0;
                    HEAP32[($5_1 + 18060 | 0) >> 2] = 0;
                    HEAP8[($5_1 + 18260 | 0) >> 0] = 255;
                    HEAP32[($5_1 + 17988 | 0) >> 2] = 0;
                    HEAP32[($5_1 + 18288 | 0) >> 2] = 0;
                    $6_1 = HEAP32[($5_1 + 18312 | 0) >> 2] | 0;
                    $10_1 = $6_1 ? $6_1 : 2147483647;
                    HEAP32[($5_1 + 18316 | 0) >> 2] = $10_1;
                   }
                   $11_1 = $10_1;
                   $14_1 = $14_1 + 1 | 0;
                   $6_1 = HEAP32[($5_1 + 17948 | 0) >> 2] | 0;
                   if (($14_1 | 0) < ($6_1 | 0)) {
                    continue label$76
                   }
                   break label$76;
                  };
                  $0_1 = HEAP32[($5_1 + 17952 | 0) >> 2] | 0;
                  $11_1 = $10_1;
                 }
                 $21_1 = 1;
                 $19_1 = $19_1 + 1 | 0;
                 if (($19_1 | 0) >= ($0_1 | 0)) {
                  break label$11
                 }
                 continue label$74;
                };
               }
               if (($6_1 | 0) == (1 | 0)) {
                break label$12
               }
               $0_1 = HEAP32[($5_1 + 17952 | 0) >> 2] | 0;
               if (($0_1 | 0) < (1 | 0)) {
                break label$10
               }
               $12_1 = 0;
               $6_1 = HEAP32[($5_1 + 17948 | 0) >> 2] | 0;
               label$87 : while (1) {
                $10_1 = 0;
                label$88 : {
                 if (($6_1 | 0) < (1 | 0)) {
                  break label$88
                 }
                 label$89 : while (1) {
                  $15_1 = 0;
                  label$90 : {
                   $0_1 = HEAP32[($5_1 + 18292 | 0) >> 2] | 0;
                   if (($0_1 | 0) < (1 | 0)) {
                    break label$90
                   }
                   label$91 : while (1) {
                    label$92 : {
                     $14_1 = HEAP32[((($5_1 + 144 | 0) + ($15_1 << 2 | 0) | 0) + 18152 | 0) >> 2] | 0;
                     $6_1 = ($5_1 + 144 | 0) + Math_imul($14_1, 72) | 0;
                     $13_1 = $6_1 + 17828 | 0;
                     $21_1 = HEAP32[$13_1 >> 2] | 0;
                     if (($21_1 | 0) < (1 | 0)) {
                      break label$92
                     }
                     $18_1 = $6_1 + 17836 | 0;
                     $19_1 = $6_1 + 17884 | 0;
                     $16_1 = $6_1 + 17880 | 0;
                     $20_1 = $6_1 + 17824 | 0;
                     $11_1 = HEAP32[$20_1 >> 2] | 0;
                     $0_1 = 0;
                     label$93 : while (1) {
                      $6_1 = 0;
                      label$94 : {
                       if (($11_1 | 0) <= (0 | 0)) {
                        break label$94
                       }
                       label$95 : while (1) {
                        if (!($370($5_1 + 144 | 0 | 0, (HEAP32[$16_1 >> 2] | 0) + (((Math_imul($11_1, $10_1) + $6_1 | 0) + Math_imul(Math_imul(HEAP32[$13_1 >> 2] | 0, $12_1) + $0_1 | 0, HEAP32[$19_1 >> 2] | 0) | 0) << 7 | 0) | 0 | 0, ($5_1 + 144 | 0) + Math_imul(HEAP32[$18_1 >> 2] | 0, 1680) | 0 | 4 | 0 | 0, $14_1 | 0) | 0)) {
                         break label$2
                        }
                        $6_1 = $6_1 + 1 | 0;
                        $11_1 = HEAP32[$20_1 >> 2] | 0;
                        if (($6_1 | 0) < ($11_1 | 0)) {
                         continue label$95
                        }
                        break label$95;
                       };
                       $21_1 = HEAP32[$13_1 >> 2] | 0;
                      }
                      $0_1 = $0_1 + 1 | 0;
                      if (($0_1 | 0) < ($21_1 | 0)) {
                       continue label$93
                      }
                      break label$93;
                     };
                     $0_1 = HEAP32[($5_1 + 18292 | 0) >> 2] | 0;
                    }
                    $15_1 = $15_1 + 1 | 0;
                    if (($15_1 | 0) < ($0_1 | 0)) {
                     continue label$91
                    }
                    break label$91;
                   };
                   $11_1 = HEAP32[($5_1 + 18316 | 0) >> 2] | 0;
                  }
                  $13_1 = $11_1 + -1 | 0;
                  HEAP32[($5_1 + 18316 | 0) >> 2] = $13_1;
                  label$96 : {
                   if (($11_1 | 0) > (1 | 0)) {
                    break label$96
                   }
                   label$97 : {
                    if ((HEAP32[($5_1 + 18256 | 0) >> 2] | 0 | 0) > (23 | 0)) {
                     break label$97
                    }
                    $369($5_1 + 144 | 0 | 0);
                   }
                   $6_1 = HEAPU8[($5_1 + 18260 | 0) >> 0] | 0;
                   if (($6_1 & 248 | 0 | 0) != (208 | 0)) {
                    break label$9
                   }
                   HEAP32[($5_1 + 18264 | 0) >> 2] = 0;
                   i64toi32_i32$0 = $5_1;
                   i64toi32_i32$1 = 0;
                   HEAP32[($5_1 + 18252 | 0) >> 2] = 0;
                   HEAP32[($5_1 + 18256 | 0) >> 2] = i64toi32_i32$1;
                   HEAP32[($5_1 + 18132 | 0) >> 2] = 0;
                   HEAP32[($5_1 + 18060 | 0) >> 2] = 0;
                   HEAP8[($5_1 + 18260 | 0) >> 0] = 255;
                   HEAP32[($5_1 + 17988 | 0) >> 2] = 0;
                   HEAP32[($5_1 + 18288 | 0) >> 2] = 0;
                   $6_1 = HEAP32[($5_1 + 18312 | 0) >> 2] | 0;
                   $13_1 = $6_1 ? $6_1 : 2147483647;
                   HEAP32[($5_1 + 18316 | 0) >> 2] = $13_1;
                  }
                  $11_1 = $13_1;
                  $10_1 = $10_1 + 1 | 0;
                  $6_1 = HEAP32[($5_1 + 17948 | 0) >> 2] | 0;
                  if (($10_1 | 0) < ($6_1 | 0)) {
                   continue label$89
                  }
                  break label$89;
                 };
                 $0_1 = HEAP32[($5_1 + 17952 | 0) >> 2] | 0;
                 $11_1 = $13_1;
                }
                $12_1 = $12_1 + 1 | 0;
                if (($12_1 | 0) < ($0_1 | 0)) {
                 continue label$87
                }
                break label$10;
               };
              }
              if (!($371($5_1 + 144 | 0 | 0, $6_1 | 0) | 0)) {
               break label$2
              }
              break label$8;
             }
             $0_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
             $12_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             label$98 : {
              if (!(HEAP32[($5_1 + 18268 | 0) >> 2] | 0)) {
               break label$98
              }
              if (($12_1 | 0) < (1 | 0)) {
               break label$98
              }
              $15_1 = 0;
              label$99 : while (1) {
               label$100 : {
                $6_1 = ($5_1 + 144 | 0) + Math_imul($15_1, 72) | 0;
                $7_1 = HEAP32[($6_1 + 17852 | 0) >> 2] | 0;
                if (($7_1 | 0) < (1 | 0)) {
                 break label$100
                }
                $20_1 = HEAP32[($6_1 + 17848 | 0) >> 2] | 0;
                $11_1 = ($20_1 + 7 | 0) >> 3 | 0;
                $14_1 = ($11_1 | 0) > (1 | 0) ? $11_1 : 1;
                $21_1 = ($7_1 + 7 | 0) >>> 3 | 0;
                $8_1 = $6_1 + 17856 | 0;
                $9_1 = $6_1 + 17864 | 0;
                $18_1 = $6_1 + 17832 | 0;
                $19_1 = $6_1 + 17884 | 0;
                $16_1 = $6_1 + 17880 | 0;
                $13_1 = 0;
                label$101 : while (1) {
                 label$102 : {
                  if (($20_1 | 0) < (1 | 0)) {
                   break label$102
                  }
                  $12_1 = $13_1 << 3 | 0;
                  $10_1 = 0;
                  label$103 : while (1) {
                   $0_1 = (($5_1 + 144 | 0) + ((HEAP32[$18_1 >> 2] | 0) << 6 | 0) | 0) + 13444 | 0;
                   $11_1 = (HEAP32[$16_1 >> 2] | 0) + ((Math_imul(HEAP32[$19_1 >> 2] | 0, $13_1) + $10_1 | 0) << 7 | 0) | 0;
                   $6_1 = 0;
                   label$104 : while (1) {
                    $7_1 = $11_1 + ($6_1 << 1 | 0) | 0;
                    HEAP16[$7_1 >> 1] = Math_imul(HEAPU16[$7_1 >> 1] | 0, HEAPU8[($0_1 + $6_1 | 0) >> 0] | 0);
                    $6_1 = $6_1 + 1 | 0;
                    if (($6_1 | 0) != (64 | 0)) {
                     continue label$104
                    }
                    break label$104;
                   };
                   $6_1 = HEAP32[$8_1 >> 2] | 0;
                   FUNCTION_TABLE[HEAP32[($5_1 + 18320 | 0) >> 2] | 0 | 0](((HEAP32[$9_1 >> 2] | 0) + Math_imul($12_1, $6_1) | 0) + ($10_1 << 3 | 0) | 0, $6_1, $11_1);
                   $10_1 = $10_1 + 1 | 0;
                   if (($10_1 | 0) != ($14_1 | 0)) {
                    continue label$103
                   }
                   break label$103;
                  };
                 }
                 $13_1 = $13_1 + 1 | 0;
                 if (($13_1 | 0) != ($21_1 | 0)) {
                  continue label$101
                 }
                 break label$101;
                };
                $0_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
               }
               $15_1 = $15_1 + 1 | 0;
               $12_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if (($15_1 | 0) < ($12_1 | 0)) {
                continue label$99
               }
               break label$99;
              };
             }
             label$105 : {
              label$106 : {
               label$107 : {
                label$108 : {
                 $18_1 = $4_1 ? $4_1 : $12_1;
                 $9_1 = ($12_1 | 0) == (3 | 0) ? (($18_1 | 0) < (3 | 0) ? 1 : $12_1) : $12_1;
                 if (($9_1 | 0) > (0 | 0)) {
                  break label$108
                 }
                 $20_1 = HEAP32[$0_1 >> 2] | 0;
                 break label$107;
                }
                $20_1 = HEAP32[$0_1 >> 2] | 0;
                $8_1 = $20_1 + -1 | 0;
                $14_1 = $20_1 + 3 | 0;
                $4_1 = HEAP32[($5_1 + 18328 | 0) >> 2] | 0;
                $19_1 = HEAP32[($5_1 + 17944 | 0) >> 2] | 0;
                $16_1 = HEAP32[($5_1 + 17940 | 0) >> 2] | 0;
                $7_1 = 0;
                label$109 : while (1) {
                 $11_1 = ($5_1 + 144 | 0) + Math_imul($7_1, 72) | 0;
                 $6_1 = $483($14_1 | 0) | 0;
                 HEAP32[($11_1 + 17876 | 0) >> 2] = $6_1;
                 label$110 : {
                  if ($6_1) {
                   break label$110
                  }
                  $7_1 = 0;
                  if (($12_1 | 0) <= (0 | 0)) {
                   break label$106
                  }
                  label$111 : while (1) {
                   label$112 : {
                    $6_1 = ($5_1 + 144 | 0) + Math_imul($7_1, 72) | 0;
                    $11_1 = $6_1 + 17868 | 0;
                    $0_1 = HEAP32[$11_1 >> 2] | 0;
                    if (!$0_1) {
                     break label$112
                    }
                    $484($0_1 | 0);
                    HEAP32[$11_1 >> 2] = 0;
                    HEAP32[($6_1 + 17864 | 0) >> 2] = 0;
                   }
                   label$113 : {
                    $11_1 = $6_1 + 17872 | 0;
                    $0_1 = HEAP32[$11_1 >> 2] | 0;
                    if (!$0_1) {
                     break label$113
                    }
                    $484($0_1 | 0);
                    HEAP32[$11_1 >> 2] = 0;
                    HEAP32[($6_1 + 17880 | 0) >> 2] = 0;
                   }
                   label$114 : {
                    $6_1 = $6_1 + 17876 | 0;
                    $11_1 = HEAP32[$6_1 >> 2] | 0;
                    if (!$11_1) {
                     break label$114
                    }
                    $484($11_1 | 0);
                    HEAP32[$6_1 >> 2] = 0;
                   }
                   $7_1 = $7_1 + 1 | 0;
                   if (($7_1 | 0) < (HEAP32[((HEAP32[($5_1 + 144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0)) {
                    continue label$111
                   }
                   break label$111;
                  };
                  $7_1 = 0;
                  HEAP32[(0 + 96956 | 0) >> 2] = 66853;
                  break label$1;
                 }
                 $6_1 = ($5_1 + 16 | 0) + ($7_1 << 5 | 0) | 0;
                 $10_1 = ($16_1 | 0) / (HEAP32[($11_1 + 17824 | 0) >> 2] | 0 | 0) | 0;
                 HEAP32[($6_1 + 12 | 0) >> 2] = $10_1;
                 $13_1 = HEAP32[($11_1 + 17828 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 28 | 0) >> 2] = 0;
                 HEAP32[($6_1 + 20 | 0) >> 2] = (($8_1 + $10_1 | 0) >>> 0) / ($10_1 >>> 0) | 0;
                 $13_1 = ($19_1 | 0) / ($13_1 | 0) | 0;
                 HEAP32[($6_1 + 16 | 0) >> 2] = $13_1;
                 HEAP32[($6_1 + 24 | 0) >> 2] = $13_1 >> 1 | 0;
                 $11_1 = HEAP32[($11_1 + 17864 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 4 | 0) >> 2] = $11_1;
                 HEAP32[($6_1 + 8 | 0) >> 2] = $11_1;
                 label$115 : {
                  label$116 : {
                   label$117 : {
                    switch ($10_1 + -1 | 0 | 0) {
                    case 0:
                     $11_1 = ($13_1 | 0) == (1 | 0) ? 42 : ($13_1 | 0) == (2 | 0) ? 43 : 44;
                     break label$115;
                    case 1:
                     break label$117;
                    default:
                     break label$116;
                    };
                   }
                   $11_1 = 45;
                   label$119 : {
                    switch ($13_1 + -1 | 0 | 0) {
                    case 0:
                     break label$115;
                    case 1:
                     break label$119;
                    default:
                     break label$116;
                    };
                   }
                   $11_1 = $4_1;
                   break label$115;
                  }
                  $11_1 = 44;
                 }
                 HEAP32[$6_1 >> 2] = $11_1;
                 $7_1 = $7_1 + 1 | 0;
                 if (($7_1 | 0) != ($9_1 | 0)) {
                  continue label$109
                 }
                 break label$109;
                };
               }
               $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               $7_1 = $483(Math_imul(Math_imul($20_1, $18_1), $6_1) + 1 | 0 | 0) | 0;
               if (!$7_1) {
                break label$105
               }
               label$120 : {
                if (!$6_1) {
                 break label$120
                }
                $20_1 = ($9_1 | 0) < (1 | 0);
                $4_1 = ($18_1 | 0) < (3 | 0);
                $19_1 = 0;
                label$121 : while (1) {
                 $16_1 = Math_imul(Math_imul($19_1, $18_1), HEAP32[$0_1 >> 2] | 0);
                 $11_1 = 0;
                 label$122 : {
                  if ($20_1) {
                   break label$122
                  }
                  label$123 : while (1) {
                   $8_1 = ($5_1 + 144 | 0) + Math_imul($11_1, 72) | 0;
                   $6_1 = ($5_1 + 16 | 0) + ($11_1 << 5 | 0) | 0;
                   $10_1 = $6_1 | 4 | 0;
                   $0_1 = $6_1 | 8 | 0;
                   $13_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
                   $12_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                   $14_1 = ($13_1 | 0) < ($12_1 >> 1 | 0 | 0);
                   $14_1 = FUNCTION_TABLE[HEAP32[$6_1 >> 2] | 0 | 0](HEAP32[($8_1 + 17876 | 0) >> 2] | 0, HEAP32[($14_1 ? $10_1 : $0_1) >> 2] | 0, HEAP32[($14_1 ? $0_1 : $10_1) >> 2] | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0;
                   $13_1 = $13_1 + 1 | 0;
                   HEAP32[($6_1 + 24 | 0) >> 2] = $13_1;
                   HEAP32[($5_1 + ($11_1 << 2 | 0) | 0) >> 2] = $14_1;
                   label$124 : {
                    if (($13_1 | 0) < ($12_1 | 0)) {
                     break label$124
                    }
                    HEAP32[($6_1 + 24 | 0) >> 2] = 0;
                    $13_1 = HEAP32[$0_1 >> 2] | 0;
                    HEAP32[$10_1 >> 2] = $13_1;
                    $10_1 = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
                    HEAP32[($6_1 + 28 | 0) >> 2] = $10_1;
                    if (($10_1 | 0) >= (HEAP32[($8_1 + 17852 | 0) >> 2] | 0 | 0)) {
                     break label$124
                    }
                    HEAP32[$0_1 >> 2] = $13_1 + (HEAP32[($8_1 + 17856 | 0) >> 2] | 0) | 0;
                   }
                   $11_1 = $11_1 + 1 | 0;
                   if (($11_1 | 0) != ($9_1 | 0)) {
                    continue label$123
                   }
                   break label$123;
                  };
                  $0_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                  $10_1 = HEAP32[$5_1 >> 2] | 0;
                 }
                 $6_1 = $7_1 + $16_1 | 0;
                 label$125 : {
                  label$126 : {
                   label$127 : {
                    if ($4_1) {
                     break label$127
                    }
                    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == (3 | 0)) {
                     break label$126
                    }
                    $11_1 = 0;
                    if (!(HEAP32[$0_1 >> 2] | 0)) {
                     break label$125
                    }
                    label$128 : while (1) {
                     $13_1 = HEAPU8[($10_1 + $11_1 | 0) >> 0] | 0;
                     HEAP8[($6_1 + 1 | 0) >> 0] = $13_1;
                     HEAP8[($6_1 + 2 | 0) >> 0] = $13_1;
                     HEAP8[($6_1 + 3 | 0) >> 0] = 255;
                     HEAP8[$6_1 >> 0] = $13_1;
                     $6_1 = $6_1 + $18_1 | 0;
                     $11_1 = $11_1 + 1 | 0;
                     if ($11_1 >>> 0 < (HEAP32[$0_1 >> 2] | 0) >>> 0) {
                      continue label$128
                     }
                     break label$125;
                    };
                   }
                   $13_1 = HEAP32[$0_1 >> 2] | 0;
                   label$129 : {
                    if (($18_1 | 0) == (1 | 0)) {
                     break label$129
                    }
                    $11_1 = 0;
                    if (!$13_1) {
                     break label$125
                    }
                    label$130 : while (1) {
                     $13_1 = HEAPU8[($10_1 + $11_1 | 0) >> 0] | 0;
                     HEAP8[($6_1 + 1 | 0) >> 0] = 255;
                     HEAP8[$6_1 >> 0] = $13_1;
                     $6_1 = $6_1 + 2 | 0;
                     $11_1 = $11_1 + 1 | 0;
                     if ($11_1 >>> 0 < (HEAP32[$0_1 >> 2] | 0) >>> 0) {
                      continue label$130
                     }
                     break label$125;
                    };
                   }
                   $11_1 = 0;
                   if (!$13_1) {
                    break label$125
                   }
                   label$131 : while (1) {
                    HEAP8[($6_1 + $11_1 | 0) >> 0] = HEAPU8[($10_1 + $11_1 | 0) >> 0] | 0;
                    $11_1 = $11_1 + 1 | 0;
                    if ($11_1 >>> 0 < (HEAP32[$0_1 >> 2] | 0) >>> 0) {
                     continue label$131
                    }
                    break label$125;
                   };
                  }
                  FUNCTION_TABLE[HEAP32[($5_1 + 18324 | 0) >> 2] | 0 | 0]($6_1, $10_1, HEAP32[($5_1 + 4 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[$0_1 >> 2] | 0, $18_1);
                  $0_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                 }
                 $19_1 = $19_1 + 1 | 0;
                 if ($19_1 >>> 0 < (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                  continue label$121
                 }
                 break label$121;
                };
                $12_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               }
               label$132 : {
                if (($12_1 | 0) < (1 | 0)) {
                 break label$132
                }
                $11_1 = 0;
                label$133 : while (1) {
                 label$134 : {
                  $6_1 = ($5_1 + 144 | 0) + Math_imul($11_1, 72) | 0;
                  $0_1 = $6_1 + 17868 | 0;
                  $10_1 = HEAP32[$0_1 >> 2] | 0;
                  if (!$10_1) {
                   break label$134
                  }
                  $484($10_1 | 0);
                  HEAP32[$0_1 >> 2] = 0;
                  HEAP32[($6_1 + 17864 | 0) >> 2] = 0;
                 }
                 label$135 : {
                  $0_1 = $6_1 + 17872 | 0;
                  $10_1 = HEAP32[$0_1 >> 2] | 0;
                  if (!$10_1) {
                   break label$135
                  }
                  $484($10_1 | 0);
                  HEAP32[$0_1 >> 2] = 0;
                  HEAP32[($6_1 + 17880 | 0) >> 2] = 0;
                 }
                 label$136 : {
                  $6_1 = $6_1 + 17876 | 0;
                  $0_1 = HEAP32[$6_1 >> 2] | 0;
                  if (!$0_1) {
                   break label$136
                  }
                  $484($0_1 | 0);
                  HEAP32[$6_1 >> 2] = 0;
                 }
                 $11_1 = $11_1 + 1 | 0;
                 $0_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                 if (($11_1 | 0) < (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
                  continue label$133
                 }
                 break label$133;
                };
               }
               HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if (!$3_1) {
                break label$1
               }
               HEAP32[$3_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               break label$1;
              }
              $7_1 = 0;
              HEAP32[(0 + 96956 | 0) >> 2] = 66853;
              break label$1;
             }
             label$137 : {
              if (($12_1 | 0) < (1 | 0)) {
               break label$137
              }
              $7_1 = 0;
              label$138 : while (1) {
               label$139 : {
                $6_1 = ($5_1 + 144 | 0) + Math_imul($7_1, 72) | 0;
                $11_1 = $6_1 + 17868 | 0;
                $0_1 = HEAP32[$11_1 >> 2] | 0;
                if (!$0_1) {
                 break label$139
                }
                $484($0_1 | 0);
                HEAP32[$11_1 >> 2] = 0;
                HEAP32[($6_1 + 17864 | 0) >> 2] = 0;
               }
               label$140 : {
                $11_1 = $6_1 + 17872 | 0;
                $0_1 = HEAP32[$11_1 >> 2] | 0;
                if (!$0_1) {
                 break label$140
                }
                $484($0_1 | 0);
                HEAP32[$11_1 >> 2] = 0;
                HEAP32[($6_1 + 17880 | 0) >> 2] = 0;
               }
               label$141 : {
                $6_1 = $6_1 + 17876 | 0;
                $11_1 = HEAP32[$6_1 >> 2] | 0;
                if (!$11_1) {
                 break label$141
                }
                $484($11_1 | 0);
                HEAP32[$6_1 >> 2] = 0;
               }
               $7_1 = $7_1 + 1 | 0;
               if (($7_1 | 0) < (HEAP32[((HEAP32[($5_1 + 144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0)) {
                continue label$138
               }
               break label$138;
              };
             }
             $7_1 = 0;
             HEAP32[(0 + 96956 | 0) >> 2] = 66853;
             break label$1;
            }
            $24_1 = HEAP32[($5_1 + 18296 | 0) >> 2] | 0;
            $6_1 = ($5_1 + 144 | 0) + Math_imul($24_1, 72) | 0;
            $11_1 = HEAP32[($6_1 + 17852 | 0) >> 2] | 0;
            if (($11_1 | 0) < (1 | 0)) {
             break label$10
            }
            $25_1 = HEAP32[($6_1 + 17848 | 0) >> 2] | 0;
            $0_1 = ($25_1 + 7 | 0) >> 3 | 0;
            $23_1 = ($0_1 | 0) > (1 | 0) ? $0_1 : 1;
            $26_1 = ($11_1 + 7 | 0) >>> 3 | 0;
            $27_1 = $6_1 + 17836 | 0;
            $22_1 = $6_1 + 17840 | 0;
            $21_1 = $6_1 + 17884 | 0;
            $15_1 = $6_1 + 17880 | 0;
            $20_1 = 0;
            label$142 : while (1) {
             $19_1 = 0;
             label$143 : {
              if (($25_1 | 0) < (1 | 0)) {
               break label$143
              }
              label$144 : while (1) {
               $13_1 = (HEAP32[$15_1 >> 2] | 0) + ((Math_imul(HEAP32[$21_1 >> 2] | 0, $20_1) + $19_1 | 0) << 7 | 0) | 0;
               label$145 : {
                label$146 : {
                 $11_1 = HEAP32[($5_1 + 18272 | 0) >> 2] | 0;
                 if ($11_1) {
                  break label$146
                 }
                 if (!($370($5_1 + 144 | 0 | 0, $13_1 | 0, ($5_1 + 144 | 0) + Math_imul(HEAP32[$27_1 >> 2] | 0, 1680) | 0 | 4 | 0 | 0, $24_1 | 0) | 0)) {
                  break label$2
                 }
                 break label$145;
                }
                $0_1 = HEAP32[$22_1 >> 2] | 0;
                $18_1 = (($5_1 + 144 | 0) + Math_imul($0_1, 1680) | 0) + 6724 | 0;
                $6_1 = HEAP32[($5_1 + 18288 | 0) >> 2] | 0;
                $10_1 = HEAP32[($5_1 + 18284 | 0) >> 2] | 0;
                label$147 : {
                 label$148 : {
                  if (HEAP32[($5_1 + 18280 | 0) >> 2] | 0) {
                   break label$148
                  }
                  if ($6_1) {
                   break label$147
                  }
                  $14_1 = (($5_1 + 144 | 0) + ($0_1 << 10 | 0) | 0) + 13700 | 0;
                  label$149 : while (1) {
                   label$150 : {
                    if ((HEAP32[($5_1 + 18256 | 0) >> 2] | 0 | 0) > (15 | 0)) {
                     break label$150
                    }
                    $369($5_1 + 144 | 0 | 0);
                   }
                   label$151 : {
                    label$152 : {
                     $0_1 = HEAP32[($5_1 + 18252 | 0) >> 2] | 0;
                     $6_1 = HEAP16[($14_1 + (($0_1 >>> 22 | 0) & 1022 | 0) | 0) >> 1] | 0;
                     if (!$6_1) {
                      break label$152
                     }
                     $12_1 = $6_1 & 15 | 0;
                     HEAP32[($5_1 + 18252 | 0) >> 2] = $0_1 << $12_1 | 0;
                     HEAP32[($5_1 + 18256 | 0) >> 2] = (HEAP32[($5_1 + 18256 | 0) >> 2] | 0) - $12_1 | 0;
                     $11_1 = (($6_1 >>> 4 | 0) & 15 | 0) + $11_1 | 0;
                     HEAP16[($13_1 + ((HEAPU8[($11_1 + 71088 | 0) >> 0] | 0) << 1 | 0) | 0) >> 1] = ($6_1 >>> 8 | 0) << $10_1 | 0;
                     $11_1 = $11_1 + 1 | 0;
                     break label$151;
                    }
                    label$153 : {
                     $0_1 = $376($5_1 + 144 | 0 | 0, $18_1 | 0) | 0;
                     if (($0_1 | 0) >= (0 | 0)) {
                      break label$153
                     }
                     $10_1 = 67646;
                     break label$3;
                    }
                    $12_1 = $0_1 >>> 4 | 0;
                    label$154 : {
                     $6_1 = $0_1 & 15 | 0;
                     if ($6_1) {
                      break label$154
                     }
                     label$155 : {
                      if ($0_1 >>> 0 > 239 >>> 0) {
                       break label$155
                      }
                      $6_1 = 1 << $12_1 | 0;
                      HEAP32[($5_1 + 18288 | 0) >> 2] = $6_1;
                      if ($0_1 >>> 0 < 16 >>> 0) {
                       break label$147
                      }
                      label$156 : {
                       $11_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                       if (($11_1 | 0) >= ($12_1 | 0)) {
                        break label$156
                       }
                       $369($5_1 + 144 | 0 | 0);
                       $6_1 = HEAP32[($5_1 + 18288 | 0) >> 2] | 0;
                       $11_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                      }
                      HEAP32[($5_1 + 18256 | 0) >> 2] = $11_1 - $12_1 | 0;
                      $11_1 = __wasm_rotl_i32(HEAP32[($5_1 + 18252 | 0) >> 2] | 0 | 0, $12_1 | 0) | 0;
                      $0_1 = HEAP32[(($12_1 << 2 | 0) + 71168 | 0) >> 2] | 0;
                      HEAP32[($5_1 + 18252 | 0) >> 2] = $11_1 & ($0_1 ^ -1 | 0) | 0;
                      $6_1 = ($11_1 & $0_1 | 0) + $6_1 | 0;
                      break label$147;
                     }
                     $11_1 = $11_1 + 16 | 0;
                     break label$151;
                    }
                    $11_1 = $12_1 + $11_1 | 0;
                    $12_1 = HEAPU8[($11_1 + 71088 | 0) >> 0] | 0;
                    label$157 : {
                     $0_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                     if (($0_1 | 0) >= ($6_1 | 0)) {
                      break label$157
                     }
                     $369($5_1 + 144 | 0 | 0);
                     $0_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                    }
                    $11_1 = $11_1 + 1 | 0;
                    HEAP32[($5_1 + 18256 | 0) >> 2] = $0_1 - $6_1 | 0;
                    $0_1 = HEAP32[($5_1 + 18252 | 0) >> 2] | 0;
                    $16_1 = __wasm_rotl_i32($0_1 | 0, $6_1 | 0) | 0;
                    $6_1 = $6_1 << 2 | 0;
                    $17_1 = HEAP32[($6_1 + 71168 | 0) >> 2] | 0;
                    HEAP32[($5_1 + 18252 | 0) >> 2] = $16_1 & ($17_1 ^ -1 | 0) | 0;
                    HEAP16[($13_1 + ($12_1 << 1 | 0) | 0) >> 1] = ((wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($6_1 + 71248 | 0) >> 2] | 0, wasm2js_i32$2 = ($0_1 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + ($16_1 & $17_1 | 0) | 0) << $10_1 | 0;
                   }
                   if (($11_1 | 0) <= (HEAP32[($5_1 + 18276 | 0) >> 2] | 0 | 0)) {
                    continue label$149
                   }
                   break label$145;
                  };
                 }
                 label$158 : {
                  if ($6_1) {
                   break label$158
                  }
                  $14_1 = (65536 << $10_1 | 0) >> 16 | 0;
                  $17_1 = 0 - $14_1 | 0;
                  label$159 : while (1) {
                   $10_1 = 67646;
                   $6_1 = $376($5_1 + 144 | 0 | 0, $18_1 | 0) | 0;
                   if (($6_1 | 0) < (0 | 0)) {
                    break label$3
                   }
                   $0_1 = $6_1 >>> 4 | 0;
                   label$160 : {
                    label$161 : {
                     switch ($6_1 & 15 | 0 | 0) {
                     case 0:
                      $16_1 = 0;
                      $12_1 = 15;
                      if ($6_1 >>> 0 > 239 >>> 0) {
                       break label$160
                      }
                      $10_1 = (-1 << $0_1 | 0) ^ -1 | 0;
                      HEAP32[($5_1 + 18288 | 0) >> 2] = $10_1;
                      $12_1 = 64;
                      if ($6_1 >>> 0 < 16 >>> 0) {
                       break label$160
                      }
                      label$163 : {
                       $6_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                       if (($6_1 | 0) >= ($0_1 | 0)) {
                        break label$163
                       }
                       $369($5_1 + 144 | 0 | 0);
                       $10_1 = HEAP32[($5_1 + 18288 | 0) >> 2] | 0;
                       $6_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                      }
                      HEAP32[($5_1 + 18256 | 0) >> 2] = $6_1 - $0_1 | 0;
                      $6_1 = __wasm_rotl_i32(HEAP32[($5_1 + 18252 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
                      $0_1 = HEAP32[(($0_1 << 2 | 0) + 71168 | 0) >> 2] | 0;
                      HEAP32[($5_1 + 18288 | 0) >> 2] = ($6_1 & $0_1 | 0) + $10_1 | 0;
                      HEAP32[($5_1 + 18252 | 0) >> 2] = $6_1 & ($0_1 ^ -1 | 0) | 0;
                      break label$160;
                     case 1:
                      break label$161;
                     default:
                      break label$3;
                     };
                    }
                    label$164 : {
                     $6_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                     if (($6_1 | 0) > (0 | 0)) {
                      break label$164
                     }
                     $369($5_1 + 144 | 0 | 0);
                     $6_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                    }
                    HEAP32[($5_1 + 18256 | 0) >> 2] = $6_1 + -1 | 0;
                    $6_1 = HEAP32[($5_1 + 18252 | 0) >> 2] | 0;
                    HEAP32[($5_1 + 18252 | 0) >> 2] = $6_1 << 1 | 0;
                    $16_1 = ($6_1 | 0) < (0 | 0) ? $14_1 : $17_1;
                    $12_1 = $0_1;
                   }
                   label$165 : {
                    $0_1 = HEAP32[($5_1 + 18276 | 0) >> 2] | 0;
                    if (($11_1 | 0) > ($0_1 | 0)) {
                     break label$165
                    }
                    label$166 : while (1) {
                     $6_1 = $11_1;
                     $11_1 = $6_1 + 1 | 0;
                     label$167 : {
                      label$168 : {
                       $10_1 = $13_1 + ((HEAPU8[($6_1 + 71088 | 0) >> 0] | 0) << 1 | 0) | 0;
                       if (!(HEAPU16[$10_1 >> 1] | 0)) {
                        break label$168
                       }
                       label$169 : {
                        $0_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                        if (($0_1 | 0) > (0 | 0)) {
                         break label$169
                        }
                        $369($5_1 + 144 | 0 | 0);
                        $0_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                       }
                       HEAP32[($5_1 + 18256 | 0) >> 2] = $0_1 + -1 | 0;
                       $0_1 = HEAP32[($5_1 + 18252 | 0) >> 2] | 0;
                       HEAP32[($5_1 + 18252 | 0) >> 2] = $0_1 << 1 | 0;
                       if (($0_1 | 0) > (-1 | 0)) {
                        break label$167
                       }
                       $0_1 = HEAP16[$10_1 >> 1] | 0;
                       if ($14_1 & $0_1 | 0) {
                        break label$167
                       }
                       label$170 : {
                        if (($0_1 | 0) < (1 | 0)) {
                         break label$170
                        }
                        HEAP16[$10_1 >> 1] = $0_1 + $14_1 | 0;
                        break label$167;
                       }
                       HEAP16[$10_1 >> 1] = $0_1 - $14_1 | 0;
                       break label$167;
                      }
                      label$171 : {
                       if ($12_1) {
                        break label$171
                       }
                       HEAP16[$10_1 >> 1] = $16_1;
                       break label$165;
                      }
                      $12_1 = $12_1 + -1 | 0;
                     }
                     $0_1 = HEAP32[($5_1 + 18276 | 0) >> 2] | 0;
                     if (($6_1 | 0) < ($0_1 | 0)) {
                      continue label$166
                     }
                     break label$166;
                    };
                   }
                   if (($11_1 | 0) <= ($0_1 | 0)) {
                    continue label$159
                   }
                   break label$145;
                  };
                 }
                 HEAP32[($5_1 + 18288 | 0) >> 2] = $6_1 + -1 | 0;
                 if (($11_1 | 0) > (HEAP32[($5_1 + 18276 | 0) >> 2] | 0 | 0)) {
                  break label$145
                 }
                 $10_1 = (65536 << $10_1 | 0) >> 16 | 0;
                 $12_1 = 0 - $10_1 | 0;
                 label$172 : while (1) {
                  label$173 : {
                   $6_1 = $11_1;
                   $0_1 = $13_1 + ((HEAPU8[($6_1 + 71088 | 0) >> 0] | 0) << 1 | 0) | 0;
                   if (!(HEAPU16[$0_1 >> 1] | 0)) {
                    break label$173
                   }
                   label$174 : {
                    $11_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                    if (($11_1 | 0) > (0 | 0)) {
                     break label$174
                    }
                    $369($5_1 + 144 | 0 | 0);
                    $11_1 = HEAP32[($5_1 + 18256 | 0) >> 2] | 0;
                   }
                   HEAP32[($5_1 + 18256 | 0) >> 2] = $11_1 + -1 | 0;
                   $11_1 = HEAP32[($5_1 + 18252 | 0) >> 2] | 0;
                   HEAP32[($5_1 + 18252 | 0) >> 2] = $11_1 << 1 | 0;
                   if (($11_1 | 0) > (-1 | 0)) {
                    break label$173
                   }
                   $11_1 = HEAP16[$0_1 >> 1] | 0;
                   if ($10_1 & $11_1 | 0) {
                    break label$173
                   }
                   HEAP16[$0_1 >> 1] = (($11_1 | 0) > (0 | 0) ? $10_1 : $12_1) + $11_1 | 0;
                  }
                  $11_1 = $6_1 + 1 | 0;
                  if (($6_1 | 0) < (HEAP32[($5_1 + 18276 | 0) >> 2] | 0 | 0)) {
                   continue label$172
                  }
                  break label$145;
                 };
                }
                HEAP32[($5_1 + 18288 | 0) >> 2] = $6_1 + -1 | 0;
               }
               $6_1 = HEAP32[($5_1 + 18316 | 0) >> 2] | 0;
               HEAP32[($5_1 + 18316 | 0) >> 2] = $6_1 + -1 | 0;
               label$175 : {
                if (($6_1 | 0) > (1 | 0)) {
                 break label$175
                }
                label$176 : {
                 if ((HEAP32[($5_1 + 18256 | 0) >> 2] | 0 | 0) > (23 | 0)) {
                  break label$176
                 }
                 $369($5_1 + 144 | 0 | 0);
                }
                $6_1 = HEAPU8[($5_1 + 18260 | 0) >> 0] | 0;
                if (($6_1 & 248 | 0 | 0) != (208 | 0)) {
                 break label$9
                }
                HEAP32[($5_1 + 18264 | 0) >> 2] = 0;
                i64toi32_i32$0 = $5_1;
                i64toi32_i32$1 = 0;
                HEAP32[($5_1 + 18252 | 0) >> 2] = 0;
                HEAP32[($5_1 + 18256 | 0) >> 2] = i64toi32_i32$1;
                HEAP32[($5_1 + 18132 | 0) >> 2] = 0;
                HEAP32[($5_1 + 18060 | 0) >> 2] = 0;
                HEAP8[($5_1 + 18260 | 0) >> 0] = 255;
                HEAP32[($5_1 + 17988 | 0) >> 2] = 0;
                HEAP32[($5_1 + 18288 | 0) >> 2] = 0;
                $6_1 = HEAP32[($5_1 + 18312 | 0) >> 2] | 0;
                HEAP32[($5_1 + 18316 | 0) >> 2] = $6_1 ? $6_1 : 2147483647;
               }
               $19_1 = $19_1 + 1 | 0;
               if (($19_1 | 0) != ($23_1 | 0)) {
                continue label$144
               }
               break label$144;
              };
             }
             $20_1 = $20_1 + 1 | 0;
             if (($20_1 | 0) != ($26_1 | 0)) {
              continue label$142
             }
             break label$10;
            };
           }
           if (!$21_1) {
            break label$2
           }
          }
          $6_1 = HEAPU8[($5_1 + 18260 | 0) >> 0] | 0;
         }
         if (($6_1 & 255 | 0 | 0) != (255 | 0)) {
          break label$8
         }
         label$177 : while (1) {
          label$178 : {
           label$179 : {
            $6_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
            if (!(HEAP32[($6_1 + 16 | 0) >> 2] | 0)) {
             break label$179
            }
            if (!(FUNCTION_TABLE[HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0)) {
             break label$178
            }
            if (!(HEAP32[($6_1 + 32 | 0) >> 2] | 0)) {
             break label$8
            }
           }
           if ((HEAP32[($6_1 + 168 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($6_1 + 172 | 0) >> 2] | 0) >>> 0) {
            break label$8
           }
          }
          label$180 : {
           label$181 : {
            $6_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
            $11_1 = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
            if ($11_1 >>> 0 >= (HEAP32[($6_1 + 172 | 0) >> 2] | 0) >>> 0) {
             break label$181
            }
            HEAP32[($6_1 + 168 | 0) >> 2] = $11_1 + 1 | 0;
            $11_1 = HEAPU8[$11_1 >> 0] | 0;
            break label$180;
           }
           if (!(HEAP32[($6_1 + 32 | 0) >> 2] | 0)) {
            continue label$177
           }
           label$182 : {
            label$183 : {
             $11_1 = $6_1 + 40 | 0;
             $0_1 = FUNCTION_TABLE[HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($6_1 + 28 | 0) >> 2] | 0, $11_1, HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0;
             if ($0_1) {
              break label$183
             }
             $11_1 = 0;
             HEAP8[($6_1 + 40 | 0) >> 0] = 0;
             HEAP32[($6_1 + 32 | 0) >> 2] = 0;
             $0_1 = $6_1 + 41 | 0;
             break label$182;
            }
            $0_1 = $11_1 + $0_1 | 0;
            $11_1 = HEAPU8[$11_1 >> 0] | 0;
           }
           HEAP32[($6_1 + 172 | 0) >> 2] = $0_1;
           HEAP32[($6_1 + 168 | 0) >> 2] = $6_1 + 41 | 0;
          }
          $6_1 = $11_1 & 255 | 0;
          if (!$6_1) {
           continue label$177
          }
          break label$177;
         };
         $10_1 = 66464;
         if (($6_1 | 0) != (255 | 0)) {
          break label$3
         }
         label$184 : {
          $6_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
          $11_1 = HEAP32[($6_1 + 168 | 0) >> 2] | 0;
          if ($11_1 >>> 0 >= (HEAP32[($6_1 + 172 | 0) >> 2] | 0) >>> 0) {
           break label$184
          }
          HEAP32[($6_1 + 168 | 0) >> 2] = $11_1 + 1 | 0;
          HEAP8[($5_1 + 18260 | 0) >> 0] = HEAPU8[$11_1 >> 0] | 0;
          break label$8;
         }
         label$185 : {
          if (HEAP32[($6_1 + 32 | 0) >> 2] | 0) {
           break label$185
          }
          HEAP8[($5_1 + 18260 | 0) >> 0] = 0;
          break label$8;
         }
         label$186 : {
          label$187 : {
           $11_1 = $6_1 + 40 | 0;
           $0_1 = FUNCTION_TABLE[HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($6_1 + 28 | 0) >> 2] | 0, $11_1, HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0;
           if ($0_1) {
            break label$187
           }
           $11_1 = 0;
           HEAP8[($6_1 + 40 | 0) >> 0] = 0;
           HEAP32[($6_1 + 32 | 0) >> 2] = 0;
           $0_1 = $6_1 + 41 | 0;
           break label$186;
          }
          $0_1 = $11_1 + $0_1 | 0;
          $11_1 = HEAPU8[$11_1 >> 0] | 0;
         }
         HEAP32[($6_1 + 172 | 0) >> 2] = $0_1;
         HEAP32[($6_1 + 168 | 0) >> 2] = $6_1 + 41 | 0;
         HEAP8[($5_1 + 18260 | 0) >> 0] = $11_1;
        }
        $6_1 = $367($5_1 + 144 | 0 | 0) | 0;
        continue label$7;
       };
      }
      $7_1 = 0;
      HEAP32[(0 + 96956 | 0) >> 2] = 66636;
      break label$1;
     }
     $6_1 = 0;
     HEAP32[(0 + 96956 | 0) >> 2] = 68224;
     $7_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
     $10_1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
     HEAP32[($0_1 + 172 | 0) >> 2] = $10_1;
     $8_1 = $0_1 + 41 | 0;
     $16_1 = $0_1 + 36 | 0;
     $12_1 = $0_1 + 40 | 0;
     $20_1 = $0_1 + 28 | 0;
     $18_1 = $0_1 + 16 | 0;
     $9_1 = $0_1 + 32 | 0;
     $19_1 = $0_1 + 172 | 0;
     $13_1 = $0_1 + 168 | 0;
     label$188 : {
      label$189 : {
       label$190 : {
        label$191 : {
         label$192 : {
          label$193 : {
           label$194 : {
            label$195 : while (1) {
             label$196 : {
              label$197 : {
               if ($7_1 >>> 0 >= $10_1 >>> 0) {
                break label$197
               }
               $14_1 = $7_1 + 1 | 0;
               HEAP32[$13_1 >> 2] = $14_1;
               $11_1 = HEAPU8[$7_1 >> 0] | 0;
               $7_1 = $14_1;
               break label$196;
              }
              label$198 : {
               if (HEAP32[$9_1 >> 2] | 0) {
                break label$198
               }
               $11_1 = 0;
               break label$196;
              }
              label$199 : {
               label$200 : {
                $7_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                if ($7_1) {
                 break label$200
                }
                $11_1 = 0;
                HEAP32[$9_1 >> 2] = 0;
                HEAP8[$12_1 >> 0] = 0;
                $10_1 = $8_1;
                break label$199;
               }
               $10_1 = $12_1 + $7_1 | 0;
               $11_1 = HEAPU8[$12_1 >> 0] | 0;
              }
              HEAP32[$19_1 >> 2] = $10_1;
              HEAP32[$13_1 >> 2] = $8_1;
              $7_1 = $8_1;
             }
             label$201 : {
              if (($11_1 & 255 | 0 | 0) != (HEAPU8[($6_1 + 71312 | 0) >> 0] | 0 | 0)) {
               break label$201
              }
              $6_1 = $6_1 + 1 | 0;
              if (($6_1 | 0) == (8 | 0)) {
               break label$194
              }
              continue label$195;
             }
             break label$195;
            };
            HEAP32[(0 + 96956 | 0) >> 2] = 67321;
            $7_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
            HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
            $6_1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
            HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
            if ($7_1 >>> 0 >= $6_1 >>> 0) {
             break label$193
            }
            $11_1 = $7_1 + 1 | 0;
            HEAP32[$13_1 >> 2] = $11_1;
            $7_1 = HEAPU8[$7_1 >> 0] | 0;
            break label$192;
           }
           i64toi32_i32$1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
           $2249 = i64toi32_i32$1;
           i64toi32_i32$1 = $0_1;
           HEAP32[($0_1 + 168 | 0) >> 2] = $2249;
           HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($5_1 + 144 | 0) >> 2] = $0_1;
           label$202 : {
            if ($4_1 >>> 0 < 5 >>> 0) {
             break label$202
            }
            $7_1 = 0;
            HEAP32[(0 + 96956 | 0) >> 2] = 66636;
            break label$1;
           }
           $6_1 = $357($5_1 + 144 | 0 | 0, 0 | 0, $4_1 | 0) | 0;
           $7_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
           label$203 : {
            label$204 : {
             if ($6_1) {
              break label$204
             }
             $11_1 = $7_1;
             $7_1 = 0;
             break label$203;
            }
            $6_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
            label$205 : {
             if (!$4_1) {
              break label$205
             }
             $11_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
             if (($11_1 | 0) == ($4_1 | 0)) {
              break label$205
             }
             $7_1 = $377($7_1 | 0, $11_1 | 0, $4_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
             HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
             if ($7_1) {
              break label$205
             }
             $7_1 = 0;
             break label$1;
            }
            HEAP32[$1_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
            HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
            $11_1 = 0;
            if (!$3_1) {
             break label$203
            }
            HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
           }
           $484($11_1 | 0);
           $484(HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0);
           $484(HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0);
           break label$1;
          }
          if (!(HEAP32[$9_1 >> 2] | 0)) {
           break label$191
          }
          label$206 : {
           label$207 : {
            $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
            if ($6_1) {
             break label$207
            }
            $7_1 = 0;
            HEAP32[$9_1 >> 2] = 0;
            HEAP8[$12_1 >> 0] = 0;
            $6_1 = $8_1;
            break label$206;
           }
           $6_1 = $12_1 + $6_1 | 0;
           $7_1 = HEAPU8[$12_1 >> 0] | 0;
          }
          HEAP32[$19_1 >> 2] = $6_1;
          HEAP32[$13_1 >> 2] = $8_1;
          $11_1 = $8_1;
         }
         if (($7_1 & 255 | 0 | 0) != (66 | 0)) {
          break label$191
         }
         label$208 : {
          label$209 : {
           if ($11_1 >>> 0 >= $6_1 >>> 0) {
            break label$209
           }
           HEAP32[$13_1 >> 2] = $11_1 + 1 | 0;
           $6_1 = HEAPU8[$11_1 >> 0] | 0;
           break label$208;
          }
          if (!(HEAP32[$9_1 >> 2] | 0)) {
           break label$191
          }
          label$210 : {
           label$211 : {
            $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
            if ($6_1) {
             break label$211
            }
            $6_1 = 0;
            HEAP32[$9_1 >> 2] = 0;
            HEAP8[$12_1 >> 0] = 0;
            $7_1 = $8_1;
            break label$210;
           }
           $7_1 = $12_1 + $6_1 | 0;
           $6_1 = HEAPU8[$12_1 >> 0] | 0;
          }
          HEAP32[$19_1 >> 2] = $7_1;
          HEAP32[$13_1 >> 2] = $8_1;
         }
         if (($6_1 & 255 | 0 | 0) != (77 | 0)) {
          break label$191
         }
         $359($0_1 | 0) | 0;
         label$212 : {
          label$213 : {
           label$214 : {
            $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
            $7_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
            if ($6_1 >>> 0 >= $7_1 >>> 0) {
             break label$214
            }
            $6_1 = $6_1 + 1 | 0;
            break label$213;
           }
           if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$212
           }
           label$215 : {
            label$216 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$216
             }
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $7_1 = $8_1;
             break label$215;
            }
            $7_1 = $12_1 + $6_1 | 0;
           }
           HEAP32[$19_1 >> 2] = $7_1;
           $6_1 = $8_1;
          }
          HEAP32[$13_1 >> 2] = $6_1;
         }
         label$217 : {
          label$218 : {
           label$219 : {
            if ($6_1 >>> 0 >= $7_1 >>> 0) {
             break label$219
            }
            $6_1 = $6_1 + 1 | 0;
            break label$218;
           }
           if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$217
           }
           label$220 : {
            label$221 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$221
             }
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $7_1 = $8_1;
             break label$220;
            }
            $7_1 = $12_1 + $6_1 | 0;
           }
           HEAP32[$19_1 >> 2] = $7_1;
           $6_1 = $8_1;
          }
          HEAP32[$13_1 >> 2] = $6_1;
         }
         label$222 : {
          label$223 : {
           label$224 : {
            if ($6_1 >>> 0 >= $7_1 >>> 0) {
             break label$224
            }
            $6_1 = $6_1 + 1 | 0;
            break label$223;
           }
           if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$222
           }
           label$225 : {
            label$226 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$226
             }
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $7_1 = $8_1;
             break label$225;
            }
            $7_1 = $12_1 + $6_1 | 0;
           }
           HEAP32[$19_1 >> 2] = $7_1;
           $6_1 = $8_1;
          }
          HEAP32[$13_1 >> 2] = $6_1;
         }
         label$227 : {
          label$228 : {
           label$229 : {
            if ($6_1 >>> 0 >= $7_1 >>> 0) {
             break label$229
            }
            $6_1 = $6_1 + 1 | 0;
            break label$228;
           }
           if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$227
           }
           label$230 : {
            label$231 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$231
             }
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $6_1 = $8_1;
             break label$230;
            }
            $6_1 = $12_1 + $6_1 | 0;
           }
           HEAP32[$19_1 >> 2] = $6_1;
           $6_1 = $8_1;
          }
          HEAP32[$13_1 >> 2] = $6_1;
         }
         $359($0_1 | 0) | 0;
         label$232 : {
          label$233 : {
           label$234 : {
            label$235 : {
             $11_1 = $359($0_1 | 0) | 0;
             switch ($11_1 + -40 | 0 | 0) {
             case 1:
             case 2:
             case 3:
             case 4:
             case 5:
             case 6:
             case 7:
             case 8:
             case 9:
             case 10:
             case 11:
             case 12:
             case 13:
             case 14:
             case 15:
              break label$233;
             case 0:
             case 16:
              break label$234;
             default:
              break label$235;
             };
            }
            if (($11_1 | 0) == (12 | 0)) {
             break label$234
            }
            if (($11_1 | 0) != (108 | 0)) {
             break label$233
            }
           }
           $7_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
           HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
           $6_1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
           HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
           break label$232;
          }
          $7_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
          HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
          $6_1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
          HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
          if (($11_1 | 0) != (124 | 0)) {
           break label$190
          }
         }
         label$236 : {
          label$237 : {
           label$238 : {
            label$239 : {
             if ($7_1 >>> 0 >= $6_1 >>> 0) {
              break label$239
             }
             $11_1 = $7_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $11_1;
             $7_1 = HEAPU8[$7_1 >> 0] | 0;
             break label$238;
            }
            if (!(HEAP32[$9_1 >> 2] | 0)) {
             break label$237
            }
            label$240 : {
             label$241 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$241
              }
              $7_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $6_1 = $8_1;
              break label$240;
             }
             $6_1 = $12_1 + $6_1 | 0;
             $7_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $6_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $11_1 = $8_1;
           }
           if (($7_1 & 255 | 0 | 0) != (66 | 0)) {
            break label$237
           }
           label$242 : {
            label$243 : {
             if ($11_1 >>> 0 >= $6_1 >>> 0) {
              break label$243
             }
             HEAP32[$13_1 >> 2] = $11_1 + 1 | 0;
             $6_1 = HEAPU8[$11_1 >> 0] | 0;
             break label$242;
            }
            if (!(HEAP32[$9_1 >> 2] | 0)) {
             break label$237
            }
            label$244 : {
             label$245 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$245
              }
              $6_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $7_1 = $8_1;
              break label$244;
             }
             $7_1 = $12_1 + $6_1 | 0;
             $6_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $7_1;
            HEAP32[$13_1 >> 2] = $8_1;
           }
           if (($6_1 & 255 | 0 | 0) == (77 | 0)) {
            break label$236
           }
          }
          $7_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 68145;
          break label$1;
         }
         $359($0_1 | 0) | 0;
         label$246 : {
          label$247 : {
           label$248 : {
            $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
            $7_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
            if ($6_1 >>> 0 >= $7_1 >>> 0) {
             break label$248
            }
            $6_1 = $6_1 + 1 | 0;
            break label$247;
           }
           if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$246
           }
           label$249 : {
            label$250 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$250
             }
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $7_1 = $8_1;
             break label$249;
            }
            $7_1 = $12_1 + $6_1 | 0;
           }
           HEAP32[$19_1 >> 2] = $7_1;
           $6_1 = $8_1;
          }
          HEAP32[$13_1 >> 2] = $6_1;
         }
         label$251 : {
          label$252 : {
           label$253 : {
            if ($6_1 >>> 0 >= $7_1 >>> 0) {
             break label$253
            }
            $6_1 = $6_1 + 1 | 0;
            break label$252;
           }
           if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$251
           }
           label$254 : {
            label$255 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$255
             }
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $7_1 = $8_1;
             break label$254;
            }
            $7_1 = $12_1 + $6_1 | 0;
           }
           HEAP32[$19_1 >> 2] = $7_1;
           $6_1 = $8_1;
          }
          HEAP32[$13_1 >> 2] = $6_1;
         }
         label$256 : {
          label$257 : {
           label$258 : {
            if ($6_1 >>> 0 >= $7_1 >>> 0) {
             break label$258
            }
            $6_1 = $6_1 + 1 | 0;
            break label$257;
           }
           if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$256
           }
           label$259 : {
            label$260 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$260
             }
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $7_1 = $8_1;
             break label$259;
            }
            $7_1 = $12_1 + $6_1 | 0;
           }
           HEAP32[$19_1 >> 2] = $7_1;
           $6_1 = $8_1;
          }
          HEAP32[$13_1 >> 2] = $6_1;
         }
         label$261 : {
          label$262 : {
           label$263 : {
            if ($6_1 >>> 0 >= $7_1 >>> 0) {
             break label$263
            }
            $6_1 = $6_1 + 1 | 0;
            break label$262;
           }
           if (!(HEAP32[$9_1 >> 2] | 0)) {
            break label$261
           }
           label$264 : {
            label$265 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$265
             }
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $6_1 = $8_1;
             break label$264;
            }
            $6_1 = $12_1 + $6_1 | 0;
           }
           HEAP32[$19_1 >> 2] = $6_1;
           $6_1 = $8_1;
          }
          HEAP32[$13_1 >> 2] = $6_1;
         }
         $17_1 = $359($0_1 | 0) | 0;
         label$266 : {
          label$267 : {
           label$268 : {
            $10_1 = $359($0_1 | 0) | 0;
            switch ($10_1 + -40 | 0 | 0) {
            case 0:
            case 16:
             break label$266;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
             break label$267;
            default:
             break label$268;
            };
           }
           label$269 : {
            switch ($10_1 + -108 | 0 | 0) {
            case 0:
            case 16:
             break label$266;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
             break label$267;
            default:
             break label$269;
            };
           }
           if (($10_1 | 0) == (12 | 0)) {
            break label$266
           }
          }
          $7_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 68153;
          break label$1;
         }
         label$270 : {
          label$271 : {
           if (($10_1 | 0) != (12 | 0)) {
            break label$271
           }
           label$272 : {
            label$273 : {
             $11_1 = HEAP32[$13_1 >> 2] | 0;
             $6_1 = HEAP32[$19_1 >> 2] | 0;
             if ($11_1 >>> 0 >= $6_1 >>> 0) {
              break label$273
             }
             $7_1 = $11_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $7_1;
             $14_1 = HEAPU8[$11_1 >> 0] | 0;
             break label$272;
            }
            label$274 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$274
             }
             $14_1 = 0;
             $7_1 = $11_1;
             break label$272;
            }
            label$275 : {
             label$276 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$276
              }
              $14_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $6_1 = $8_1;
              break label$275;
             }
             $6_1 = $12_1 + $6_1 | 0;
             $14_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $6_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $7_1 = $8_1;
           }
           label$277 : {
            label$278 : {
             if ($7_1 >>> 0 >= $6_1 >>> 0) {
              break label$278
             }
             $11_1 = $7_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $11_1;
             $21_1 = HEAPU8[$7_1 >> 0] | 0;
             break label$277;
            }
            label$279 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$279
             }
             $21_1 = 0;
             $11_1 = $7_1;
             break label$277;
            }
            label$280 : {
             label$281 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$281
              }
              $21_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $6_1 = $8_1;
              break label$280;
             }
             $6_1 = $12_1 + $6_1 | 0;
             $21_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $6_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $11_1 = $8_1;
           }
           HEAP32[$0_1 >> 2] = ($21_1 & 255 | 0) << 8 | 0 | ($14_1 & 255 | 0) | 0;
           label$282 : {
            label$283 : {
             if ($11_1 >>> 0 >= $6_1 >>> 0) {
              break label$283
             }
             $14_1 = $11_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $14_1;
             $21_1 = HEAPU8[$11_1 >> 0] | 0;
             break label$282;
            }
            label$284 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$284
             }
             $21_1 = 0;
             $14_1 = $11_1;
             break label$282;
            }
            label$285 : {
             label$286 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$286
              }
              $21_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $6_1 = $8_1;
              break label$285;
             }
             $6_1 = $12_1 + $6_1 | 0;
             $21_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $6_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $14_1 = $8_1;
           }
           label$287 : {
            label$288 : {
             if ($14_1 >>> 0 >= $6_1 >>> 0) {
              break label$288
             }
             $7_1 = $14_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $7_1;
             $11_1 = HEAPU8[$14_1 >> 0] | 0;
             break label$287;
            }
            label$289 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$289
             }
             $11_1 = 0;
             $7_1 = $14_1;
             break label$287;
            }
            label$290 : {
             label$291 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$291
              }
              $11_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $6_1 = $8_1;
              break label$290;
             }
             $6_1 = $12_1 + $6_1 | 0;
             $11_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $6_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $7_1 = $8_1;
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = ($11_1 & 255 | 0) << 8 | 0 | ($21_1 & 255 | 0) | 0;
           break label$270;
          }
          HEAP32[$0_1 >> 2] = $359($0_1 | 0) | 0;
          HEAP32[($0_1 + 4 | 0) >> 2] = $359($0_1 | 0) | 0;
          $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
          $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
         }
         label$292 : {
          label$293 : {
           if ($7_1 >>> 0 >= $6_1 >>> 0) {
            break label$293
           }
           $11_1 = $7_1 + 1 | 0;
           HEAP32[$13_1 >> 2] = $11_1;
           $14_1 = HEAPU8[$7_1 >> 0] | 0;
           break label$292;
          }
          label$294 : {
           if (HEAP32[$9_1 >> 2] | 0) {
            break label$294
           }
           $14_1 = 0;
           $11_1 = $7_1;
           break label$292;
          }
          label$295 : {
           label$296 : {
            $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
            if ($6_1) {
             break label$296
            }
            $14_1 = 0;
            HEAP32[$9_1 >> 2] = 0;
            HEAP8[$12_1 >> 0] = 0;
            $6_1 = $8_1;
            break label$295;
           }
           $6_1 = $12_1 + $6_1 | 0;
           $14_1 = HEAPU8[$12_1 >> 0] | 0;
          }
          HEAP32[$19_1 >> 2] = $6_1;
          HEAP32[$13_1 >> 2] = $8_1;
          $11_1 = $8_1;
         }
         label$297 : {
          label$298 : {
           if ($11_1 >>> 0 >= $6_1 >>> 0) {
            break label$298
           }
           $7_1 = $11_1 + 1 | 0;
           HEAP32[$13_1 >> 2] = $7_1;
           $21_1 = HEAPU8[$11_1 >> 0] | 0;
           break label$297;
          }
          label$299 : {
           if (HEAP32[$9_1 >> 2] | 0) {
            break label$299
           }
           $21_1 = 0;
           $7_1 = $11_1;
           break label$297;
          }
          label$300 : {
           label$301 : {
            $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
            if ($6_1) {
             break label$301
            }
            $21_1 = 0;
            HEAP32[$9_1 >> 2] = 0;
            HEAP8[$12_1 >> 0] = 0;
            $6_1 = $8_1;
            break label$300;
           }
           $6_1 = $12_1 + $6_1 | 0;
           $21_1 = HEAPU8[$12_1 >> 0] | 0;
          }
          HEAP32[$19_1 >> 2] = $6_1;
          HEAP32[$13_1 >> 2] = $8_1;
          $7_1 = $8_1;
         }
         label$302 : {
          if ((($21_1 & 255 | 0) << 8 | 0 | ($14_1 & 255 | 0) | 0 | 0) == (1 | 0)) {
           break label$302
          }
          $7_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 68165;
          break label$1;
         }
         label$303 : {
          label$304 : {
           if ($7_1 >>> 0 >= $6_1 >>> 0) {
            break label$304
           }
           $11_1 = $7_1 + 1 | 0;
           HEAP32[$13_1 >> 2] = $11_1;
           $14_1 = HEAPU8[$7_1 >> 0] | 0;
           break label$303;
          }
          label$305 : {
           if (HEAP32[$9_1 >> 2] | 0) {
            break label$305
           }
           $14_1 = 0;
           $11_1 = $7_1;
           break label$303;
          }
          label$306 : {
           label$307 : {
            $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
            if ($6_1) {
             break label$307
            }
            $14_1 = 0;
            HEAP32[$9_1 >> 2] = 0;
            HEAP8[$12_1 >> 0] = 0;
            $6_1 = $8_1;
            break label$306;
           }
           $6_1 = $12_1 + $6_1 | 0;
           $14_1 = HEAPU8[$12_1 >> 0] | 0;
          }
          HEAP32[$19_1 >> 2] = $6_1;
          HEAP32[$13_1 >> 2] = $8_1;
          $11_1 = $8_1;
         }
         label$308 : {
          label$309 : {
           if ($11_1 >>> 0 >= $6_1 >>> 0) {
            break label$309
           }
           HEAP32[$13_1 >> 2] = $11_1 + 1 | 0;
           $6_1 = HEAPU8[$11_1 >> 0] | 0;
           break label$308;
          }
          label$310 : {
           if (HEAP32[$9_1 >> 2] | 0) {
            break label$310
           }
           $6_1 = 0;
           break label$308;
          }
          label$311 : {
           label$312 : {
            $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
            if ($6_1) {
             break label$312
            }
            $6_1 = 0;
            HEAP32[$9_1 >> 2] = 0;
            HEAP8[$12_1 >> 0] = 0;
            $7_1 = $8_1;
            break label$311;
           }
           $7_1 = $12_1 + $6_1 | 0;
           $6_1 = HEAPU8[$12_1 >> 0] | 0;
          }
          HEAP32[$19_1 >> 2] = $7_1;
          HEAP32[$13_1 >> 2] = $8_1;
         }
         label$313 : {
          $28_1 = ($6_1 & 255 | 0) << 8 | 0 | ($14_1 & 255 | 0) | 0;
          if (($28_1 | 0) != (1 | 0)) {
           break label$313
          }
          $7_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 67505;
          break label$1;
         }
         $29_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         $6_1 = $29_1 >> 31 | 0;
         HEAP32[($0_1 + 4 | 0) >> 2] = ($29_1 ^ $6_1 | 0) - $6_1 | 0;
         label$314 : {
          if (($10_1 | 0) != (12 | 0)) {
           break label$314
          }
          $24_1 = 255;
          $30_1 = 0;
          label$315 : {
           if ($28_1 >>> 0 <= 23 >>> 0) {
            break label$315
           }
           $22_1 = 0;
           break label$189;
          }
          $22_1 = ($17_1 + -38 | 0 | 0) / (3 | 0) | 0;
          break label$189;
         }
         label$316 : {
          $6_1 = $359($0_1 | 0) | 0;
          if (($6_1 + -1 | 0) >>> 0 > 1 >>> 0) {
           break label$316
          }
          $7_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 68299;
          break label$1;
         }
         $359($0_1 | 0) | 0;
         $359($0_1 | 0) | 0;
         $359($0_1 | 0) | 0;
         $359($0_1 | 0) | 0;
         $359($0_1 | 0) | 0;
         label$317 : {
          label$318 : {
           switch ($10_1 + -40 | 0 | 0) {
           case 16:
            $359($0_1 | 0) | 0;
            $359($0_1 | 0) | 0;
            $359($0_1 | 0) | 0;
            $359($0_1 | 0) | 0;
           case 0:
            $30_1 = 0;
            $31_1 = 0;
            $32_1 = 0;
            $33_1 = 0;
            label$321 : {
             switch ($28_1 + -16 | 0 | 0) {
             case 0:
             case 16:
              break label$321;
             default:
              break label$317;
             };
            }
            label$322 : {
             switch ($6_1 | 0) {
             case 0:
              $6_1 = ($28_1 | 0) == (32 | 0);
              $33_1 = $6_1 ? 16711680 : 31744;
              $32_1 = $6_1 ? 65280 : 992;
              $31_1 = $6_1 ? 255 : 31;
              $22_1 = 0;
              $30_1 = $6_1 ? -16777216 : 0;
              $24_1 = $6_1 ? 0 : 255;
              break label$188;
             case 3:
              $33_1 = $359($0_1 | 0) | 0;
              $32_1 = $359($0_1 | 0) | 0;
              $24_1 = 255;
              $22_1 = 0;
              $31_1 = $359($0_1 | 0) | 0;
              label$325 : {
               if (($33_1 | 0) == ($32_1 | 0)) {
                break label$325
               }
               $30_1 = 0;
               break label$188;
              }
              $30_1 = 0;
              if (($32_1 | 0) != ($31_1 | 0)) {
               break label$188
              }
              $7_1 = 0;
              HEAP32[(0 + 96956 | 0) >> 2] = 68165;
              break label$1;
             default:
              break label$322;
             };
            }
            $7_1 = 0;
            HEAP32[(0 + 96956 | 0) >> 2] = 68165;
            break label$1;
           default:
            break label$318;
           };
          }
          label$326 : {
           switch ($10_1 + -108 | 0 | 0) {
           default:
            fimport$54(68993 | 0, 67153 | 0, 4672 | 0, 67808 | 0);
            wasm2js_trap();
           case 0:
           case 16:
            break label$326;
           };
          }
          $33_1 = $359($0_1 | 0) | 0;
          $32_1 = $359($0_1 | 0) | 0;
          $31_1 = $359($0_1 | 0) | 0;
          $30_1 = $359($0_1 | 0) | 0;
          $359($0_1 | 0) | 0;
          $6_1 = 0;
          label$328 : while (1) {
           $359($0_1 | 0) | 0;
           $6_1 = $6_1 + 1 | 0;
           if (($6_1 | 0) != (12 | 0)) {
            continue label$328
           }
           break label$328;
          };
          if (($10_1 | 0) != (124 | 0)) {
           break label$317
          }
          $359($0_1 | 0) | 0;
          $359($0_1 | 0) | 0;
          $359($0_1 | 0) | 0;
          $359($0_1 | 0) | 0;
         }
         $24_1 = 255;
         $22_1 = 0;
         if ($28_1 >>> 0 > 15 >>> 0) {
          break label$188
         }
         $22_1 = (($17_1 - $10_1 | 0) + -14 | 0) >> 2 | 0;
         break label$188;
        }
        $7_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
        HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
        $6_1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
        HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
       }
       label$329 : {
        label$330 : {
         label$331 : {
          label$332 : {
           label$333 : {
            label$334 : {
             label$335 : {
              label$336 : {
               if ($7_1 >>> 0 >= $6_1 >>> 0) {
                break label$336
               }
               $11_1 = $7_1 + 1 | 0;
               HEAP32[$13_1 >> 2] = $11_1;
               $7_1 = HEAPU8[$7_1 >> 0] | 0;
               break label$335;
              }
              if (!(HEAP32[$9_1 >> 2] | 0)) {
               break label$334
              }
              label$337 : {
               label$338 : {
                $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                if ($6_1) {
                 break label$338
                }
                $7_1 = 0;
                HEAP32[$9_1 >> 2] = 0;
                HEAP8[$12_1 >> 0] = 0;
                $6_1 = $8_1;
                break label$337;
               }
               $6_1 = $12_1 + $6_1 | 0;
               $7_1 = HEAPU8[$12_1 >> 0] | 0;
              }
              HEAP32[$19_1 >> 2] = $6_1;
              HEAP32[$13_1 >> 2] = $8_1;
              $11_1 = $8_1;
             }
             if (($7_1 & 255 | 0 | 0) != (71 | 0)) {
              break label$334
             }
             label$339 : {
              label$340 : {
               if ($11_1 >>> 0 >= $6_1 >>> 0) {
                break label$340
               }
               $7_1 = $11_1 + 1 | 0;
               HEAP32[$13_1 >> 2] = $7_1;
               $11_1 = HEAPU8[$11_1 >> 0] | 0;
               break label$339;
              }
              if (!(HEAP32[$9_1 >> 2] | 0)) {
               break label$334
              }
              label$341 : {
               label$342 : {
                $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                if ($6_1) {
                 break label$342
                }
                $11_1 = 0;
                HEAP32[$9_1 >> 2] = 0;
                HEAP8[$12_1 >> 0] = 0;
                $6_1 = $8_1;
                break label$341;
               }
               $6_1 = $12_1 + $6_1 | 0;
               $11_1 = HEAPU8[$12_1 >> 0] | 0;
              }
              HEAP32[$19_1 >> 2] = $6_1;
              HEAP32[$13_1 >> 2] = $8_1;
              $7_1 = $8_1;
             }
             if (($11_1 & 255 | 0 | 0) != (73 | 0)) {
              break label$334
             }
             label$343 : {
              label$344 : {
               if ($7_1 >>> 0 >= $6_1 >>> 0) {
                break label$344
               }
               $11_1 = $7_1 + 1 | 0;
               HEAP32[$13_1 >> 2] = $11_1;
               $7_1 = HEAPU8[$7_1 >> 0] | 0;
               break label$343;
              }
              if (!(HEAP32[$9_1 >> 2] | 0)) {
               break label$334
              }
              label$345 : {
               label$346 : {
                $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                if ($6_1) {
                 break label$346
                }
                $7_1 = 0;
                HEAP32[$9_1 >> 2] = 0;
                HEAP8[$12_1 >> 0] = 0;
                $6_1 = $8_1;
                break label$345;
               }
               $6_1 = $12_1 + $6_1 | 0;
               $7_1 = HEAPU8[$12_1 >> 0] | 0;
              }
              HEAP32[$19_1 >> 2] = $6_1;
              HEAP32[$13_1 >> 2] = $8_1;
              $11_1 = $8_1;
             }
             if (($7_1 & 255 | 0 | 0) != (70 | 0)) {
              break label$334
             }
             label$347 : {
              label$348 : {
               if ($11_1 >>> 0 >= $6_1 >>> 0) {
                break label$348
               }
               $7_1 = $11_1 + 1 | 0;
               HEAP32[$13_1 >> 2] = $7_1;
               $11_1 = HEAPU8[$11_1 >> 0] | 0;
               break label$347;
              }
              if (!(HEAP32[$9_1 >> 2] | 0)) {
               break label$334
              }
              label$349 : {
               label$350 : {
                $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                if ($6_1) {
                 break label$350
                }
                $11_1 = 0;
                HEAP32[$9_1 >> 2] = 0;
                HEAP8[$12_1 >> 0] = 0;
                $6_1 = $8_1;
                break label$349;
               }
               $6_1 = $12_1 + $6_1 | 0;
               $11_1 = HEAPU8[$12_1 >> 0] | 0;
              }
              HEAP32[$19_1 >> 2] = $6_1;
              HEAP32[$13_1 >> 2] = $8_1;
              $7_1 = $8_1;
             }
             if (($11_1 & 255 | 0 | 0) != (56 | 0)) {
              break label$334
             }
             label$351 : {
              label$352 : {
               if ($7_1 >>> 0 >= $6_1 >>> 0) {
                break label$352
               }
               $11_1 = $7_1 + 1 | 0;
               HEAP32[$13_1 >> 2] = $11_1;
               $7_1 = HEAPU8[$7_1 >> 0] | 0;
               break label$351;
              }
              if (!(HEAP32[$9_1 >> 2] | 0)) {
               break label$334
              }
              label$353 : {
               label$354 : {
                $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                if ($6_1) {
                 break label$354
                }
                $7_1 = 0;
                HEAP32[$9_1 >> 2] = 0;
                HEAP8[$12_1 >> 0] = 0;
                $6_1 = $8_1;
                break label$353;
               }
               $6_1 = $12_1 + $6_1 | 0;
               $7_1 = HEAPU8[$12_1 >> 0] | 0;
              }
              HEAP32[$19_1 >> 2] = $6_1;
              HEAP32[$13_1 >> 2] = $8_1;
              $11_1 = $8_1;
             }
             label$355 : {
              switch (($7_1 & 255 | 0) + -55 | 0 | 0) {
              case 0:
              case 2:
               break label$355;
              default:
               break label$334;
              };
             }
             label$356 : {
              label$357 : {
               if ($11_1 >>> 0 >= $6_1 >>> 0) {
                break label$357
               }
               HEAP32[$13_1 >> 2] = $11_1 + 1 | 0;
               $6_1 = HEAPU8[$11_1 >> 0] | 0;
               break label$356;
              }
              if (!(HEAP32[$9_1 >> 2] | 0)) {
               break label$334
              }
              label$358 : {
               if (FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0) {
                break label$358
               }
               $6_1 = 0;
               HEAP32[$9_1 >> 2] = 0;
               HEAP8[$12_1 >> 0] = 0;
               break label$356;
              }
              $6_1 = HEAPU8[$12_1 >> 0] | 0;
             }
             i64toi32_i32$0 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
             $3343 = i64toi32_i32$0;
             i64toi32_i32$0 = $0_1;
             HEAP32[($0_1 + 168 | 0) >> 2] = $3343;
             HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
             if (($6_1 & 255 | 0 | 0) != (97 | 0)) {
              break label$333
             }
             $7_1 = 0;
             $411($5_1 + 144 | 0 | 0, 0 | 0, 18516 | 0) | 0;
             if (!($358($0_1 | 0, $5_1 + 144 | 0 | 0, $3_1 | 0, 0 | 0) | 0)) {
              break label$329
             }
             $6_1 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
             $15_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
             $3_1 = $15_1 << 2 | 0;
             $17_1 = Math_imul(HEAP32[($5_1 + 148 | 0) >> 2] | 0, $3_1);
             $11_1 = $483($17_1 | 0) | 0;
             HEAP32[($5_1 + 152 | 0) >> 2] = $11_1;
             label$359 : {
              if ($11_1) {
               break label$359
              }
              $7_1 = 0;
              HEAP32[(0 + 96956 | 0) >> 2] = 66853;
              break label$1;
             }
             label$360 : {
              label$361 : {
               switch (((HEAP32[($5_1 + 176 | 0) >> 2] | 0) >>> 2 | 0) & 7 | 0 | 0) {
               case 0:
                if (($17_1 | 0) < (1 | 0)) {
                 break label$360
                }
                $10_1 = (($5_1 + 144 | 0) + ((HEAP32[($5_1 + 164 | 0) >> 2] | 0) << 2 | 0) | 0) + 40 | 0;
                $23_1 = ($15_1 | 0) < (1 | 0);
                $21_1 = 0;
                label$365 : while (1) {
                 $11_1 = 0;
                 label$366 : {
                  if ($23_1) {
                   break label$366
                  }
                  label$367 : while (1) {
                   $6_1 = (HEAP32[($5_1 + 152 | 0) >> 2] | 0) + ($11_1 + $21_1 | 0) | 0;
                   HEAP8[$6_1 >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
                   HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
                   $14_1 = HEAPU8[$10_1 >> 0] | 0;
                   HEAP8[($6_1 + 3 | 0) >> 0] = 0;
                   HEAP8[($6_1 + 2 | 0) >> 0] = $14_1;
                   $11_1 = $11_1 + 4 | 0;
                   if (($11_1 | 0) < ($3_1 | 0)) {
                    continue label$367
                   }
                   break label$367;
                  };
                  $15_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                 }
                 $21_1 = ($15_1 << 2 | 0) + $21_1 | 0;
                 if (($21_1 | 0) < ($17_1 | 0)) {
                  continue label$365
                 }
                 break label$360;
                };
               case 1:
                label$368 : {
                 if (!$6_1) {
                  break label$368
                 }
                 $410($11_1 | 0, $6_1 | 0, $17_1 | 0) | 0;
                }
                HEAP32[($5_1 + 156 | 0) >> 2] = $6_1;
                break label$360;
               case 2:
                label$369 : {
                 if (!$6_1) {
                  break label$369
                 }
                 $410($11_1 | 0, $6_1 | 0, $17_1 | 0) | 0;
                }
                $21_1 = HEAP32[($5_1 + 18636 | 0) >> 2] | 0;
                $23_1 = HEAP32[($5_1 + 18644 | 0) >> 2] | 0;
                if (($21_1 | 0) >= ($23_1 | 0)) {
                 break label$360
                }
                $10_1 = (($5_1 + 144 | 0) + ((HEAP32[($5_1 + 164 | 0) >> 2] | 0) << 2 | 0) | 0) + 40 | 0;
                $3_1 = HEAP32[($5_1 + 18640 | 0) >> 2] | 0;
                $17_1 = HEAP32[($5_1 + 18632 | 0) >> 2] | 0;
                label$370 : while (1) {
                 $11_1 = $17_1;
                 label$371 : {
                  if (($11_1 | 0) >= ($3_1 | 0)) {
                   break label$371
                  }
                  label$372 : while (1) {
                   $6_1 = (HEAP32[($5_1 + 152 | 0) >> 2] | 0) + ($11_1 + $21_1 | 0) | 0;
                   HEAP8[$6_1 >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
                   HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
                   $14_1 = HEAPU8[$10_1 >> 0] | 0;
                   HEAP8[($6_1 + 3 | 0) >> 0] = 0;
                   HEAP8[($6_1 + 2 | 0) >> 0] = $14_1;
                   $11_1 = $11_1 + 4 | 0;
                   if (($11_1 | 0) < ($3_1 | 0)) {
                    continue label$372
                   }
                   break label$372;
                  };
                  $15_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
                 }
                 $21_1 = ($15_1 << 2 | 0) + $21_1 | 0;
                 if (($21_1 | 0) < ($23_1 | 0)) {
                  continue label$370
                 }
                 break label$360;
                };
               case 3:
                break label$361;
               default:
                break label$360;
               };
              }
              $14_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
              if (!$14_1) {
               break label$360
              }
              $6_1 = HEAP32[($5_1 + 18636 | 0) >> 2] | 0;
              $21_1 = HEAP32[($5_1 + 18644 | 0) >> 2] | 0;
              if (($6_1 | 0) >= ($21_1 | 0)) {
               break label$360
              }
              $17_1 = HEAP32[($5_1 + 18632 | 0) >> 2] | 0;
              $23_1 = (HEAP32[($5_1 + 18640 | 0) >> 2] | 0) - $17_1 | 0;
              label$373 : while (1) {
               $10_1 = $6_1 + $17_1 | 0;
               $410($11_1 + $10_1 | 0 | 0, $14_1 + $10_1 | 0 | 0, $23_1 | 0) | 0;
               $6_1 = $6_1 + $3_1 | 0;
               if (($6_1 | 0) < ($21_1 | 0)) {
                continue label$373
               }
               break label$373;
              };
             }
             label$374 : while (1) {
              label$375 : {
               label$376 : {
                $10_1 = HEAP32[$13_1 >> 2] | 0;
                $6_1 = HEAP32[$19_1 >> 2] | 0;
                if ($10_1 >>> 0 >= $6_1 >>> 0) {
                 break label$376
                }
                $11_1 = $10_1 + 1 | 0;
                HEAP32[$13_1 >> 2] = $11_1;
                $10_1 = HEAPU8[$10_1 >> 0] | 0;
                break label$375;
               }
               label$377 : {
                if (HEAP32[$9_1 >> 2] | 0) {
                 break label$377
                }
                $14_1 = 67633;
                break label$330;
               }
               label$378 : {
                label$379 : {
                 $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                 if ($6_1) {
                  break label$379
                 }
                 $10_1 = 0;
                 HEAP32[$9_1 >> 2] = 0;
                 HEAP8[$12_1 >> 0] = 0;
                 $6_1 = $8_1;
                 break label$378;
                }
                $6_1 = $12_1 + $6_1 | 0;
                $10_1 = HEAPU8[$12_1 >> 0] | 0;
               }
               HEAP32[$19_1 >> 2] = $6_1;
               HEAP32[$13_1 >> 2] = $8_1;
               $11_1 = $8_1;
              }
              label$380 : {
               $10_1 = $10_1 & 255 | 0;
               if (($10_1 | 0) == (33 | 0)) {
                break label$380
               }
               $14_1 = 67633;
               label$381 : {
                switch ($10_1 + -44 | 0 | 0) {
                case 15:
                 break label$329;
                case 0:
                 break label$381;
                default:
                 break label$330;
                };
               }
               label$382 : {
                label$383 : {
                 if ($11_1 >>> 0 >= $6_1 >>> 0) {
                  break label$383
                 }
                 $10_1 = $11_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $10_1;
                 $14_1 = HEAPU8[$11_1 >> 0] | 0;
                 break label$382;
                }
                label$384 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$384
                 }
                 $14_1 = 0;
                 $10_1 = $11_1;
                 break label$382;
                }
                label$385 : {
                 label$386 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$386
                  }
                  $14_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$385;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $14_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $10_1 = $8_1;
               }
               label$387 : {
                label$388 : {
                 if ($10_1 >>> 0 >= $6_1 >>> 0) {
                  break label$388
                 }
                 $11_1 = $10_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $11_1;
                 $21_1 = HEAPU8[$10_1 >> 0] | 0;
                 break label$387;
                }
                label$389 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$389
                 }
                 $21_1 = 0;
                 $11_1 = $10_1;
                 break label$387;
                }
                label$390 : {
                 label$391 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$391
                  }
                  $21_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$390;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $21_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $11_1 = $8_1;
               }
               label$392 : {
                label$393 : {
                 if ($11_1 >>> 0 >= $6_1 >>> 0) {
                  break label$393
                 }
                 $10_1 = $11_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $10_1;
                 $23_1 = HEAPU8[$11_1 >> 0] | 0;
                 break label$392;
                }
                label$394 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$394
                 }
                 $23_1 = 0;
                 $10_1 = $11_1;
                 break label$392;
                }
                label$395 : {
                 label$396 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$396
                  }
                  $23_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$395;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $23_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $10_1 = $8_1;
               }
               label$397 : {
                label$398 : {
                 if ($10_1 >>> 0 >= $6_1 >>> 0) {
                  break label$398
                 }
                 $11_1 = $10_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $11_1;
                 $22_1 = HEAPU8[$10_1 >> 0] | 0;
                 break label$397;
                }
                label$399 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$399
                 }
                 $22_1 = 0;
                 $11_1 = $10_1;
                 break label$397;
                }
                label$400 : {
                 label$401 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$401
                  }
                  $22_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$400;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $22_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $11_1 = $8_1;
               }
               label$402 : {
                label$403 : {
                 if ($11_1 >>> 0 >= $6_1 >>> 0) {
                  break label$403
                 }
                 $10_1 = $11_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $10_1;
                 $3_1 = HEAPU8[$11_1 >> 0] | 0;
                 break label$402;
                }
                label$404 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$404
                 }
                 $3_1 = 0;
                 $10_1 = $11_1;
                 break label$402;
                }
                label$405 : {
                 label$406 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$406
                  }
                  $3_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$405;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $3_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $10_1 = $8_1;
               }
               $21_1 = $21_1 & 255 | 0;
               label$407 : {
                label$408 : {
                 if ($10_1 >>> 0 >= $6_1 >>> 0) {
                  break label$408
                 }
                 $11_1 = $10_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $11_1;
                 $17_1 = HEAPU8[$10_1 >> 0] | 0;
                 break label$407;
                }
                label$409 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$409
                 }
                 $17_1 = 0;
                 $11_1 = $10_1;
                 break label$407;
                }
                label$410 : {
                 label$411 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$411
                  }
                  $17_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$410;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $17_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $11_1 = $8_1;
               }
               $14_1 = $14_1 & 255 | 0;
               $21_1 = $21_1 << 8 | 0;
               $17_1 = $17_1 & 255 | 0;
               label$412 : {
                label$413 : {
                 if ($11_1 >>> 0 >= $6_1 >>> 0) {
                  break label$413
                 }
                 $10_1 = $11_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $10_1;
                 $24_1 = HEAPU8[$11_1 >> 0] | 0;
                 break label$412;
                }
                label$414 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$414
                 }
                 $24_1 = 0;
                 $10_1 = $11_1;
                 break label$412;
                }
                label$415 : {
                 label$416 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$416
                  }
                  $24_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$415;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $24_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $10_1 = $8_1;
               }
               $11_1 = $21_1 | $14_1 | 0;
               $21_1 = $3_1 & 255 | 0;
               $3_1 = $17_1 << 8 | 0;
               label$417 : {
                label$418 : {
                 if ($10_1 >>> 0 >= $6_1 >>> 0) {
                  break label$418
                 }
                 $17_1 = $10_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $17_1;
                 $27_1 = HEAPU8[$10_1 >> 0] | 0;
                 break label$417;
                }
                label$419 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$419
                 }
                 $27_1 = 0;
                 $17_1 = $10_1;
                 break label$417;
                }
                label$420 : {
                 label$421 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$421
                  }
                  $27_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$420;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $27_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $17_1 = $8_1;
               }
               $14_1 = 66368;
               $10_1 = ($11_1 + $21_1 | 0) + $3_1 | 0;
               if (($10_1 | 0) > ($15_1 | 0)) {
                break label$330
               }
               $21_1 = ($22_1 & 255 | 0) << 8 | 0 | ($23_1 & 255 | 0) | 0;
               $3_1 = ($21_1 + ($24_1 & 255 | 0) | 0) + (($27_1 & 255 | 0) << 8 | 0) | 0;
               if (($3_1 | 0) > (HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0)) {
                break label$330
               }
               $11_1 = $11_1 << 2 | 0;
               HEAP32[($5_1 + 18648 | 0) >> 2] = $11_1;
               HEAP32[($5_1 + 18640 | 0) >> 2] = $10_1 << 2 | 0;
               HEAP32[($5_1 + 18632 | 0) >> 2] = $11_1;
               $10_1 = $15_1 << 2 | 0;
               HEAP32[($5_1 + 18656 | 0) >> 2] = $10_1;
               $11_1 = Math_imul($21_1, $10_1);
               HEAP32[($5_1 + 18652 | 0) >> 2] = $11_1;
               HEAP32[($5_1 + 18644 | 0) >> 2] = Math_imul($3_1, $10_1);
               HEAP32[($5_1 + 18636 | 0) >> 2] = $11_1;
               label$422 : {
                label$423 : {
                 if ($17_1 >>> 0 >= $6_1 >>> 0) {
                  break label$423
                 }
                 $21_1 = $17_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $21_1;
                 $11_1 = HEAPU8[$17_1 >> 0] | 0;
                 break label$422;
                }
                label$424 : {
                 if (HEAP32[$9_1 >> 2] | 0) {
                  break label$424
                 }
                 HEAP32[($5_1 + 18624 | 0) >> 2] = $10_1;
                 HEAP32[($5_1 + 18628 | 0) >> 2] = 0;
                 HEAP32[($5_1 + 18620 | 0) >> 2] = 0;
                 $21_1 = $17_1;
                 break label$332;
                }
                label$425 : {
                 label$426 : {
                  $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($6_1) {
                   break label$426
                  }
                  $11_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $6_1 = $8_1;
                  break label$425;
                 }
                 $6_1 = $12_1 + $6_1 | 0;
                 $11_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $6_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $21_1 = $8_1;
               }
               $14_1 = $11_1 & 255 | 0;
               HEAP32[($5_1 + 18628 | 0) >> 2] = $14_1;
               HEAP32[($5_1 + 18624 | 0) >> 2] = $11_1 & 64 | 0 ? $15_1 << 5 | 0 : $10_1;
               HEAP32[($5_1 + 18620 | 0) >> 2] = (($11_1 << 25 | 0) >> 31 | 0) & 3 | 0;
               $34_1 = -1;
               if (($11_1 << 24 >> 24 | 0) > (-1 | 0)) {
                break label$332
               }
               $11_1 = $5_1 + 1208 | 0;
               $378($0_1 | 0, $11_1 | 0, 2 << ($14_1 & 7 | 0) | 0 | 0, (wasm2js_i32$0 = HEAP32[($5_1 + 172 | 0) >> 2] | 0, wasm2js_i32$1 = -1, wasm2js_i32$2 = (HEAP32[($5_1 + 176 | 0) >> 2] | 0) & 1 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0);
               $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
               $21_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
               break label$331;
              }
              label$427 : {
               label$428 : {
                label$429 : {
                 label$430 : {
                  if ($11_1 >>> 0 >= $6_1 >>> 0) {
                   break label$430
                  }
                  $10_1 = $11_1 + 1 | 0;
                  HEAP32[$13_1 >> 2] = $10_1;
                  $11_1 = HEAPU8[$11_1 >> 0] | 0;
                  break label$429;
                 }
                 if (!(HEAP32[$9_1 >> 2] | 0)) {
                  break label$428
                 }
                 label$431 : {
                  label$432 : {
                   $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                   if ($6_1) {
                    break label$432
                   }
                   $11_1 = 0;
                   HEAP32[$9_1 >> 2] = 0;
                   HEAP8[$12_1 >> 0] = 0;
                   $6_1 = $8_1;
                   break label$431;
                  }
                  $6_1 = $12_1 + $6_1 | 0;
                  $11_1 = HEAPU8[$12_1 >> 0] | 0;
                 }
                 HEAP32[$19_1 >> 2] = $6_1;
                 HEAP32[$13_1 >> 2] = $8_1;
                 $10_1 = $8_1;
                }
                label$433 : {
                 if (($11_1 & 255 | 0 | 0) == (249 | 0)) {
                  break label$433
                 }
                 $11_1 = $10_1;
                 break label$428;
                }
                label$434 : {
                 label$435 : {
                  if ($10_1 >>> 0 >= $6_1 >>> 0) {
                   break label$435
                  }
                  $14_1 = $10_1 + 1 | 0;
                  HEAP32[$13_1 >> 2] = $14_1;
                  $11_1 = HEAPU8[$10_1 >> 0] | 0;
                  break label$434;
                 }
                 label$436 : {
                  if (HEAP32[$9_1 >> 2] | 0) {
                   break label$436
                  }
                  $11_1 = 0;
                  break label$427;
                 }
                 label$437 : {
                  label$438 : {
                   $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                   if ($6_1) {
                    break label$438
                   }
                   $11_1 = 0;
                   HEAP32[$9_1 >> 2] = 0;
                   HEAP8[$12_1 >> 0] = 0;
                   $6_1 = $8_1;
                   break label$437;
                  }
                  $6_1 = $12_1 + $6_1 | 0;
                  $11_1 = HEAPU8[$12_1 >> 0] | 0;
                 }
                 HEAP32[$19_1 >> 2] = $6_1;
                 HEAP32[$13_1 >> 2] = $8_1;
                 $14_1 = $8_1;
                }
                label$439 : {
                 if (($11_1 & 255 | 0 | 0) == (4 | 0)) {
                  break label$439
                 }
                 $10_1 = $14_1;
                 break label$427;
                }
                label$440 : {
                 label$441 : {
                  if ($14_1 >>> 0 >= $6_1 >>> 0) {
                   break label$441
                  }
                  $11_1 = $14_1 + 1 | 0;
                  HEAP32[$13_1 >> 2] = $11_1;
                  $10_1 = HEAPU8[$14_1 >> 0] | 0;
                  break label$440;
                 }
                 label$442 : {
                  if (HEAP32[$9_1 >> 2] | 0) {
                   break label$442
                  }
                  $10_1 = 0;
                  $11_1 = $14_1;
                  break label$440;
                 }
                 label$443 : {
                  label$444 : {
                   $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                   if ($6_1) {
                    break label$444
                   }
                   $10_1 = 0;
                   HEAP32[$9_1 >> 2] = 0;
                   HEAP8[$12_1 >> 0] = 0;
                   $6_1 = $8_1;
                   break label$443;
                  }
                  $6_1 = $12_1 + $6_1 | 0;
                  $10_1 = HEAPU8[$12_1 >> 0] | 0;
                 }
                 HEAP32[$19_1 >> 2] = $6_1;
                 HEAP32[$13_1 >> 2] = $8_1;
                 $11_1 = $8_1;
                }
                HEAP32[($5_1 + 176 | 0) >> 2] = $10_1 & 255 | 0;
                label$445 : {
                 label$446 : {
                  if ($11_1 >>> 0 >= $6_1 >>> 0) {
                   break label$446
                  }
                  $10_1 = $11_1 + 1 | 0;
                  HEAP32[$13_1 >> 2] = $10_1;
                  $21_1 = HEAPU8[$11_1 >> 0] | 0;
                  break label$445;
                 }
                 label$447 : {
                  if (HEAP32[$9_1 >> 2] | 0) {
                   break label$447
                  }
                  $21_1 = 0;
                  $10_1 = $11_1;
                  break label$445;
                 }
                 label$448 : {
                  label$449 : {
                   $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                   if ($6_1) {
                    break label$449
                   }
                   $21_1 = 0;
                   HEAP32[$9_1 >> 2] = 0;
                   HEAP8[$12_1 >> 0] = 0;
                   $6_1 = $8_1;
                   break label$448;
                  }
                  $6_1 = $12_1 + $6_1 | 0;
                  $21_1 = HEAPU8[$12_1 >> 0] | 0;
                 }
                 HEAP32[$19_1 >> 2] = $6_1;
                 HEAP32[$13_1 >> 2] = $8_1;
                 $10_1 = $8_1;
                }
                label$450 : {
                 label$451 : {
                  if ($10_1 >>> 0 >= $6_1 >>> 0) {
                   break label$451
                  }
                  $14_1 = $10_1 + 1 | 0;
                  HEAP32[$13_1 >> 2] = $14_1;
                  $11_1 = HEAPU8[$10_1 >> 0] | 0;
                  break label$450;
                 }
                 label$452 : {
                  if (HEAP32[$9_1 >> 2] | 0) {
                   break label$452
                  }
                  $11_1 = 0;
                  $14_1 = $10_1;
                  break label$450;
                 }
                 label$453 : {
                  label$454 : {
                   $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                   if ($6_1) {
                    break label$454
                   }
                   $11_1 = 0;
                   HEAP32[$9_1 >> 2] = 0;
                   HEAP8[$12_1 >> 0] = 0;
                   $6_1 = $8_1;
                   break label$453;
                  }
                  $6_1 = $12_1 + $6_1 | 0;
                  $11_1 = HEAPU8[$12_1 >> 0] | 0;
                 }
                 HEAP32[$19_1 >> 2] = $6_1;
                 HEAP32[$13_1 >> 2] = $8_1;
                 $14_1 = $8_1;
                }
                HEAP32[($5_1 + 180 | 0) >> 2] = ($11_1 & 255 | 0) << 8 | 0 | ($21_1 & 255 | 0) | 0;
                label$455 : {
                 label$456 : {
                  if ($14_1 >>> 0 >= $6_1 >>> 0) {
                   break label$456
                  }
                  $11_1 = $14_1 + 1 | 0;
                  HEAP32[$13_1 >> 2] = $11_1;
                  $10_1 = HEAPU8[$14_1 >> 0] | 0;
                  break label$455;
                 }
                 label$457 : {
                  if (HEAP32[$9_1 >> 2] | 0) {
                   break label$457
                  }
                  $10_1 = 0;
                  $11_1 = $14_1;
                  break label$455;
                 }
                 label$458 : {
                  label$459 : {
                   $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                   if ($6_1) {
                    break label$459
                   }
                   $10_1 = 0;
                   HEAP32[$9_1 >> 2] = 0;
                   HEAP8[$12_1 >> 0] = 0;
                   $6_1 = $8_1;
                   break label$458;
                  }
                  $6_1 = $12_1 + $6_1 | 0;
                  $10_1 = HEAPU8[$12_1 >> 0] | 0;
                 }
                 HEAP32[$19_1 >> 2] = $6_1;
                 HEAP32[$13_1 >> 2] = $8_1;
                 $11_1 = $8_1;
                }
                HEAP32[($5_1 + 172 | 0) >> 2] = $10_1 & 255 | 0;
               }
               label$460 : while (1) {
                label$461 : {
                 label$462 : {
                  if ($11_1 >>> 0 >= $6_1 >>> 0) {
                   break label$462
                  }
                  $10_1 = $11_1 + 1 | 0;
                  HEAP32[$13_1 >> 2] = $10_1;
                  $11_1 = HEAPU8[$11_1 >> 0] | 0;
                  break label$461;
                 }
                 if (!(HEAP32[$9_1 >> 2] | 0)) {
                  continue label$374
                 }
                 label$463 : {
                  label$464 : {
                   $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                   if ($6_1) {
                    break label$464
                   }
                   $11_1 = 0;
                   HEAP32[$9_1 >> 2] = 0;
                   HEAP8[$12_1 >> 0] = 0;
                   $6_1 = $8_1;
                   break label$463;
                  }
                  $6_1 = $12_1 + $6_1 | 0;
                  $11_1 = HEAPU8[$12_1 >> 0] | 0;
                 }
                 HEAP32[$19_1 >> 2] = $6_1;
                 HEAP32[$13_1 >> 2] = $8_1;
                 $10_1 = $8_1;
                }
                $11_1 = $11_1 & 255 | 0;
                if (!$11_1) {
                 continue label$374
                }
                label$465 : {
                 if (!(HEAP32[$18_1 >> 2] | 0)) {
                  break label$465
                 }
                 $14_1 = $6_1 - $10_1 | 0;
                 if (($14_1 | 0) >= ($11_1 | 0)) {
                  break label$465
                 }
                 HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
                 FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $11_1 - $14_1 | 0);
                 $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
                 $11_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
                 continue label$460;
                }
                $11_1 = $10_1 + $11_1 | 0;
                HEAP32[$13_1 >> 2] = $11_1;
                continue label$460;
               };
              }
              $11_1 = $11_1 & 255 | 0;
              label$466 : {
               if (!(HEAP32[$18_1 >> 2] | 0)) {
                break label$466
               }
               $14_1 = $6_1 - $10_1 | 0;
               if (($14_1 | 0) >= ($11_1 | 0)) {
                break label$466
               }
               HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
               FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $11_1 - $14_1 | 0);
               continue label$374;
              }
              HEAP32[$13_1 >> 2] = $10_1 + $11_1 | 0;
              continue label$374;
             };
            }
            i64toi32_i32$1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
            $4288 = i64toi32_i32$1;
            i64toi32_i32$1 = $0_1;
            HEAP32[($0_1 + 168 | 0) >> 2] = $4288;
            HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$0;
           }
           $6_1 = $379($0_1 | 0) | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
           $4293 = i64toi32_i32$0;
           i64toi32_i32$0 = $0_1;
           HEAP32[($0_1 + 168 | 0) >> 2] = $4293;
           HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
           label$467 : {
            if (($6_1 | 0) != (943870035 | 0)) {
             break label$467
            }
            $7_1 = $380($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
            break label$1;
           }
           label$468 : {
            if (!($381($0_1 | 0) | 0)) {
             break label$468
            }
            $7_1 = $382($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
            break label$1;
           }
           label$469 : {
            if (!($383($0_1 | 0) | 0)) {
             break label$469
            }
            $7_1 = $384($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
            break label$1;
           }
           label$470 : {
            if (!($352($0_1 | 0) | 0)) {
             break label$470
            }
            $6_1 = $351($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
            $7_1 = HEAP32[$2_1 >> 2] | 0;
            $11_1 = HEAP32[$1_1 >> 2] | 0;
            label$471 : {
             if ($4_1) {
              break label$471
             }
             $4_1 = HEAP32[$3_1 >> 2] | 0;
            }
            $7_1 = $385($6_1 | 0, $11_1 | 0, $7_1 | 0, $4_1 | 0) | 0;
            break label$1;
           }
           label$472 : {
            if (!($386($0_1 | 0) | 0)) {
             break label$472
            }
            $7_1 = $387($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
            break label$1;
           }
           $7_1 = 0;
           HEAP32[(0 + 96956 | 0) >> 2] = 67452;
           break label$1;
          }
          $14_1 = 67538;
          if (!((HEAPU8[($5_1 + 160 | 0) >> 0] | 0) & 128 | 0)) {
           break label$330
          }
          $34_1 = -1;
          label$473 : {
           $11_1 = HEAP32[($5_1 + 172 | 0) >> 2] | 0;
           if (($11_1 | 0) < (0 | 0)) {
            break label$473
           }
           if (!((HEAPU8[($5_1 + 176 | 0) >> 0] | 0) & 1 | 0)) {
            break label$473
           }
           $11_1 = (($5_1 + 144 | 0) + ($11_1 << 2 | 0) | 0) + 43 | 0;
           $34_1 = HEAPU8[$11_1 >> 0] | 0;
           HEAP8[$11_1 >> 0] = 0;
          }
          $11_1 = $5_1 + 184 | 0;
         }
         HEAP32[($5_1 + 18616 | 0) >> 2] = $11_1;
         label$474 : {
          label$475 : {
           label$476 : {
            if ($21_1 >>> 0 >= $6_1 >>> 0) {
             break label$476
            }
            HEAP32[$13_1 >> 2] = $21_1 + 1 | 0;
            $6_1 = HEAPU8[$21_1 >> 0] | 0;
            break label$475;
           }
           label$477 : {
            if (HEAP32[$9_1 >> 2] | 0) {
             break label$477
            }
            $6_1 = 0;
            break label$474;
           }
           label$478 : {
            label$479 : {
             $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
             if ($6_1) {
              break label$479
             }
             $6_1 = 0;
             HEAP32[$9_1 >> 2] = 0;
             HEAP8[$12_1 >> 0] = 0;
             $11_1 = $8_1;
             break label$478;
            }
            $11_1 = $12_1 + $6_1 | 0;
            $6_1 = HEAPU8[$12_1 >> 0] | 0;
           }
           HEAP32[$19_1 >> 2] = $11_1;
           HEAP32[$13_1 >> 2] = $8_1;
          }
          if (($6_1 & 255 | 0) >>> 0 > 12 >>> 0) {
           break label$329
          }
         }
         $10_1 = $6_1 & 255 | 0;
         $17_1 = 1 << $10_1 | 0;
         $6_1 = 0;
         label$480 : while (1) {
          $11_1 = ($5_1 + 144 | 0) + ($6_1 << 2 | 0) | 0;
          HEAP8[($11_1 + 2091 | 0) >> 0] = $6_1;
          HEAP8[($11_1 + 2090 | 0) >> 0] = $6_1;
          HEAP16[($11_1 + 2088 | 0) >> 1] = 65535;
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($17_1 | 0)) {
           continue label$480
          }
          break label$480;
         };
         $33_1 = $17_1 + 1 | 0;
         $32_1 = $5_1 + 2232 | 0;
         $21_1 = 0;
         $35_1 = $10_1 + 1 | 0;
         $23_1 = $35_1;
         $36_1 = (2 << $10_1 | 0) + -1 | 0;
         $22_1 = $36_1;
         $30_1 = $17_1 + 2 | 0;
         $14_1 = $30_1;
         $24_1 = -1;
         $3_1 = 0;
         $6_1 = 0;
         $11_1 = 0;
         label$481 : {
          label$482 : {
           label$483 : while (1) {
            $26_1 = $24_1;
            $25_1 = $14_1;
            $27_1 = $22_1;
            $15_1 = $23_1;
            $28_1 = $21_1;
            label$484 : {
             label$485 : while (1) {
              if (($6_1 | 0) >= ($15_1 | 0)) {
               break label$484
              }
              $14_1 = HEAP32[$19_1 >> 2] | 0;
              $21_1 = HEAP32[$13_1 >> 2] | 0;
              label$486 : {
               label$487 : {
                if (!$11_1) {
                 break label$487
                }
                $10_1 = $21_1;
                break label$486;
               }
               label$488 : {
                label$489 : {
                 if ($21_1 >>> 0 >= $14_1 >>> 0) {
                  break label$489
                 }
                 $10_1 = $21_1 + 1 | 0;
                 HEAP32[$13_1 >> 2] = $10_1;
                 $11_1 = HEAPU8[$21_1 >> 0] | 0;
                 break label$488;
                }
                if (!(HEAP32[$9_1 >> 2] | 0)) {
                 break label$481
                }
                label$490 : {
                 label$491 : {
                  $11_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                  if ($11_1) {
                   break label$491
                  }
                  $11_1 = 0;
                  HEAP32[$9_1 >> 2] = 0;
                  HEAP8[$12_1 >> 0] = 0;
                  $14_1 = $8_1;
                  break label$490;
                 }
                 $14_1 = $12_1 + $11_1 | 0;
                 $11_1 = HEAPU8[$12_1 >> 0] | 0;
                }
                HEAP32[$19_1 >> 2] = $14_1;
                HEAP32[$13_1 >> 2] = $8_1;
                $10_1 = $8_1;
               }
               $11_1 = $11_1 & 255 | 0;
               if (!$11_1) {
                break label$481
               }
              }
              label$492 : {
               label$493 : {
                if ($10_1 >>> 0 >= $14_1 >>> 0) {
                 break label$493
                }
                HEAP32[$13_1 >> 2] = $10_1 + 1 | 0;
                $10_1 = HEAPU8[$10_1 >> 0] | 0;
                break label$492;
               }
               label$494 : {
                if (HEAP32[$9_1 >> 2] | 0) {
                 break label$494
                }
                $10_1 = 0;
                break label$492;
               }
               label$495 : {
                label$496 : {
                 $10_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                 if ($10_1) {
                  break label$496
                 }
                 $10_1 = 0;
                 HEAP32[$9_1 >> 2] = 0;
                 HEAP8[$12_1 >> 0] = 0;
                 $14_1 = $8_1;
                 break label$495;
                }
                $14_1 = $12_1 + $10_1 | 0;
                $10_1 = HEAPU8[$12_1 >> 0] | 0;
               }
               HEAP32[$19_1 >> 2] = $14_1;
               HEAP32[$13_1 >> 2] = $8_1;
              }
              $11_1 = $11_1 + -1 | 0;
              $3_1 = ($10_1 & 255 | 0) << $6_1 | 0 | $3_1 | 0;
              $6_1 = $6_1 + 8 | 0;
              continue label$485;
             };
            }
            $6_1 = $6_1 - $15_1 | 0;
            $10_1 = $3_1 & $27_1 | 0;
            $21_1 = 1;
            $23_1 = $35_1;
            $22_1 = $36_1;
            $14_1 = $30_1;
            $24_1 = -1;
            $37_1 = $3_1 >> $15_1 | 0;
            $3_1 = $37_1;
            if (($10_1 | 0) == ($17_1 | 0)) {
             continue label$483
            }
            label$497 : {
             label$498 : {
              if (($10_1 | 0) != ($33_1 | 0)) {
               break label$498
              }
              label$499 : {
               if (($11_1 | 0) > (-1 | 0)) {
                break label$499
               }
               HEAP32[$13_1 >> 2] = HEAP32[$19_1 >> 2] | 0;
               break label$482;
              }
              label$500 : {
               if (HEAP32[$18_1 >> 2] | 0) {
                break label$500
               }
               $6_1 = HEAP32[$13_1 >> 2] | 0;
               break label$497;
              }
              $10_1 = HEAP32[$19_1 >> 2] | 0;
              $6_1 = HEAP32[$13_1 >> 2] | 0;
              $14_1 = $10_1 - $6_1 | 0;
              if (($11_1 | 0) <= ($14_1 | 0)) {
               break label$497
              }
              HEAP32[($0_1 + 168 | 0) >> 2] = $10_1;
              FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $11_1 - $14_1 | 0);
              break label$482;
             }
             $21_1 = ($10_1 | 0) > ($25_1 | 0);
             $14_1 = $21_1 ? 66407 : 67619;
             if ($21_1) {
              break label$330
             }
             if (($28_1 ^ 1 | 0) & 1 | 0) {
              break label$330
             }
             label$501 : {
              label$502 : {
               if (($26_1 | 0) < (0 | 0)) {
                break label$502
               }
               label$503 : {
                if (($25_1 | 0) <= (4095 | 0)) {
                 break label$503
                }
                $14_1 = 66333;
                break label$330;
               }
               $3_1 = $25_1 << 2 | 0;
               $14_1 = $32_1 + $3_1 | 0;
               HEAP16[$14_1 >> 1] = $26_1;
               $21_1 = HEAPU8[(($32_1 + ($26_1 << 2 | 0) | 0) + 2 | 0) >> 0] | 0;
               HEAP8[($14_1 + 2 | 0) >> 0] = $21_1;
               label$504 : {
                $14_1 = $25_1 + 1 | 0;
                if (($10_1 | 0) == ($14_1 | 0)) {
                 break label$504
                }
                $21_1 = HEAPU8[((($5_1 + 144 | 0) + ($10_1 << 2 | 0) | 0) + 2090 | 0) >> 0] | 0;
               }
               HEAP8[((($5_1 + 144 | 0) + $3_1 | 0) + 2091 | 0) >> 0] = $21_1;
               break label$501;
              }
              $14_1 = $25_1;
              if (($10_1 | 0) != ($14_1 | 0)) {
               break label$501
              }
              $14_1 = 66407;
              break label$330;
             }
             $388($5_1 + 144 | 0 | 0, $10_1 & 65535 | 0 | 0);
             $21_1 = 1;
             $3_1 = $15_1 + 1 | 0;
             $23_1 = ($14_1 | 0) < (4096 | 0) & !($14_1 & $27_1 | 0) | 0;
             $22_1 = $23_1 ? (-1 << $3_1 | 0) ^ -1 | 0 : $27_1;
             $23_1 = $23_1 ? $3_1 : $15_1;
             $24_1 = $10_1;
             $3_1 = $37_1;
             continue label$483;
            }
            break label$483;
           };
           HEAP32[$13_1 >> 2] = $6_1 + $11_1 | 0;
          }
          label$505 : while (1) {
           label$506 : {
            label$507 : {
             $11_1 = HEAP32[$13_1 >> 2] | 0;
             $6_1 = HEAP32[$19_1 >> 2] | 0;
             if ($11_1 >>> 0 >= $6_1 >>> 0) {
              break label$507
             }
             $10_1 = $11_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $10_1;
             $11_1 = HEAPU8[$11_1 >> 0] | 0;
             break label$506;
            }
            if (!(HEAP32[$9_1 >> 2] | 0)) {
             break label$481
            }
            label$508 : {
             label$509 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$509
              }
              $11_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $6_1 = $8_1;
              break label$508;
             }
             $6_1 = $12_1 + $6_1 | 0;
             $11_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $6_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $10_1 = $8_1;
           }
           $11_1 = $11_1 & 255 | 0;
           if (!$11_1) {
            break label$481
           }
           label$510 : {
            if (!(HEAP32[$18_1 >> 2] | 0)) {
             break label$510
            }
            $14_1 = $6_1 - $10_1 | 0;
            if (($14_1 | 0) >= ($11_1 | 0)) {
             break label$510
            }
            HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
            FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $11_1 - $14_1 | 0);
            continue label$505;
           }
           HEAP32[$13_1 >> 2] = $10_1 + $11_1 | 0;
           continue label$505;
          };
         }
         label$511 : {
          $6_1 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
          if ($6_1) {
           break label$511
          }
          $7_1 = 0;
          break label$1;
         }
         label$512 : {
          if (($34_1 | 0) == (-1 | 0)) {
           break label$512
          }
          HEAP8[((($5_1 + 144 | 0) + ((HEAP32[($5_1 + 172 | 0) >> 2] | 0) << 2 | 0) | 0) + 43 | 0) >> 0] = $34_1;
         }
         if (($6_1 | 0) == ($0_1 | 0)) {
          break label$329
         }
         $7_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
         HEAP32[$1_1 >> 2] = $7_1;
         $11_1 = HEAP32[($5_1 + 148 | 0) >> 2] | 0;
         HEAP32[$2_1 >> 2] = $11_1;
         label$513 : {
          if ($4_1 & -5 | 0) {
           break label$513
          }
          $7_1 = $6_1;
          break label$1;
         }
         $7_1 = $377($6_1 | 0, 4 | 0, $4_1 | 0, $7_1 | 0, $11_1 | 0) | 0;
         break label$1;
        }
        HEAP32[(0 + 96956 | 0) >> 2] = $14_1;
       }
       $6_1 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$1
       }
       $484($6_1 | 0);
       break label$1;
      }
      $31_1 = 0;
      $32_1 = 0;
      $33_1 = 0;
     }
     $6_1 = $30_1 ? 4 : 3;
     HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
     label$514 : {
      $38_1 = ($4_1 | 0) > (2 | 0) ? $4_1 : $6_1;
      $7_1 = $483(Math_imul(Math_imul(HEAP32[$0_1 >> 2] | 0, $38_1), HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) | 0;
      if ($7_1) {
       break label$514
      }
      $7_1 = 0;
      HEAP32[(0 + 96956 | 0) >> 2] = 66853;
      break label$1;
     }
     label$515 : {
      label$516 : {
       label$517 : {
        if ($28_1 >>> 0 > 15 >>> 0) {
         break label$517
        }
        label$518 : {
         if (!$22_1) {
          break label$518
         }
         if (($22_1 | 0) > (256 | 0)) {
          break label$518
         }
         label$519 : {
          if (($22_1 | 0) < (1 | 0)) {
           break label$519
          }
          $14_1 = HEAP32[$19_1 >> 2] | 0;
          $27_1 = ($10_1 | 0) == (12 | 0);
          $11_1 = HEAP32[$13_1 >> 2] | 0;
          $6_1 = $11_1;
          $15_1 = 0;
          label$520 : while (1) {
           label$521 : {
            label$522 : {
             if ($6_1 >>> 0 >= $14_1 >>> 0) {
              break label$522
             }
             $11_1 = $6_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $11_1;
             $23_1 = HEAPU8[$6_1 >> 0] | 0;
             $6_1 = $11_1;
             break label$521;
            }
            label$523 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$523
             }
             $23_1 = 0;
             break label$521;
            }
            label$524 : {
             label$525 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$525
              }
              $23_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $14_1 = $8_1;
              break label$524;
             }
             $14_1 = $12_1 + $6_1 | 0;
             $23_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $14_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $11_1 = $8_1;
            $6_1 = $11_1;
           }
           $21_1 = ($5_1 + 144 | 0) + ($15_1 << 2 | 0) | 0;
           HEAP8[($21_1 + 2 | 0) >> 0] = $23_1;
           label$526 : {
            label$527 : {
             if ($6_1 >>> 0 >= $14_1 >>> 0) {
              break label$527
             }
             $11_1 = $6_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $11_1;
             $23_1 = HEAPU8[$6_1 >> 0] | 0;
             $6_1 = $11_1;
             break label$526;
            }
            label$528 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$528
             }
             $23_1 = 0;
             break label$526;
            }
            label$529 : {
             label$530 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$530
              }
              $23_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $14_1 = $8_1;
              break label$529;
             }
             $14_1 = $12_1 + $6_1 | 0;
             $23_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $14_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $11_1 = $8_1;
            $6_1 = $11_1;
           }
           HEAP8[($21_1 + 1 | 0) >> 0] = $23_1;
           label$531 : {
            label$532 : {
             if ($6_1 >>> 0 >= $14_1 >>> 0) {
              break label$532
             }
             $11_1 = $6_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $11_1;
             $23_1 = HEAPU8[$6_1 >> 0] | 0;
             $6_1 = $11_1;
             break label$531;
            }
            label$533 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$533
             }
             $23_1 = 0;
             break label$531;
            }
            label$534 : {
             label$535 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$535
              }
              $23_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $14_1 = $8_1;
              break label$534;
             }
             $14_1 = $12_1 + $6_1 | 0;
             $23_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $14_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $11_1 = $8_1;
            $6_1 = $11_1;
           }
           HEAP8[$21_1 >> 0] = $23_1;
           label$536 : {
            if ($27_1) {
             break label$536
            }
            label$537 : {
             label$538 : {
              if ($11_1 >>> 0 >= $14_1 >>> 0) {
               break label$538
              }
              $11_1 = $11_1 + 1 | 0;
              break label$537;
             }
             $6_1 = $11_1;
             if (!(HEAP32[$9_1 >> 2] | 0)) {
              break label$536
             }
             label$539 : {
              label$540 : {
               $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
               if ($6_1) {
                break label$540
               }
               HEAP32[$9_1 >> 2] = 0;
               HEAP8[$12_1 >> 0] = 0;
               $14_1 = $8_1;
               break label$539;
              }
              $14_1 = $12_1 + $6_1 | 0;
             }
             HEAP32[$19_1 >> 2] = $14_1;
             $11_1 = $8_1;
            }
            HEAP32[$13_1 >> 2] = $11_1;
            $6_1 = $11_1;
           }
           HEAP8[($21_1 + 3 | 0) >> 0] = 255;
           $15_1 = $15_1 + 1 | 0;
           if (($15_1 | 0) != ($22_1 | 0)) {
            continue label$520
           }
           break label$520;
          };
         }
         $389($0_1 | 0, (($17_1 - $10_1 | 0) + Math_imul($22_1, ($10_1 | 0) == (12 | 0) ? -3 : -4) | 0) + -14 | 0 | 0);
         label$541 : {
          label$542 : {
           label$543 : {
            if (($28_1 | 0) != (4 | 0)) {
             break label$543
            }
            $6_1 = ((HEAP32[$0_1 >> 2] | 0) + 1 | 0) >>> 1 | 0;
            break label$542;
           }
           if (($28_1 | 0) != (8 | 0)) {
            break label$541
           }
           $6_1 = HEAP32[$0_1 >> 2] | 0;
          }
          $21_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($21_1 | 0) < (1 | 0)) {
           break label$516
          }
          $34_1 = (0 - $6_1 | 0) & 3 | 0;
          $25_1 = ($28_1 | 0) != (8 | 0);
          $6_1 = 0;
          $26_1 = 0;
          label$544 : while (1) {
           label$545 : {
            if ((HEAP32[$0_1 >> 2] | 0 | 0) < (1 | 0)) {
             break label$545
            }
            $23_1 = HEAP32[$19_1 >> 2] | 0;
            $15_1 = 0;
            $14_1 = HEAP32[$13_1 >> 2] | 0;
            $10_1 = $14_1;
            label$546 : while (1) {
             label$547 : {
              label$548 : {
               if ($10_1 >>> 0 >= $23_1 >>> 0) {
                break label$548
               }
               $14_1 = $10_1 + 1 | 0;
               HEAP32[$13_1 >> 2] = $14_1;
               $17_1 = HEAPU8[$10_1 >> 0] | 0;
               $10_1 = $14_1;
               break label$547;
              }
              label$549 : {
               if (HEAP32[$9_1 >> 2] | 0) {
                break label$549
               }
               $17_1 = 0;
               break label$547;
              }
              label$550 : {
               label$551 : {
                $11_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                if ($11_1) {
                 break label$551
                }
                $17_1 = 0;
                HEAP32[$9_1 >> 2] = 0;
                HEAP8[$12_1 >> 0] = 0;
                $23_1 = $8_1;
                break label$550;
               }
               $23_1 = $12_1 + $11_1 | 0;
               $17_1 = HEAPU8[$12_1 >> 0] | 0;
              }
              HEAP32[$19_1 >> 2] = $23_1;
              HEAP32[$13_1 >> 2] = $8_1;
              $14_1 = $8_1;
              $10_1 = $8_1;
             }
             $11_1 = $7_1 + $6_1 | 0;
             $21_1 = $17_1 & 255 | 0;
             $27_1 = ($28_1 | 0) == (4 | 0);
             $21_1 = ($5_1 + 144 | 0) + (($27_1 ? $21_1 >>> 4 | 0 : $21_1) << 2 | 0) | 0;
             HEAP8[$11_1 >> 0] = HEAPU8[$21_1 >> 0] | 0;
             HEAP8[($11_1 + 1 | 0) >> 0] = HEAPU8[($21_1 + 1 | 0) >> 0] | 0;
             HEAP8[($11_1 + 2 | 0) >> 0] = HEAPU8[($21_1 + 2 | 0) >> 0] | 0;
             $11_1 = $6_1 + 3 | 0;
             label$552 : {
              $22_1 = ($38_1 | 0) != (4 | 0);
              if ($22_1) {
               break label$552
              }
              HEAP8[($7_1 + $11_1 | 0) >> 0] = 255;
              $11_1 = $6_1 + 4 | 0;
             }
             label$553 : {
              if (($15_1 | 1 | 0 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
               break label$553
              }
              $6_1 = $11_1;
              break label$545;
             }
             label$554 : {
              label$555 : {
               if (!$25_1) {
                break label$555
               }
               $21_1 = $27_1 ? $17_1 & 15 | 0 : 0;
               break label$554;
              }
              label$556 : {
               label$557 : {
                if ($14_1 >>> 0 >= $23_1 >>> 0) {
                 break label$557
                }
                $10_1 = $14_1 + 1 | 0;
                HEAP32[$13_1 >> 2] = $10_1;
                $6_1 = HEAPU8[$14_1 >> 0] | 0;
                $14_1 = $10_1;
                break label$556;
               }
               label$558 : {
                if (HEAP32[$9_1 >> 2] | 0) {
                 break label$558
                }
                $6_1 = 0;
                break label$556;
               }
               label$559 : {
                label$560 : {
                 $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
                 if ($6_1) {
                  break label$560
                 }
                 $6_1 = 0;
                 HEAP32[$9_1 >> 2] = 0;
                 HEAP8[$12_1 >> 0] = 0;
                 $23_1 = $8_1;
                 break label$559;
                }
                $23_1 = $12_1 + $6_1 | 0;
                $6_1 = HEAPU8[$12_1 >> 0] | 0;
               }
               HEAP32[$19_1 >> 2] = $23_1;
               HEAP32[$13_1 >> 2] = $8_1;
               $14_1 = $8_1;
              }
              $21_1 = $6_1 & 255 | 0;
              $10_1 = $14_1;
             }
             $6_1 = $7_1 + $11_1 | 0;
             $21_1 = ($5_1 + 144 | 0) + ($21_1 << 2 | 0) | 0;
             HEAP8[$6_1 >> 0] = HEAPU8[$21_1 >> 0] | 0;
             HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($21_1 + 1 | 0) >> 0] | 0;
             HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($21_1 + 2 | 0) >> 0] | 0;
             $6_1 = $11_1 + 3 | 0;
             label$561 : {
              if ($22_1) {
               break label$561
              }
              HEAP8[($7_1 + $6_1 | 0) >> 0] = 255;
              $6_1 = $11_1 + 4 | 0;
             }
             $15_1 = $15_1 + 2 | 0;
             if (($15_1 | 0) < (HEAP32[$0_1 >> 2] | 0 | 0)) {
              continue label$546
             }
             break label$546;
            };
           }
           label$562 : {
            label$563 : {
             label$564 : {
              if (HEAP32[$18_1 >> 2] | 0) {
               break label$564
              }
              $11_1 = HEAP32[$13_1 >> 2] | 0;
              break label$563;
             }
             $10_1 = HEAP32[$19_1 >> 2] | 0;
             $11_1 = HEAP32[$13_1 >> 2] | 0;
             $14_1 = $10_1 - $11_1 | 0;
             if (($34_1 | 0) <= ($14_1 | 0)) {
              break label$563
             }
             HEAP32[($0_1 + 168 | 0) >> 2] = $10_1;
             FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $34_1 - $14_1 | 0);
             break label$562;
            }
            HEAP32[$13_1 >> 2] = $11_1 + $34_1 | 0;
           }
           $26_1 = $26_1 + 1 | 0;
           $21_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($26_1 | 0) < ($21_1 | 0)) {
            continue label$544
           }
           break label$516;
          };
         }
         $484($7_1 | 0);
         $7_1 = 0;
         HEAP32[(0 + 96956 | 0) >> 2] = 66628;
         break label$1;
        }
        $484($7_1 | 0);
        $7_1 = 0;
        HEAP32[(0 + 96956 | 0) >> 2] = 67758;
        break label$1;
       }
       $389($0_1 | 0, ($17_1 - $10_1 | 0) + -14 | 0 | 0);
       $39_1 = 0;
       label$565 : {
        label$566 : {
         label$567 : {
          label$568 : {
           label$569 : {
            switch ($28_1 + -16 | 0 | 0) {
            case 8:
             $39_1 = (HEAP32[$0_1 >> 2] | 0) & 3 | 0;
             $40_1 = 0;
             $41_1 = 0;
             break label$568;
            case 0:
             break label$567;
            case 16:
             break label$569;
            default:
             break label$566;
            };
           }
           $41_1 = 0;
           label$571 : {
            if (($31_1 | 0) == (255 | 0)) {
             break label$571
            }
            $39_1 = 0;
            break label$566;
           }
           label$572 : {
            if (($32_1 | 0) == (65280 | 0)) {
             break label$572
            }
            $39_1 = 0;
            break label$566;
           }
           label$573 : {
            if (($33_1 | 0) == (16711680 | 0)) {
             break label$573
            }
            $39_1 = 0;
            break label$566;
           }
           label$574 : {
            if (($30_1 | 0) == (-16777216 | 0)) {
             break label$574
            }
            $39_1 = 0;
            break label$566;
           }
           $40_1 = 1;
           $39_1 = 0;
          }
          $25_1 = 0;
          $26_1 = 0;
          $34_1 = 0;
          $37_1 = 0;
          $15_1 = 0;
          $10_1 = 0;
          $14_1 = 0;
          $17_1 = 0;
          break label$565;
         }
         $39_1 = ((HEAP32[$0_1 >> 2] | 0) << 1 | 0) & 2 | 0;
        }
        if (!$33_1) {
         break label$515
        }
        if (!$32_1) {
         break label$515
        }
        if (!$31_1) {
         break label$515
        }
        $25_1 = ($390($33_1 | 0) | 0) + -7 | 0;
        $15_1 = $391($33_1 | 0) | 0;
        $26_1 = ($390($32_1 | 0) | 0) + -7 | 0;
        $10_1 = $391($32_1 | 0) | 0;
        $34_1 = ($390($31_1 | 0) | 0) + -7 | 0;
        $14_1 = $391($31_1 | 0) | 0;
        $37_1 = ($390($30_1 | 0) | 0) + -7 | 0;
        $41_1 = 1;
        $40_1 = 0;
        $17_1 = $391($30_1 | 0) | 0;
       }
       $21_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($21_1 | 0) < (1 | 0)) {
        break label$516
       }
       $42_1 = 0 - $37_1 | 0;
       $43_1 = 0 - $34_1 | 0;
       $44_1 = 0 - $26_1 | 0;
       $45_1 = 0 - $25_1 | 0;
       $46_1 = ($28_1 | 0) != (16 | 0);
       $47_1 = ($15_1 | 0) > (7 | 0);
       $28_1 = ($38_1 | 0) != (4 | 0);
       $23_1 = 0;
       $48_1 = 0;
       label$575 : while (1) {
        $6_1 = HEAP32[$0_1 >> 2] | 0;
        label$576 : {
         label$577 : {
          if ($41_1) {
           break label$577
          }
          if (($6_1 | 0) < (1 | 0)) {
           break label$576
          }
          $11_1 = HEAP32[$19_1 >> 2] | 0;
          $27_1 = 0;
          $21_1 = HEAP32[$13_1 >> 2] | 0;
          $6_1 = $21_1;
          label$578 : while (1) {
           label$579 : {
            label$580 : {
             if ($6_1 >>> 0 >= $11_1 >>> 0) {
              break label$580
             }
             $21_1 = $6_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $21_1;
             $35_1 = HEAPU8[$6_1 >> 0] | 0;
             $6_1 = $21_1;
             break label$579;
            }
            label$581 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$581
             }
             $35_1 = 0;
             break label$579;
            }
            label$582 : {
             label$583 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$583
              }
              $35_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $11_1 = $8_1;
              break label$582;
             }
             $11_1 = $12_1 + $6_1 | 0;
             $35_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $11_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $21_1 = $8_1;
            $6_1 = $8_1;
           }
           $22_1 = $23_1 + $7_1 | 0;
           HEAP8[($22_1 + 2 | 0) >> 0] = $35_1;
           label$584 : {
            label$585 : {
             if ($6_1 >>> 0 >= $11_1 >>> 0) {
              break label$585
             }
             $21_1 = $6_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $21_1;
             $35_1 = HEAPU8[$6_1 >> 0] | 0;
             $6_1 = $21_1;
             break label$584;
            }
            label$586 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$586
             }
             $35_1 = 0;
             break label$584;
            }
            label$587 : {
             label$588 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$588
              }
              $35_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $11_1 = $8_1;
              break label$587;
             }
             $11_1 = $12_1 + $6_1 | 0;
             $35_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $11_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $21_1 = $8_1;
            $6_1 = $8_1;
           }
           HEAP8[($22_1 + 1 | 0) >> 0] = $35_1;
           label$589 : {
            label$590 : {
             if ($6_1 >>> 0 >= $11_1 >>> 0) {
              break label$590
             }
             $21_1 = $6_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $21_1;
             $35_1 = HEAPU8[$6_1 >> 0] | 0;
             $6_1 = $21_1;
             break label$589;
            }
            label$591 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$591
             }
             $35_1 = 0;
             break label$589;
            }
            label$592 : {
             label$593 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$593
              }
              $35_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $11_1 = $8_1;
              break label$592;
             }
             $11_1 = $12_1 + $6_1 | 0;
             $35_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $11_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $21_1 = $8_1;
            $6_1 = $8_1;
           }
           HEAP8[$22_1 >> 0] = $35_1;
           $22_1 = 255;
           label$594 : {
            if (!$40_1) {
             break label$594
            }
            label$595 : {
             if ($21_1 >>> 0 >= $11_1 >>> 0) {
              break label$595
             }
             $6_1 = $21_1 + 1 | 0;
             HEAP32[$13_1 >> 2] = $6_1;
             $22_1 = HEAPU8[$21_1 >> 0] | 0;
             $21_1 = $6_1;
             break label$594;
            }
            label$596 : {
             if (HEAP32[$9_1 >> 2] | 0) {
              break label$596
             }
             $22_1 = 0;
             $6_1 = $21_1;
             break label$594;
            }
            label$597 : {
             label$598 : {
              $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
              if ($6_1) {
               break label$598
              }
              $22_1 = 0;
              HEAP32[$9_1 >> 2] = 0;
              HEAP8[$12_1 >> 0] = 0;
              $11_1 = $8_1;
              break label$597;
             }
             $11_1 = $12_1 + $6_1 | 0;
             $22_1 = HEAPU8[$12_1 >> 0] | 0;
            }
            HEAP32[$19_1 >> 2] = $11_1;
            HEAP32[$13_1 >> 2] = $8_1;
            $21_1 = $8_1;
            $6_1 = $8_1;
           }
           $35_1 = $23_1 + 3 | 0;
           $36_1 = $22_1 & 255 | 0;
           label$599 : {
            label$600 : {
             if (!$28_1) {
              break label$600
             }
             $23_1 = $35_1;
             break label$599;
            }
            HEAP8[($7_1 + $35_1 | 0) >> 0] = $22_1;
            $23_1 = $23_1 + 4 | 0;
           }
           $24_1 = $24_1 | $36_1 | 0;
           $27_1 = $27_1 + 1 | 0;
           if (($27_1 | 0) < (HEAP32[$0_1 >> 2] | 0 | 0)) {
            continue label$578
           }
           break label$576;
          };
         }
         $27_1 = 0;
         if (($6_1 | 0) <= (0 | 0)) {
          break label$576
         }
         label$601 : while (1) {
          label$602 : {
           label$603 : {
            if ($46_1) {
             break label$603
            }
            label$604 : {
             label$605 : {
              $21_1 = HEAP32[$13_1 >> 2] | 0;
              $11_1 = HEAP32[$19_1 >> 2] | 0;
              if ($21_1 >>> 0 >= $11_1 >>> 0) {
               break label$605
              }
              $6_1 = $21_1 + 1 | 0;
              HEAP32[$13_1 >> 2] = $6_1;
              $22_1 = HEAPU8[$21_1 >> 0] | 0;
              break label$604;
             }
             label$606 : {
              if (HEAP32[$9_1 >> 2] | 0) {
               break label$606
              }
              $22_1 = 0;
              $6_1 = $21_1;
              break label$604;
             }
             label$607 : {
              label$608 : {
               $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
               if ($6_1) {
                break label$608
               }
               $22_1 = 0;
               HEAP32[$9_1 >> 2] = 0;
               HEAP8[$12_1 >> 0] = 0;
               $11_1 = $8_1;
               break label$607;
              }
              $11_1 = $12_1 + $6_1 | 0;
              $22_1 = HEAPU8[$12_1 >> 0] | 0;
             }
             HEAP32[$19_1 >> 2] = $11_1;
             HEAP32[$13_1 >> 2] = $8_1;
             $6_1 = $8_1;
            }
            label$609 : {
             label$610 : {
              if ($6_1 >>> 0 >= $11_1 >>> 0) {
               break label$610
              }
              HEAP32[$13_1 >> 2] = $6_1 + 1 | 0;
              $6_1 = HEAPU8[$6_1 >> 0] | 0;
              break label$609;
             }
             label$611 : {
              if (HEAP32[$9_1 >> 2] | 0) {
               break label$611
              }
              $6_1 = 0;
              break label$609;
             }
             label$612 : {
              label$613 : {
               $6_1 = FUNCTION_TABLE[HEAP32[$18_1 >> 2] | 0 | 0](HEAP32[$20_1 >> 2] | 0, $12_1, HEAP32[$16_1 >> 2] | 0) | 0;
               if ($6_1) {
                break label$613
               }
               $6_1 = 0;
               HEAP32[$9_1 >> 2] = 0;
               HEAP8[$12_1 >> 0] = 0;
               $11_1 = $8_1;
               break label$612;
              }
              $11_1 = $12_1 + $6_1 | 0;
              $6_1 = HEAPU8[$12_1 >> 0] | 0;
             }
             HEAP32[$19_1 >> 2] = $11_1;
             HEAP32[$13_1 >> 2] = $8_1;
            }
            $22_1 = ($6_1 & 255 | 0) << 8 | 0 | ($22_1 & 255 | 0) | 0;
            break label$602;
           }
           $22_1 = $359($0_1 | 0) | 0;
          }
          $6_1 = $15_1;
          $11_1 = $22_1 & $33_1 | 0;
          $21_1 = ($25_1 | 0) < (0 | 0) ? $11_1 << $45_1 | 0 : $11_1 >> $25_1 | 0;
          $11_1 = $21_1;
          label$614 : {
           label$615 : {
            if (!$47_1) {
             break label$615
            }
            $11_1 = $21_1;
            break label$614;
           }
           label$616 : while (1) {
            $11_1 = ($21_1 >> $6_1 | 0) + $11_1 | 0;
            $6_1 = $6_1 + $15_1 | 0;
            if (($6_1 | 0) < (8 | 0)) {
             continue label$616
            }
            break label$616;
           };
          }
          HEAP8[($7_1 + $23_1 | 0) >> 0] = $11_1;
          $35_1 = $23_1 + 1 | 0;
          $6_1 = $10_1;
          $11_1 = $22_1 & $32_1 | 0;
          $21_1 = ($26_1 | 0) < (0 | 0) ? $11_1 << $44_1 | 0 : $11_1 >> $26_1 | 0;
          $11_1 = $21_1;
          label$617 : {
           label$618 : {
            if (($6_1 | 0) <= (7 | 0)) {
             break label$618
            }
            $11_1 = $21_1;
            break label$617;
           }
           label$619 : while (1) {
            $11_1 = ($21_1 >> $6_1 | 0) + $11_1 | 0;
            $6_1 = $6_1 + $10_1 | 0;
            if (($6_1 | 0) < (8 | 0)) {
             continue label$619
            }
            break label$619;
           };
          }
          HEAP8[($7_1 + $35_1 | 0) >> 0] = $11_1;
          $35_1 = $23_1 + 2 | 0;
          $6_1 = $14_1;
          $11_1 = $22_1 & $31_1 | 0;
          $21_1 = ($34_1 | 0) < (0 | 0) ? $11_1 << $43_1 | 0 : $11_1 >> $34_1 | 0;
          $11_1 = $21_1;
          label$620 : {
           label$621 : {
            if (($6_1 | 0) <= (7 | 0)) {
             break label$621
            }
            $11_1 = $21_1;
            break label$620;
           }
           label$622 : while (1) {
            $11_1 = ($21_1 >> $6_1 | 0) + $11_1 | 0;
            $6_1 = $6_1 + $14_1 | 0;
            if (($6_1 | 0) < (8 | 0)) {
             continue label$622
            }
            break label$622;
           };
          }
          HEAP8[($7_1 + $35_1 | 0) >> 0] = $11_1;
          label$623 : {
           label$624 : {
            if ($30_1) {
             break label$624
            }
            $11_1 = 255;
            break label$623;
           }
           $6_1 = $17_1;
           $11_1 = $22_1 & $30_1 | 0;
           $21_1 = ($37_1 | 0) < (0 | 0) ? $11_1 << $42_1 | 0 : $11_1 >> $37_1 | 0;
           $11_1 = $21_1;
           label$625 : {
            if (($6_1 | 0) <= (7 | 0)) {
             break label$625
            }
            $11_1 = $21_1;
            break label$623;
           }
           label$626 : while (1) {
            $11_1 = ($21_1 >> $6_1 | 0) + $11_1 | 0;
            $6_1 = $6_1 + $17_1 | 0;
            if (($6_1 | 0) < (8 | 0)) {
             continue label$626
            }
            break label$626;
           };
          }
          $6_1 = $23_1 + 3 | 0;
          label$627 : {
           label$628 : {
            if (!$28_1) {
             break label$628
            }
            $23_1 = $6_1;
            break label$627;
           }
           HEAP8[($7_1 + $6_1 | 0) >> 0] = $11_1;
           $23_1 = $23_1 + 4 | 0;
          }
          $24_1 = $11_1 | $24_1 | 0;
          $27_1 = $27_1 + 1 | 0;
          if (($27_1 | 0) < (HEAP32[$0_1 >> 2] | 0 | 0)) {
           continue label$601
          }
          break label$601;
         };
        }
        label$629 : {
         label$630 : {
          label$631 : {
           if (HEAP32[$18_1 >> 2] | 0) {
            break label$631
           }
           $6_1 = HEAP32[$13_1 >> 2] | 0;
           break label$630;
          }
          $11_1 = HEAP32[$19_1 >> 2] | 0;
          $6_1 = HEAP32[$13_1 >> 2] | 0;
          $21_1 = $11_1 - $6_1 | 0;
          if (($39_1 | 0) <= ($21_1 | 0)) {
           break label$630
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $11_1;
          FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $39_1 - $21_1 | 0);
          break label$629;
         }
         HEAP32[$13_1 >> 2] = $6_1 + $39_1 | 0;
        }
        $48_1 = $48_1 + 1 | 0;
        $21_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($48_1 | 0) < ($21_1 | 0)) {
         continue label$575
        }
        break label$575;
       };
      }
      label$632 : {
       if (($38_1 | 0) != (4 | 0)) {
        break label$632
       }
       if ($24_1) {
        break label$632
       }
       $6_1 = (Math_imul($21_1, HEAP32[$0_1 >> 2] | 0) << 2 | 0) + -1 | 0;
       if (($6_1 | 0) < (0 | 0)) {
        break label$632
       }
       label$633 : while (1) {
        HEAP8[($7_1 + $6_1 | 0) >> 0] = 255;
        $11_1 = $6_1 >>> 0 > 3 >>> 0;
        $6_1 = $6_1 + -4 | 0;
        if ($11_1) {
         continue label$633
        }
        break label$633;
       };
      }
      label$634 : {
       if (($29_1 | 0) < (1 | 0)) {
        break label$634
       }
       if (($21_1 | 0) < (2 | 0)) {
        break label$634
       }
       $18_1 = $21_1 >>> 1 | 0;
       $12_1 = Math_imul(HEAP32[$0_1 >> 2] | 0, $38_1);
       $9_1 = 0;
       label$635 : while (1) {
        label$636 : {
         if (($12_1 | 0) < (1 | 0)) {
          break label$636
         }
         $14_1 = $7_1 + Math_imul($9_1, $12_1) | 0;
         $8_1 = $7_1 + Math_imul($21_1 + ($9_1 ^ -1 | 0) | 0, $12_1) | 0;
         $6_1 = 0;
         label$637 : while (1) {
          $11_1 = $14_1 + $6_1 | 0;
          $10_1 = HEAPU8[$11_1 >> 0] | 0;
          $13_1 = $8_1 + $6_1 | 0;
          HEAP8[$11_1 >> 0] = HEAPU8[$13_1 >> 0] | 0;
          HEAP8[$13_1 >> 0] = $10_1;
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($12_1 | 0)) {
           continue label$637
          }
          break label$637;
         };
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != ($18_1 | 0)) {
         continue label$635
        }
        break label$635;
       };
      }
      label$638 : {
       if (!$4_1) {
        break label$638
       }
       if (($38_1 | 0) == ($4_1 | 0)) {
        break label$638
       }
       $7_1 = $377($7_1 | 0, $38_1 | 0, $4_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $21_1 | 0) | 0;
       if ($7_1) {
        break label$638
       }
       $7_1 = 0;
       break label$1;
      }
      HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$1
      }
      HEAP32[$3_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      break label$1;
     }
     $484($7_1 | 0);
     $7_1 = 0;
     HEAP32[(0 + 96956 | 0) >> 2] = 66250;
     break label$1;
    }
    HEAP32[(0 + 96956 | 0) >> 2] = $10_1;
   }
   if ((HEAP32[((HEAP32[($5_1 + 144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   label$639 : while (1) {
    label$640 : {
     $6_1 = ($5_1 + 144 | 0) + Math_imul($7_1, 72) | 0;
     $11_1 = $6_1 + 17868 | 0;
     $0_1 = HEAP32[$11_1 >> 2] | 0;
     if (!$0_1) {
      break label$640
     }
     $484($0_1 | 0);
     HEAP32[$11_1 >> 2] = 0;
     HEAP32[($6_1 + 17864 | 0) >> 2] = 0;
    }
    label$641 : {
     $11_1 = $6_1 + 17872 | 0;
     $0_1 = HEAP32[$11_1 >> 2] | 0;
     if (!$0_1) {
      break label$641
     }
     $484($0_1 | 0);
     HEAP32[$11_1 >> 2] = 0;
     HEAP32[($6_1 + 17880 | 0) >> 2] = 0;
    }
    label$642 : {
     $6_1 = $6_1 + 17876 | 0;
     $11_1 = HEAP32[$6_1 >> 2] | 0;
     if (!$11_1) {
      break label$642
     }
     $484($11_1 | 0);
     HEAP32[$6_1 >> 2] = 0;
    }
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) < (HEAP32[((HEAP32[($5_1 + 144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0)) {
     continue label$639
    }
    break label$639;
   };
   $7_1 = 0;
  }
  global$0 = $5_1 + 18672 | 0;
  return $7_1 | 0;
 }
 
 function $350($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $13_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 184 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = $0_1;
  $0_1 = $0_1 + $1_1 | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 180 | 0) >> 2] = $0_1;
  $1_1 = $349($6_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 96960 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!$1_1) {
    break label$1
   }
   $7_1 = HEAP32[$3_1 >> 2] | 0;
   label$2 : {
    if ($5_1) {
     break label$2
    }
    $5_1 = HEAP32[$4_1 >> 2] | 0;
   }
   if (($7_1 | 0) < (2 | 0)) {
    break label$1
   }
   $8_1 = HEAP32[$2_1 >> 2] | 0;
   $9_1 = $7_1 >>> 1 | 0;
   $10_1 = 0;
   label$3 : while (1) {
    label$4 : {
     if (($8_1 | 0) < (1 | 0)) {
      break label$4
     }
     $11_1 = Math_imul($10_1, $8_1);
     $12_1 = Math_imul($7_1 + ($10_1 ^ -1 | 0) | 0, $8_1);
     $13_1 = 0;
     label$5 : while (1) {
      label$6 : {
       if (($5_1 | 0) < (1 | 0)) {
        break label$6
       }
       $14_1 = Math_imul($13_1 + $12_1 | 0, $5_1);
       $15_1 = Math_imul($13_1 + $11_1 | 0, $5_1);
       $0_1 = 0;
       label$7 : while (1) {
        $3_1 = $1_1 + ($0_1 + $15_1 | 0) | 0;
        $2_1 = HEAPU8[$3_1 >> 0] | 0;
        $4_1 = $1_1 + ($0_1 + $14_1 | 0) | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[$4_1 >> 0] | 0;
        HEAP8[$4_1 >> 0] = $2_1;
        $0_1 = $0_1 + 1 | 0;
        if (($0_1 | 0) != ($5_1 | 0)) {
         continue label$7
        }
        break label$7;
       };
      }
      $13_1 = $13_1 + 1 | 0;
      if (($13_1 | 0) != ($8_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $10_1 = $10_1 + 1 | 0;
    if (($10_1 | 0) != ($9_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $6_1 + 192 | 0;
  return $1_1 | 0;
 }
 
 function $351($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $16_1 = 0, $7_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $17_1 = 0, $12_1 = 0, $10_1 = 0, $15_1 = 0, $13_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    $6_1 = $392($0_1 | 0, $5_1 + 16 | 0 | 0) | 0;
    if ($446($6_1 | 0, 68307 | 0, 11 | 0) | 0) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $7_1 = $392($0_1 | 0, $6_1 | 0) | 0;
      if (!(HEAPU8[$7_1 >> 0] | 0)) {
       break label$4
      }
      $6_1 = 0;
      label$5 : while (1) {
       $6_1 = $446($7_1 | 0, 67668 | 0, 23 | 0) | 0 ? $6_1 : 1;
       $8_1 = $392($0_1 | 0, $7_1 | 0) | 0;
       if (HEAPU8[$8_1 >> 0] | 0) {
        continue label$5
       }
       break label$5;
      };
      if ($6_1) {
       break label$3
      }
     }
     $9_1 = 0;
     HEAP32[(0 + 96956 | 0) >> 2] = 66158;
     break label$1;
    }
    label$6 : {
     $6_1 = $392($0_1 | 0, $8_1 | 0) | 0;
     if (!($446($6_1 | 0, 69452 | 0, 3 | 0) | 0)) {
      break label$6
     }
     $9_1 = 0;
     HEAP32[(0 + 96956 | 0) >> 2] = 65867;
     break label$1;
    }
    $6_1 = $6_1 + 3 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
    $10_1 = $478($6_1 | 0, $5_1 + 12 | 0 | 0, 10 | 0) | 0;
    $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    label$7 : while (1) {
     $6_1 = $7_1;
     $7_1 = $6_1 + 1 | 0;
     if ((HEAPU8[$6_1 >> 0] | 0 | 0) == (32 | 0)) {
      continue label$7
     }
     break label$7;
    };
    label$8 : {
     if (!($473($6_1 | 0, 69456 | 0, 3 | 0) | 0)) {
      break label$8
     }
     $9_1 = 0;
     HEAP32[(0 + 96956 | 0) >> 2] = 65867;
     break label$1;
    }
    $7_1 = $6_1 + 3 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $7_1;
    $6_1 = 0;
    $11_1 = $478($7_1 | 0, 0 | 0, 10 | 0) | 0;
    HEAP32[$1_1 >> 2] = $11_1;
    HEAP32[$2_1 >> 2] = $10_1;
    label$9 : {
     if (!$3_1) {
      break label$9
     }
     HEAP32[$3_1 >> 2] = 3;
    }
    $12_1 = $4_1 ? $4_1 : 3;
    $13_1 = Math_imul($11_1, $12_1);
    $9_1 = $483(Math_imul($13_1, $10_1) << 2 | 0 | 0) | 0;
    label$10 : {
     label$11 : {
      if (($11_1 + -32768 | 0) >>> 0 < -32760 >>> 0) {
       break label$11
      }
      label$12 : {
       label$13 : {
        label$14 : {
         if (($10_1 | 0) >= (1 | 0)) {
          break label$14
         }
         $8_1 = 0;
         break label$13;
        }
        $14_1 = $11_1 << 2 | 0;
        $2_1 = $0_1 + 41 | 0;
        $3_1 = $0_1 + 40 | 0;
        $15_1 = 0;
        $8_1 = 0;
        label$15 : while (1) {
         label$16 : {
          label$17 : {
           $16_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
           $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
           if ($16_1 >>> 0 >= $6_1 >>> 0) {
            break label$17
           }
           $7_1 = $16_1 + 1 | 0;
           HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
           $1_1 = HEAPU8[$16_1 >> 0] | 0;
           break label$16;
          }
          label$18 : {
           if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
            break label$18
           }
           $1_1 = 0;
           $7_1 = $16_1;
           break label$16;
          }
          label$19 : {
           label$20 : {
            $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
            if ($6_1) {
             break label$20
            }
            $1_1 = 0;
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            HEAP32[($0_1 + 32 | 0) >> 2] = 0;
            $6_1 = $2_1;
            break label$19;
           }
           $6_1 = $3_1 + $6_1 | 0;
           $1_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $2_1;
          HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
          $7_1 = $2_1;
         }
         label$21 : {
          label$22 : {
           if ($7_1 >>> 0 >= $6_1 >>> 0) {
            break label$22
           }
           $16_1 = $7_1 + 1 | 0;
           HEAP32[($0_1 + 168 | 0) >> 2] = $16_1;
           $17_1 = HEAPU8[$7_1 >> 0] | 0;
           break label$21;
          }
          label$23 : {
           if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
            break label$23
           }
           $17_1 = 0;
           $16_1 = $7_1;
           break label$21;
          }
          label$24 : {
           label$25 : {
            $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
            if ($6_1) {
             break label$25
            }
            $17_1 = 0;
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            HEAP32[($0_1 + 32 | 0) >> 2] = 0;
            $6_1 = $2_1;
            break label$24;
           }
           $6_1 = $3_1 + $6_1 | 0;
           $17_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $2_1;
          HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
          $16_1 = $2_1;
         }
         label$26 : {
          label$27 : {
           if ($16_1 >>> 0 >= $6_1 >>> 0) {
            break label$27
           }
           $4_1 = $16_1 + 1 | 0;
           HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
           $7_1 = HEAPU8[$16_1 >> 0] | 0;
           break label$26;
          }
          label$28 : {
           if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
            break label$28
           }
           $7_1 = 0;
           $4_1 = $16_1;
           break label$26;
          }
          label$29 : {
           label$30 : {
            $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
            if ($6_1) {
             break label$30
            }
            $7_1 = 0;
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            HEAP32[($0_1 + 32 | 0) >> 2] = 0;
            $6_1 = $2_1;
            break label$29;
           }
           $6_1 = $3_1 + $6_1 | 0;
           $7_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $2_1;
          HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
          $4_1 = $2_1;
         }
         label$31 : {
          label$32 : {
           if (($1_1 & 255 | 0 | 0) != (2 | 0)) {
            break label$32
           }
           if (($17_1 & 255 | 0 | 0) != (2 | 0)) {
            break label$32
           }
           if (($7_1 << 24 >> 24 | 0) > (-1 | 0)) {
            break label$31
           }
          }
          HEAP8[($5_1 + 6 | 0) >> 0] = $7_1;
          HEAP8[($5_1 + 5 | 0) >> 0] = $17_1;
          HEAP8[($5_1 + 4 | 0) >> 0] = $1_1;
          HEAP8[($5_1 + 7 | 0) >> 0] = $393($0_1 | 0) | 0;
          $394($9_1 | 0, $5_1 + 4 | 0 | 0, $12_1 | 0);
          $484($8_1 | 0);
          $6_1 = 0;
          $16_1 = 1;
          break label$12;
         }
         $7_1 = ($7_1 & 255 | 0) << 8 | 0;
         label$33 : {
          label$34 : {
           if ($4_1 >>> 0 >= $6_1 >>> 0) {
            break label$34
           }
           HEAP32[($0_1 + 168 | 0) >> 2] = $4_1 + 1 | 0;
           $6_1 = HEAPU8[$4_1 >> 0] | 0;
           break label$33;
          }
          label$35 : {
           if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
            break label$35
           }
           $6_1 = 0;
           break label$33;
          }
          label$36 : {
           label$37 : {
            $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
            if ($6_1) {
             break label$37
            }
            $6_1 = 0;
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            HEAP32[($0_1 + 32 | 0) >> 2] = 0;
            $16_1 = $2_1;
            break label$36;
           }
           $16_1 = $3_1 + $6_1 | 0;
           $6_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $2_1;
          HEAP32[($0_1 + 172 | 0) >> 2] = $16_1;
         }
         label$38 : {
          if (($7_1 | ($6_1 & 255 | 0) | 0 | 0) == ($11_1 | 0)) {
           break label$38
          }
          $484($9_1 | 0);
          $484($8_1 | 0);
          $9_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 67076;
          break label$1;
         }
         label$39 : {
          if ($8_1) {
           break label$39
          }
          $8_1 = $483($14_1 | 0) | 0;
         }
         $7_1 = 0;
         label$40 : while (1) {
          $6_1 = 0;
          label$41 : while (1) {
           label$42 : {
            label$43 : {
             label$44 : {
              $16_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
              $4_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
              if ($16_1 >>> 0 >= $4_1 >>> 0) {
               break label$44
              }
              $1_1 = $16_1 + 1 | 0;
              HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
              $16_1 = HEAPU8[$16_1 >> 0] | 0;
              break label$43;
             }
             if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
              break label$42
             }
             label$45 : {
              label$46 : {
               $16_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
               if ($16_1) {
                break label$46
               }
               $16_1 = 0;
               HEAP8[($0_1 + 40 | 0) >> 0] = 0;
               HEAP32[($0_1 + 32 | 0) >> 2] = 0;
               $4_1 = $2_1;
               break label$45;
              }
              $4_1 = $3_1 + $16_1 | 0;
              $16_1 = HEAPU8[$3_1 >> 0] | 0;
             }
             HEAP32[($0_1 + 168 | 0) >> 2] = $2_1;
             HEAP32[($0_1 + 172 | 0) >> 2] = $4_1;
             $1_1 = $2_1;
            }
            label$47 : {
             $17_1 = $16_1 & 255 | 0;
             if ($17_1 >>> 0 > 128 >>> 0) {
              break label$47
             }
             if (!$17_1) {
              break label$42
             }
             $4_1 = $6_1 + $17_1 | 0;
             label$48 : while (1) {
              label$49 : {
               label$50 : {
                $16_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
                if ($16_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
                 break label$50
                }
                HEAP32[($0_1 + 168 | 0) >> 2] = $16_1 + 1 | 0;
                $16_1 = HEAPU8[$16_1 >> 0] | 0;
                break label$49;
               }
               label$51 : {
                if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
                 break label$51
                }
                $16_1 = 0;
                break label$49;
               }
               label$52 : {
                label$53 : {
                 $16_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
                 if ($16_1) {
                  break label$53
                 }
                 $16_1 = 0;
                 HEAP8[($0_1 + 40 | 0) >> 0] = 0;
                 HEAP32[($0_1 + 32 | 0) >> 2] = 0;
                 $1_1 = $2_1;
                 break label$52;
                }
                $1_1 = $3_1 + $16_1 | 0;
                $16_1 = HEAPU8[$3_1 >> 0] | 0;
               }
               HEAP32[($0_1 + 168 | 0) >> 2] = $2_1;
               HEAP32[($0_1 + 172 | 0) >> 2] = $1_1;
              }
              HEAP8[($8_1 + (($6_1 << 2 | 0) + $7_1 | 0) | 0) >> 0] = $16_1;
              $6_1 = $6_1 + 1 | 0;
              if (($6_1 | 0) != ($4_1 | 0)) {
               continue label$48
              }
              break label$48;
             };
             $6_1 = $4_1;
             break label$42;
            }
            label$54 : {
             label$55 : {
              if ($1_1 >>> 0 >= $4_1 >>> 0) {
               break label$55
              }
              HEAP32[($0_1 + 168 | 0) >> 2] = $1_1 + 1 | 0;
              $4_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$54;
             }
             label$56 : {
              if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
               break label$56
              }
              $4_1 = 0;
              break label$54;
             }
             label$57 : {
              label$58 : {
               $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
               if ($4_1) {
                break label$58
               }
               $4_1 = 0;
               HEAP8[($0_1 + 40 | 0) >> 0] = 0;
               HEAP32[($0_1 + 32 | 0) >> 2] = 0;
               $1_1 = $2_1;
               break label$57;
              }
              $1_1 = $3_1 + $4_1 | 0;
              $4_1 = HEAPU8[$3_1 >> 0] | 0;
             }
             HEAP32[($0_1 + 168 | 0) >> 2] = $2_1;
             HEAP32[($0_1 + 172 | 0) >> 2] = $1_1;
            }
            $16_1 = ($16_1 ^ -128 | 0) & 255 | 0;
            if (!$16_1) {
             break label$42
            }
            $16_1 = $6_1 + $16_1 | 0;
            label$59 : while (1) {
             HEAP8[($8_1 + (($6_1 << 2 | 0) + $7_1 | 0) | 0) >> 0] = $4_1;
             $6_1 = $6_1 + 1 | 0;
             if (($6_1 | 0) != ($16_1 | 0)) {
              continue label$59
             }
             break label$59;
            };
            $6_1 = $16_1;
           }
           if (($6_1 | 0) < ($11_1 | 0)) {
            continue label$41
           }
           break label$41;
          };
          $7_1 = $7_1 + 1 | 0;
          if (($7_1 | 0) != (4 | 0)) {
           continue label$40
          }
          break label$40;
         };
         $7_1 = Math_imul($15_1, $11_1);
         $6_1 = 0;
         label$60 : while (1) {
          $394($9_1 + (Math_imul($6_1 + $7_1 | 0, $12_1) << 2 | 0) | 0 | 0, $8_1 + ($6_1 << 2 | 0) | 0 | 0, $12_1 | 0);
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($11_1 | 0)) {
           continue label$60
          }
          break label$60;
         };
         $15_1 = $15_1 + 1 | 0;
         if (($15_1 | 0) != ($10_1 | 0)) {
          continue label$15
         }
         break label$15;
        };
       }
       $484($8_1 | 0);
       break label$1;
      }
      $7_1 = 1;
      break label$10;
     }
     $7_1 = 0;
    }
    label$61 : while (1) {
     label$62 : {
      label$63 : {
       switch ($7_1 | 0) {
       case 0:
        $16_1 = 0;
        if (($6_1 | 0) >= ($10_1 | 0)) {
         break label$1
        }
        break label$62;
       default:
        break label$63;
       };
      }
      label$65 : {
       label$66 : {
        label$67 : {
         label$68 : {
          $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          if ($3_1) {
           break label$68
          }
          $8_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
          $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
          break label$67;
         }
         $8_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
         $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
         $4_1 = $8_1 - $7_1 | 0;
         if (($4_1 | 0) <= (3 | 0)) {
          break label$66
         }
        }
        $4_1 = $7_1 + 4 | 0;
        if ($4_1 >>> 0 > $8_1 >>> 0) {
         break label$65
        }
        HEAP32[($5_1 + 8 | 0) >> 2] = HEAPU8[$7_1 >> 0] | 0 | ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
        break label$65;
       }
       $410($5_1 + 8 | 0 | 0, $7_1 | 0, $4_1 | 0) | 0;
       FUNCTION_TABLE[$3_1 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, ($5_1 + 8 | 0) + $4_1 | 0, 4 - $4_1 | 0) | 0;
       HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
      }
      $394(($9_1 + (Math_imul($13_1, $6_1) << 2 | 0) | 0) + (Math_imul($16_1, $12_1) << 2 | 0) | 0 | 0, $5_1 + 8 | 0 | 0, $12_1 | 0);
      $16_1 = $16_1 + 1 | 0;
     }
     label$69 : {
      if (($16_1 | 0) < ($11_1 | 0)) {
       break label$69
      }
      $6_1 = $6_1 + 1 | 0;
      $7_1 = 0;
      continue label$61;
     }
     $7_1 = 1;
     continue label$61;
    };
   }
   $9_1 = 0;
   HEAP32[(0 + 96956 | 0) >> 2] = 68130;
  }
  global$0 = $5_1 + 1040 | 0;
  return $9_1 | 0;
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = $0_1 + 41 | 0;
  $2_1 = $0_1 + 40 | 0;
  $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
  $5_1 = 0;
  $6_1 = 35;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if ($4_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      $7_1 = $4_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
      $8_1 = HEAPU8[$4_1 >> 0] | 0;
      $4_1 = $7_1;
      break label$3;
     }
     label$5 : {
      if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
       break label$5
      }
      $8_1 = 0;
      break label$3;
     }
     label$6 : {
      label$7 : {
       $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $2_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($4_1) {
        break label$7
       }
       $8_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $3_1 = $1_1;
       break label$6;
      }
      $3_1 = $2_1 + $4_1 | 0;
      $8_1 = HEAPU8[$2_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 172 | 0) >> 2] = $3_1;
     $4_1 = $1_1;
    }
    label$8 : {
     if (($8_1 & 255 | 0 | 0) != ($6_1 << 24 >> 24 | 0)) {
      break label$8
     }
     $7_1 = 1;
     $6_1 = HEAPU8[($5_1 + 69615 | 0) >> 0] | 0;
     $8_1 = $5_1 + 1 | 0;
     $5_1 = $8_1;
     if (($8_1 | 0) == (11 | 0)) {
      break label$1
     }
     continue label$2;
    }
    break label$2;
   };
   $7_1 = 0;
  }
  i64toi32_i32$1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
  HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
  HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
  return $7_1 | 0;
 }
 
 function $353($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $11_1 = 0, $12_1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $13_1 = 0, $10_1 = 0, $14_1 = 0, $19_1 = 0, $8_1 = 0, $9_1 = 0, $553_1 = 0, $556_1 = 0;
  $5_1 = global$0 - 2512 | 0;
  global$0 = $5_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $2_1 = 0;
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if ($4_1 >>> 0 < $6_1 >>> 0) {
       break label$4
      }
      $3_1 = $4_1;
      $7_1 = 0;
      break label$3;
     }
     $3_1 = $4_1 + 1 | 0;
     HEAP32[$0_1 >> 2] = $3_1;
     $7_1 = HEAPU8[$4_1 >> 0] | 0;
    }
    label$5 : {
     if ($3_1 >>> 0 >= $6_1 >>> 0) {
      break label$5
     }
     HEAP32[$0_1 >> 2] = $3_1 + 1 | 0;
     $2_1 = HEAPU8[$3_1 >> 0] | 0;
    }
    $4_1 = 66516;
    label$6 : {
     if ((($2_1 | ($7_1 << 8 | 0) | 0) >>> 0) % (31 >>> 0) | 0) {
      break label$6
     }
     $4_1 = 66093;
     if ($2_1 & 32 | 0) {
      break label$6
     }
     $4_1 = 66720;
     if (($7_1 & 15 | 0 | 0) == (8 | 0)) {
      break label$2
     }
    }
    $3_1 = 0;
    HEAP32[(0 + 96956 | 0) >> 2] = $4_1;
    break label$1;
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $0_1 + 2052 | 0;
   $9_1 = $0_1 + 32 | 0;
   $4_1 = $0_1 + 12 | 0;
   $7_1 = $0_1 + 8 | 0;
   $10_1 = 0;
   $3_1 = 0;
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : {
          label$14 : {
           label$15 : {
            label$16 : {
             label$17 : {
              label$18 : {
               label$19 : {
                label$20 : {
                 if (($3_1 | 0) > (0 | 0)) {
                  break label$20
                 }
                 label$21 : while (1) {
                  if ($10_1 >>> $3_1 | 0) {
                   break label$19
                  }
                  $2_1 = 0;
                  label$22 : {
                   $6_1 = HEAP32[$0_1 >> 2] | 0;
                   if ($6_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                    break label$22
                   }
                   HEAP32[$0_1 >> 2] = $6_1 + 1 | 0;
                   $2_1 = HEAPU8[$6_1 >> 0] | 0;
                  }
                  $10_1 = ($2_1 & 255 | 0) << $3_1 | 0 | $10_1 | 0;
                  HEAP32[$4_1 >> 2] = $10_1;
                  $2_1 = $3_1 + 8 | 0;
                  HEAP32[$7_1 >> 2] = $2_1;
                  $6_1 = ($3_1 | 0) < (17 | 0);
                  $3_1 = $2_1;
                  if ($6_1) {
                   continue label$21
                  }
                  break label$21;
                 };
                }
                $2_1 = $10_1 >>> 1 | 0;
                HEAP32[$4_1 >> 2] = $2_1;
                $3_1 = $3_1 + -1 | 0;
                HEAP32[$7_1 >> 2] = $3_1;
                label$23 : {
                 if ($3_1 >>> 0 > 1 >>> 0) {
                  break label$23
                 }
                 label$24 : while (1) {
                  if ($2_1 >>> $3_1 | 0) {
                   break label$18
                  }
                  $6_1 = 0;
                  label$25 : {
                   $11_1 = HEAP32[$0_1 >> 2] | 0;
                   if ($11_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                    break label$25
                   }
                   HEAP32[$0_1 >> 2] = $11_1 + 1 | 0;
                   $6_1 = HEAPU8[$11_1 >> 0] | 0;
                  }
                  $2_1 = ($6_1 & 255 | 0) << $3_1 | 0 | $2_1 | 0;
                  HEAP32[$4_1 >> 2] = $2_1;
                  $6_1 = $3_1 + 8 | 0;
                  HEAP32[$7_1 >> 2] = $6_1;
                  $11_1 = ($3_1 | 0) < (17 | 0);
                  $3_1 = $6_1;
                  if ($11_1) {
                   continue label$24
                  }
                  break label$24;
                 };
                }
                $11_1 = $2_1 >>> 2 | 0;
                HEAP32[$4_1 >> 2] = $11_1;
                $6_1 = $3_1 + -2 | 0;
                HEAP32[$7_1 >> 2] = $6_1;
                $3_1 = 0;
                label$26 : {
                 switch ($2_1 & 3 | 0 | 0) {
                 case 0:
                  label$29 : {
                   $3_1 = $6_1 & 7 | 0;
                   if (!$3_1) {
                    break label$29
                   }
                   $11_1 = $11_1 >>> $3_1 | 0;
                   HEAP32[$4_1 >> 2] = $11_1;
                   $6_1 = $6_1 & -8 | 0;
                   HEAP32[$7_1 >> 2] = $6_1;
                  }
                  $3_1 = 0;
                  label$30 : {
                   label$31 : {
                    if (!$6_1) {
                     break label$31
                    }
                    label$32 : while (1) {
                     $2_1 = $3_1;
                     HEAP8[(($5_1 + 488 | 0) + $3_1 | 0) >> 0] = $11_1;
                     $11_1 = $11_1 >>> 8 | 0;
                     $3_1 = $3_1 + 1 | 0;
                     $12_1 = $6_1 >>> 0 > 8 >>> 0;
                     $13_1 = $6_1 + -8 | 0;
                     $6_1 = $13_1;
                     if ($12_1) {
                      continue label$32
                     }
                     break label$32;
                    };
                    HEAP32[$4_1 >> 2] = $11_1;
                    HEAP32[$7_1 >> 2] = $13_1;
                    if ($13_1) {
                     break label$17
                    }
                    if ($2_1 >>> 0 > 2 >>> 0) {
                     break label$30
                    }
                   }
                   $2_1 = HEAP32[$0_1 >> 2] | 0;
                   $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                   label$33 : while (1) {
                    $6_1 = 0;
                    label$34 : {
                     if ($2_1 >>> 0 >= $11_1 >>> 0) {
                      break label$34
                     }
                     $12_1 = $2_1 + 1 | 0;
                     HEAP32[$0_1 >> 2] = $12_1;
                     $6_1 = HEAPU8[$2_1 >> 0] | 0;
                     $2_1 = $12_1;
                    }
                    HEAP8[(($5_1 + 488 | 0) + $3_1 | 0) >> 0] = $6_1;
                    $3_1 = $3_1 + 1 | 0;
                    if (($3_1 | 0) != (4 | 0)) {
                     continue label$33
                    }
                    break label$33;
                   };
                  }
                  label$35 : {
                   label$36 : {
                    label$37 : {
                     label$38 : {
                      $6_1 = HEAPU8[($5_1 + 488 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 489 | 0) >> 0] | 0) << 8 | 0) | 0;
                      if ((HEAPU8[($5_1 + 490 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 491 | 0) >> 0] | 0) << 8 | 0) | 0 | 0) == ($6_1 ^ 65535 | 0 | 0)) {
                       break label$38
                      }
                      $0_1 = 65934;
                      break label$37;
                     }
                     label$39 : {
                      $3_1 = HEAP32[$0_1 >> 2] | 0;
                      if (($3_1 + $6_1 | 0) >>> 0 <= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                       break label$39
                      }
                      $0_1 = 66499;
                      break label$37;
                     }
                     $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                     if (($1_1 + $6_1 | 0) >>> 0 <= $2_1 >>> 0) {
                      break label$35
                     }
                     label$40 : {
                      if (HEAP32[($0_1 + 28 | 0) >> 2] | 0) {
                       break label$40
                      }
                      $0_1 = 66034;
                      break label$37;
                     }
                     $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                     $2_1 = $2_1 - $11_1 | 0;
                     $12_1 = $1_1 - $11_1 | 0;
                     $1_1 = $12_1 + $6_1 | 0;
                     label$41 : while (1) {
                      $3_1 = $2_1;
                      $2_1 = $3_1 << 1 | 0;
                      if (($1_1 | 0) > ($3_1 | 0)) {
                       continue label$41
                      }
                      break label$41;
                     };
                     $1_1 = $485($11_1 | 0, $3_1 | 0) | 0;
                     if ($1_1) {
                      break label$36
                     }
                     $0_1 = 66853;
                    }
                    $3_1 = 0;
                    HEAP32[(0 + 96956 | 0) >> 2] = $0_1;
                    break label$1;
                   }
                   HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
                   HEAP32[($0_1 + 24 | 0) >> 2] = $1_1 + $3_1 | 0;
                   $1_1 = $1_1 + $12_1 | 0;
                   HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
                   $3_1 = HEAP32[$0_1 >> 2] | 0;
                  }
                  $410($1_1 | 0, $3_1 | 0, $6_1 | 0) | 0;
                  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
                  $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $6_1 | 0;
                  break label$8;
                 case 1:
                  label$42 : {
                   if (HEAPU8[(0 + 97007 | 0) >> 0] | 0) {
                    break label$42
                   }
                   $411(97008 | 0, 8 | 0, 144 | 0) | 0;
                   $411(97152 | 0, 9 | 0, 112 | 0) | 0;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$0 = 117901063;
                   HEAP32[(i64toi32_i32$1 + 97280 | 0) >> 2] = 117901063;
                   HEAP32[(i64toi32_i32$1 + 97284 | 0) >> 2] = i64toi32_i32$0;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$0 = 117901063;
                   HEAP32[(i64toi32_i32$1 + 97272 | 0) >> 2] = 117901063;
                   HEAP32[(i64toi32_i32$1 + 97276 | 0) >> 2] = i64toi32_i32$0;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$0 = 117901063;
                   HEAP32[(i64toi32_i32$1 + 97264 | 0) >> 2] = 117901063;
                   HEAP32[(i64toi32_i32$1 + 97268 | 0) >> 2] = i64toi32_i32$0;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$0 = 134744072;
                   HEAP32[(i64toi32_i32$1 + 97288 | 0) >> 2] = 134744072;
                   HEAP32[(i64toi32_i32$1 + 97292 | 0) >> 2] = i64toi32_i32$0;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$0 = 84215045;
                   HEAP32[(i64toi32_i32$1 + 96976 | 0) >> 2] = 84215045;
                   HEAP32[(i64toi32_i32$1 + 96980 | 0) >> 2] = i64toi32_i32$0;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$0 = 84215045;
                   HEAP32[(i64toi32_i32$1 + 96984 | 0) >> 2] = 84215045;
                   HEAP32[(i64toi32_i32$1 + 96988 | 0) >> 2] = i64toi32_i32$0;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$0 = 84215045;
                   HEAP32[(i64toi32_i32$1 + 96992 | 0) >> 2] = 84215045;
                   HEAP32[(i64toi32_i32$1 + 96996 | 0) >> 2] = i64toi32_i32$0;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$0 = 84215045;
                   HEAP32[(i64toi32_i32$1 + 97e3 | 0) >> 2] = 84215045;
                   HEAP32[(i64toi32_i32$1 + 97004 | 0) >> 2] = i64toi32_i32$0;
                  }
                  if (!($354($9_1 | 0, 97008 | 0, 288 | 0) | 0)) {
                   break label$1
                  }
                  if (!($354($8_1 | 0, 96976 | 0, 32 | 0) | 0)) {
                   break label$1
                  }
                  break label$9;
                 case 3:
                  break label$1;
                 default:
                  break label$26;
                 };
                }
                label$43 : {
                 if ($6_1 >>> 0 > 4 >>> 0) {
                  break label$43
                 }
                 label$44 : while (1) {
                  if ($11_1 >>> $6_1 | 0) {
                   break label$16
                  }
                  $3_1 = 0;
                  label$45 : {
                   $1_1 = HEAP32[$0_1 >> 2] | 0;
                   if ($1_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                    break label$45
                   }
                   HEAP32[$0_1 >> 2] = $1_1 + 1 | 0;
                   $3_1 = HEAPU8[$1_1 >> 0] | 0;
                  }
                  $11_1 = ($3_1 & 255 | 0) << $6_1 | 0 | $11_1 | 0;
                  HEAP32[$4_1 >> 2] = $11_1;
                  $3_1 = $6_1 + 8 | 0;
                  HEAP32[$7_1 >> 2] = $3_1;
                  $1_1 = ($6_1 | 0) < (17 | 0);
                  $6_1 = $3_1;
                  if ($1_1) {
                   continue label$44
                  }
                  break label$44;
                 };
                }
                $1_1 = $11_1 >>> 5 | 0;
                HEAP32[$4_1 >> 2] = $1_1;
                $3_1 = $6_1 + -5 | 0;
                HEAP32[$7_1 >> 2] = $3_1;
                label$46 : {
                 if ($3_1 >>> 0 > 4 >>> 0) {
                  break label$46
                 }
                 label$47 : while (1) {
                  if ($1_1 >>> $3_1 | 0) {
                   break label$15
                  }
                  $2_1 = 0;
                  label$48 : {
                   $6_1 = HEAP32[$0_1 >> 2] | 0;
                   if ($6_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                    break label$48
                   }
                   HEAP32[$0_1 >> 2] = $6_1 + 1 | 0;
                   $2_1 = HEAPU8[$6_1 >> 0] | 0;
                  }
                  $1_1 = ($2_1 & 255 | 0) << $3_1 | 0 | $1_1 | 0;
                  HEAP32[$4_1 >> 2] = $1_1;
                  $2_1 = $3_1 + 8 | 0;
                  HEAP32[$7_1 >> 2] = $2_1;
                  $6_1 = ($3_1 | 0) < (17 | 0);
                  $3_1 = $2_1;
                  if ($6_1) {
                   continue label$47
                  }
                  break label$47;
                 };
                }
                $2_1 = $1_1 >>> 5 | 0;
                HEAP32[$4_1 >> 2] = $2_1;
                $3_1 = $3_1 + -5 | 0;
                HEAP32[$7_1 >> 2] = $3_1;
                label$49 : {
                 if ($3_1 >>> 0 > 3 >>> 0) {
                  break label$49
                 }
                 label$50 : while (1) {
                  if ($2_1 >>> $3_1 | 0) {
                   break label$14
                  }
                  $6_1 = 0;
                  label$51 : {
                   $12_1 = HEAP32[$0_1 >> 2] | 0;
                   if ($12_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                    break label$51
                   }
                   HEAP32[$0_1 >> 2] = $12_1 + 1 | 0;
                   $6_1 = HEAPU8[$12_1 >> 0] | 0;
                  }
                  $2_1 = ($6_1 & 255 | 0) << $3_1 | 0 | $2_1 | 0;
                  HEAP32[$4_1 >> 2] = $2_1;
                  $6_1 = $3_1 + 8 | 0;
                  HEAP32[$7_1 >> 2] = $6_1;
                  $12_1 = ($3_1 | 0) < (17 | 0);
                  $3_1 = $6_1;
                  if ($12_1) {
                   continue label$50
                  }
                  break label$50;
                 };
                }
                $13_1 = ($11_1 & 31 | 0) + 257 | 0;
                $14_1 = ($1_1 & 31 | 0) + 1 | 0;
                $1_1 = $2_1 >>> 4 | 0;
                HEAP32[$4_1 >> 2] = $1_1;
                $3_1 = $3_1 + -4 | 0;
                HEAP32[$7_1 >> 2] = $3_1;
                $11_1 = 0;
                $19_1 = 0;
                HEAP8[($5_1 + 15 | 0) >> 0] = $19_1;
                HEAP8[($5_1 + 16 | 0) >> 0] = $19_1 >>> 8 | 0;
                HEAP8[($5_1 + 17 | 0) >> 0] = $19_1 >>> 16 | 0;
                HEAP8[($5_1 + 18 | 0) >> 0] = $19_1 >>> 24 | 0;
                i64toi32_i32$1 = $5_1;
                i64toi32_i32$0 = 0;
                HEAP32[($5_1 + 8 | 0) >> 2] = 0;
                HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$1 = $5_1;
                i64toi32_i32$0 = 0;
                HEAP32[$5_1 >> 2] = 0;
                HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                $12_1 = ($2_1 & 15 | 0) + 3 | 0;
                label$52 : while (1) {
                 label$53 : {
                  if ($3_1 >>> 0 > 2 >>> 0) {
                   break label$53
                  }
                  label$54 : while (1) {
                   if ($1_1 >>> $3_1 | 0) {
                    break label$13
                   }
                   $2_1 = 0;
                   label$55 : {
                    $6_1 = HEAP32[$0_1 >> 2] | 0;
                    if ($6_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                     break label$55
                    }
                    HEAP32[$0_1 >> 2] = $6_1 + 1 | 0;
                    $2_1 = HEAPU8[$6_1 >> 0] | 0;
                   }
                   $1_1 = ($2_1 & 255 | 0) << $3_1 | 0 | $1_1 | 0;
                   HEAP32[$4_1 >> 2] = $1_1;
                   $2_1 = $3_1 + 8 | 0;
                   HEAP32[$7_1 >> 2] = $2_1;
                   $6_1 = ($3_1 | 0) < (17 | 0);
                   $3_1 = $2_1;
                   if ($6_1) {
                    continue label$54
                   }
                   break label$54;
                  };
                 }
                 $2_1 = $1_1 >>> 3 | 0;
                 HEAP32[$4_1 >> 2] = $2_1;
                 $3_1 = $3_1 + -3 | 0;
                 HEAP32[$7_1 >> 2] = $3_1;
                 HEAP8[($5_1 + (HEAPU8[($11_1 + 71488 | 0) >> 0] | 0) | 0) >> 0] = $1_1 & 7 | 0;
                 $6_1 = ($11_1 | 0) != ($12_1 | 0);
                 $1_1 = $2_1;
                 $11_1 = $11_1 + 1 | 0;
                 if ($6_1) {
                  continue label$52
                 }
                 break label$52;
                };
                label$56 : {
                 if (!($354($5_1 + 488 | 0 | 0, $5_1 | 0, 19 | 0) | 0)) {
                  break label$56
                 }
                 $12_1 = $14_1 + $13_1 | 0;
                 $11_1 = 0;
                 label$57 : {
                  label$58 : while (1) {
                   $3_1 = $355($0_1 | 0, $5_1 + 488 | 0 | 0) | 0;
                   if ($3_1 >>> 0 > 18 >>> 0) {
                    break label$57
                   }
                   label$59 : {
                    label$60 : {
                     if ($3_1 >>> 0 > 15 >>> 0) {
                      break label$60
                     }
                     HEAP8[(($5_1 + 32 | 0) + $11_1 | 0) >> 0] = $3_1;
                     $11_1 = $11_1 + 1 | 0;
                     break label$59;
                    }
                    label$61 : {
                     switch ($3_1 + -16 | 0 | 0) {
                     case 0:
                      $1_1 = HEAP32[$4_1 >> 2] | 0;
                      label$64 : {
                       $3_1 = HEAP32[$7_1 >> 2] | 0;
                       if (($3_1 | 0) > (1 | 0)) {
                        break label$64
                       }
                       label$65 : while (1) {
                        if ($1_1 >>> $3_1 | 0) {
                         break label$12
                        }
                        $2_1 = 0;
                        label$66 : {
                         $6_1 = HEAP32[$0_1 >> 2] | 0;
                         if ($6_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                          break label$66
                         }
                         HEAP32[$0_1 >> 2] = $6_1 + 1 | 0;
                         $2_1 = HEAPU8[$6_1 >> 0] | 0;
                        }
                        $1_1 = ($2_1 & 255 | 0) << $3_1 | 0 | $1_1 | 0;
                        HEAP32[$4_1 >> 2] = $1_1;
                        $2_1 = $3_1 + 8 | 0;
                        HEAP32[$7_1 >> 2] = $2_1;
                        $6_1 = ($3_1 | 0) < (17 | 0);
                        $3_1 = $2_1;
                        if ($6_1) {
                         continue label$65
                        }
                        break label$65;
                       };
                      }
                      HEAP32[$4_1 >> 2] = $1_1 >>> 2 | 0;
                      HEAP32[$7_1 >> 2] = $3_1 + -2 | 0;
                      $3_1 = ($5_1 + 32 | 0) + $11_1 | 0;
                      $553_1 = $3_1;
                      $556_1 = HEAPU8[($3_1 + -1 | 0) >> 0] | 0;
                      $3_1 = ($1_1 & 3 | 0) + 3 | 0;
                      $411($553_1 | 0, $556_1 | 0, $3_1 | 0) | 0;
                      $11_1 = $3_1 + $11_1 | 0;
                      break label$59;
                     case 1:
                      $1_1 = HEAP32[$4_1 >> 2] | 0;
                      label$67 : {
                       $3_1 = HEAP32[$7_1 >> 2] | 0;
                       if (($3_1 | 0) > (2 | 0)) {
                        break label$67
                       }
                       label$68 : while (1) {
                        if ($1_1 >>> $3_1 | 0) {
                         break label$11
                        }
                        $2_1 = 0;
                        label$69 : {
                         $6_1 = HEAP32[$0_1 >> 2] | 0;
                         if ($6_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                          break label$69
                         }
                         HEAP32[$0_1 >> 2] = $6_1 + 1 | 0;
                         $2_1 = HEAPU8[$6_1 >> 0] | 0;
                        }
                        $1_1 = ($2_1 & 255 | 0) << $3_1 | 0 | $1_1 | 0;
                        HEAP32[$4_1 >> 2] = $1_1;
                        $2_1 = $3_1 + 8 | 0;
                        HEAP32[$7_1 >> 2] = $2_1;
                        $6_1 = ($3_1 | 0) < (17 | 0);
                        $3_1 = $2_1;
                        if ($6_1) {
                         continue label$68
                        }
                        break label$68;
                       };
                      }
                      HEAP32[$4_1 >> 2] = $1_1 >>> 3 | 0;
                      HEAP32[$7_1 >> 2] = $3_1 + -3 | 0;
                      $3_1 = ($1_1 & 7 | 0) + 3 | 0;
                      $411(($5_1 + 32 | 0) + $11_1 | 0 | 0, 0 | 0, $3_1 | 0) | 0;
                      $11_1 = $3_1 + $11_1 | 0;
                      break label$59;
                     default:
                      break label$61;
                     };
                    }
                    $1_1 = HEAP32[$4_1 >> 2] | 0;
                    label$70 : {
                     $3_1 = HEAP32[$7_1 >> 2] | 0;
                     if (($3_1 | 0) > (6 | 0)) {
                      break label$70
                     }
                     label$71 : while (1) {
                      if ($1_1 >>> $3_1 | 0) {
                       break label$10
                      }
                      $2_1 = 0;
                      label$72 : {
                       $6_1 = HEAP32[$0_1 >> 2] | 0;
                       if ($6_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
                        break label$72
                       }
                       HEAP32[$0_1 >> 2] = $6_1 + 1 | 0;
                       $2_1 = HEAPU8[$6_1 >> 0] | 0;
                      }
                      $1_1 = ($2_1 & 255 | 0) << $3_1 | 0 | $1_1 | 0;
                      HEAP32[$4_1 >> 2] = $1_1;
                      $2_1 = $3_1 + 8 | 0;
                      HEAP32[$7_1 >> 2] = $2_1;
                      $6_1 = ($3_1 | 0) < (17 | 0);
                      $3_1 = $2_1;
                      if ($6_1) {
                       continue label$71
                      }
                      break label$71;
                     };
                    }
                    HEAP32[$4_1 >> 2] = $1_1 >>> 7 | 0;
                    HEAP32[$7_1 >> 2] = $3_1 + -7 | 0;
                    $3_1 = ($1_1 & 127 | 0) + 11 | 0;
                    $411(($5_1 + 32 | 0) + $11_1 | 0 | 0, 0 | 0, $3_1 | 0) | 0;
                    $11_1 = $3_1 + $11_1 | 0;
                   }
                   if (($11_1 | 0) < ($12_1 | 0)) {
                    continue label$58
                   }
                   break label$58;
                  };
                  if (($11_1 | 0) != ($12_1 | 0)) {
                   break label$57
                  }
                  if (!($354($9_1 | 0, $5_1 + 32 | 0 | 0, $13_1 | 0) | 0)) {
                   break label$56
                  }
                  if ($354($8_1 | 0, ($5_1 + 32 | 0) + $13_1 | 0 | 0, $14_1 | 0) | 0) {
                   break label$9
                  }
                  $3_1 = 0;
                  break label$1;
                 }
                 HEAP32[(0 + 96956 | 0) >> 2] = 66275;
                }
                $3_1 = 0;
                break label$1;
               }
               fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
               wasm2js_trap();
              }
              fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
              wasm2js_trap();
             }
             fimport$54(69162 | 0, 67153 | 0, 3749 | 0, 67019 | 0);
             wasm2js_trap();
            }
            fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
            wasm2js_trap();
           }
           fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
           wasm2js_trap();
          }
          fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
          wasm2js_trap();
         }
         fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
         wasm2js_trap();
        }
        fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
        wasm2js_trap();
       }
       fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
       wasm2js_trap();
      }
      fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
      wasm2js_trap();
     }
     $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     label$73 : {
      label$74 : while (1) {
       label$75 : {
        $11_1 = $355($0_1 | 0, $9_1 | 0) | 0;
        if (($11_1 | 0) > (255 | 0)) {
         break label$75
        }
        label$76 : {
         if (($11_1 | 0) > (-1 | 0)) {
          break label$76
         }
         $3_1 = 0;
         HEAP32[(0 + 96956 | 0) >> 2] = 67646;
         break label$1;
        }
        label$77 : {
         $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         if ($1_1 >>> 0 < $3_1 >>> 0) {
          break label$77
         }
         HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
         label$78 : {
          if (HEAP32[($0_1 + 28 | 0) >> 2] | 0) {
           break label$78
          }
          $3_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 66034;
          break label$1;
         }
         $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         $2_1 = $3_1 - $6_1 | 0;
         $1_1 = $1_1 - $6_1 | 0;
         label$79 : while (1) {
          $3_1 = $2_1;
          $2_1 = $3_1 << 1 | 0;
          if (($1_1 | 0) >= ($3_1 | 0)) {
           continue label$79
          }
          break label$79;
         };
         label$80 : {
          $2_1 = $485($6_1 | 0, $3_1 | 0) | 0;
          if ($2_1) {
           break label$80
          }
          $3_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 66853;
          break label$1;
         }
         HEAP32[($0_1 + 20 | 0) >> 2] = $2_1;
         HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + $3_1 | 0;
         $1_1 = $2_1 + $1_1 | 0;
         HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
        }
        HEAP8[$1_1 >> 0] = $11_1;
        $1_1 = $1_1 + 1 | 0;
        continue label$74;
       }
       if (($11_1 | 0) == (256 | 0)) {
        break label$8
       }
       $12_1 = ($11_1 + -257 | 0) << 2 | 0;
       $6_1 = HEAP32[($12_1 + 71520 | 0) >> 2] | 0;
       label$81 : {
        label$82 : {
         if (($11_1 + -285 | 0) >>> 0 < -20 >>> 0) {
          break label$82
         }
         $2_1 = HEAP32[$4_1 >> 2] | 0;
         label$83 : {
          $3_1 = HEAP32[$7_1 >> 2] | 0;
          $13_1 = HEAP32[($12_1 + 71648 | 0) >> 2] | 0;
          if (($3_1 | 0) >= ($13_1 | 0)) {
           break label$83
          }
          label$84 : while (1) {
           if ($2_1 >>> $3_1 | 0) {
            break label$81
           }
           $11_1 = 0;
           label$85 : {
            $12_1 = HEAP32[$0_1 >> 2] | 0;
            if ($12_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
             break label$85
            }
            HEAP32[$0_1 >> 2] = $12_1 + 1 | 0;
            $11_1 = HEAPU8[$12_1 >> 0] | 0;
           }
           $2_1 = ($11_1 & 255 | 0) << $3_1 | 0 | $2_1 | 0;
           HEAP32[$4_1 >> 2] = $2_1;
           $11_1 = $3_1 + 8 | 0;
           HEAP32[$7_1 >> 2] = $11_1;
           $12_1 = ($3_1 | 0) < (17 | 0);
           $3_1 = $11_1;
           if ($12_1) {
            continue label$84
           }
           break label$84;
          };
         }
         HEAP32[$4_1 >> 2] = $2_1 >>> $13_1 | 0;
         HEAP32[$7_1 >> 2] = $3_1 - $13_1 | 0;
         $6_1 = ($2_1 & ((-1 << $13_1 | 0) ^ -1 | 0) | 0) + $6_1 | 0;
        }
        label$86 : {
         $3_1 = $355($0_1 | 0, $8_1 | 0) | 0;
         if (($3_1 | 0) > (-1 | 0)) {
          break label$86
         }
         $3_1 = 0;
         HEAP32[(0 + 96956 | 0) >> 2] = 67646;
         break label$1;
        }
        $11_1 = $3_1 << 2 | 0;
        $13_1 = HEAP32[($11_1 + 71776 | 0) >> 2] | 0;
        label$87 : {
         if (($3_1 + -30 | 0) >>> 0 < -26 >>> 0) {
          break label$87
         }
         $2_1 = HEAP32[$4_1 >> 2] | 0;
         label$88 : {
          $3_1 = HEAP32[$7_1 >> 2] | 0;
          $14_1 = HEAP32[($11_1 + 71904 | 0) >> 2] | 0;
          if (($3_1 | 0) >= ($14_1 | 0)) {
           break label$88
          }
          label$89 : while (1) {
           if ($2_1 >>> $3_1 | 0) {
            break label$73
           }
           $11_1 = 0;
           label$90 : {
            $12_1 = HEAP32[$0_1 >> 2] | 0;
            if ($12_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
             break label$90
            }
            HEAP32[$0_1 >> 2] = $12_1 + 1 | 0;
            $11_1 = HEAPU8[$12_1 >> 0] | 0;
           }
           $2_1 = ($11_1 & 255 | 0) << $3_1 | 0 | $2_1 | 0;
           HEAP32[$4_1 >> 2] = $2_1;
           $11_1 = $3_1 + 8 | 0;
           HEAP32[$7_1 >> 2] = $11_1;
           $12_1 = ($3_1 | 0) < (17 | 0);
           $3_1 = $11_1;
           if ($12_1) {
            continue label$89
           }
           break label$89;
          };
         }
         HEAP32[$4_1 >> 2] = $2_1 >>> $14_1 | 0;
         HEAP32[$7_1 >> 2] = $3_1 - $14_1 | 0;
         $13_1 = ($2_1 & ((-1 << $14_1 | 0) ^ -1 | 0) | 0) + $13_1 | 0;
        }
        label$91 : {
         $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         $12_1 = $1_1 - $11_1 | 0;
         if (($12_1 | 0) >= ($13_1 | 0)) {
          break label$91
         }
         $3_1 = 0;
         HEAP32[(0 + 96956 | 0) >> 2] = 65898;
         break label$1;
        }
        label$92 : {
         $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         if (($1_1 + $6_1 | 0) >>> 0 <= $3_1 >>> 0) {
          break label$92
         }
         HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
         label$93 : {
          if (HEAP32[($0_1 + 28 | 0) >> 2] | 0) {
           break label$93
          }
          $3_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 66034;
          break label$1;
         }
         $2_1 = $12_1 + $6_1 | 0;
         $1_1 = $3_1 - $11_1 | 0;
         label$94 : while (1) {
          $3_1 = $1_1;
          $1_1 = $3_1 << 1 | 0;
          if (($2_1 | 0) > ($3_1 | 0)) {
           continue label$94
          }
          break label$94;
         };
         label$95 : {
          $1_1 = $485($11_1 | 0, $3_1 | 0) | 0;
          if ($1_1) {
           break label$95
          }
          $3_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 66853;
          break label$1;
         }
         HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
         HEAP32[($0_1 + 24 | 0) >> 2] = $1_1 + $3_1 | 0;
         $1_1 = $1_1 + $12_1 | 0;
         HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
        }
        $3_1 = $1_1 - $13_1 | 0;
        label$96 : {
         if (($13_1 | 0) != (1 | 0)) {
          break label$96
         }
         if (!$6_1) {
          continue label$74
         }
         $1_1 = ($411($1_1 | 0, HEAPU8[$3_1 >> 0] | 0 | 0, $6_1 | 0) | 0) + $6_1 | 0;
         continue label$74;
        }
        if (!$6_1) {
         continue label$74
        }
        label$97 : while (1) {
         HEAP8[$1_1 >> 0] = HEAPU8[$3_1 >> 0] | 0;
         $1_1 = $1_1 + 1 | 0;
         $3_1 = $3_1 + 1 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1) {
          continue label$97
         }
         continue label$74;
        };
       }
       break label$74;
      };
      fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
      wasm2js_trap();
     }
     fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
     wasm2js_trap();
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
    label$98 : {
     if ($10_1 & 1 | 0) {
      break label$98
     }
     $10_1 = HEAP32[$4_1 >> 2] | 0;
     $3_1 = HEAP32[$7_1 >> 2] | 0;
     continue label$7;
    }
    break label$7;
   };
   $3_1 = 1;
  }
  global$0 = $5_1 + 2512 | 0;
  return $3_1 | 0;
 }
 
 function $354($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $3_1 = $411($3_1 | 0, 0 | 0, 68 | 0) | 0;
  $5_1 = $411($0_1 | 0, 0 | 0, 1024 | 0) | 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $0_1 = $3_1 + ((HEAPU8[($1_1 + $4_1 | 0) >> 0] | 0) << 2 | 0) | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $4_1 = 1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      if ((HEAP32[($3_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0 | 0) > (1 << $4_1 | 0 | 0)) {
       break label$5
      }
      $0_1 = 1;
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != (16 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $6_1 = 0;
     $4_1 = 0;
     label$7 : while (1) {
      $7_1 = $0_1 << 2 | 0;
      HEAP32[(($3_1 + 80 | 0) + $7_1 | 0) >> 2] = $4_1;
      $8_1 = $5_1 + ($0_1 << 1 | 0) | 0;
      HEAP16[($8_1 + 1124 | 0) >> 1] = $6_1;
      HEAP16[($8_1 + 1024 | 0) >> 1] = $4_1;
      $8_1 = HEAP32[($3_1 + $7_1 | 0) >> 2] | 0;
      $4_1 = $8_1 + $4_1 | 0;
      label$8 : {
       if (!$8_1) {
        break label$8
       }
       if (($4_1 | 0) <= (1 << $0_1 | 0 | 0)) {
        break label$8
       }
       $0_1 = 66275;
       break label$4;
      }
      HEAP32[(($5_1 + $7_1 | 0) + 1056 | 0) >> 2] = $4_1 << (16 - $0_1 | 0) | 0;
      $6_1 = $8_1 + $6_1 | 0;
      $4_1 = $4_1 << 1 | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != (16 | 0)) {
       continue label$7
      }
      break label$7;
     };
     HEAP32[($5_1 + 1120 | 0) >> 2] = 65536;
     $4_1 = 1;
     if (($2_1 | 0) < (1 | 0)) {
      break label$3
     }
     $7_1 = 0;
     label$9 : while (1) {
      label$10 : {
       $6_1 = HEAPU8[($1_1 + $7_1 | 0) >> 0] | 0;
       if (!$6_1) {
        break label$10
       }
       $9_1 = ($3_1 + 80 | 0) + ($6_1 << 2 | 0) | 0;
       $8_1 = HEAP32[$9_1 >> 2] | 0;
       $4_1 = $5_1 + ($6_1 << 1 | 0) | 0;
       $4_1 = ($8_1 - (HEAPU16[($4_1 + 1024 | 0) >> 1] | 0) | 0) + (HEAPU16[($4_1 + 1124 | 0) >> 1] | 0) | 0;
       HEAP8[(($5_1 + $4_1 | 0) + 1156 | 0) >> 0] = $6_1;
       HEAP16[(($5_1 + ($4_1 << 1 | 0) | 0) + 1444 | 0) >> 1] = $7_1;
       label$11 : {
        if ($6_1 >>> 0 > 9 >>> 0) {
         break label$11
        }
        $4_1 = $8_1 << 8 | 0 | (($8_1 & 65280 | 0) >>> 8 | 0) | 0;
        $4_1 = ($4_1 >>> 4 | 0) & 3855 | 0 | (($4_1 & 3855 | 0) << 4 | 0) | 0;
        $4_1 = ($4_1 >>> 2 | 0) & 13107 | 0 | (($4_1 & 13107 | 0) << 2 | 0) | 0;
        $4_1 = (($4_1 >>> 1 | 0) & 21845 | 0 | (($4_1 & 21845 | 0) << 1 | 0) | 0) >>> (16 - $6_1 | 0) | 0;
        if ($4_1 >>> 0 > 511 >>> 0) {
         break label$11
        }
        $0_1 = $6_1 << 9 | 0 | $7_1 | 0;
        $6_1 = 1 << $6_1 | 0;
        label$12 : while (1) {
         HEAP16[($5_1 + ($4_1 << 1 | 0) | 0) >> 1] = $0_1;
         $4_1 = $4_1 + $6_1 | 0;
         if (($4_1 | 0) < (512 | 0)) {
          continue label$12
         }
         break label$12;
        };
       }
       HEAP32[$9_1 >> 2] = $8_1 + 1 | 0;
      }
      $4_1 = 1;
      $7_1 = $7_1 + 1 | 0;
      if (($7_1 | 0) != ($2_1 | 0)) {
       continue label$9
      }
      break label$3;
     };
    }
    $0_1 = 66323;
   }
   $4_1 = 0;
   HEAP32[(0 + 96956 | 0) >> 2] = $0_1;
  }
  global$0 = $3_1 + 144 | 0;
  return $4_1 | 0;
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (($2_1 | 0) < (16 | 0)) {
       break label$4
      }
      $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      break label$3;
     }
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $4_1 = $2_1;
     label$5 : while (1) {
      if ($3_1 >>> $4_1 | 0) {
       break label$2
      }
      $5_1 = 0;
      label$6 : {
       $2_1 = HEAP32[$0_1 >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
       $5_1 = HEAPU8[$2_1 >> 0] | 0;
      }
      $2_1 = $4_1 + 8 | 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
      $3_1 = ($5_1 & 255 | 0) << $4_1 | 0 | $3_1 | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
      $5_1 = ($4_1 | 0) < (17 | 0);
      $4_1 = $2_1;
      if ($5_1) {
       continue label$5
      }
      break label$5;
     };
    }
    label$7 : {
     $4_1 = HEAPU16[($1_1 + (($3_1 & 511 | 0) << 1 | 0) | 0) >> 1] | 0;
     if (!$4_1) {
      break label$7
     }
     $5_1 = $4_1 >>> 9 | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 - $5_1 | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 >>> $5_1 | 0;
     return $4_1 & 511 | 0 | 0;
    }
    $4_1 = $3_1 << 8 | 0 | (($3_1 & 65280 | 0) >>> 8 | 0) | 0;
    $4_1 = ($4_1 >>> 4 | 0) & 3855 | 0 | (($4_1 & 3855 | 0) << 4 | 0) | 0;
    $4_1 = ($4_1 >>> 2 | 0) & 13107 | 0 | (($4_1 & 13107 | 0) << 2 | 0) | 0;
    $6_1 = ($4_1 >>> 1 | 0) & 21845 | 0 | (($4_1 & 21845 | 0) << 1 | 0) | 0;
    $5_1 = 10;
    label$8 : while (1) {
     $4_1 = $5_1;
     $5_1 = $4_1 + 1 | 0;
     if ((HEAP32[(($1_1 + ($4_1 << 2 | 0) | 0) + 1056 | 0) >> 2] | 0 | 0) <= ($6_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
    $5_1 = -1;
    label$9 : {
     if (($4_1 | 0) == (16 | 0)) {
      break label$9
     }
     $5_1 = $1_1 + ($4_1 << 1 | 0) | 0;
     $5_1 = (($6_1 >>> (16 - $4_1 | 0) | 0) - (HEAPU16[($5_1 + 1024 | 0) >> 1] | 0) | 0) + (HEAPU16[($5_1 + 1124 | 0) >> 1] | 0) | 0;
     if (($4_1 | 0) != (HEAPU8[(($1_1 + $5_1 | 0) + 1156 | 0) >> 0] | 0 | 0)) {
      break label$1
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 >>> $4_1 | 0;
     $5_1 = HEAPU16[(($1_1 + ($5_1 << 1 | 0) | 0) + 1444 | 0) >> 1] | 0;
    }
    return $5_1 | 0;
   }
   fimport$54(69190 | 0, 67153 | 0, 3568 | 0, 66216 | 0);
   wasm2js_trap();
  }
  fimport$54(66348 | 0, 67153 | 0, 3596 | 0, 67116 | 0);
  wasm2js_trap();
 }
 
 function $356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  HEAP8[($0_1 + 18116 | 0) >> 0] = 255;
  label$1 : {
   if (($367($0_1 | 0) | 0 | 0) == (216 | 0)) {
    break label$1
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 68224;
   return 0 | 0;
  }
  $2_1 = 1;
  label$2 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$2
   }
   $2_1 = $367($0_1 | 0) | 0;
   $3_1 = ($2_1 | 0) == (194 | 0);
   label$3 : {
    if (($2_1 & 254 | 0 | 0) == (192 | 0)) {
     break label$3
    }
    if (($2_1 | 0) == (194 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     label$5 : {
      if ($371($0_1 | 0, $2_1 | 0) | 0) {
       break label$5
      }
      return 0 | 0;
     }
     label$6 : {
      label$7 : {
       $2_1 = $367($0_1 | 0) | 0;
       if (($2_1 | 0) != (255 | 0)) {
        break label$7
       }
       label$8 : while (1) {
        label$9 : {
         label$10 : {
          $2_1 = HEAP32[$0_1 >> 2] | 0;
          if (!(HEAP32[($2_1 + 16 | 0) >> 2] | 0)) {
           break label$10
          }
          if (!(FUNCTION_TABLE[HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0) | 0)) {
           break label$9
          }
          if (!(HEAP32[($2_1 + 32 | 0) >> 2] | 0)) {
           break label$6
          }
         }
         if ((HEAP32[($2_1 + 168 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($2_1 + 172 | 0) >> 2] | 0) >>> 0) {
          break label$6
         }
        }
        $2_1 = $367($0_1 | 0) | 0;
        if (($2_1 | 0) == (255 | 0)) {
         continue label$8
        }
        break label$8;
       };
      }
      $3_1 = ($2_1 | 0) == (194 | 0);
      if (($2_1 & 254 | 0 | 0) == (192 | 0)) {
       break label$3
      }
      if (($2_1 | 0) == (194 | 0)) {
       break label$3
      }
      continue label$4;
     }
     break label$4;
    };
    HEAP32[(0 + 96956 | 0) >> 2] = 68242;
    return 0 | 0;
   }
   HEAP32[($0_1 + 18124 | 0) >> 2] = $3_1;
   $2_1 = ($395($0_1 | 0, $1_1 | 0) | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $357($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $11_1 = 0, $5_1 = 0, $13_1 = 0, $9_1 = 0, $10_1 = 0, $6_1 = 0, $12_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $25_1 = 0, $15_1 = 0, $20_1 = 0, $23_1 = 0, $17_1 = 0, $21_1 = 0, $18_1 = 0, $14_1 = 0, $16_1 = 0, $24_1 = 0, $19_1 = 0, $22_1 = 0, $26_1 = 0, $644_1 = 0;
  $3_1 = global$0 - 5120 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = $5_1 + 41 | 0;
  $7_1 = $5_1 + 40 | 0;
  $8_1 = $5_1 + 172 | 0;
  $9_1 = $5_1 + 168 | 0;
  $10_1 = HEAP32[($5_1 + 172 | 0) >> 2] | 0;
  $11_1 = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       if ($11_1 >>> 0 >= $10_1 >>> 0) {
        break label$5
       }
       $12_1 = $11_1 + 1 | 0;
       HEAP32[$9_1 >> 2] = $12_1;
       $13_1 = HEAPU8[$11_1 >> 0] | 0;
       $11_1 = $12_1;
       break label$4;
      }
      label$6 : {
       if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
        break label$6
       }
       $13_1 = 0;
       break label$4;
      }
      label$7 : {
       label$8 : {
        $11_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
        if ($11_1) {
         break label$8
        }
        $13_1 = 0;
        HEAP8[($5_1 + 40 | 0) >> 0] = 0;
        HEAP32[($5_1 + 32 | 0) >> 2] = 0;
        $10_1 = $6_1;
        break label$7;
       }
       $10_1 = $7_1 + $11_1 | 0;
       $13_1 = HEAPU8[$7_1 >> 0] | 0;
      }
      HEAP32[$8_1 >> 2] = $10_1;
      HEAP32[$9_1 >> 2] = $6_1;
      $11_1 = $6_1;
     }
     label$9 : {
      if (($13_1 & 255 | 0 | 0) != (HEAPU8[($4_1 + 71312 | 0) >> 0] | 0 | 0)) {
       break label$9
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) == (8 | 0)) {
       break label$2
      }
      continue label$3;
     }
     break label$3;
    };
    $11_1 = 0;
    HEAP32[(0 + 96956 | 0) >> 2] = 67321;
    break label$1;
   }
   $11_1 = 1;
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   $14_1 = ($1_1 | 0) != (2 | 0);
   $15_1 = 0;
   $10_1 = 1;
   $16_1 = 0;
   $17_1 = 0;
   $18_1 = 0;
   $19_1 = 0;
   $20_1 = 0;
   $21_1 = 0;
   $22_1 = 0;
   $23_1 = 0;
   label$10 : while (1) {
    $13_1 = $379($5_1 | 0) | 0;
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             label$20 : {
              label$21 : {
               label$22 : {
                label$23 : {
                 label$24 : {
                  label$25 : {
                   label$26 : {
                    label$27 : {
                     label$28 : {
                      $4_1 = $379($5_1 | 0) | 0;
                      if (($4_1 | 0) > (1229472849 | 0)) {
                       break label$28
                      }
                      if (($4_1 | 0) == (1130840649 | 0)) {
                       break label$27
                      }
                      if (($4_1 | 0) == (1229209940 | 0)) {
                       break label$23
                      }
                      if (($4_1 | 0) != (1229278788 | 0)) {
                       break label$21
                      }
                      if (!$10_1) {
                       break label$22
                      }
                      $11_1 = 0;
                      HEAP32[(0 + 96956 | 0) >> 2] = 68101;
                      break label$1;
                     }
                     if (($4_1 | 0) == (1229472850 | 0)) {
                      break label$26
                     }
                     if (($4_1 | 0) == (1347179589 | 0)) {
                      break label$25
                     }
                     if (($4_1 | 0) != (1951551059 | 0)) {
                      break label$21
                     }
                     if (!$10_1) {
                      break label$24
                     }
                     $11_1 = 0;
                     HEAP32[(0 + 96956 | 0) >> 2] = 68101;
                     break label$1;
                    }
                    label$29 : {
                     if (($13_1 | 0) > (-1 | 0)) {
                      break label$29
                     }
                     HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
                     $19_1 = 1;
                     $379($5_1 | 0) | 0;
                     continue label$10;
                    }
                    label$30 : {
                     if (HEAP32[($5_1 + 16 | 0) >> 2] | 0) {
                      break label$30
                     }
                     $4_1 = HEAP32[$9_1 >> 2] | 0;
                     break label$11;
                    }
                    $11_1 = HEAP32[$8_1 >> 2] | 0;
                    $4_1 = HEAP32[$9_1 >> 2] | 0;
                    $12_1 = $11_1 - $4_1 | 0;
                    if (($13_1 | 0) <= ($12_1 | 0)) {
                     break label$11
                    }
                    HEAP32[($5_1 + 168 | 0) >> 2] = $11_1;
                    FUNCTION_TABLE[HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $13_1 - $12_1 | 0);
                    $19_1 = 1;
                    $379($5_1 | 0) | 0;
                    continue label$10;
                   }
                   label$31 : {
                    if ($10_1) {
                     break label$31
                    }
                    $11_1 = 0;
                    HEAP32[(0 + 96956 | 0) >> 2] = 68116;
                    break label$1;
                   }
                   label$32 : {
                    if (($13_1 | 0) == (13 | 0)) {
                     break label$32
                    }
                    $11_1 = 0;
                    HEAP32[(0 + 96956 | 0) >> 2] = 66791;
                    break label$1;
                   }
                   $4_1 = $379($5_1 | 0) | 0;
                   HEAP32[$5_1 >> 2] = $4_1;
                   label$33 : {
                    if ($4_1 >>> 0 < 16777217 >>> 0) {
                     break label$33
                    }
                    $11_1 = 0;
                    HEAP32[(0 + 96956 | 0) >> 2] = 67572;
                    break label$1;
                   }
                   $4_1 = $379($5_1 | 0) | 0;
                   HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
                   label$34 : {
                    if ($4_1 >>> 0 < 16777217 >>> 0) {
                     break label$34
                    }
                    $11_1 = 0;
                    HEAP32[(0 + 96956 | 0) >> 2] = 67572;
                    break label$1;
                   }
                   label$35 : {
                    label$36 : {
                     label$37 : {
                      label$38 : {
                       $13_1 = HEAP32[$9_1 >> 2] | 0;
                       $4_1 = HEAP32[$8_1 >> 2] | 0;
                       if ($13_1 >>> 0 >= $4_1 >>> 0) {
                        break label$38
                       }
                       $11_1 = $13_1 + 1 | 0;
                       HEAP32[$9_1 >> 2] = $11_1;
                       $13_1 = HEAPU8[$13_1 >> 0] | 0;
                       break label$37;
                      }
                      if (!(HEAP32[($5_1 + 32 | 0) >> 2] | 0)) {
                       break label$36
                      }
                      label$39 : {
                       label$40 : {
                        $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
                        if ($4_1) {
                         break label$40
                        }
                        $13_1 = 0;
                        HEAP8[($5_1 + 40 | 0) >> 0] = 0;
                        HEAP32[($5_1 + 32 | 0) >> 2] = 0;
                        $4_1 = $6_1;
                        break label$39;
                       }
                       $4_1 = $7_1 + $4_1 | 0;
                       $13_1 = HEAPU8[$7_1 >> 0] | 0;
                      }
                      HEAP32[$8_1 >> 2] = $4_1;
                      HEAP32[$9_1 >> 2] = $6_1;
                      $11_1 = $6_1;
                     }
                     $18_1 = $13_1 & 255 | 0;
                     if ($18_1 >>> 0 > 8 >>> 0) {
                      break label$36
                     }
                     if ((1 << $18_1 | 0) & 278 | 0) {
                      break label$35
                     }
                    }
                    $11_1 = 0;
                    HEAP32[(0 + 96956 | 0) >> 2] = 65591;
                    break label$1;
                   }
                   label$41 : {
                    label$42 : {
                     if ($11_1 >>> 0 >= $4_1 >>> 0) {
                      break label$42
                     }
                     $13_1 = $11_1 + 1 | 0;
                     HEAP32[$9_1 >> 2] = $13_1;
                     $11_1 = HEAPU8[$11_1 >> 0] | 0;
                     break label$41;
                    }
                    label$43 : {
                     if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
                      break label$43
                     }
                     $17_1 = 0;
                     $13_1 = $11_1;
                     break label$13;
                    }
                    label$44 : {
                     label$45 : {
                      $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
                      if ($4_1) {
                       break label$45
                      }
                      $11_1 = 0;
                      HEAP8[($5_1 + 40 | 0) >> 0] = 0;
                      HEAP32[($5_1 + 32 | 0) >> 2] = 0;
                      $4_1 = $6_1;
                      break label$44;
                     }
                     $4_1 = $7_1 + $4_1 | 0;
                     $11_1 = HEAPU8[$7_1 >> 0] | 0;
                    }
                    HEAP32[$8_1 >> 2] = $4_1;
                    HEAP32[$9_1 >> 2] = $6_1;
                    $13_1 = $6_1;
                   }
                   label$46 : {
                    $17_1 = $11_1 & 255 | 0;
                    if ($17_1 >>> 0 < 7 >>> 0) {
                     break label$46
                    }
                    $11_1 = 0;
                    HEAP32[(0 + 96956 | 0) >> 2] = 67442;
                    break label$1;
                   }
                   label$47 : {
                    if (($11_1 & 255 | 0 | 0) != (3 | 0)) {
                     break label$47
                    }
                    $17_1 = 3;
                    $23_1 = 3;
                    break label$13;
                   }
                   if (!($17_1 & 1 | 0)) {
                    break label$13
                   }
                   $11_1 = 0;
                   HEAP32[(0 + 96956 | 0) >> 2] = 67442;
                   break label$1;
                  }
                  label$48 : {
                   if (!$10_1) {
                    break label$48
                   }
                   $11_1 = 0;
                   HEAP32[(0 + 96956 | 0) >> 2] = 68101;
                   break label$1;
                  }
                  label$49 : {
                   if ($13_1 >>> 0 < 769 >>> 0) {
                    break label$49
                   }
                   $11_1 = 0;
                   HEAP32[(0 + 96956 | 0) >> 2] = 68286;
                   break label$1;
                  }
                  $4_1 = $13_1 & 65535 | 0;
                  $15_1 = ($4_1 >>> 0) / (3 >>> 0) | 0;
                  if ((Math_imul($15_1, 3) | 0) != ($13_1 | 0)) {
                   break label$20
                  }
                  $10_1 = 0;
                  if ($4_1 >>> 0 < 3 >>> 0) {
                   break label$12
                  }
                  $24_1 = $15_1 >>> 0 > 1 >>> 0 ? $15_1 : 1;
                  $4_1 = HEAP32[$8_1 >> 2] | 0;
                  $13_1 = HEAP32[$9_1 >> 2] | 0;
                  $25_1 = 0;
                  label$50 : while (1) {
                   label$51 : {
                    label$52 : {
                     if ($13_1 >>> 0 >= $4_1 >>> 0) {
                      break label$52
                     }
                     $10_1 = $13_1 + 1 | 0;
                     HEAP32[$9_1 >> 2] = $10_1;
                     $12_1 = HEAPU8[$13_1 >> 0] | 0;
                     break label$51;
                    }
                    label$53 : {
                     if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
                      break label$53
                     }
                     $12_1 = 0;
                     $10_1 = $13_1;
                     break label$51;
                    }
                    label$54 : {
                     label$55 : {
                      $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
                      if ($4_1) {
                       break label$55
                      }
                      $12_1 = 0;
                      HEAP8[($5_1 + 40 | 0) >> 0] = 0;
                      HEAP32[($5_1 + 32 | 0) >> 2] = 0;
                      $4_1 = $6_1;
                      break label$54;
                     }
                     $4_1 = $7_1 + $4_1 | 0;
                     $12_1 = HEAPU8[$7_1 >> 0] | 0;
                    }
                    HEAP32[$8_1 >> 2] = $4_1;
                    HEAP32[$9_1 >> 2] = $6_1;
                    $10_1 = $6_1;
                   }
                   $11_1 = $25_1 << 2 | 0;
                   HEAP8[(($3_1 + 16 | 0) + $11_1 | 0) >> 0] = $12_1;
                   label$56 : {
                    label$57 : {
                     if ($10_1 >>> 0 >= $4_1 >>> 0) {
                      break label$57
                     }
                     $12_1 = $10_1 + 1 | 0;
                     HEAP32[$9_1 >> 2] = $12_1;
                     $13_1 = HEAPU8[$10_1 >> 0] | 0;
                     break label$56;
                    }
                    label$58 : {
                     if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
                      break label$58
                     }
                     $13_1 = 0;
                     $12_1 = $10_1;
                     break label$56;
                    }
                    label$59 : {
                     label$60 : {
                      $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
                      if ($4_1) {
                       break label$60
                      }
                      $13_1 = 0;
                      HEAP8[($5_1 + 40 | 0) >> 0] = 0;
                      HEAP32[($5_1 + 32 | 0) >> 2] = 0;
                      $4_1 = $6_1;
                      break label$59;
                     }
                     $4_1 = $7_1 + $4_1 | 0;
                     $13_1 = HEAPU8[$7_1 >> 0] | 0;
                    }
                    HEAP32[$8_1 >> 2] = $4_1;
                    HEAP32[$9_1 >> 2] = $6_1;
                    $12_1 = $6_1;
                   }
                   HEAP8[(($3_1 + 16 | 0) + ($11_1 | 1 | 0) | 0) >> 0] = $13_1;
                   label$61 : {
                    label$62 : {
                     if ($12_1 >>> 0 >= $4_1 >>> 0) {
                      break label$62
                     }
                     $13_1 = $12_1 + 1 | 0;
                     HEAP32[$9_1 >> 2] = $13_1;
                     $10_1 = HEAPU8[$12_1 >> 0] | 0;
                     break label$61;
                    }
                    label$63 : {
                     if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
                      break label$63
                     }
                     $10_1 = 0;
                     $13_1 = $12_1;
                     break label$61;
                    }
                    label$64 : {
                     label$65 : {
                      $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
                      if ($4_1) {
                       break label$65
                      }
                      $10_1 = 0;
                      HEAP8[($5_1 + 40 | 0) >> 0] = 0;
                      HEAP32[($5_1 + 32 | 0) >> 2] = 0;
                      $4_1 = $6_1;
                      break label$64;
                     }
                     $4_1 = $7_1 + $4_1 | 0;
                     $10_1 = HEAPU8[$7_1 >> 0] | 0;
                    }
                    HEAP32[$8_1 >> 2] = $4_1;
                    HEAP32[$9_1 >> 2] = $6_1;
                    $13_1 = $6_1;
                   }
                   HEAP8[(($3_1 + 16 | 0) + ($11_1 | 2 | 0) | 0) >> 0] = $10_1;
                   HEAP8[(($3_1 + 16 | 0) + ($11_1 | 3 | 0) | 0) >> 0] = 255;
                   $25_1 = $25_1 + 1 | 0;
                   if (($25_1 | 0) != ($24_1 | 0)) {
                    continue label$50
                   }
                   break label$16;
                  };
                 }
                 label$66 : {
                  if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
                   break label$66
                  }
                  $11_1 = 0;
                  HEAP32[(0 + 96956 | 0) >> 2] = 68060;
                  break label$1;
                 }
                 label$67 : {
                  if (!($23_1 & 255 | 0)) {
                   break label$67
                  }
                  label$68 : {
                   if ($14_1) {
                    break label$68
                   }
                   HEAP32[($5_1 + 8 | 0) >> 2] = 4;
                   $11_1 = 1;
                   break label$1;
                  }
                  label$69 : {
                   if ($15_1) {
                    break label$69
                   }
                   $11_1 = 0;
                   HEAP32[(0 + 96956 | 0) >> 2] = 68269;
                   break label$1;
                  }
                  if ($13_1 >>> 0 > $15_1 >>> 0) {
                   break label$19
                  }
                  $23_1 = 4;
                  if (!$13_1) {
                   break label$16
                  }
                  $12_1 = HEAP32[$8_1 >> 2] | 0;
                  $11_1 = HEAP32[$9_1 >> 2] | 0;
                  $4_1 = 0;
                  label$70 : while (1) {
                   label$71 : {
                    label$72 : {
                     if ($11_1 >>> 0 >= $12_1 >>> 0) {
                      break label$72
                     }
                     $25_1 = $11_1 + 1 | 0;
                     HEAP32[$9_1 >> 2] = $25_1;
                     $10_1 = HEAPU8[$11_1 >> 0] | 0;
                     $11_1 = $25_1;
                     break label$71;
                    }
                    label$73 : {
                     if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
                      break label$73
                     }
                     $10_1 = 0;
                     break label$71;
                    }
                    label$74 : {
                     label$75 : {
                      $11_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
                      if ($11_1) {
                       break label$75
                      }
                      $10_1 = 0;
                      HEAP8[($5_1 + 40 | 0) >> 0] = 0;
                      HEAP32[($5_1 + 32 | 0) >> 2] = 0;
                      $12_1 = $6_1;
                      break label$74;
                     }
                     $12_1 = $7_1 + $11_1 | 0;
                     $10_1 = HEAPU8[$7_1 >> 0] | 0;
                    }
                    HEAP32[$8_1 >> 2] = $12_1;
                    HEAP32[$9_1 >> 2] = $6_1;
                    $11_1 = $6_1;
                   }
                   HEAP8[((($3_1 + 16 | 0) + ($4_1 << 2 | 0) | 0) + 3 | 0) >> 0] = $10_1;
                   $4_1 = $4_1 + 1 | 0;
                   if (($4_1 | 0) != ($13_1 | 0)) {
                    continue label$70
                   }
                   break label$16;
                  };
                 }
                 label$76 : {
                  $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                  if ($4_1 & 1 | 0) {
                   break label$76
                  }
                  $11_1 = 0;
                  HEAP32[(0 + 96956 | 0) >> 2] = 67888;
                  break label$1;
                 }
                 label$77 : {
                  label$78 : {
                   if (($13_1 | 0) != ($4_1 << 1 | 0 | 0)) {
                    break label$78
                   }
                   $22_1 = 1;
                   if (($4_1 | 0) >= (1 | 0)) {
                    break label$77
                   }
                   break label$14;
                  }
                  $11_1 = 0;
                  HEAP32[(0 + 96956 | 0) >> 2] = 66778;
                  break label$1;
                 }
                 $11_1 = HEAP32[$8_1 >> 2] | 0;
                 $4_1 = HEAP32[$9_1 >> 2] | 0;
                 $13_1 = 0;
                 label$79 : while (1) {
                  label$80 : {
                   label$81 : {
                    label$82 : {
                     if ($4_1 >>> 0 >= $11_1 >>> 0) {
                      break label$82
                     }
                     $4_1 = $4_1 + 1 | 0;
                     break label$81;
                    }
                    if (!(HEAP32[($5_1 + 32 | 0) >> 2] | 0)) {
                     break label$80
                    }
                    label$83 : {
                     label$84 : {
                      $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
                      if ($4_1) {
                       break label$84
                      }
                      HEAP8[($5_1 + 40 | 0) >> 0] = 0;
                      HEAP32[($5_1 + 32 | 0) >> 2] = 0;
                      $11_1 = $6_1;
                      break label$83;
                     }
                     $11_1 = $7_1 + $4_1 | 0;
                    }
                    HEAP32[$8_1 >> 2] = $11_1;
                    $4_1 = $6_1;
                   }
                   HEAP32[$9_1 >> 2] = $4_1;
                  }
                  label$85 : {
                   label$86 : {
                    if ($4_1 >>> 0 >= $11_1 >>> 0) {
                     break label$86
                    }
                    $12_1 = $4_1 + 1 | 0;
                    HEAP32[$9_1 >> 2] = $12_1;
                    $10_1 = HEAPU8[$4_1 >> 0] | 0;
                    $4_1 = $12_1;
                    break label$85;
                   }
                   label$87 : {
                    if (HEAP32[($5_1 + 32 | 0) >> 2] | 0) {
                     break label$87
                    }
                    $10_1 = 0;
                    break label$85;
                   }
                   label$88 : {
                    label$89 : {
                     $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
                     if ($4_1) {
                      break label$89
                     }
                     $10_1 = 0;
                     HEAP8[($5_1 + 40 | 0) >> 0] = 0;
                     HEAP32[($5_1 + 32 | 0) >> 2] = 0;
                     $11_1 = $6_1;
                     break label$88;
                    }
                    $11_1 = $7_1 + $4_1 | 0;
                    $10_1 = HEAPU8[$7_1 >> 0] | 0;
                   }
                   HEAP32[$8_1 >> 2] = $11_1;
                   HEAP32[$9_1 >> 2] = $6_1;
                   $4_1 = $6_1;
                  }
                  HEAP8[(($3_1 + 13 | 0) + $13_1 | 0) >> 0] = Math_imul(HEAPU8[($18_1 + 71320 | 0) >> 0] | 0, $10_1);
                  $22_1 = 1;
                  $13_1 = $13_1 + 1 | 0;
                  if (($13_1 | 0) >= (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0)) {
                   break label$14
                  }
                  continue label$79;
                 };
                }
                label$90 : {
                 if (!$10_1) {
                  break label$90
                 }
                 $11_1 = 0;
                 HEAP32[(0 + 96956 | 0) >> 2] = 68101;
                 break label$1;
                }
                label$91 : {
                 if (!($23_1 & 255 | 0)) {
                  break label$91
                 }
                 if ($15_1) {
                  break label$91
                 }
                 $11_1 = 0;
                 HEAP32[(0 + 96956 | 0) >> 2] = 68261;
                 break label$1;
                }
                label$92 : {
                 if ($14_1) {
                  break label$92
                 }
                 HEAP32[($5_1 + 8 | 0) >> 2] = $23_1 & 255 | 0;
                 $11_1 = 1;
                 break label$1;
                }
                label$93 : {
                 $11_1 = $13_1 + $21_1 | 0;
                 if (($11_1 | 0) >= ($21_1 | 0)) {
                  break label$93
                 }
                 $11_1 = 0;
                 break label$1;
                }
                label$94 : {
                 label$95 : {
                  if ($11_1 >>> 0 > $20_1 >>> 0) {
                   break label$95
                  }
                  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  break label$94;
                 }
                 $4_1 = $20_1 ? $20_1 : $13_1 >>> 0 > 4096 >>> 0 ? $13_1 : 4096;
                 label$96 : while (1) {
                  $20_1 = $4_1;
                  $4_1 = $4_1 << 1 | 0;
                  if ($11_1 >>> 0 > $20_1 >>> 0) {
                   continue label$96
                  }
                  break label$96;
                 };
                 label$97 : {
                  $4_1 = $485(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $20_1 | 0) | 0;
                  if ($4_1) {
                   break label$97
                  }
                  $11_1 = 0;
                  HEAP32[(0 + 96956 | 0) >> 2] = 66853;
                  break label$1;
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
                }
                $10_1 = $4_1 + $21_1 | 0;
                label$98 : {
                 label$99 : {
                  label$100 : {
                   label$101 : {
                    if (HEAP32[($5_1 + 16 | 0) >> 2] | 0) {
                     break label$101
                    }
                    $12_1 = HEAP32[$8_1 >> 2] | 0;
                    $4_1 = HEAP32[$9_1 >> 2] | 0;
                    break label$100;
                   }
                   $12_1 = HEAP32[$8_1 >> 2] | 0;
                   $4_1 = HEAP32[$9_1 >> 2] | 0;
                   $25_1 = $12_1 - $4_1 | 0;
                   if (($13_1 | 0) > ($25_1 | 0)) {
                    break label$99
                   }
                  }
                  if (($4_1 + $13_1 | 0) >>> 0 > $12_1 >>> 0) {
                   break label$98
                  }
                  $410($10_1 | 0, $4_1 | 0, $13_1 | 0) | 0;
                  HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $13_1 | 0;
                  $10_1 = 0;
                  $21_1 = $11_1;
                  $379($5_1 | 0) | 0;
                  continue label$10;
                 }
                 $4_1 = $410($10_1 | 0, $4_1 | 0, $25_1 | 0) | 0;
                 $644_1 = $4_1 + $25_1 | 0;
                 $4_1 = $13_1 - $25_1 | 0;
                 $13_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $644_1, $4_1) | 0;
                 HEAP32[($5_1 + 168 | 0) >> 2] = HEAP32[($5_1 + 172 | 0) >> 2] | 0;
                 $10_1 = 0;
                 $21_1 = $11_1;
                 if (($13_1 | 0) == ($4_1 | 0)) {
                  break label$12
                 }
                }
                $11_1 = 0;
                HEAP32[(0 + 96956 | 0) >> 2] = 67878;
                break label$1;
               }
               $11_1 = 1;
               if ($1_1) {
                break label$1
               }
               label$102 : {
                $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if ($4_1) {
                 break label$102
                }
                $11_1 = 0;
                HEAP32[(0 + 96956 | 0) >> 2] = 68076;
                break label$1;
               }
               label$103 : {
                label$104 : {
                 $11_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
                 $11_1 = Math_imul(Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, $11_1), (Math_imul(HEAP32[$5_1 >> 2] | 0, $18_1) + 7 | 0) >>> 3 | 0) + $11_1 | 0;
                 $9_1 = $483($11_1 | 0) | 0;
                 if (!$9_1) {
                  break label$104
                 }
                 HEAP32[($3_1 + 1048 | 0) >> 2] = $4_1;
                 HEAP32[($3_1 + 1052 | 0) >> 2] = $4_1 + $21_1 | 0;
                 if ($353($3_1 + 1048 | 0 | 0, $9_1 | 0, $11_1 | 0, 1 | 0, !$19_1 | 0) | 0) {
                  break label$103
                 }
                 $484(HEAP32[($3_1 + 1068 | 0) >> 2] | 0 | 0);
                }
                $11_1 = 0;
                HEAP32[($0_1 + 8 | 0) >> 2] = 0;
                break label$1;
               }
               $11_1 = HEAP32[($3_1 + 1064 | 0) >> 2] | 0;
               $4_1 = HEAP32[($3_1 + 1068 | 0) >> 2] | 0;
               HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
               label$105 : {
                if ($4_1) {
                 break label$105
                }
                $11_1 = 0;
                break label$1;
               }
               $14_1 = $11_1 - $4_1 | 0;
               $484(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
               $15_1 = 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = 0;
               $11_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $4_1 = $11_1 + 1 | 0;
               $11_1 = $22_1 & 255 | 0 ? $4_1 : $11_1;
               $11_1 = ($2_1 | 0) == (3 | 0) ? $11_1 : ($4_1 | 0) != ($2_1 | 0) ? $11_1 : $23_1 & 255 | 0 ? $11_1 : $4_1;
               HEAP32[($5_1 + 12 | 0) >> 2] = $11_1;
               $26_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               $9_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
               $4_1 = HEAP32[$4_1 >> 2] | 0;
               label$106 : {
                if (!$16_1) {
                 break label$106
                }
                $25_1 = $483(Math_imul(Math_imul($4_1, $11_1), $9_1) | 0) | 0;
                label$107 : while (1) {
                 $13_1 = HEAP32[$0_1 >> 2] | 0;
                 $4_1 = $15_1 << 2 | 0;
                 $21_1 = HEAP32[($4_1 + 71376 | 0) >> 2] | 0;
                 $1_1 = HEAP32[($4_1 + 71440 | 0) >> 2] | 0;
                 $6_1 = ((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + ($21_1 ^ -1 | 0) | 0) + $1_1 | 0;
                 $24_1 = ($6_1 >>> 0) / ($1_1 >>> 0) | 0;
                 $8_1 = HEAP32[($4_1 + 71344 | 0) >> 2] | 0;
                 $12_1 = HEAP32[($4_1 + 71408 | 0) >> 2] | 0;
                 $4_1 = ((HEAP32[$13_1 >> 2] | 0) + ($8_1 ^ -1 | 0) | 0) + $12_1 | 0;
                 $9_1 = ($4_1 >>> 0) / ($12_1 >>> 0) | 0;
                 label$108 : {
                  if ($12_1 >>> 0 > $4_1 >>> 0) {
                   break label$108
                  }
                  if ($1_1 >>> 0 > $6_1 >>> 0) {
                   break label$108
                  }
                  $4_1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                  if (!($397($0_1 | 0, $26_1 | 0, $14_1 | 0, $11_1 | 0, $9_1 | 0, $24_1 | 0, $18_1 | 0, $17_1 | 0) | 0)) {
                   break label$18
                  }
                  $16_1 = Math_imul(((Math_imul(Math_imul($9_1, $18_1), $4_1) + 7 | 0) >> 3 | 0) + 1 | 0, $24_1);
                  label$109 : {
                   if (($24_1 | 0) < (1 | 0)) {
                    break label$109
                   }
                   $20_1 = 0;
                   label$110 : while (1) {
                    label$111 : {
                     if (($9_1 | 0) < (1 | 0)) {
                      break label$111
                     }
                     $13_1 = Math_imul($20_1, $9_1);
                     $6_1 = Math_imul(Math_imul($20_1, $1_1) + $21_1 | 0, $11_1);
                     $10_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                     $7_1 = HEAP32[$0_1 >> 2] | 0;
                     $4_1 = 0;
                     label$112 : while (1) {
                      $410(($25_1 + Math_imul($6_1, HEAP32[$7_1 >> 2] | 0) | 0) + Math_imul(Math_imul($4_1, $12_1) + $8_1 | 0, $11_1) | 0 | 0, $10_1 + Math_imul($4_1 + $13_1 | 0, $11_1) | 0 | 0, $11_1 | 0) | 0;
                      $4_1 = $4_1 + 1 | 0;
                      if (($4_1 | 0) != ($9_1 | 0)) {
                       continue label$112
                      }
                      break label$112;
                     };
                    }
                    $20_1 = $20_1 + 1 | 0;
                    if (($20_1 | 0) != ($24_1 | 0)) {
                     continue label$110
                    }
                    break label$110;
                   };
                  }
                  $484(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
                  $14_1 = $14_1 - $16_1 | 0;
                  $26_1 = $26_1 + $16_1 | 0;
                 }
                 $15_1 = $15_1 + 1 | 0;
                 if (($15_1 | 0) != (7 | 0)) {
                  continue label$107
                 }
                 break label$107;
                };
                HEAP32[($0_1 + 12 | 0) >> 2] = $25_1;
                break label$15;
               }
               if ($397($0_1 | 0, $26_1 | 0, $14_1 | 0, $11_1 | 0, $4_1 | 0, $9_1 | 0, $18_1 | 0, $17_1 | 0) | 0) {
                break label$15
               }
               $11_1 = 0;
               break label$1;
              }
              label$113 : {
               if (!$10_1) {
                break label$113
               }
               $11_1 = 0;
               HEAP32[(0 + 96956 | 0) >> 2] = 68101;
               break label$1;
              }
              label$114 : {
               if ($4_1 & 536870912 | 0) {
                break label$114
               }
               $11_1 = 0;
               HEAP32[(0 + 96956 | 0) >> 2] = 96432;
               HEAP32[(0 + 96432 | 0) >> 2] = $4_1 << 24 | 0 | (($4_1 & 65280 | 0) << 8 | 0) | 0 | (($4_1 >>> 8 | 0) & 65280 | 0 | ($4_1 >>> 24 | 0) | 0) | 0;
               break label$1;
              }
              label$115 : {
               if (($13_1 | 0) > (-1 | 0)) {
                break label$115
               }
               HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
               break label$16;
              }
              label$116 : {
               if (HEAP32[($5_1 + 16 | 0) >> 2] | 0) {
                break label$116
               }
               $4_1 = HEAP32[$9_1 >> 2] | 0;
               break label$17;
              }
              $11_1 = HEAP32[$8_1 >> 2] | 0;
              $4_1 = HEAP32[$9_1 >> 2] | 0;
              $10_1 = $11_1 - $4_1 | 0;
              if (($13_1 | 0) <= ($10_1 | 0)) {
               break label$17
              }
              HEAP32[($5_1 + 168 | 0) >> 2] = $11_1;
              FUNCTION_TABLE[HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $13_1 - $10_1 | 0);
              break label$16;
             }
             $11_1 = 0;
             HEAP32[(0 + 96956 | 0) >> 2] = 68286;
             break label$1;
            }
            $11_1 = 0;
            HEAP32[(0 + 96956 | 0) >> 2] = 66778;
            break label$1;
           }
           $484($25_1 | 0);
           $11_1 = 0;
           break label$1;
          }
          HEAP32[$9_1 >> 2] = $4_1 + $13_1 | 0;
         }
         $10_1 = 0;
         break label$12;
        }
        label$117 : {
         label$118 : {
          if (!($22_1 & 255 | 0)) {
           break label$118
          }
          $4_1 = HEAP32[$0_1 >> 2] | 0;
          $11_1 = Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, HEAP32[$4_1 >> 2] | 0);
          $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          label$119 : {
           switch ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + -2 | 0 | 0) {
           case 2:
            if (!$11_1) {
             break label$118
            }
            $13_1 = (HEAPU8[($3_1 + 13 | 0) >> 0] | 0) & 255 | 0;
            $6_1 = (HEAPU8[($3_1 + 14 | 0) >> 0] | 0) & 255 | 0;
            $10_1 = (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0;
            $9_1 = 0;
            label$121 : while (1) {
             label$122 : {
              if ((HEAPU8[$4_1 >> 0] | 0 | 0) != ($13_1 | 0)) {
               break label$122
              }
              if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) != ($6_1 | 0)) {
               break label$122
              }
              if ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0 | 0) != ($10_1 | 0)) {
               break label$122
              }
              HEAP8[($4_1 + 3 | 0) >> 0] = 0;
             }
             $4_1 = $4_1 + 4 | 0;
             $9_1 = $9_1 + 1 | 0;
             if (($9_1 | 0) != ($11_1 | 0)) {
              continue label$121
             }
             break label$118;
            };
           case 0:
            break label$119;
           default:
            break label$117;
           };
          }
          if (!$11_1) {
           break label$118
          }
          $13_1 = (HEAPU8[($3_1 + 13 | 0) >> 0] | 0) & 255 | 0;
          $9_1 = 0;
          label$123 : while (1) {
           HEAP8[($4_1 + 1 | 0) >> 0] = (HEAPU8[$4_1 >> 0] | 0 | 0) != ($13_1 | 0) ? -1 : 0;
           $4_1 = $4_1 + 2 | 0;
           $9_1 = $9_1 + 1 | 0;
           if (($9_1 | 0) != ($11_1 | 0)) {
            continue label$123
           }
           break label$123;
          };
         }
         label$124 : {
          if (!$19_1) {
           break label$124
          }
          if (!(HEAP32[(0 + 96968 | 0) >> 2] | 0)) {
           break label$124
          }
          if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (3 | 0)) {
           break label$124
          }
          $398($0_1 | 0);
         }
         label$125 : {
          $4_1 = $23_1 & 255 | 0;
          if (!$4_1) {
           break label$125
          }
          HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
          $4_1 = ($2_1 | 0) > (2 | 0) ? $2_1 : $4_1;
          HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
          $9_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          label$126 : {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $13_1 = Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, HEAP32[$5_1 >> 2] | 0);
           $6_1 = $483(Math_imul($13_1, $4_1) | 0) | 0;
           if ($6_1) {
            break label$126
           }
           $11_1 = 0;
           HEAP32[(0 + 96956 | 0) >> 2] = 66853;
           break label$1;
          }
          label$127 : {
           label$128 : {
            if (($4_1 | 0) == (3 | 0)) {
             break label$128
            }
            if (!$13_1) {
             break label$127
            }
            $11_1 = 0;
            $5_1 = $6_1;
            label$129 : while (1) {
             $4_1 = ($3_1 + 16 | 0) + ((HEAPU8[($9_1 + $11_1 | 0) >> 0] | 0) << 2 | 0) | 0;
             HEAP8[$5_1 >> 0] = HEAPU8[$4_1 >> 0] | 0;
             HEAP8[($5_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
             HEAP8[($5_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
             HEAP8[($5_1 + 3 | 0) >> 0] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
             $5_1 = $5_1 + 4 | 0;
             $11_1 = $11_1 + 1 | 0;
             if (($11_1 | 0) != ($13_1 | 0)) {
              continue label$129
             }
             break label$127;
            };
           }
           if (!$13_1) {
            break label$127
           }
           $4_1 = 0;
           $5_1 = $6_1;
           label$130 : while (1) {
            $11_1 = ($3_1 + 16 | 0) + ((HEAPU8[($9_1 + $4_1 | 0) >> 0] | 0) << 2 | 0) | 0;
            HEAP8[$5_1 >> 0] = HEAPU8[$11_1 >> 0] | 0;
            HEAP8[($5_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
            HEAP8[($5_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
            $5_1 = $5_1 + 3 | 0;
            $4_1 = $4_1 + 1 | 0;
            if (($4_1 | 0) != ($13_1 | 0)) {
             continue label$130
            }
            break label$130;
           };
          }
          $484($9_1 | 0);
          HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         }
         $484(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
         HEAP32[($0_1 + 8 | 0) >> 2] = 0;
         $11_1 = 1;
         break label$1;
        }
        fimport$54(69036 | 0, 67153 | 0, 4209 | 0, 65608 | 0);
        wasm2js_trap();
       }
       $10_1 = 0;
       $23_1 = 0;
       $379($5_1 | 0) | 0;
       continue label$10;
      }
      label$131 : {
       label$132 : {
        label$133 : {
         if ($13_1 >>> 0 >= $4_1 >>> 0) {
          break label$133
         }
         HEAP32[$9_1 >> 2] = $13_1 + 1 | 0;
         $4_1 = HEAPU8[$13_1 >> 0] | 0;
         break label$132;
        }
        if (!(HEAP32[($5_1 + 32 | 0) >> 2] | 0)) {
         break label$131
        }
        label$134 : {
         label$135 : {
          $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($5_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
          if ($4_1) {
           break label$135
          }
          $4_1 = 0;
          HEAP8[($5_1 + 40 | 0) >> 0] = 0;
          HEAP32[($5_1 + 32 | 0) >> 2] = 0;
          $11_1 = $6_1;
          break label$134;
         }
         $11_1 = $7_1 + $4_1 | 0;
         $4_1 = HEAPU8[$7_1 >> 0] | 0;
        }
        HEAP32[$8_1 >> 2] = $11_1;
        HEAP32[$9_1 >> 2] = $6_1;
       }
       if (!($4_1 & 255 | 0)) {
        break label$131
       }
       $11_1 = 0;
       HEAP32[(0 + 96956 | 0) >> 2] = 67709;
       break label$1;
      }
      label$136 : {
       if (!($393($5_1 | 0) | 0)) {
        break label$136
       }
       $11_1 = 0;
       HEAP32[(0 + 96956 | 0) >> 2] = 67691;
       break label$1;
      }
      label$137 : {
       $16_1 = $393($5_1 | 0) | 0;
       if ($16_1 >>> 0 < 2 >>> 0) {
        break label$137
       }
       $11_1 = 0;
       HEAP32[(0 + 96956 | 0) >> 2] = 67725;
       break label$1;
      }
      label$138 : {
       label$139 : {
        $4_1 = HEAP32[$5_1 >> 2] | 0;
        if (!$4_1) {
         break label$139
        }
        $11_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        if ($11_1) {
         break label$138
        }
       }
       $11_1 = 0;
       HEAP32[(0 + 96956 | 0) >> 2] = 67582;
       break label$1;
      }
      label$140 : {
       if ($23_1 & 255 | 0) {
        break label$140
       }
       $13_1 = (($17_1 >>> 2 | 0) & 1 | 0 | ($17_1 & 2 | 0) | 0) + 1 | 0;
       HEAP32[($5_1 + 8 | 0) >> 2] = $13_1;
       label$141 : {
        if (((((1073741824 >>> 0) / ($4_1 >>> 0) | 0) >>> 0) / ($13_1 >>> 0) | 0) >>> 0 >= $11_1 >>> 0) {
         break label$141
        }
        $11_1 = 0;
        HEAP32[(0 + 96956 | 0) >> 2] = 67572;
        break label$1;
       }
       $10_1 = 0;
       $23_1 = 0;
       if (($1_1 | 0) != (2 | 0)) {
        break label$12
       }
       $11_1 = 1;
       break label$1;
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = 1;
      $10_1 = 0;
      if ((((1073741824 >>> 0) / ($4_1 >>> 0) | 0) >>> 2 | 0) >>> 0 >= $11_1 >>> 0) {
       break label$12
      }
      $11_1 = 0;
      HEAP32[(0 + 96956 | 0) >> 2] = 67572;
      break label$1;
     }
     $379($5_1 | 0) | 0;
     continue label$10;
    }
    HEAP32[$9_1 >> 2] = $4_1 + $13_1 | 0;
    $19_1 = 1;
    $379($5_1 | 0) | 0;
    continue label$10;
   };
  }
  global$0 = $3_1 + 5120 | 0;
  return $11_1 | 0;
 }
 
 function $358($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      $5_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
      if ($4_1 >>> 0 >= $5_1 >>> 0) {
       break label$4
      }
      $6_1 = $4_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
      break label$3;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$2
     }
     label$5 : {
      label$6 : {
       $4_1 = $0_1 + 40 | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($5_1) {
        break label$6
       }
       $4_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $5_1 = $0_1 + 41 | 0;
       break label$5;
      }
      $5_1 = $4_1 + $5_1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
     $6_1 = $0_1 + 41 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    }
    if (($4_1 & 255 | 0 | 0) != (71 | 0)) {
     break label$2
    }
    label$7 : {
     label$8 : {
      if ($6_1 >>> 0 >= $5_1 >>> 0) {
       break label$8
      }
      $4_1 = $6_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
      $6_1 = HEAPU8[$6_1 >> 0] | 0;
      break label$7;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $4_1 = $0_1 + 40 | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($5_1) {
        break label$10
       }
       $6_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $5_1 = $0_1 + 41 | 0;
       break label$9;
      }
      $5_1 = $4_1 + $5_1 | 0;
      $6_1 = HEAPU8[$4_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
     $4_1 = $0_1 + 41 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
    }
    if (($6_1 & 255 | 0 | 0) != (73 | 0)) {
     break label$2
    }
    label$11 : {
     label$12 : {
      if ($4_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      $6_1 = $4_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
      break label$11;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = $0_1 + 40 | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($5_1) {
        break label$14
       }
       $4_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $5_1 = $0_1 + 41 | 0;
       break label$13;
      }
      $5_1 = $4_1 + $5_1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
     $6_1 = $0_1 + 41 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    }
    if (($4_1 & 255 | 0 | 0) != (70 | 0)) {
     break label$2
    }
    label$15 : {
     label$16 : {
      if ($6_1 >>> 0 >= $5_1 >>> 0) {
       break label$16
      }
      $7_1 = $6_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
      $4_1 = HEAPU8[$6_1 >> 0] | 0;
      break label$15;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$2
     }
     label$17 : {
      label$18 : {
       $4_1 = $0_1 + 40 | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($5_1) {
        break label$18
       }
       $4_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $5_1 = $0_1 + 41 | 0;
       break label$17;
      }
      $5_1 = $4_1 + $5_1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
     $7_1 = $0_1 + 41 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
    }
    if (($4_1 & 255 | 0 | 0) == (56 | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 68253;
   return 0 | 0;
  }
  label$19 : {
   label$20 : {
    label$21 : {
     label$22 : {
      if ($7_1 >>> 0 >= $5_1 >>> 0) {
       break label$22
      }
      $4_1 = $7_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
      $6_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$21;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$20
     }
     label$23 : {
      label$24 : {
       $4_1 = $0_1 + 40 | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($5_1) {
        break label$24
       }
       $6_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $5_1 = $0_1 + 41 | 0;
       break label$23;
      }
      $5_1 = $4_1 + $5_1 | 0;
      $6_1 = HEAPU8[$4_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
     $4_1 = $0_1 + 41 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
    }
    switch (($6_1 & 255 | 0) + -55 | 0 | 0) {
    case 0:
    case 2:
     break label$19;
    default:
     break label$20;
    };
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 68253;
   return 0 | 0;
  }
  label$25 : {
   label$26 : {
    label$27 : {
     label$28 : {
      if ($4_1 >>> 0 >= $5_1 >>> 0) {
       break label$28
      }
      $6_1 = $4_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
      break label$27;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$26
     }
     label$29 : {
      label$30 : {
       $4_1 = $0_1 + 40 | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($5_1) {
        break label$30
       }
       $4_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $5_1 = $0_1 + 41 | 0;
       break label$29;
      }
      $5_1 = $4_1 + $5_1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
     $6_1 = $0_1 + 41 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    }
    if (($4_1 & 255 | 0 | 0) == (97 | 0)) {
     break label$25
    }
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 68253;
   return 0 | 0;
  }
  $7_1 = 0;
  HEAP32[(0 + 96956 | 0) >> 2] = 69625;
  label$31 : {
   label$32 : {
    if ($6_1 >>> 0 >= $5_1 >>> 0) {
     break label$32
    }
    $4_1 = $6_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
    $7_1 = HEAPU8[$6_1 >> 0] | 0;
    $6_1 = $4_1;
    break label$31;
   }
   if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
    break label$31
   }
   label$33 : {
    label$34 : {
     $4_1 = $0_1 + 40 | 0;
     $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($5_1) {
      break label$34
     }
     $7_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $5_1 = $0_1 + 41 | 0;
     break label$33;
    }
    $5_1 = $4_1 + $5_1 | 0;
    $7_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
   $6_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
  }
  label$35 : {
   label$36 : {
    if ($6_1 >>> 0 >= $5_1 >>> 0) {
     break label$36
    }
    $4_1 = $6_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
    $8_1 = HEAPU8[$6_1 >> 0] | 0;
    break label$35;
   }
   label$37 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$37
    }
    $8_1 = 0;
    $4_1 = $6_1;
    break label$35;
   }
   label$38 : {
    label$39 : {
     $4_1 = $0_1 + 40 | 0;
     $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($5_1) {
      break label$39
     }
     $8_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $5_1 = $0_1 + 41 | 0;
     break label$38;
    }
    $5_1 = $4_1 + $5_1 | 0;
    $8_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
   $4_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
  }
  HEAP32[$1_1 >> 2] = ($8_1 & 255 | 0) << 8 | 0 | ($7_1 & 255 | 0) | 0;
  label$40 : {
   label$41 : {
    if ($4_1 >>> 0 >= $5_1 >>> 0) {
     break label$41
    }
    $6_1 = $4_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    $7_1 = HEAPU8[$4_1 >> 0] | 0;
    break label$40;
   }
   label$42 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$42
    }
    $7_1 = 0;
    $6_1 = $4_1;
    break label$40;
   }
   label$43 : {
    label$44 : {
     $4_1 = $0_1 + 40 | 0;
     $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($5_1) {
      break label$44
     }
     $7_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $5_1 = $0_1 + 41 | 0;
     break label$43;
    }
    $5_1 = $4_1 + $5_1 | 0;
    $7_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
   $6_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
  }
  label$45 : {
   label$46 : {
    if ($6_1 >>> 0 >= $5_1 >>> 0) {
     break label$46
    }
    $4_1 = $6_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
    $8_1 = HEAPU8[$6_1 >> 0] | 0;
    break label$45;
   }
   label$47 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$47
    }
    $8_1 = 0;
    $4_1 = $6_1;
    break label$45;
   }
   label$48 : {
    label$49 : {
     $4_1 = $0_1 + 40 | 0;
     $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($5_1) {
      break label$49
     }
     $8_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $5_1 = $0_1 + 41 | 0;
     break label$48;
    }
    $5_1 = $4_1 + $5_1 | 0;
    $8_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
   $4_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
  }
  HEAP32[($1_1 + 4 | 0) >> 2] = ($8_1 & 255 | 0) << 8 | 0 | ($7_1 & 255 | 0) | 0;
  label$50 : {
   label$51 : {
    if ($4_1 >>> 0 >= $5_1 >>> 0) {
     break label$51
    }
    $6_1 = $4_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    $7_1 = HEAPU8[$4_1 >> 0] | 0;
    break label$50;
   }
   label$52 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$52
    }
    $7_1 = 0;
    $6_1 = $4_1;
    break label$50;
   }
   label$53 : {
    label$54 : {
     $4_1 = $0_1 + 40 | 0;
     $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($5_1) {
      break label$54
     }
     $7_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $5_1 = $0_1 + 41 | 0;
     break label$53;
    }
    $5_1 = $4_1 + $5_1 | 0;
    $7_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
   $6_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
  }
  HEAP32[($1_1 + 16 | 0) >> 2] = $7_1 & 255 | 0;
  label$55 : {
   label$56 : {
    if ($6_1 >>> 0 >= $5_1 >>> 0) {
     break label$56
    }
    $4_1 = $6_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
    $7_1 = HEAPU8[$6_1 >> 0] | 0;
    break label$55;
   }
   label$57 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$57
    }
    $7_1 = 0;
    $4_1 = $6_1;
    break label$55;
   }
   label$58 : {
    label$59 : {
     $4_1 = $0_1 + 40 | 0;
     $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($5_1) {
      break label$59
     }
     $7_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $5_1 = $0_1 + 41 | 0;
     break label$58;
    }
    $5_1 = $4_1 + $5_1 | 0;
    $7_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
   $4_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
  }
  HEAP32[($1_1 + 20 | 0) >> 2] = $7_1 & 255 | 0;
  label$60 : {
   label$61 : {
    if ($4_1 >>> 0 >= $5_1 >>> 0) {
     break label$61
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $4_1 + 1 | 0;
    $5_1 = HEAPU8[$4_1 >> 0] | 0;
    break label$60;
   }
   label$62 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$62
    }
    $5_1 = 0;
    break label$60;
   }
   label$63 : {
    label$64 : {
     $5_1 = $0_1 + 40 | 0;
     $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($4_1) {
      break label$64
     }
     $5_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $4_1 = $0_1 + 41 | 0;
     break label$63;
    }
    $4_1 = $5_1 + $4_1 | 0;
    $5_1 = HEAPU8[$5_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 168 | 0) >> 2] = $0_1 + 41 | 0;
  }
  HEAP32[($1_1 + 28 | 0) >> 2] = -1;
  HEAP32[($1_1 + 24 | 0) >> 2] = $5_1 & 255 | 0;
  label$65 : {
   if (!$2_1) {
    break label$65
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  label$66 : {
   if ($3_1) {
    break label$66
   }
   $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if (!($5_1 & 128 | 0)) {
    break label$66
   }
   $378($0_1 | 0, $1_1 + 40 | 0 | 0, 2 << ($5_1 & 7 | 0) | 0 | 0, -1 | 0);
  }
  return 1 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $3_1 = $1_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $4_1 = 0;
    $3_1 = $1_1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $3_1 = $0_1 + 40 | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($2_1) {
      break label$5
     }
     $4_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $2_1 = $0_1 + 41 | 0;
     break label$4;
    }
    $2_1 = $3_1 + $2_1 | 0;
    $4_1 = HEAPU8[$3_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
   $3_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
  }
  label$6 : {
   label$7 : {
    if ($3_1 >>> 0 >= $2_1 >>> 0) {
     break label$7
    }
    $1_1 = $3_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
    $5_1 = HEAPU8[$3_1 >> 0] | 0;
    break label$6;
   }
   label$8 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$8
    }
    $5_1 = 0;
    $1_1 = $3_1;
    break label$6;
   }
   label$9 : {
    label$10 : {
     $3_1 = $0_1 + 40 | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($2_1) {
      break label$10
     }
     $5_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $2_1 = $0_1 + 41 | 0;
     break label$9;
    }
    $2_1 = $3_1 + $2_1 | 0;
    $5_1 = HEAPU8[$3_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
   $1_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
  }
  label$11 : {
   label$12 : {
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$12
    }
    $3_1 = $1_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
    $6_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$11;
   }
   label$13 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$13
    }
    $6_1 = 0;
    $3_1 = $1_1;
    break label$11;
   }
   label$14 : {
    label$15 : {
     $3_1 = $0_1 + 40 | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($2_1) {
      break label$15
     }
     $6_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $2_1 = $0_1 + 41 | 0;
     break label$14;
    }
    $2_1 = $3_1 + $2_1 | 0;
    $6_1 = HEAPU8[$3_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
   $3_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
  }
  label$16 : {
   label$17 : {
    if ($3_1 >>> 0 >= $2_1 >>> 0) {
     break label$17
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
    $2_1 = HEAPU8[$3_1 >> 0] | 0;
    break label$16;
   }
   label$18 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$18
    }
    $2_1 = 0;
    break label$16;
   }
   label$19 : {
    label$20 : {
     $2_1 = $0_1 + 40 | 0;
     $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $2_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($3_1) {
      break label$20
     }
     $2_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $3_1 = $0_1 + 41 | 0;
     break label$19;
    }
    $3_1 = $2_1 + $3_1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 168 | 0) >> 2] = $0_1 + 41 | 0;
  }
  return $2_1 << 24 | 0 | (($6_1 & 255 | 0) << 16 | 0) | 0 | (($5_1 & 255 | 0) << 8 | 0 | ($4_1 & 255 | 0) | 0) | 0 | 0;
 }
 
 function $360($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
  HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
  HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if ($4_1 >>> 0 >= $5_1 >>> 0) {
     break label$2
    }
    $6_1 = $4_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    $7_1 = HEAPU8[$4_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $7_1 = 0;
    $6_1 = $4_1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $4_1 = $0_1 + 40 | 0;
     $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($6_1) {
      break label$5
     }
     $7_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $5_1 = $0_1 + 41 | 0;
     break label$4;
    }
    $5_1 = $4_1 + $6_1 | 0;
    $7_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
   $6_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
  }
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      if ($6_1 >>> 0 >= $5_1 >>> 0) {
       break label$9
      }
      $8_1 = $6_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
      $4_1 = HEAPU8[$6_1 >> 0] | 0;
      break label$8;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$7
     }
     label$10 : {
      label$11 : {
       $4_1 = $0_1 + 40 | 0;
       $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($6_1) {
        break label$11
       }
       $4_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $5_1 = $0_1 + 41 | 0;
       break label$10;
      }
      $5_1 = $4_1 + $6_1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
     $8_1 = $0_1 + 41 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
    }
    if (($7_1 & 255 | 0 | 0) != (80 | 0)) {
     break label$7
    }
    if ((($4_1 + -55 | 0) & 255 | 0) >>> 0 > 253 >>> 0) {
     break label$6
    }
   }
   i64toi32_i32$1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
   HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
   return 0 | 0;
  }
  HEAP32[$3_1 >> 2] = ($4_1 & 255 | 0 | 0) == (54 | 0) ? 3 : 1;
  label$12 : {
   label$13 : {
    if ($8_1 >>> 0 >= $5_1 >>> 0) {
     break label$13
    }
    $7_1 = $8_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
    $4_1 = HEAPU8[$8_1 >> 0] | 0;
    break label$12;
   }
   label$14 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$14
    }
    $4_1 = 0;
    $7_1 = $8_1;
    break label$12;
   }
   label$15 : {
    label$16 : {
     $4_1 = $0_1 + 40 | 0;
     $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($6_1) {
      break label$16
     }
     $4_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $5_1 = $0_1 + 41 | 0;
     break label$15;
    }
    $5_1 = $4_1 + $6_1 | 0;
    $4_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
   $7_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
  }
  $8_1 = $0_1 + 41 | 0;
  $6_1 = $0_1 + 40 | 0;
  label$17 : {
   label$18 : while (1) {
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
         break label$22
        }
        if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
         break label$21
        }
        if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
         break label$20
        }
        $5_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
        $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
       }
       if ($7_1 >>> 0 >= $5_1 >>> 0) {
        break label$20
       }
      }
      $7_1 = $4_1 & 255 | 0;
      if (($7_1 + -9 | 0) >>> 0 < 5 >>> 0) {
       break label$19
      }
      if (($7_1 | 0) == (32 | 0)) {
       break label$19
      }
     }
     $5_1 = 0;
     label$23 : while (1) {
      label$24 : {
       label$25 : {
        label$26 : {
         if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
          break label$26
         }
         if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
          break label$25
         }
         if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
          break label$17
         }
        }
        $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
        $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
        if ($7_1 >>> 0 >= $3_1 >>> 0) {
         break label$17
        }
        if ((($4_1 + -58 | 0) & 255 | 0) >>> 0 >= 246 >>> 0) {
         break label$24
        }
        break label$17;
       }
       if ((($4_1 + -58 | 0) & 255 | 0) >>> 0 < 246 >>> 0) {
        break label$17
       }
       $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
       $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      }
      $5_1 = (($4_1 & 255 | 0) + Math_imul($5_1, 10) | 0) + -48 | 0;
      label$27 : {
       if ($7_1 >>> 0 >= $3_1 >>> 0) {
        break label$27
       }
       HEAP32[($0_1 + 168 | 0) >> 2] = $7_1 + 1 | 0;
       $4_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$23;
      }
      $4_1 = 0;
      if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
       continue label$23
      }
      label$28 : {
       label$29 : {
        $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
        if ($4_1) {
         break label$29
        }
        $4_1 = 0;
        HEAP8[($0_1 + 40 | 0) >> 0] = 0;
        HEAP32[($0_1 + 32 | 0) >> 2] = 0;
        $7_1 = $8_1;
        break label$28;
       }
       $7_1 = $6_1 + $4_1 | 0;
       $4_1 = HEAPU8[$6_1 >> 0] | 0;
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
      HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
      continue label$23;
     };
    }
    label$30 : {
     $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     $5_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= $5_1 >>> 0) {
      break label$30
     }
     $3_1 = $7_1 + 1 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
     $4_1 = HEAPU8[$7_1 >> 0] | 0;
     $7_1 = $3_1;
     continue label$18;
    }
    $4_1 = 0;
    if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
     continue label$18
    }
    label$31 : {
     label$32 : {
      $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$32
      }
      $4_1 = 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $5_1 = $8_1;
      break label$31;
     }
     $5_1 = $6_1 + $4_1 | 0;
     $4_1 = HEAPU8[$6_1 >> 0] | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
    $7_1 = $8_1;
    continue label$18;
   };
  }
  HEAP32[$1_1 >> 2] = $5_1;
  label$33 : {
   label$34 : while (1) {
    label$35 : {
     label$36 : {
      label$37 : {
       label$38 : {
        if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
         break label$38
        }
        if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
         break label$37
        }
        if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
         break label$36
        }
       }
       if ((HEAP32[($0_1 + 168 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
        break label$36
       }
      }
      $7_1 = $4_1 & 255 | 0;
      if (($7_1 + -9 | 0) >>> 0 < 5 >>> 0) {
       break label$35
      }
      if (($7_1 | 0) == (32 | 0)) {
       break label$35
      }
     }
     $5_1 = 0;
     label$39 : while (1) {
      label$40 : {
       label$41 : {
        label$42 : {
         if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
          break label$42
         }
         if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
          break label$41
         }
         if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
          break label$33
         }
        }
        $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
        $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
        if ($7_1 >>> 0 >= $3_1 >>> 0) {
         break label$33
        }
        if ((($4_1 + -58 | 0) & 255 | 0) >>> 0 >= 246 >>> 0) {
         break label$40
        }
        break label$33;
       }
       if ((($4_1 + -58 | 0) & 255 | 0) >>> 0 < 246 >>> 0) {
        break label$33
       }
       $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
       $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      }
      $5_1 = (($4_1 & 255 | 0) + Math_imul($5_1, 10) | 0) + -48 | 0;
      label$43 : {
       if ($7_1 >>> 0 >= $3_1 >>> 0) {
        break label$43
       }
       HEAP32[($0_1 + 168 | 0) >> 2] = $7_1 + 1 | 0;
       $4_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$39;
      }
      $4_1 = 0;
      if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
       continue label$39
      }
      label$44 : {
       label$45 : {
        $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
        if ($4_1) {
         break label$45
        }
        $4_1 = 0;
        HEAP8[($0_1 + 40 | 0) >> 0] = 0;
        HEAP32[($0_1 + 32 | 0) >> 2] = 0;
        $7_1 = $8_1;
        break label$44;
       }
       $7_1 = $6_1 + $4_1 | 0;
       $4_1 = HEAPU8[$6_1 >> 0] | 0;
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
      HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
      continue label$39;
     };
    }
    label$46 : {
     $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     if ($4_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
      break label$46
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $4_1 + 1 | 0;
     $4_1 = HEAPU8[$4_1 >> 0] | 0;
     continue label$34;
    }
    $4_1 = 0;
    if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
     continue label$34
    }
    label$47 : {
     label$48 : {
      $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$48
      }
      $4_1 = 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $7_1 = $8_1;
      break label$47;
     }
     $7_1 = $6_1 + $4_1 | 0;
     $4_1 = HEAPU8[$6_1 >> 0] | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
    continue label$34;
   };
  }
  HEAP32[$2_1 >> 2] = $5_1;
  label$49 : {
   label$50 : while (1) {
    label$51 : {
     label$52 : {
      label$53 : {
       label$54 : {
        if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
         break label$54
        }
        if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
         break label$53
        }
        if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
         break label$52
        }
       }
       if ((HEAP32[($0_1 + 168 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
        break label$52
       }
      }
      $7_1 = $4_1 & 255 | 0;
      if (($7_1 + -9 | 0) >>> 0 < 5 >>> 0) {
       break label$51
      }
      if (($7_1 | 0) == (32 | 0)) {
       break label$51
      }
     }
     $5_1 = 0;
     label$55 : while (1) {
      label$56 : {
       label$57 : {
        label$58 : {
         if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
          break label$58
         }
         if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
          break label$57
         }
         if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
          break label$49
         }
        }
        $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
        $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
        if ($7_1 >>> 0 >= $3_1 >>> 0) {
         break label$49
        }
        if ((($4_1 + -58 | 0) & 255 | 0) >>> 0 >= 246 >>> 0) {
         break label$56
        }
        break label$49;
       }
       if ((($4_1 + -58 | 0) & 255 | 0) >>> 0 < 246 >>> 0) {
        break label$49
       }
       $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
       $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      }
      $5_1 = (($4_1 & 255 | 0) + Math_imul($5_1, 10) | 0) + -48 | 0;
      label$59 : {
       if ($7_1 >>> 0 >= $3_1 >>> 0) {
        break label$59
       }
       HEAP32[($0_1 + 168 | 0) >> 2] = $7_1 + 1 | 0;
       $4_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$55;
      }
      $4_1 = 0;
      if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
       continue label$55
      }
      label$60 : {
       label$61 : {
        $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
        if ($4_1) {
         break label$61
        }
        $4_1 = 0;
        HEAP8[($0_1 + 40 | 0) >> 0] = 0;
        HEAP32[($0_1 + 32 | 0) >> 2] = 0;
        $7_1 = $8_1;
        break label$60;
       }
       $7_1 = $6_1 + $4_1 | 0;
       $4_1 = HEAPU8[$6_1 >> 0] | 0;
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
      HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
      continue label$55;
     };
    }
    label$62 : {
     $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     if ($4_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
      break label$62
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $4_1 + 1 | 0;
     $4_1 = HEAPU8[$4_1 >> 0] | 0;
     continue label$50;
    }
    $4_1 = 0;
    if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
     continue label$50
    }
    label$63 : {
     label$64 : {
      $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $6_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$64
      }
      $4_1 = 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $7_1 = $8_1;
      break label$63;
     }
     $7_1 = $6_1 + $4_1 | 0;
     $4_1 = HEAPU8[$6_1 >> 0] | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
    continue label$50;
   };
  }
  $0_1 = 1;
  label$65 : {
   if (($5_1 | 0) < (256 | 0)) {
    break label$65
   }
   $0_1 = 0;
   HEAP32[(0 + 96956 | 0) >> 2] = 68972;
  }
  return $0_1 | 0;
 }
 
 function $361($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $431($1_1 | 0, 1 | 0, $2_1 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $434($0_1 | 0, $1_1 | 0, 1 | 0) | 0;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  return $419($0_1 | 0) | 0 | 0;
 }
 
 function $364($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = 1;
  $6_1 = HEAPU8[$2_1 >> 0] | 0;
  $7_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   if (($3_1 | 0) != (1 | 0)) {
    break label$1
   }
   $5_1 = (($6_1 + Math_imul($7_1, 3) | 0) + 2 | 0) >>> 2 | 0;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1;
   return $0_1 | 0;
  }
  $6_1 = Math_imul($7_1, 3) + $6_1 | 0;
  $7_1 = ($6_1 + 2 | 0) >>> 2 | 0;
  HEAP8[$0_1 >> 0] = $7_1;
  label$2 : {
   if (($3_1 | 0) < (2 | 0)) {
    break label$2
   }
   label$3 : while (1) {
    $8_1 = $0_1 + ($5_1 << 1 | 0) | 0;
    $7_1 = Math_imul(HEAPU8[($1_1 + $5_1 | 0) >> 0] | 0, 3) + (HEAPU8[($2_1 + $5_1 | 0) >> 0] | 0) | 0;
    HEAP8[($8_1 + -1 | 0) >> 0] = ((Math_imul($6_1, 3) + $7_1 | 0) + 8 | 0) >>> 4 | 0;
    HEAP8[$8_1 >> 0] = (($6_1 + Math_imul($7_1, 3) | 0) + 8 | 0) >>> 4 | 0;
    $6_1 = $7_1;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
   $7_1 = ($7_1 + 2 | 0) >>> 2 | 0;
  }
  HEAP8[((($3_1 << 1 | 0) + $0_1 | 0) + -1 | 0) >> 0] = $7_1;
  return $0_1 | 0;
 }
 
 function $365($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0;
  label$1 : {
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $6_1 = 0;
   label$2 : while (1) {
    $7_1 = HEAPU8[($3_1 + $6_1 | 0) >> 0] | 0;
    $8_1 = HEAPU8[($2_1 + $6_1 | 0) >> 0] | 0;
    $9_1 = HEAPU8[($1_1 + $6_1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = 255;
    $10_1 = $8_1 + -128 | 0;
    $8_1 = $9_1 << 20 | 0 | 524288 | 0;
    $9_1 = Math_imul($10_1, 1858048) + $8_1 | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = $9_1 >>> 0 > 268435455 >>> 0 ? (($9_1 | 0) < (0 | 0) ? 0 : 255) : $9_1 >>> 20 | 0;
    $7_1 = $7_1 + -128 | 0;
    $9_1 = Math_imul($7_1, 1470208) + $8_1 | 0;
    HEAP8[$0_1 >> 0] = $9_1 >>> 0 > 268435455 >>> 0 ? (($9_1 | 0) < (0 | 0) ? 0 : 255) : $9_1 >>> 20 | 0;
    $8_1 = (Math_imul($7_1, -748800) + $8_1 | 0) + (Math_imul($10_1, -360960) & -65536 | 0) | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $8_1 >>> 0 > 268435455 >>> 0 ? (($8_1 | 0) < (0 | 0) ? 0 : 255) : $8_1 >>> 20 | 0;
    $0_1 = $0_1 + $5_1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $366($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0, $11_1 = 0, $14_1 = 0, $17_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $18_1 = 0, $16_1 = 0, $19_1 = 0, $20_1 = 0, $3_1 = 0, $98_1 = 0, $145_1 = 0, $310_1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  $4_1 = $3_1;
  $5_1 = 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     $6_1 = HEAP16[($2_1 + 16 | 0) >> 1] | 0;
     $7_1 = HEAPU16[($2_1 + 32 | 0) >> 1] | 0;
     if (($6_1 | $7_1 | 0) & 65535 | 0) {
      break label$3
     }
     $7_1 = 0;
     if (HEAPU16[($2_1 + 48 | 0) >> 1] | 0) {
      break label$3
     }
     if (HEAPU16[($2_1 + 64 | 0) >> 1] | 0) {
      break label$3
     }
     if (HEAPU16[($2_1 + 80 | 0) >> 1] | 0) {
      break label$3
     }
     if (HEAPU16[($2_1 + 96 | 0) >> 1] | 0) {
      break label$3
     }
     if (HEAPU16[($2_1 + 112 | 0) >> 1] | 0) {
      break label$3
     }
     $6_1 = (HEAP16[$2_1 >> 1] | 0) << 2 | 0;
     HEAP32[($4_1 + 192 | 0) >> 2] = $6_1;
     HEAP32[($4_1 + 224 | 0) >> 2] = $6_1;
     HEAP32[($4_1 + 160 | 0) >> 2] = $6_1;
     HEAP32[($4_1 + 128 | 0) >> 2] = $6_1;
     HEAP32[($4_1 + 96 | 0) >> 2] = $6_1;
     HEAP32[($4_1 + 64 | 0) >> 2] = $6_1;
     HEAP32[($4_1 + 32 | 0) >> 2] = $6_1;
     HEAP32[$4_1 >> 2] = $6_1;
     break label$2;
    }
    $8_1 = HEAP16[($2_1 + 96 | 0) >> 1] | 0;
    $7_1 = $7_1 << 16 >> 16;
    $9_1 = Math_imul($8_1 + $7_1 | 0, 2217);
    $10_1 = $9_1 + Math_imul($7_1, 3135) | 0;
    $11_1 = HEAP16[($2_1 + 64 | 0) >> 1] | 0;
    $12_1 = HEAP16[$2_1 >> 1] | 0;
    $13_1 = ($11_1 + $12_1 | 0) << 12 | 0;
    $14_1 = ($10_1 + $13_1 | 0) + 512 | 0;
    $7_1 = HEAP16[($2_1 + 80 | 0) >> 1] | 0;
    $15_1 = $7_1 + $6_1 | 0;
    $16_1 = Math_imul($15_1, -1597);
    $98_1 = $16_1 + Math_imul($6_1, 6149) | 0;
    $17_1 = HEAP16[($2_1 + 48 | 0) >> 1] | 0;
    $18_1 = HEAP16[($2_1 + 112 | 0) >> 1] | 0;
    $19_1 = $17_1 + $18_1 | 0;
    $15_1 = Math_imul($19_1 + $15_1 | 0, 4816);
    $6_1 = $15_1 + Math_imul($18_1 + $6_1 | 0, -3685) | 0;
    $20_1 = $98_1 + $6_1 | 0;
    HEAP32[($4_1 + 224 | 0) >> 2] = ($14_1 - $20_1 | 0) >> 10 | 0;
    HEAP32[$4_1 >> 2] = ($20_1 + $14_1 | 0) >> 10 | 0;
    $8_1 = $9_1 + Math_imul($8_1, -7567) | 0;
    $9_1 = ($12_1 - $11_1 | 0) << 12 | 0;
    $11_1 = ($8_1 + $9_1 | 0) + 512 | 0;
    $12_1 = Math_imul($19_1, -8034);
    $145_1 = $12_1 + Math_imul($17_1, 12586) | 0;
    $17_1 = $15_1 + Math_imul($17_1 + $7_1 | 0, -10497) | 0;
    $14_1 = $145_1 + $17_1 | 0;
    HEAP32[($4_1 + 192 | 0) >> 2] = ($11_1 - $14_1 | 0) >> 10 | 0;
    HEAP32[($4_1 + 32 | 0) >> 2] = ($14_1 + $11_1 | 0) >> 10 | 0;
    $8_1 = ($9_1 - $8_1 | 0) + 512 | 0;
    $7_1 = ($16_1 + Math_imul($7_1, 8410) | 0) + $17_1 | 0;
    HEAP32[($4_1 + 160 | 0) >> 2] = ($8_1 - $7_1 | 0) >> 10 | 0;
    HEAP32[($4_1 + 64 | 0) >> 2] = ($7_1 + $8_1 | 0) >> 10 | 0;
    $7_1 = ($13_1 - $10_1 | 0) + 512 | 0;
    $6_1 = ($12_1 + Math_imul($18_1, 1223) | 0) + $6_1 | 0;
    HEAP32[($4_1 + 128 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 10 | 0;
    HEAP32[($4_1 + 96 | 0) >> 2] = ($6_1 + $7_1 | 0) >> 10 | 0;
   }
   $4_1 = $4_1 + 4 | 0;
   $2_1 = $2_1 + 2 | 0;
   $5_1 = $5_1 + 1 | 0;
   if (($5_1 | 0) != (8 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $2_1 = $3_1;
  $18_1 = 0;
  label$4 : while (1) {
   $5_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
   $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $8_1 = Math_imul($5_1 + $4_1 | 0, 2217);
   $9_1 = $8_1 + Math_imul($4_1, 3135) | 0;
   $10_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   $11_1 = HEAP32[$2_1 >> 2] | 0;
   $12_1 = ($10_1 + $11_1 | 0) << 12 | 0;
   $13_1 = ($9_1 + $12_1 | 0) + 16842752 | 0;
   $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $6_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   $14_1 = $4_1 + $6_1 | 0;
   $15_1 = Math_imul($14_1, -1597);
   $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $17_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
   $16_1 = $7_1 + $17_1 | 0;
   $14_1 = Math_imul($14_1 + $16_1 | 0, 4816);
   $19_1 = $14_1 + Math_imul($4_1 + $17_1 | 0, -3685) | 0;
   $20_1 = ($15_1 + Math_imul($4_1, 6149) | 0) + $19_1 | 0;
   $4_1 = $13_1 - $20_1 | 0;
   HEAP8[($0_1 + 7 | 0) >> 0] = $4_1 >>> 0 > 33554431 >>> 0 ? ($4_1 >> 31 | 0) ^ -1 | 0 : $4_1 >>> 17 | 0;
   $4_1 = $20_1 + $13_1 | 0;
   HEAP8[$0_1 >> 0] = $4_1 >>> 0 > 33554431 >>> 0 ? ($4_1 >> 31 | 0) ^ -1 | 0 : $4_1 >>> 17 | 0;
   $5_1 = $8_1 + Math_imul($5_1, -7567) | 0;
   $8_1 = ($11_1 - $10_1 | 0) << 12 | 0;
   $10_1 = ($5_1 + $8_1 | 0) + 16842752 | 0;
   $11_1 = Math_imul($16_1, -8034);
   $310_1 = $11_1 + Math_imul($7_1, 12586) | 0;
   $7_1 = $14_1 + Math_imul($7_1 + $6_1 | 0, -10497) | 0;
   $13_1 = $310_1 + $7_1 | 0;
   $4_1 = $10_1 - $13_1 | 0;
   HEAP8[($0_1 + 6 | 0) >> 0] = $4_1 >>> 0 > 33554431 >>> 0 ? ($4_1 >> 31 | 0) ^ -1 | 0 : $4_1 >>> 17 | 0;
   $4_1 = $13_1 + $10_1 | 0;
   HEAP8[($0_1 + 1 | 0) >> 0] = $4_1 >>> 0 > 33554431 >>> 0 ? ($4_1 >> 31 | 0) ^ -1 | 0 : $4_1 >>> 17 | 0;
   $5_1 = ($8_1 - $5_1 | 0) + 16842752 | 0;
   $6_1 = ($15_1 + Math_imul($6_1, 8410) | 0) + $7_1 | 0;
   $4_1 = $5_1 - $6_1 | 0;
   HEAP8[($0_1 + 5 | 0) >> 0] = $4_1 >>> 0 > 33554431 >>> 0 ? ($4_1 >> 31 | 0) ^ -1 | 0 : $4_1 >>> 17 | 0;
   $4_1 = $6_1 + $5_1 | 0;
   HEAP8[($0_1 + 2 | 0) >> 0] = $4_1 >>> 0 > 33554431 >>> 0 ? ($4_1 >> 31 | 0) ^ -1 | 0 : $4_1 >>> 17 | 0;
   $6_1 = ($12_1 - $9_1 | 0) + 16842752 | 0;
   $7_1 = ($11_1 + Math_imul($17_1, 1223) | 0) + $19_1 | 0;
   $4_1 = $6_1 - $7_1 | 0;
   HEAP8[($0_1 + 4 | 0) >> 0] = $4_1 >>> 0 > 33554431 >>> 0 ? ($4_1 >> 31 | 0) ^ -1 | 0 : $4_1 >>> 17 | 0;
   $4_1 = $7_1 + $6_1 | 0;
   HEAP8[($0_1 + 3 | 0) >> 0] = $4_1 >>> 0 > 33554431 >>> 0 ? ($4_1 >> 31 | 0) ^ -1 | 0 : $4_1 >>> 17 | 0;
   $0_1 = $0_1 + $1_1 | 0;
   $2_1 = $2_1 + 32 | 0;
   $18_1 = $18_1 + 1 | 0;
   if (($18_1 | 0) != (8 | 0)) {
    continue label$4
   }
   break label$4;
  };
  global$0 = $3_1 + 256 | 0;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAPU8[($0_1 + 18116 | 0) >> 0] | 0;
    if (($1_1 | 0) == (255 | 0)) {
     break label$2
    }
    HEAP8[($0_1 + 18116 | 0) >> 0] = 255;
    break label$1;
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     $1_1 = HEAP32[($2_1 + 168 | 0) >> 2] | 0;
     if ($1_1 >>> 0 >= (HEAP32[($2_1 + 172 | 0) >> 2] | 0) >>> 0) {
      break label$4
     }
     HEAP32[($2_1 + 168 | 0) >> 2] = $1_1 + 1 | 0;
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     break label$3;
    }
    label$5 : {
     if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
      break label$5
     }
     $1_1 = 255;
     break label$1;
    }
    label$6 : {
     label$7 : {
      $1_1 = $2_1 + 40 | 0;
      $3_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $1_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      HEAP8[($2_1 + 40 | 0) >> 0] = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      $4_1 = $2_1 + 41 | 0;
      break label$6;
     }
     $4_1 = $1_1 + $3_1 | 0;
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
    }
    HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 168 | 0) >> 2] = $2_1 + 41 | 0;
   }
   $1_1 = 255;
   if (($3_1 & 255 | 0 | 0) != (255 | 0)) {
    break label$1
   }
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      $2_1 = HEAP32[$0_1 >> 2] | 0;
      $1_1 = HEAP32[($2_1 + 168 | 0) >> 2] | 0;
      if ($1_1 >>> 0 >= (HEAP32[($2_1 + 172 | 0) >> 2] | 0) >>> 0) {
       break label$10
      }
      HEAP32[($2_1 + 168 | 0) >> 2] = $1_1 + 1 | 0;
      $1_1 = HEAPU8[$1_1 >> 0] | 0;
      break label$9;
     }
     label$11 : {
      if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
       break label$11
      }
      $1_1 = 0;
      break label$1;
     }
     label$12 : {
      label$13 : {
       $1_1 = $2_1 + 40 | 0;
       $3_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $1_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
       if ($3_1) {
        break label$13
       }
       $1_1 = 0;
       HEAP8[($2_1 + 40 | 0) >> 0] = 0;
       HEAP32[($2_1 + 32 | 0) >> 2] = 0;
       $3_1 = $2_1 + 41 | 0;
       break label$12;
      }
      $3_1 = $1_1 + $3_1 | 0;
      $1_1 = HEAPU8[$1_1 >> 0] | 0;
     }
     HEAP32[($2_1 + 172 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 168 | 0) >> 2] = $2_1 + 41 | 0;
    }
    if (($1_1 & 255 | 0 | 0) == (255 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  return $1_1 & 255 | 0 | 0;
 }
 
 function $368($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $66_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 18112 | 0) >> 2] | 0 | 0) > (15 | 0)) {
    break label$1
   }
   $369($0_1 | 0);
  }
  $7_1 = 0;
  label$2 : {
   label$3 : {
    $2_1 = $376($0_1 | 0, $2_1 | 0) | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break label$3
    }
    $8_1 = $411($1_1 | 0, 0 | 0, 128 | 0) | 0;
    label$4 : {
     if (!$2_1) {
      break label$4
     }
     label$5 : {
      if ((HEAP32[($0_1 + 18112 | 0) >> 2] | 0 | 0) >= ($2_1 | 0)) {
       break label$5
      }
      $369($0_1 | 0);
     }
     if ($2_1 >>> 0 >= 17 >>> 0) {
      break label$2
     }
     HEAP32[($0_1 + 18112 | 0) >> 2] = (HEAP32[($0_1 + 18112 | 0) >> 2] | 0) - $2_1 | 0;
     $7_1 = HEAP32[($0_1 + 18108 | 0) >> 2] | 0;
     $1_1 = __wasm_rotl_i32($7_1 | 0, $2_1 | 0) | 0;
     $2_1 = $2_1 << 2 | 0;
     $9_1 = HEAP32[($2_1 + 71168 | 0) >> 2] | 0;
     HEAP32[($0_1 + 18108 | 0) >> 2] = $1_1 & ($9_1 ^ -1 | 0) | 0;
     $7_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($2_1 + 71248 | 0) >> 2] | 0, wasm2js_i32$2 = ($7_1 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + ($1_1 & $9_1 | 0) | 0;
    }
    $2_1 = ($0_1 + Math_imul($5_1, 72) | 0) + 17844 | 0;
    $66_1 = $2_1;
    $2_1 = (HEAP32[$2_1 >> 2] | 0) + $7_1 | 0;
    HEAP32[$66_1 >> 2] = $2_1;
    HEAP16[$8_1 >> 1] = Math_imul($2_1, HEAPU8[$6_1 >> 0] | 0);
    $2_1 = 1;
    label$6 : while (1) {
     label$7 : {
      if ((HEAP32[($0_1 + 18112 | 0) >> 2] | 0 | 0) > (15 | 0)) {
       break label$7
      }
      $369($0_1 | 0);
     }
     label$8 : {
      label$9 : {
       $1_1 = HEAP32[($0_1 + 18108 | 0) >> 2] | 0;
       $7_1 = HEAPU16[($4_1 + (($1_1 >>> 22 | 0) & 1022 | 0) | 0) >> 1] | 0;
       if (!$7_1) {
        break label$9
       }
       $5_1 = $7_1 & 15 | 0;
       HEAP32[($0_1 + 18108 | 0) >> 2] = $1_1 << $5_1 | 0;
       HEAP32[($0_1 + 18112 | 0) >> 2] = (HEAP32[($0_1 + 18112 | 0) >> 2] | 0) - $5_1 | 0;
       $2_1 = (($7_1 >>> 4 | 0) & 15 | 0) + $2_1 | 0;
       $1_1 = HEAPU8[($2_1 + 71088 | 0) >> 0] | 0;
       HEAP16[($8_1 + ($1_1 << 1 | 0) | 0) >> 1] = Math_imul($7_1 << 16 >> 16 >>> 8 | 0, HEAPU8[($6_1 + $1_1 | 0) >> 0] | 0);
       $2_1 = $2_1 + 1 | 0;
       break label$8;
      }
      $1_1 = $376($0_1 | 0, $3_1 | 0) | 0;
      if (($1_1 | 0) < (0 | 0)) {
       break label$3
      }
      label$10 : {
       $7_1 = $1_1 & 15 | 0;
       if ($7_1) {
        break label$10
       }
       label$11 : {
        if (($1_1 | 0) == (240 | 0)) {
         break label$11
        }
        return 1 | 0;
       }
       $2_1 = $2_1 + 16 | 0;
       break label$8;
      }
      $2_1 = ($1_1 >>> 4 | 0) + $2_1 | 0;
      $1_1 = HEAPU8[($2_1 + 71088 | 0) >> 0] | 0;
      label$12 : {
       $5_1 = HEAP32[($0_1 + 18112 | 0) >> 2] | 0;
       if (($5_1 | 0) >= ($7_1 | 0)) {
        break label$12
       }
       $369($0_1 | 0);
       $5_1 = HEAP32[($0_1 + 18112 | 0) >> 2] | 0;
      }
      $2_1 = $2_1 + 1 | 0;
      HEAP32[($0_1 + 18112 | 0) >> 2] = $5_1 - $7_1 | 0;
      $5_1 = HEAP32[($0_1 + 18108 | 0) >> 2] | 0;
      $9_1 = __wasm_rotl_i32($5_1 | 0, $7_1 | 0) | 0;
      $7_1 = $7_1 << 2 | 0;
      $10_1 = HEAP32[($7_1 + 71168 | 0) >> 2] | 0;
      HEAP32[($0_1 + 18108 | 0) >> 2] = $9_1 & ($10_1 ^ -1 | 0) | 0;
      HEAP16[($8_1 + ($1_1 << 1 | 0) | 0) >> 1] = Math_imul((wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($7_1 + 71248 | 0) >> 2] | 0, wasm2js_i32$2 = ($5_1 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + ($9_1 & $10_1 | 0) | 0, HEAPU8[($6_1 + $1_1 | 0) >> 0] | 0);
     }
     if (($2_1 | 0) < (64 | 0)) {
      continue label$6
     }
     break label$6;
    };
    return 1 | 0;
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 67646;
   return 0 | 0;
  }
  fimport$54(69302 | 0, 67153 | 0, 1672 | 0, 67371 | 0);
  wasm2js_trap();
 }
 
 function $369($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $1_1 = 0;
    label$3 : {
     if (HEAP32[($0_1 + 18120 | 0) >> 2] | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[$0_1 >> 2] | 0;
       $3_1 = HEAP32[($2_1 + 168 | 0) >> 2] | 0;
       if ($3_1 >>> 0 >= (HEAP32[($2_1 + 172 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($2_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
       $1_1 = HEAPU8[$3_1 >> 0] | 0;
       break label$4;
      }
      if (!(HEAP32[($2_1 + 32 | 0) >> 2] | 0)) {
       break label$3
      }
      label$6 : {
       label$7 : {
        $1_1 = $2_1 + 40 | 0;
        $3_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $1_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
        if ($3_1) {
         break label$7
        }
        $1_1 = 0;
        HEAP8[($2_1 + 40 | 0) >> 0] = 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = 0;
        $3_1 = $2_1 + 41 | 0;
        break label$6;
       }
       $3_1 = $1_1 + $3_1 | 0;
       $1_1 = HEAPU8[$1_1 >> 0] | 0;
      }
      HEAP32[($2_1 + 172 | 0) >> 2] = $3_1;
      HEAP32[($2_1 + 168 | 0) >> 2] = $2_1 + 41 | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     if (($1_1 | 0) != (255 | 0)) {
      break label$3
     }
     label$8 : {
      label$9 : {
       $2_1 = HEAP32[$0_1 >> 2] | 0;
       $1_1 = HEAP32[($2_1 + 168 | 0) >> 2] | 0;
       if ($1_1 >>> 0 >= (HEAP32[($2_1 + 172 | 0) >> 2] | 0) >>> 0) {
        break label$9
       }
       HEAP32[($2_1 + 168 | 0) >> 2] = $1_1 + 1 | 0;
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       break label$8;
      }
      label$10 : {
       if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
        break label$10
       }
       $1_1 = 255;
       break label$3;
      }
      label$11 : {
       label$12 : {
        $1_1 = $2_1 + 40 | 0;
        $3_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $1_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
        if ($3_1) {
         break label$12
        }
        $3_1 = 0;
        HEAP8[($2_1 + 40 | 0) >> 0] = 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = 0;
        $4_1 = $2_1 + 41 | 0;
        break label$11;
       }
       $4_1 = $1_1 + $3_1 | 0;
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
      }
      HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
      HEAP32[($2_1 + 168 | 0) >> 2] = $2_1 + 41 | 0;
     }
     $1_1 = 255;
     if (!($3_1 & 255 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 18120 | 0) >> 2] = 1;
     HEAP8[($0_1 + 18116 | 0) >> 0] = $3_1;
     break label$1;
    }
    $2_1 = HEAP32[($0_1 + 18112 | 0) >> 2] | 0;
    HEAP32[($0_1 + 18112 | 0) >> 2] = $2_1 + 8 | 0;
    HEAP32[($0_1 + 18108 | 0) >> 2] = $1_1 << (24 - $2_1 | 0) | 0 | (HEAP32[($0_1 + 18108 | 0) >> 2] | 0) | 0;
    if (($2_1 | 0) < (17 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $370($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $65_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 18132 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 67827;
   return 0 | 0;
  }
  label$2 : {
   if ((HEAP32[($0_1 + 18112 | 0) >> 2] | 0 | 0) > (15 | 0)) {
    break label$2
   }
   $369($0_1 | 0);
  }
  label$3 : {
   label$4 : {
    if (HEAP32[($0_1 + 18136 | 0) >> 2] | 0) {
     break label$4
    }
    $4_1 = 0;
    $5_1 = $411($1_1 | 0, 0 | 0, 128 | 0) | 0;
    label$5 : {
     $1_1 = $376($0_1 | 0, $2_1 | 0) | 0;
     if (!$1_1) {
      break label$5
     }
     label$6 : {
      if ((HEAP32[($0_1 + 18112 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
       break label$6
      }
      $369($0_1 | 0);
     }
     if ($1_1 >>> 0 >= 17 >>> 0) {
      break label$3
     }
     HEAP32[($0_1 + 18112 | 0) >> 2] = (HEAP32[($0_1 + 18112 | 0) >> 2] | 0) - $1_1 | 0;
     $2_1 = HEAP32[($0_1 + 18108 | 0) >> 2] | 0;
     $4_1 = __wasm_rotl_i32($2_1 | 0, $1_1 | 0) | 0;
     $1_1 = $1_1 << 2 | 0;
     $6_1 = HEAP32[($1_1 + 71168 | 0) >> 2] | 0;
     HEAP32[($0_1 + 18108 | 0) >> 2] = $4_1 & ($6_1 ^ -1 | 0) | 0;
     $4_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($1_1 + 71248 | 0) >> 2] | 0, wasm2js_i32$2 = ($2_1 | 0) < (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + ($4_1 & $6_1 | 0) | 0;
    }
    $1_1 = ($0_1 + Math_imul($3_1, 72) | 0) + 17844 | 0;
    $65_1 = $1_1;
    $1_1 = (HEAP32[$1_1 >> 2] | 0) + $4_1 | 0;
    HEAP32[$65_1 >> 2] = $1_1;
    HEAP16[$5_1 >> 1] = $1_1 << (HEAP32[($0_1 + 18140 | 0) >> 2] | 0) | 0;
    return 1 | 0;
   }
   label$7 : {
    $2_1 = HEAP32[($0_1 + 18112 | 0) >> 2] | 0;
    if (($2_1 | 0) > (0 | 0)) {
     break label$7
    }
    $369($0_1 | 0);
    $2_1 = HEAP32[($0_1 + 18112 | 0) >> 2] | 0;
   }
   HEAP32[($0_1 + 18112 | 0) >> 2] = $2_1 + -1 | 0;
   $2_1 = 1;
   $3_1 = HEAP32[($0_1 + 18108 | 0) >> 2] | 0;
   HEAP32[($0_1 + 18108 | 0) >> 2] = $3_1 << 1 | 0;
   label$8 : {
    if (($3_1 | 0) > (-1 | 0)) {
     break label$8
    }
    $2_1 = 1;
    HEAP16[$1_1 >> 1] = (HEAPU16[$1_1 >> 1] | 0) + (1 << (HEAP32[($0_1 + 18140 | 0) >> 2] | 0) | 0) | 0;
   }
   return $2_1 | 0;
  }
  fimport$54(69302 | 0, 67153 | 0, 1672 | 0, 67371 | 0);
  wasm2js_trap();
 }
 
 function $371($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $12_1 = 0, $2_1 = 0, $10_1 = 0, $9_1 = 0, $13_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        switch ($1_1 + -196 | 0 | 0) {
        default:
         if (($1_1 | 0) != (255 | 0)) {
          break label$5
         }
         $3_1 = 0;
         HEAP32[(0 + 96956 | 0) >> 2] = 66483;
         break label$1;
        case 25:
         label$10 : {
          label$11 : {
           $1_1 = HEAP32[$0_1 >> 2] | 0;
           $4_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
           $5_1 = HEAP32[($1_1 + 172 | 0) >> 2] | 0;
           if ($4_1 >>> 0 >= $5_1 >>> 0) {
            break label$11
           }
           $3_1 = $4_1 + 1 | 0;
           HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
           $6_1 = HEAPU8[$4_1 >> 0] | 0;
           break label$10;
          }
          label$12 : {
           if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
            break label$12
           }
           $6_1 = 0;
           $3_1 = $4_1;
           break label$10;
          }
          label$13 : {
           label$14 : {
            $3_1 = $1_1 + 40 | 0;
            $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
            if ($5_1) {
             break label$14
            }
            $6_1 = 0;
            HEAP8[($1_1 + 40 | 0) >> 0] = 0;
            HEAP32[($1_1 + 32 | 0) >> 2] = 0;
            $5_1 = $1_1 + 41 | 0;
            break label$13;
           }
           $5_1 = $3_1 + $5_1 | 0;
           $6_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
          $3_1 = $1_1 + 41 | 0;
          HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
         }
         label$15 : {
          label$16 : {
           if ($3_1 >>> 0 >= $5_1 >>> 0) {
            break label$16
           }
           HEAP32[($1_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
           $3_1 = HEAPU8[$3_1 >> 0] | 0;
           break label$15;
          }
          label$17 : {
           if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
            break label$17
           }
           $3_1 = 0;
           break label$15;
          }
          label$18 : {
           label$19 : {
            $3_1 = $1_1 + 40 | 0;
            $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
            if ($5_1) {
             break label$19
            }
            $3_1 = 0;
            HEAP8[($1_1 + 40 | 0) >> 0] = 0;
            HEAP32[($1_1 + 32 | 0) >> 2] = 0;
            $5_1 = $1_1 + 41 | 0;
            break label$18;
           }
           $5_1 = $3_1 + $5_1 | 0;
           $3_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
          HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
         }
         label$20 : {
          if ((($6_1 & 255 | 0) << 8 | 0 | ($3_1 & 255 | 0) | 0 | 0) == (4 | 0)) {
           break label$20
          }
          $3_1 = 0;
          HEAP32[(0 + 96956 | 0) >> 2] = 66804;
          break label$1;
         }
         label$21 : {
          label$22 : {
           $1_1 = HEAP32[$0_1 >> 2] | 0;
           $4_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
           $5_1 = HEAP32[($1_1 + 172 | 0) >> 2] | 0;
           if ($4_1 >>> 0 >= $5_1 >>> 0) {
            break label$22
           }
           $3_1 = $4_1 + 1 | 0;
           HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
           $6_1 = HEAPU8[$4_1 >> 0] | 0;
           break label$21;
          }
          label$23 : {
           if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
            break label$23
           }
           $6_1 = 0;
           $3_1 = $4_1;
           break label$21;
          }
          label$24 : {
           label$25 : {
            $3_1 = $1_1 + 40 | 0;
            $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
            if ($5_1) {
             break label$25
            }
            $6_1 = 0;
            HEAP8[($1_1 + 40 | 0) >> 0] = 0;
            HEAP32[($1_1 + 32 | 0) >> 2] = 0;
            $5_1 = $1_1 + 41 | 0;
            break label$24;
           }
           $5_1 = $3_1 + $5_1 | 0;
           $6_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
          $3_1 = $1_1 + 41 | 0;
          HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
         }
         label$26 : {
          label$27 : {
           if ($3_1 >>> 0 >= $5_1 >>> 0) {
            break label$27
           }
           HEAP32[($1_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
           $3_1 = HEAPU8[$3_1 >> 0] | 0;
           break label$26;
          }
          label$28 : {
           if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
            break label$28
           }
           $3_1 = 0;
           break label$26;
          }
          label$29 : {
           label$30 : {
            $3_1 = $1_1 + 40 | 0;
            $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
            if ($5_1) {
             break label$30
            }
            $3_1 = 0;
            HEAP8[($1_1 + 40 | 0) >> 0] = 0;
            HEAP32[($1_1 + 32 | 0) >> 2] = 0;
            $5_1 = $1_1 + 41 | 0;
            break label$29;
           }
           $5_1 = $3_1 + $5_1 | 0;
           $3_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
          HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
         }
         HEAP32[($0_1 + 18168 | 0) >> 2] = ($6_1 & 255 | 0) << 8 | 0 | ($3_1 & 255 | 0) | 0;
         break label$4;
        case 23:
         label$31 : {
          label$32 : {
           $1_1 = HEAP32[$0_1 >> 2] | 0;
           $4_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
           $5_1 = HEAP32[($1_1 + 172 | 0) >> 2] | 0;
           if ($4_1 >>> 0 >= $5_1 >>> 0) {
            break label$32
           }
           $3_1 = $4_1 + 1 | 0;
           HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
           $6_1 = HEAPU8[$4_1 >> 0] | 0;
           break label$31;
          }
          label$33 : {
           if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
            break label$33
           }
           $6_1 = 0;
           $3_1 = $4_1;
           break label$31;
          }
          label$34 : {
           label$35 : {
            $3_1 = $1_1 + 40 | 0;
            $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
            if ($5_1) {
             break label$35
            }
            $6_1 = 0;
            HEAP8[($1_1 + 40 | 0) >> 0] = 0;
            HEAP32[($1_1 + 32 | 0) >> 2] = 0;
            $5_1 = $1_1 + 41 | 0;
            break label$34;
           }
           $5_1 = $3_1 + $5_1 | 0;
           $6_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
          $3_1 = $1_1 + 41 | 0;
          HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
         }
         label$36 : {
          label$37 : {
           if ($3_1 >>> 0 >= $5_1 >>> 0) {
            break label$37
           }
           HEAP32[($1_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
           $3_1 = HEAPU8[$3_1 >> 0] | 0;
           break label$36;
          }
          label$38 : {
           if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
            break label$38
           }
           $3_1 = 0;
           break label$36;
          }
          label$39 : {
           label$40 : {
            $3_1 = $1_1 + 40 | 0;
            $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
            if ($5_1) {
             break label$40
            }
            $3_1 = 0;
            HEAP8[($1_1 + 40 | 0) >> 0] = 0;
            HEAP32[($1_1 + 32 | 0) >> 2] = 0;
            $5_1 = $1_1 + 41 | 0;
            break label$39;
           }
           $5_1 = $3_1 + $5_1 | 0;
           $3_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
          HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
         }
         label$41 : {
          $7_1 = (($6_1 & 255 | 0) << 8 | 0 | ($3_1 & 255 | 0) | 0) + -2 | 0;
          if (($7_1 | 0) >= (1 | 0)) {
           break label$41
          }
          $3_1 = !$7_1;
          break label$1;
         }
         label$42 : while (1) {
          label$43 : {
           label$44 : {
            label$45 : {
             $1_1 = HEAP32[$0_1 >> 2] | 0;
             $3_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
             if ($3_1 >>> 0 >= (HEAP32[($1_1 + 172 | 0) >> 2] | 0) >>> 0) {
              break label$45
             }
             HEAP32[($1_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
             $3_1 = HEAPU8[$3_1 >> 0] | 0;
             break label$44;
            }
            label$46 : {
             if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
              break label$46
             }
             $4_1 = 0;
             break label$43;
            }
            label$47 : {
             label$48 : {
              $3_1 = $1_1 + 40 | 0;
              $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
              if ($5_1) {
               break label$48
              }
              $3_1 = 0;
              HEAP8[($1_1 + 40 | 0) >> 0] = 0;
              HEAP32[($1_1 + 32 | 0) >> 2] = 0;
              $5_1 = $1_1 + 41 | 0;
              break label$47;
             }
             $5_1 = $3_1 + $5_1 | 0;
             $3_1 = HEAPU8[$3_1 >> 0] | 0;
            }
            HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
            HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
           }
           label$49 : {
            if (($3_1 & 255 | 0) >>> 0 < 16 >>> 0) {
             break label$49
            }
            $3_1 = 0;
            HEAP32[(0 + 96956 | 0) >> 2] = 67471;
            break label$1;
           }
           $4_1 = $3_1 & 15 | 0;
           if ($4_1 >>> 0 > 3 >>> 0) {
            break label$3
           }
          }
          $3_1 = 0;
          label$50 : while (1) {
           label$51 : {
            label$52 : {
             $1_1 = HEAP32[$0_1 >> 2] | 0;
             $5_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($1_1 + 172 | 0) >> 2] | 0) >>> 0) {
              break label$52
             }
             HEAP32[($1_1 + 168 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$51;
            }
            label$53 : {
             if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
              break label$53
             }
             $5_1 = 0;
             break label$51;
            }
            label$54 : {
             label$55 : {
              $5_1 = $1_1 + 40 | 0;
              $6_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
              if ($6_1) {
               break label$55
              }
              $5_1 = 0;
              HEAP8[($1_1 + 40 | 0) >> 0] = 0;
              HEAP32[($1_1 + 32 | 0) >> 2] = 0;
              $6_1 = $1_1 + 41 | 0;
              break label$54;
             }
             $6_1 = $5_1 + $6_1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
            }
            HEAP32[($1_1 + 172 | 0) >> 2] = $6_1;
            HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
           }
           HEAP8[((($0_1 + ($4_1 << 6 | 0) | 0) + (HEAPU8[($3_1 + 71088 | 0) >> 0] | 0) | 0) + 13444 | 0) >> 0] = $5_1;
           $3_1 = $3_1 + 1 | 0;
           if (($3_1 | 0) != (64 | 0)) {
            continue label$50
           }
           break label$50;
          };
          $1_1 = ($7_1 | 0) > (65 | 0);
          $3_1 = $7_1 + -65 | 0;
          $7_1 = $3_1;
          if ($1_1) {
           continue label$42
          }
          break label$42;
         };
         $3_1 = !$3_1;
         break label$1;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 24:
         break label$5;
        case 0:
         break label$6;
        };
       }
       label$56 : {
        label$57 : {
         $1_1 = HEAP32[$0_1 >> 2] | 0;
         $4_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
         $5_1 = HEAP32[($1_1 + 172 | 0) >> 2] | 0;
         if ($4_1 >>> 0 >= $5_1 >>> 0) {
          break label$57
         }
         $3_1 = $4_1 + 1 | 0;
         HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
         $6_1 = HEAPU8[$4_1 >> 0] | 0;
         break label$56;
        }
        label$58 : {
         if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
          break label$58
         }
         $6_1 = 0;
         $3_1 = $4_1;
         break label$56;
        }
        label$59 : {
         label$60 : {
          $3_1 = $1_1 + 40 | 0;
          $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
          if ($5_1) {
           break label$60
          }
          $6_1 = 0;
          HEAP8[($1_1 + 40 | 0) >> 0] = 0;
          HEAP32[($1_1 + 32 | 0) >> 2] = 0;
          $5_1 = $1_1 + 41 | 0;
          break label$59;
         }
         $5_1 = $3_1 + $5_1 | 0;
         $6_1 = HEAPU8[$3_1 >> 0] | 0;
        }
        HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
        $3_1 = $1_1 + 41 | 0;
        HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
       }
       label$61 : {
        label$62 : {
         if ($3_1 >>> 0 >= $5_1 >>> 0) {
          break label$62
         }
         HEAP32[($1_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
         $3_1 = HEAPU8[$3_1 >> 0] | 0;
         break label$61;
        }
        label$63 : {
         if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
          break label$63
         }
         $3_1 = 0;
         break label$61;
        }
        label$64 : {
         label$65 : {
          $3_1 = $1_1 + 40 | 0;
          $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
          if ($5_1) {
           break label$65
          }
          $3_1 = 0;
          HEAP8[($1_1 + 40 | 0) >> 0] = 0;
          HEAP32[($1_1 + 32 | 0) >> 2] = 0;
          $5_1 = $1_1 + 41 | 0;
          break label$64;
         }
         $5_1 = $3_1 + $5_1 | 0;
         $3_1 = HEAPU8[$3_1 >> 0] | 0;
        }
        HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
        HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
       }
       label$66 : {
        $8_1 = (($6_1 & 255 | 0) << 8 | 0 | ($3_1 & 255 | 0) | 0) + -2 | 0;
        if (($8_1 | 0) < (1 | 0)) {
         break label$66
        }
        $9_1 = $0_1 + 4 | 0;
        $10_1 = $0_1 + 6724 | 0;
        label$67 : while (1) {
         label$68 : {
          label$69 : {
           $1_1 = HEAP32[$0_1 >> 2] | 0;
           $3_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
           if ($3_1 >>> 0 >= (HEAP32[($1_1 + 172 | 0) >> 2] | 0) >>> 0) {
            break label$69
           }
           HEAP32[($1_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
           $4_1 = HEAPU8[$3_1 >> 0] | 0;
           break label$68;
          }
          label$70 : {
           if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
            break label$70
           }
           $4_1 = 0;
           break label$68;
          }
          label$71 : {
           label$72 : {
            $3_1 = $1_1 + 40 | 0;
            $5_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
            if ($5_1) {
             break label$72
            }
            $4_1 = 0;
            HEAP8[($1_1 + 40 | 0) >> 0] = 0;
            HEAP32[($1_1 + 32 | 0) >> 2] = 0;
            $5_1 = $1_1 + 41 | 0;
            break label$71;
           }
           $5_1 = $3_1 + $5_1 | 0;
           $4_1 = HEAPU8[$3_1 >> 0] | 0;
          }
          HEAP32[($1_1 + 172 | 0) >> 2] = $5_1;
          HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
         }
         label$73 : {
          label$74 : {
           $11_1 = $4_1 & 255 | 0;
           if ($11_1 >>> 0 > 31 >>> 0) {
            break label$74
           }
           $5_1 = 0;
           $3_1 = 0;
           $12_1 = $4_1 & 15 | 0;
           if ($12_1 >>> 0 < 4 >>> 0) {
            break label$73
           }
          }
          HEAP32[(0 + 96956 | 0) >> 2] = 66532;
          break label$2;
         }
         label$75 : while (1) {
          label$76 : {
           label$77 : {
            $1_1 = HEAP32[$0_1 >> 2] | 0;
            $4_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
            if ($4_1 >>> 0 >= (HEAP32[($1_1 + 172 | 0) >> 2] | 0) >>> 0) {
             break label$77
            }
            HEAP32[($1_1 + 168 | 0) >> 2] = $4_1 + 1 | 0;
            $4_1 = HEAPU8[$4_1 >> 0] | 0;
            break label$76;
           }
           label$78 : {
            if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
             break label$78
            }
            $4_1 = 0;
            break label$76;
           }
           label$79 : {
            label$80 : {
             $4_1 = $1_1 + 40 | 0;
             $6_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
             if ($6_1) {
              break label$80
             }
             $4_1 = 0;
             HEAP8[($1_1 + 40 | 0) >> 0] = 0;
             HEAP32[($1_1 + 32 | 0) >> 2] = 0;
             $6_1 = $1_1 + 41 | 0;
             break label$79;
            }
            $6_1 = $4_1 + $6_1 | 0;
            $4_1 = HEAPU8[$4_1 >> 0] | 0;
           }
           HEAP32[($1_1 + 172 | 0) >> 2] = $6_1;
           HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
          }
          $1_1 = $4_1 & 255 | 0;
          HEAP32[($2_1 + ($3_1 << 2 | 0) | 0) >> 2] = $1_1;
          $5_1 = $5_1 + $1_1 | 0;
          $3_1 = $3_1 + 1 | 0;
          if (($3_1 | 0) != (16 | 0)) {
           continue label$75
          }
          break label$75;
         };
         label$81 : {
          label$82 : {
           if ($11_1 >>> 0 > 15 >>> 0) {
            break label$82
           }
           $1_1 = Math_imul($12_1, 1680);
           if (!($396($9_1 + $1_1 | 0 | 0, $2_1 | 0) | 0)) {
            break label$2
           }
           $6_1 = ($0_1 + $1_1 | 0) + 1028 | 0;
           break label$81;
          }
          $1_1 = Math_imul($12_1, 1680);
          if (!($396($10_1 + $1_1 | 0 | 0, $2_1 | 0) | 0)) {
           break label$2
          }
          $6_1 = ($0_1 + $1_1 | 0) + 7748 | 0;
         }
         $3_1 = 0;
         label$83 : {
          if (!$5_1) {
           break label$83
          }
          label$84 : while (1) {
           label$85 : {
            label$86 : {
             $1_1 = HEAP32[$0_1 >> 2] | 0;
             $4_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
             if ($4_1 >>> 0 >= (HEAP32[($1_1 + 172 | 0) >> 2] | 0) >>> 0) {
              break label$86
             }
             HEAP32[($1_1 + 168 | 0) >> 2] = $4_1 + 1 | 0;
             $4_1 = HEAPU8[$4_1 >> 0] | 0;
             break label$85;
            }
            label$87 : {
             if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
              break label$87
             }
             $4_1 = 0;
             break label$85;
            }
            label$88 : {
             label$89 : {
              $4_1 = $1_1 + 40 | 0;
              $7_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
              if ($7_1) {
               break label$89
              }
              $4_1 = 0;
              HEAP8[($1_1 + 40 | 0) >> 0] = 0;
              HEAP32[($1_1 + 32 | 0) >> 2] = 0;
              $7_1 = $1_1 + 41 | 0;
              break label$88;
             }
             $7_1 = $4_1 + $7_1 | 0;
             $4_1 = HEAPU8[$4_1 >> 0] | 0;
            }
            HEAP32[($1_1 + 172 | 0) >> 2] = $7_1;
            HEAP32[($1_1 + 168 | 0) >> 2] = $1_1 + 41 | 0;
           }
           HEAP8[($6_1 + $3_1 | 0) >> 0] = $4_1;
           $3_1 = $3_1 + 1 | 0;
           if (($3_1 | 0) != ($5_1 | 0)) {
            continue label$84
           }
           break label$84;
          };
         }
         $13_1 = $8_1 + -17 | 0;
         label$90 : {
          if ($11_1 >>> 0 < 16 >>> 0) {
           break label$90
          }
          $4_1 = $10_1 + Math_imul($12_1, 1680) | 0;
          $7_1 = ($0_1 + ($12_1 << 10 | 0) | 0) + 13700 | 0;
          $1_1 = 0;
          label$91 : while (1) {
           $3_1 = HEAPU8[($4_1 + $1_1 | 0) >> 0] | 0;
           $6_1 = $7_1 + ($1_1 << 1 | 0) | 0;
           HEAP16[$6_1 >> 1] = 0;
           label$92 : {
            if (($3_1 | 0) == (255 | 0)) {
             break label$92
            }
            $11_1 = $4_1 + $3_1 | 0;
            $12_1 = HEAPU8[($11_1 + 1024 | 0) >> 0] | 0;
            $3_1 = $12_1 & 15 | 0;
            if (!$3_1) {
             break label$92
            }
            $11_1 = HEAPU8[($11_1 + 1280 | 0) >> 0] | 0;
            $8_1 = $3_1 + $11_1 | 0;
            if ($8_1 >>> 0 > 9 >>> 0) {
             break label$92
            }
            $11_1 = ($1_1 << $11_1 | 0) & 511 | 0;
            $3_1 = ($11_1 >>> 0 < 256 >>> 0 ? -1 << $3_1 | 0 | 1 | 0 : 0) + ($11_1 >>> (9 - $3_1 | 0) | 0) | 0;
            if (($3_1 + 128 | 0) >>> 0 > 255 >>> 0) {
             break label$92
            }
            HEAP16[$6_1 >> 1] = ($8_1 + ($12_1 & 240 | 0) | 0) + ($3_1 << 8 | 0) | 0;
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (512 | 0)) {
            continue label$91
           }
           break label$91;
          };
         }
         $8_1 = $13_1 - $5_1 | 0;
         if (($8_1 | 0) > (0 | 0)) {
          continue label$67
         }
         break label$67;
        };
       }
       $3_1 = !$8_1;
       break label$1;
      }
      label$93 : {
       if (($1_1 | 0) == (254 | 0)) {
        break label$93
       }
       $3_1 = 0;
       if (($1_1 & -16 | 0 | 0) != (224 | 0)) {
        break label$1
       }
      }
      label$94 : {
       label$95 : {
        $1_1 = HEAP32[$0_1 >> 2] | 0;
        $5_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
        $0_1 = HEAP32[($1_1 + 172 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $0_1 >>> 0) {
         break label$95
        }
        $3_1 = $5_1 + 1 | 0;
        HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
        $4_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$94;
       }
       label$96 : {
        if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
         break label$96
        }
        $4_1 = 0;
        $3_1 = $5_1;
        break label$94;
       }
       label$97 : {
        label$98 : {
         $3_1 = $1_1 + 40 | 0;
         $0_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
         if ($0_1) {
          break label$98
         }
         $4_1 = 0;
         HEAP8[($1_1 + 40 | 0) >> 0] = 0;
         HEAP32[($1_1 + 32 | 0) >> 2] = 0;
         $0_1 = $1_1 + 41 | 0;
         break label$97;
        }
        $0_1 = $3_1 + $0_1 | 0;
        $4_1 = HEAPU8[$3_1 >> 0] | 0;
       }
       HEAP32[($1_1 + 172 | 0) >> 2] = $0_1;
       $3_1 = $1_1 + 41 | 0;
       HEAP32[($1_1 + 168 | 0) >> 2] = $3_1;
      }
      label$99 : {
       label$100 : {
        if ($3_1 >>> 0 >= $0_1 >>> 0) {
         break label$100
        }
        $6_1 = $3_1 + 1 | 0;
        HEAP32[($1_1 + 168 | 0) >> 2] = $6_1;
        $5_1 = HEAPU8[$3_1 >> 0] | 0;
        break label$99;
       }
       label$101 : {
        if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
         break label$101
        }
        $5_1 = 0;
        $6_1 = $3_1;
        break label$99;
       }
       label$102 : {
        label$103 : {
         $3_1 = $1_1 + 40 | 0;
         $0_1 = FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
         if ($0_1) {
          break label$103
         }
         $5_1 = 0;
         HEAP8[($1_1 + 40 | 0) >> 0] = 0;
         HEAP32[($1_1 + 32 | 0) >> 2] = 0;
         $0_1 = $1_1 + 41 | 0;
         break label$102;
        }
        $0_1 = $3_1 + $0_1 | 0;
        $5_1 = HEAPU8[$3_1 >> 0] | 0;
       }
       HEAP32[($1_1 + 172 | 0) >> 2] = $0_1;
       $6_1 = $1_1 + 41 | 0;
       HEAP32[($1_1 + 168 | 0) >> 2] = $6_1;
      }
      $3_1 = 1;
      label$104 : {
       $5_1 = ($4_1 & 255 | 0) << 8 | 0 | ($5_1 & 255 | 0) | 0;
       if ($5_1 >>> 0 > 1 >>> 0) {
        break label$104
       }
       HEAP32[($1_1 + 168 | 0) >> 2] = $0_1;
       break label$1;
      }
      $3_1 = $5_1 + -2 | 0;
      label$105 : {
       if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
        break label$105
       }
       $5_1 = $0_1 - $6_1 | 0;
       if (($3_1 | 0) <= ($5_1 | 0)) {
        break label$105
       }
       HEAP32[($1_1 + 168 | 0) >> 2] = $0_1;
       FUNCTION_TABLE[HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 28 | 0) >> 2] | 0, $3_1 - $5_1 | 0);
       break label$4;
      }
      HEAP32[($1_1 + 168 | 0) >> 2] = $6_1 + $3_1 | 0;
     }
     $3_1 = 1;
     break label$1;
    }
    $3_1 = 0;
    HEAP32[(0 + 96956 | 0) >> 2] = 67558;
    break label$1;
   }
   $3_1 = 0;
  }
  global$0 = $2_1 + 64 | 0;
  return $3_1 | 0;
 }
 
 function $372($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1_1 | 0;
 }
 
 function $373($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   label$2 : while (1) {
    HEAP8[($0_1 + $5_1 | 0) >> 0] = (((HEAPU8[($2_1 + $5_1 | 0) >> 0] | 0) + Math_imul(HEAPU8[($1_1 + $5_1 | 0) >> 0] | 0, 3) | 0) + 2 | 0) >>> 2 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $374($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   $6_1 = ($4_1 | 0) < (1 | 0);
   label$2 : while (1) {
    label$3 : {
     if ($6_1) {
      break label$3
     }
     $7_1 = Math_imul($5_1, $4_1);
     $8_1 = $1_1 + $5_1 | 0;
     $9_1 = 0;
     label$4 : while (1) {
      HEAP8[($0_1 + ($9_1 + $7_1 | 0) | 0) >> 0] = HEAPU8[$8_1 >> 0] | 0;
      $9_1 = $9_1 + 1 | 0;
      if (($9_1 | 0) != ($4_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $375($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = 1;
  $6_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   if (($3_1 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = $6_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $6_1;
   return $0_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $6_1;
  HEAP8[($0_1 + 1 | 0) >> 0] = (((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + Math_imul(HEAPU8[$1_1 >> 0] | 0, 3) | 0) + 2 | 0) >>> 2 | 0;
  $7_1 = $3_1 + -1 | 0;
  $6_1 = 2;
  label$2 : {
   if (($3_1 | 0) < (3 | 0)) {
    break label$2
   }
   label$3 : while (1) {
    $6_1 = $0_1 + ($5_1 << 1 | 0) | 0;
    $8_1 = $1_1 + $5_1 | 0;
    $9_1 = Math_imul(HEAPU8[$8_1 >> 0] | 0, 3) + 2 | 0;
    HEAP8[$6_1 >> 0] = ($9_1 + (HEAPU8[($8_1 + -1 | 0) >> 0] | 0) | 0) >>> 2 | 0;
    $5_1 = $5_1 + 1 | 0;
    HEAP8[($6_1 + 1 | 0) >> 0] = ($9_1 + (HEAPU8[($1_1 + $5_1 | 0) >> 0] | 0) | 0) >>> 2 | 0;
    if (($5_1 | 0) != ($7_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
   $6_1 = $7_1 << 1 | 0;
  }
  $5_1 = $1_1 + $7_1 | 0;
  HEAP8[($0_1 + $6_1 | 0) >> 0] = (((HEAPU8[$5_1 >> 0] | 0) + Math_imul(HEAPU8[(($3_1 + $1_1 | 0) + -2 | 0) >> 0] | 0, 3) | 0) + 2 | 0) >>> 2 | 0;
  HEAP8[($0_1 + ($6_1 | 1 | 0) | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
  return $0_1 | 0;
 }
 
 function $376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 18112 | 0) >> 2] | 0 | 0) > (15 | 0)) {
    break label$1
   }
   $369($0_1 | 0);
  }
  label$2 : {
   label$3 : {
    label$4 : {
     $2_1 = HEAP32[($0_1 + 18108 | 0) >> 2] | 0;
     $3_1 = HEAPU8[($1_1 + ($2_1 >>> 23 | 0) | 0) >> 0] | 0;
     if (($3_1 | 0) == (255 | 0)) {
      break label$4
     }
     $4_1 = -1;
     $5_1 = HEAP32[($0_1 + 18112 | 0) >> 2] | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $3_1 = HEAPU8[($1_1 + 1280 | 0) >> 0] | 0;
     if (($5_1 | 0) < ($3_1 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 18112 | 0) >> 2] = $5_1 - $3_1 | 0;
     HEAP32[($0_1 + 18108 | 0) >> 2] = $2_1 << $3_1 | 0;
     return HEAPU8[($1_1 + 1024 | 0) >> 0] | 0 | 0;
    }
    $5_1 = $2_1 >>> 16 | 0;
    $4_1 = 10;
    label$5 : while (1) {
     $3_1 = $4_1;
     $4_1 = $3_1 + 1 | 0;
     if ($5_1 >>> 0 >= (HEAP32[(($1_1 + ($3_1 << 2 | 0) | 0) + 1540 | 0) >> 2] | 0) >>> 0) {
      continue label$5
     }
     break label$5;
    };
    $5_1 = HEAP32[($0_1 + 18112 | 0) >> 2] | 0;
    label$6 : {
     if (($3_1 | 0) != (17 | 0)) {
      break label$6
     }
     HEAP32[($0_1 + 18112 | 0) >> 2] = $5_1 + -16 | 0;
     return -1 | 0;
    }
    $4_1 = -1;
    if (($5_1 | 0) < ($3_1 | 0)) {
     break label$3
    }
    $4_1 = $3_1 << 2 | 0;
    $4_1 = ((HEAP32[($4_1 + 71168 | 0) >> 2] | 0) & ($2_1 >>> (32 - $3_1 | 0) | 0) | 0) + (HEAP32[(($1_1 + $4_1 | 0) + 1612 | 0) >> 2] | 0) | 0;
    $6_1 = $1_1 + $4_1 | 0;
    $7_1 = HEAPU8[($6_1 + 1280 | 0) >> 0] | 0;
    if ((($2_1 >>> (32 - $7_1 | 0) | 0) & (HEAP32[(($7_1 << 2 | 0) + 71168 | 0) >> 2] | 0) | 0 | 0) != (HEAPU16[(($1_1 + ($4_1 << 1 | 0) | 0) + 512 | 0) >> 1] | 0 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 18108 | 0) >> 2] = $2_1 << $3_1 | 0;
    HEAP32[($0_1 + 18112 | 0) >> 2] = $5_1 - $3_1 | 0;
    $4_1 = HEAPU8[($6_1 + 1024 | 0) >> 0] | 0;
   }
   return $4_1 | 0;
  }
  fimport$54(67904 | 0, 67153 | 0, 1651 | 0, 67596 | 0);
  wasm2js_trap();
 }
 
 function $377($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $12_1 = 0, $7_1 = 0, $6_1 = 0, $13_1 = 0, $10_1 = 0, $8_1 = 0, $5_1 = 0, $9_1 = 0, $11_1 = 0, $14_1 = 0, $15_1 = 0;
  label$1 : {
   if (($2_1 | 0) != ($1_1 | 0)) {
    break label$1
   }
   return $0_1 | 0;
  }
  label$2 : {
   label$3 : {
    if (($2_1 + -1 | 0) >>> 0 >= 4 >>> 0) {
     break label$3
    }
    label$4 : {
     $5_1 = $483(Math_imul(Math_imul($3_1, $2_1), $4_1) | 0) | 0;
     if (!$5_1) {
      break label$4
     }
     label$5 : {
      if (($4_1 | 0) < (1 | 0)) {
       break label$5
      }
      $6_1 = ($1_1 << 3 | 0) + $2_1 | 0;
      $7_1 = $6_1 + -10 | 0;
      if ($7_1 >>> 0 >= 26 >>> 0) {
       break label$2
      }
      if (!((59082375 >>> $7_1 | 0) & 1 | 0)) {
       break label$2
      }
      $8_1 = 0;
      $9_1 = $6_1 + -10 | 0;
      $10_1 = $3_1 + -1 | 0;
      $11_1 = ($10_1 | 0) < (0 | 0);
      label$6 : while (1) {
       $6_1 = Math_imul($8_1, $3_1);
       $7_1 = $5_1 + Math_imul($6_1, $2_1) | 0;
       $6_1 = $0_1 + Math_imul($6_1, $1_1) | 0;
       label$7 : {
        label$8 : {
         switch ($9_1 | 0) {
         case 0:
          $12_1 = $10_1;
          if ($11_1) {
           break label$7
          }
          label$20 : while (1) {
           $13_1 = HEAPU8[$6_1 >> 0] | 0;
           HEAP8[($7_1 + 1 | 0) >> 0] = 255;
           HEAP8[$7_1 >> 0] = $13_1;
           $7_1 = $7_1 + 2 | 0;
           $6_1 = $6_1 + 1 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$20
           }
           break label$7;
          };
         case 1:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$21 : while (1) {
           $13_1 = HEAPU8[$6_1 >> 0] | 0;
           HEAP8[($7_1 + 1 | 0) >> 0] = $13_1;
           HEAP8[($7_1 + 2 | 0) >> 0] = $13_1;
           HEAP8[$7_1 >> 0] = $13_1;
           $7_1 = $7_1 + 3 | 0;
           $6_1 = $6_1 + 1 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$21
           }
           break label$7;
          };
         case 2:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$22 : while (1) {
           $13_1 = HEAPU8[$6_1 >> 0] | 0;
           HEAP8[($7_1 + 1 | 0) >> 0] = $13_1;
           HEAP8[($7_1 + 2 | 0) >> 0] = $13_1;
           HEAP8[($7_1 + 3 | 0) >> 0] = 255;
           HEAP8[$7_1 >> 0] = $13_1;
           $7_1 = $7_1 + 4 | 0;
           $6_1 = $6_1 + 1 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$22
           }
           break label$7;
          };
         case 7:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$23 : while (1) {
           HEAP8[$7_1 >> 0] = HEAPU8[$6_1 >> 0] | 0;
           $7_1 = $7_1 + 1 | 0;
           $6_1 = $6_1 + 2 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$23
           }
           break label$7;
          };
         case 9:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$24 : while (1) {
           $13_1 = HEAPU8[$6_1 >> 0] | 0;
           HEAP8[($7_1 + 1 | 0) >> 0] = $13_1;
           HEAP8[($7_1 + 2 | 0) >> 0] = $13_1;
           HEAP8[$7_1 >> 0] = $13_1;
           $7_1 = $7_1 + 3 | 0;
           $6_1 = $6_1 + 2 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$24
           }
           break label$7;
          };
         case 10:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$25 : while (1) {
           $13_1 = HEAPU8[$6_1 >> 0] | 0;
           HEAP8[($7_1 + 1 | 0) >> 0] = $13_1;
           HEAP8[($7_1 + 2 | 0) >> 0] = $13_1;
           HEAP8[$7_1 >> 0] = $13_1;
           HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $7_1 = $7_1 + 4 | 0;
           $6_1 = $6_1 + 2 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$25
           }
           break label$7;
          };
         case 18:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$26 : while (1) {
           HEAP8[$7_1 >> 0] = HEAPU8[$6_1 >> 0] | 0;
           HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $13_1 = HEAPU8[($6_1 + 2 | 0) >> 0] | 0;
           HEAP8[($7_1 + 3 | 0) >> 0] = 255;
           HEAP8[($7_1 + 2 | 0) >> 0] = $13_1;
           $7_1 = $7_1 + 4 | 0;
           $6_1 = $6_1 + 3 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$26
           }
           break label$7;
          };
         case 15:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$27 : while (1) {
           HEAP8[$7_1 >> 0] = ((Math_imul(HEAPU8[($6_1 + 1 | 0) >> 0] | 0, 150) + Math_imul(HEAPU8[$6_1 >> 0] | 0, 77) | 0) + Math_imul(HEAPU8[($6_1 + 2 | 0) >> 0] | 0, 29) | 0) >>> 8 | 0;
           $7_1 = $7_1 + 1 | 0;
           $6_1 = $6_1 + 3 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$27
           }
           break label$7;
          };
         case 16:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$28 : while (1) {
           $13_1 = HEAPU8[($6_1 + 2 | 0) >> 0] | 0;
           $14_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $15_1 = HEAPU8[$6_1 >> 0] | 0;
           HEAP8[($7_1 + 1 | 0) >> 0] = 255;
           HEAP8[$7_1 >> 0] = ((Math_imul($14_1, 150) + Math_imul($15_1, 77) | 0) + Math_imul($13_1, 29) | 0) >>> 8 | 0;
           $7_1 = $7_1 + 2 | 0;
           $6_1 = $6_1 + 3 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$28
           }
           break label$7;
          };
         case 23:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$29 : while (1) {
           HEAP8[$7_1 >> 0] = ((Math_imul(HEAPU8[($6_1 + 1 | 0) >> 0] | 0, 150) + Math_imul(HEAPU8[$6_1 >> 0] | 0, 77) | 0) + Math_imul(HEAPU8[($6_1 + 2 | 0) >> 0] | 0, 29) | 0) >>> 8 | 0;
           $7_1 = $7_1 + 1 | 0;
           $6_1 = $6_1 + 4 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$29
           }
           break label$7;
          };
         case 24:
          $12_1 = $10_1;
          if (($12_1 | 0) <= (-1 | 0)) {
           break label$7
          }
          label$30 : while (1) {
           HEAP8[$7_1 >> 0] = ((Math_imul(HEAPU8[($6_1 + 1 | 0) >> 0] | 0, 150) + Math_imul(HEAPU8[$6_1 >> 0] | 0, 77) | 0) + Math_imul(HEAPU8[($6_1 + 2 | 0) >> 0] | 0, 29) | 0) >>> 8 | 0;
           HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($6_1 + 3 | 0) >> 0] | 0;
           $7_1 = $7_1 + 2 | 0;
           $6_1 = $6_1 + 4 | 0;
           $13_1 = ($12_1 | 0) > (0 | 0);
           $12_1 = $12_1 + -1 | 0;
           if ($13_1) {
            continue label$30
           }
           break label$7;
          };
         default:
          break label$8;
         };
        }
        $12_1 = $10_1;
        if (($12_1 | 0) <= (-1 | 0)) {
         break label$7
        }
        label$31 : while (1) {
         HEAP8[$7_1 >> 0] = HEAPU8[$6_1 >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($6_1 + 2 | 0) >> 0] | 0;
         $7_1 = $7_1 + 3 | 0;
         $6_1 = $6_1 + 4 | 0;
         $13_1 = ($12_1 | 0) > (0 | 0);
         $12_1 = $12_1 + -1 | 0;
         if ($13_1) {
          continue label$31
         }
         break label$31;
        };
       }
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != ($4_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     $484($0_1 | 0);
     return $5_1 | 0;
    }
    $484($0_1 | 0);
    HEAP32[(0 + 96956 | 0) >> 2] = 66853;
    return 0 | 0;
   }
   fimport$54(69061 | 0, 67153 | 0, 1348 | 0, 66118 | 0);
   wasm2js_trap();
  }
  fimport$54(69177 | 0, 67153 | 0, 1377 | 0, 66118 | 0);
  wasm2js_trap();
 }
 
 function $378($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $9_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = $0_1 + 41 | 0;
   $5_1 = $0_1 + 40 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
       break label$4
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $7_1 + 1 | 0;
      $8_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$3;
     }
     label$5 : {
      if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
       break label$5
      }
      $8_1 = 0;
      break label$3;
     }
     label$6 : {
      label$7 : {
       $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($7_1) {
        break label$7
       }
       $8_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $7_1 = $4_1;
       break label$6;
      }
      $7_1 = $5_1 + $7_1 | 0;
      $8_1 = HEAPU8[$5_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
     HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
    }
    $7_1 = $1_1 + ($6_1 << 2 | 0) | 0;
    HEAP8[($7_1 + 2 | 0) >> 0] = $8_1;
    label$8 : {
     label$9 : {
      $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      if ($8_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $8_1 + 1 | 0;
      $8_1 = HEAPU8[$8_1 >> 0] | 0;
      break label$8;
     }
     label$10 : {
      if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
       break label$10
      }
      $8_1 = 0;
      break label$8;
     }
     label$11 : {
      label$12 : {
       $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($8_1) {
        break label$12
       }
       $8_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $9_1 = $4_1;
       break label$11;
      }
      $9_1 = $5_1 + $8_1 | 0;
      $8_1 = HEAPU8[$5_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
     HEAP32[($0_1 + 172 | 0) >> 2] = $9_1;
    }
    HEAP8[($7_1 + 1 | 0) >> 0] = $8_1;
    label$13 : {
     label$14 : {
      $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      if ($8_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
       break label$14
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $8_1 + 1 | 0;
      $8_1 = HEAPU8[$8_1 >> 0] | 0;
      break label$13;
     }
     label$15 : {
      if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
       break label$15
      }
      $8_1 = 0;
      break label$13;
     }
     label$16 : {
      label$17 : {
       $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($8_1) {
        break label$17
       }
       $8_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $9_1 = $4_1;
       break label$16;
      }
      $9_1 = $5_1 + $8_1 | 0;
      $8_1 = HEAPU8[$5_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
     HEAP32[($0_1 + 172 | 0) >> 2] = $9_1;
    }
    HEAP8[$7_1 >> 0] = $8_1;
    HEAP8[($7_1 + 3 | 0) >> 0] = ($6_1 | 0) != ($3_1 | 0) ? -1 : 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $3_1 = $1_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $4_1 = 0;
    $3_1 = $1_1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $3_1 = $0_1 + 40 | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($2_1) {
      break label$5
     }
     $4_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $2_1 = $0_1 + 41 | 0;
     break label$4;
    }
    $2_1 = $3_1 + $2_1 | 0;
    $4_1 = HEAPU8[$3_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
   $3_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
  }
  label$6 : {
   label$7 : {
    if ($3_1 >>> 0 >= $2_1 >>> 0) {
     break label$7
    }
    $1_1 = $3_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
    $5_1 = HEAPU8[$3_1 >> 0] | 0;
    break label$6;
   }
   label$8 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$8
    }
    $5_1 = 0;
    $1_1 = $3_1;
    break label$6;
   }
   label$9 : {
    label$10 : {
     $3_1 = $0_1 + 40 | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($2_1) {
      break label$10
     }
     $5_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $2_1 = $0_1 + 41 | 0;
     break label$9;
    }
    $2_1 = $3_1 + $2_1 | 0;
    $5_1 = HEAPU8[$3_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
   $1_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
  }
  label$11 : {
   label$12 : {
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$12
    }
    $3_1 = $1_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
    $6_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$11;
   }
   label$13 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$13
    }
    $6_1 = 0;
    $3_1 = $1_1;
    break label$11;
   }
   label$14 : {
    label$15 : {
     $3_1 = $0_1 + 40 | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($2_1) {
      break label$15
     }
     $6_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $2_1 = $0_1 + 41 | 0;
     break label$14;
    }
    $2_1 = $3_1 + $2_1 | 0;
    $6_1 = HEAPU8[$3_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
   $3_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
  }
  label$16 : {
   label$17 : {
    if ($3_1 >>> 0 >= $2_1 >>> 0) {
     break label$17
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
    $2_1 = HEAPU8[$3_1 >> 0] | 0;
    break label$16;
   }
   label$18 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$18
    }
    $2_1 = 0;
    break label$16;
   }
   label$19 : {
    label$20 : {
     $2_1 = $0_1 + 40 | 0;
     $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $2_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($3_1) {
      break label$20
     }
     $2_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $3_1 = $0_1 + 41 | 0;
     break label$19;
    }
    $3_1 = $2_1 + $3_1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 168 | 0) >> 2] = $0_1 + 41 | 0;
  }
  return ($6_1 & 255 | 0) << 8 | 0 | ($2_1 & 255 | 0) | 0 | (($5_1 & 255 | 0) << 16 | 0 | ($4_1 << 24 | 0) | 0) | 0 | 0;
 }
 
 function $380($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, $7_1 = 0, $6_1 = 0, $9_1 = 0, $10_1 = 0, $5_1 = 0, $14_1 = 0, $17_1 = 0, $21_1 = 0, $20_1 = 0, $15_1 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $19_1 = 0, $18_1 = 0;
  label$1 : {
   if (($379($0_1 | 0) | 0 | 0) == (943870035 | 0)) {
    break label$1
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 68318;
   return 0 | 0;
  }
  $5_1 = $0_1 + 168 | 0;
  label$2 : {
   label$3 : {
    $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $7_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($6_1 >>> 0 >= $7_1 >>> 0) {
     break label$3
    }
    $8_1 = $6_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $8_1;
    $9_1 = HEAPU8[$6_1 >> 0] | 0;
    break label$2;
   }
   label$4 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$4
    }
    $9_1 = 0;
    $8_1 = $6_1;
    break label$2;
   }
   label$5 : {
    label$6 : {
     $8_1 = $0_1 + 40 | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($7_1) {
      break label$6
     }
     $9_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $7_1 = $0_1 + 41 | 0;
     break label$5;
    }
    $7_1 = $8_1 + $7_1 | 0;
    $9_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
   $8_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
  }
  label$7 : {
   label$8 : {
    if ($8_1 >>> 0 >= $7_1 >>> 0) {
     break label$8
    }
    $10_1 = $8_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $10_1;
    $6_1 = HEAPU8[$8_1 >> 0] | 0;
    break label$7;
   }
   label$9 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$9
    }
    $6_1 = 0;
    $10_1 = $8_1;
    break label$7;
   }
   label$10 : {
    label$11 : {
     $8_1 = $0_1 + 40 | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($7_1) {
      break label$11
     }
     $6_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $7_1 = $0_1 + 41 | 0;
     break label$10;
    }
    $7_1 = $8_1 + $7_1 | 0;
    $6_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
   $10_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $10_1;
  }
  label$12 : {
   if ((($9_1 & 255 | 0) << 8 | 0 | ($6_1 & 255 | 0) | 0 | 0) == (1 | 0)) {
    break label$12
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 66736;
   return 0 | 0;
  }
  label$13 : {
   label$14 : {
    if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
     break label$14
    }
    $8_1 = $7_1 - $10_1 | 0;
    if (($8_1 | 0) > (5 | 0)) {
     break label$14
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
    FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, 6 - $8_1 | 0);
    $7_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    break label$13;
   }
   $8_1 = $10_1 + 6 | 0;
   HEAP32[$5_1 >> 2] = $8_1;
  }
  label$15 : {
   label$16 : {
    if ($8_1 >>> 0 >= $7_1 >>> 0) {
     break label$16
    }
    $6_1 = $8_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    $9_1 = HEAPU8[$8_1 >> 0] | 0;
    break label$15;
   }
   label$17 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$17
    }
    $9_1 = 0;
    $6_1 = $8_1;
    break label$15;
   }
   label$18 : {
    label$19 : {
     $8_1 = $0_1 + 40 | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($7_1) {
      break label$19
     }
     $9_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $7_1 = $0_1 + 41 | 0;
     break label$18;
    }
    $7_1 = $8_1 + $7_1 | 0;
    $9_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
   $6_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
  }
  label$20 : {
   label$21 : {
    if ($6_1 >>> 0 >= $7_1 >>> 0) {
     break label$21
    }
    HEAP32[$5_1 >> 2] = $6_1 + 1 | 0;
    $7_1 = HEAPU8[$6_1 >> 0] | 0;
    break label$20;
   }
   label$22 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$22
    }
    $7_1 = 0;
    break label$20;
   }
   label$23 : {
    label$24 : {
     $7_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$24
     }
     $7_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$23;
    }
    $8_1 = $7_1 + $8_1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   HEAP32[($0_1 + 168 | 0) >> 2] = $0_1 + 41 | 0;
  }
  label$25 : {
   $11_1 = ($9_1 & 255 | 0) << 8 | 0 | ($7_1 & 255 | 0) | 0;
   if ($11_1 >>> 0 < 17 >>> 0) {
    break label$25
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 65991;
   return 0 | 0;
  }
  $12_1 = $379($0_1 | 0) | 0;
  $13_1 = $379($0_1 | 0) | 0;
  label$26 : {
   label$27 : {
    $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $7_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($6_1 >>> 0 >= $7_1 >>> 0) {
     break label$27
    }
    $8_1 = $6_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $8_1;
    $9_1 = HEAPU8[$6_1 >> 0] | 0;
    break label$26;
   }
   label$28 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$28
    }
    $9_1 = 0;
    $8_1 = $6_1;
    break label$26;
   }
   label$29 : {
    label$30 : {
     $8_1 = $0_1 + 40 | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($7_1) {
      break label$30
     }
     $9_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $7_1 = $0_1 + 41 | 0;
     break label$29;
    }
    $7_1 = $8_1 + $7_1 | 0;
    $9_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
   $8_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
  }
  label$31 : {
   label$32 : {
    if ($8_1 >>> 0 >= $7_1 >>> 0) {
     break label$32
    }
    $6_1 = $8_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    $10_1 = HEAPU8[$8_1 >> 0] | 0;
    break label$31;
   }
   label$33 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$33
    }
    $10_1 = 0;
    $6_1 = $8_1;
    break label$31;
   }
   label$34 : {
    label$35 : {
     $8_1 = $0_1 + 40 | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($7_1) {
      break label$35
     }
     $10_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $7_1 = $0_1 + 41 | 0;
     break label$34;
    }
    $7_1 = $8_1 + $7_1 | 0;
    $10_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
   $6_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
  }
  label$36 : {
   label$37 : {
    $10_1 = ($9_1 & 255 | 0) << 8 | 0 | ($10_1 & 255 | 0) | 0;
    switch ($10_1 + -8 | 0 | 0) {
    case 0:
    case 8:
     break label$36;
    default:
     break label$37;
    };
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 67054;
   return 0 | 0;
  }
  label$38 : {
   label$39 : {
    if ($6_1 >>> 0 >= $7_1 >>> 0) {
     break label$39
    }
    $8_1 = $6_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $8_1;
    $9_1 = HEAPU8[$6_1 >> 0] | 0;
    break label$38;
   }
   label$40 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$40
    }
    $9_1 = 0;
    $8_1 = $6_1;
    break label$38;
   }
   label$41 : {
    label$42 : {
     $8_1 = $0_1 + 40 | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($7_1) {
      break label$42
     }
     $9_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $7_1 = $0_1 + 41 | 0;
     break label$41;
    }
    $7_1 = $8_1 + $7_1 | 0;
    $9_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
   $8_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
  }
  label$43 : {
   label$44 : {
    if ($8_1 >>> 0 >= $7_1 >>> 0) {
     break label$44
    }
    HEAP32[$5_1 >> 2] = $8_1 + 1 | 0;
    $7_1 = HEAPU8[$8_1 >> 0] | 0;
    break label$43;
   }
   label$45 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$45
    }
    $7_1 = 0;
    break label$43;
   }
   label$46 : {
    label$47 : {
     $7_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$47
     }
     $7_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$46;
    }
    $8_1 = $7_1 + $8_1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   HEAP32[($0_1 + 168 | 0) >> 2] = $0_1 + 41 | 0;
  }
  label$48 : {
   if ((($9_1 & 255 | 0) << 8 | 0 | ($7_1 & 255 | 0) | 0 | 0) == (3 | 0)) {
    break label$48
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 66139;
   return 0 | 0;
  }
  label$49 : {
   label$50 : {
    $7_1 = $379($0_1 | 0) | 0;
    if (($7_1 | 0) > (-1 | 0)) {
     break label$50
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    break label$49;
   }
   label$51 : {
    label$52 : {
     if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
      break label$52
     }
     $8_1 = HEAP32[$5_1 >> 2] | 0;
     break label$51;
    }
    $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $9_1 = $6_1 - $8_1 | 0;
    if (($7_1 | 0) <= ($9_1 | 0)) {
     break label$51
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1 - $9_1 | 0);
    break label$49;
   }
   HEAP32[$5_1 >> 2] = $8_1 + $7_1 | 0;
  }
  label$53 : {
   label$54 : {
    $7_1 = $379($0_1 | 0) | 0;
    if (($7_1 | 0) > (-1 | 0)) {
     break label$54
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    break label$53;
   }
   label$55 : {
    label$56 : {
     if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
      break label$56
     }
     $8_1 = HEAP32[$5_1 >> 2] | 0;
     break label$55;
    }
    $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $9_1 = $6_1 - $8_1 | 0;
    if (($7_1 | 0) <= ($9_1 | 0)) {
     break label$55
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1 - $9_1 | 0);
    break label$53;
   }
   HEAP32[$5_1 >> 2] = $8_1 + $7_1 | 0;
  }
  label$57 : {
   label$58 : {
    $7_1 = $379($0_1 | 0) | 0;
    if (($7_1 | 0) > (-1 | 0)) {
     break label$58
    }
    $8_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
    break label$57;
   }
   label$59 : {
    label$60 : {
     if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
      break label$60
     }
     $8_1 = HEAP32[$5_1 >> 2] | 0;
     break label$59;
    }
    $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $9_1 = $6_1 - $8_1 | 0;
    if (($7_1 | 0) <= ($9_1 | 0)) {
     break label$59
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
    FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1 - $9_1 | 0);
    $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    break label$57;
   }
   $8_1 = $8_1 + $7_1 | 0;
   HEAP32[$5_1 >> 2] = $8_1;
  }
  label$61 : {
   label$62 : {
    $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($8_1 >>> 0 >= $6_1 >>> 0) {
     break label$62
    }
    $7_1 = $8_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $7_1;
    $9_1 = HEAPU8[$8_1 >> 0] | 0;
    break label$61;
   }
   label$63 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$63
    }
    $9_1 = 0;
    $7_1 = $8_1;
    break label$61;
   }
   label$64 : {
    label$65 : {
     $7_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$65
     }
     $9_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $6_1 = $0_1 + 41 | 0;
     break label$64;
    }
    $6_1 = $7_1 + $8_1 | 0;
    $9_1 = HEAPU8[$7_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
   $7_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
  }
  label$66 : {
   label$67 : {
    if ($7_1 >>> 0 >= $6_1 >>> 0) {
     break label$67
    }
    $8_1 = $7_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $8_1;
    $14_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$66;
   }
   label$68 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$68
    }
    $14_1 = 0;
    $8_1 = $7_1;
    break label$66;
   }
   label$69 : {
    label$70 : {
     $7_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$70
     }
     $14_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $6_1 = $0_1 + 41 | 0;
     break label$69;
    }
    $6_1 = $7_1 + $8_1 | 0;
    $14_1 = HEAPU8[$7_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
   $8_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
  }
  label$71 : {
   $7_1 = ($9_1 & 255 | 0) << 8 | 0 | ($14_1 & 255 | 0) | 0;
   if ($7_1 >>> 0 < 2 >>> 0) {
    break label$71
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 66720;
   return 0 | 0;
  }
  label$72 : {
   $15_1 = Math_imul($12_1, $13_1);
   $16_1 = $483($15_1 << 2 | 0 | 0) | 0;
   if ($16_1) {
    break label$72
   }
   HEAP32[(0 + 96956 | 0) >> 2] = 66853;
   return 0 | 0;
  }
  label$73 : {
   label$74 : {
    if ($7_1) {
     break label$74
    }
    $14_1 = $0_1 + 41 | 0;
    $17_1 = $0_1 + 40 | 0;
    $18_1 = ($10_1 | 0) == (16 | 0);
    $19_1 = ($15_1 | 0) < (1 | 0);
    $10_1 = $8_1;
    $20_1 = 0;
    label$75 : while (1) {
     $7_1 = $16_1 + $20_1 | 0;
     label$76 : {
      label$77 : {
       if ($20_1 >>> 0 < $11_1 >>> 0) {
        break label$77
       }
       if ($19_1) {
        break label$76
       }
       $9_1 = 0;
       $21_1 = ($20_1 | 0) == (3 | 0) ? -1 : 0;
       label$78 : while (1) {
        HEAP8[$7_1 >> 0] = $21_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != ($15_1 | 0)) {
         continue label$78
        }
        break label$76;
       };
      }
      label$79 : {
       if ($18_1) {
        break label$79
       }
       $9_1 = 0;
       if (($15_1 | 0) <= (0 | 0)) {
        break label$76
       }
       label$80 : while (1) {
        label$81 : {
         label$82 : {
          if ($10_1 >>> 0 >= $6_1 >>> 0) {
           break label$82
          }
          $8_1 = $10_1 + 1 | 0;
          HEAP32[$5_1 >> 2] = $8_1;
          $21_1 = HEAPU8[$10_1 >> 0] | 0;
          $10_1 = $8_1;
          break label$81;
         }
         label$83 : {
          if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
           break label$83
          }
          $21_1 = 0;
          break label$81;
         }
         label$84 : {
          label$85 : {
           $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $17_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
           if ($8_1) {
            break label$85
           }
           $21_1 = 0;
           HEAP8[($0_1 + 40 | 0) >> 0] = 0;
           HEAP32[($0_1 + 32 | 0) >> 2] = 0;
           $6_1 = $14_1;
           break label$84;
          }
          $6_1 = $17_1 + $8_1 | 0;
          $21_1 = HEAPU8[$17_1 >> 0] | 0;
         }
         HEAP32[($0_1 + 168 | 0) >> 2] = $14_1;
         HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
         $8_1 = $14_1;
         $10_1 = $8_1;
        }
        HEAP8[$7_1 >> 0] = $21_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != ($15_1 | 0)) {
         continue label$80
        }
        break label$76;
       };
      }
      $9_1 = 0;
      if ($19_1) {
       break label$76
      }
      label$86 : while (1) {
       label$87 : {
        label$88 : {
         if ($8_1 >>> 0 >= $6_1 >>> 0) {
          break label$88
         }
         $21_1 = $8_1 + 1 | 0;
         HEAP32[$5_1 >> 2] = $21_1;
         $10_1 = HEAPU8[$8_1 >> 0] | 0;
         $8_1 = $21_1;
         break label$87;
        }
        label$89 : {
         if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
          break label$89
         }
         $10_1 = 0;
         break label$87;
        }
        label$90 : {
         label$91 : {
          $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $17_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
          if ($8_1) {
           break label$91
          }
          $10_1 = 0;
          HEAP8[($0_1 + 40 | 0) >> 0] = 0;
          HEAP32[($0_1 + 32 | 0) >> 2] = 0;
          $6_1 = $14_1;
          break label$90;
         }
         $6_1 = $17_1 + $8_1 | 0;
         $10_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        HEAP32[($0_1 + 168 | 0) >> 2] = $14_1;
        HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
        $8_1 = $14_1;
       }
       label$92 : {
        label$93 : {
         label$94 : {
          if ($8_1 >>> 0 >= $6_1 >>> 0) {
           break label$94
          }
          $8_1 = $8_1 + 1 | 0;
          break label$93;
         }
         if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
          break label$92
         }
         label$95 : {
          label$96 : {
           $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $17_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
           if ($8_1) {
            break label$96
           }
           HEAP8[($0_1 + 40 | 0) >> 0] = 0;
           HEAP32[($0_1 + 32 | 0) >> 2] = 0;
           $6_1 = $14_1;
           break label$95;
          }
          $6_1 = $17_1 + $8_1 | 0;
         }
         HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
         $8_1 = $14_1;
        }
        HEAP32[$5_1 >> 2] = $8_1;
       }
       HEAP8[$7_1 >> 0] = $10_1;
       $7_1 = $7_1 + 4 | 0;
       $10_1 = $8_1;
       $9_1 = $9_1 + 1 | 0;
       if (($9_1 | 0) != ($15_1 | 0)) {
        continue label$86
       }
       break label$86;
      };
     }
     $20_1 = $20_1 + 1 | 0;
     if (($20_1 | 0) != (4 | 0)) {
      continue label$75
     }
     break label$73;
    };
   }
   $389($0_1 | 0, Math_imul($11_1, $12_1) << 1 | 0 | 0);
   $14_1 = $0_1 + 41 | 0;
   $9_1 = $0_1 + 40 | 0;
   $20_1 = 0;
   label$97 : while (1) {
    $7_1 = $16_1 + $20_1 | 0;
    label$98 : {
     label$99 : {
      if ($20_1 >>> 0 < $11_1 >>> 0) {
       break label$99
      }
      if (($15_1 | 0) < (1 | 0)) {
       break label$98
      }
      $8_1 = 0;
      $6_1 = ($20_1 | 0) == (3 | 0) ? -1 : 0;
      label$100 : while (1) {
       HEAP8[$7_1 >> 0] = $6_1;
       $7_1 = $7_1 + 4 | 0;
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != ($15_1 | 0)) {
        continue label$100
       }
       break label$98;
      };
     }
     $21_1 = 0;
     if (($15_1 | 0) <= (0 | 0)) {
      break label$98
     }
     label$101 : while (1) {
      label$102 : {
       label$103 : {
        label$104 : {
         label$105 : {
          label$106 : {
           $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
           $6_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
           if ($8_1 >>> 0 >= $6_1 >>> 0) {
            break label$106
           }
           $17_1 = $8_1 + 1 | 0;
           HEAP32[$5_1 >> 2] = $17_1;
           $8_1 = HEAPU8[$8_1 >> 0] | 0;
           break label$105;
          }
          label$107 : {
           if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
            break label$107
           }
           $10_1 = 0;
           break label$104;
          }
          label$108 : {
           label$109 : {
            $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
            if ($8_1) {
             break label$109
            }
            $8_1 = 0;
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            HEAP32[($0_1 + 32 | 0) >> 2] = 0;
            $6_1 = $14_1;
            break label$108;
           }
           $6_1 = $9_1 + $8_1 | 0;
           $8_1 = HEAPU8[$9_1 >> 0] | 0;
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $14_1;
          HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
          $17_1 = $14_1;
         }
         $10_1 = $8_1 & 255 | 0;
         if (($10_1 | 0) == (128 | 0)) {
          break label$102
         }
         if (($8_1 << 24 >> 24 | 0) < (0 | 0)) {
          break label$103
         }
        }
        $17_1 = $10_1 + 1 | 0;
        $8_1 = $17_1;
        label$110 : while (1) {
         label$111 : {
          label$112 : {
           $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
           if ($6_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
            break label$112
           }
           HEAP32[$5_1 >> 2] = $6_1 + 1 | 0;
           $6_1 = HEAPU8[$6_1 >> 0] | 0;
           break label$111;
          }
          label$113 : {
           if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
            break label$113
           }
           $6_1 = 0;
           break label$111;
          }
          label$114 : {
           label$115 : {
            $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
            if ($6_1) {
             break label$115
            }
            $6_1 = 0;
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            HEAP32[($0_1 + 32 | 0) >> 2] = 0;
            $10_1 = $14_1;
            break label$114;
           }
           $10_1 = $9_1 + $6_1 | 0;
           $6_1 = HEAPU8[$9_1 >> 0] | 0;
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $14_1;
          HEAP32[($0_1 + 172 | 0) >> 2] = $10_1;
         }
         HEAP8[$7_1 >> 0] = $6_1;
         $7_1 = $7_1 + 4 | 0;
         $8_1 = $8_1 + -1 | 0;
         if ($8_1) {
          continue label$110
         }
         break label$110;
        };
        $21_1 = $17_1 + $21_1 | 0;
        break label$102;
       }
       $8_1 = 257 - $10_1 | 0;
       label$116 : {
        label$117 : {
         if ($17_1 >>> 0 >= $6_1 >>> 0) {
          break label$117
         }
         HEAP32[$5_1 >> 2] = $17_1 + 1 | 0;
         $6_1 = HEAPU8[$17_1 >> 0] | 0;
         break label$116;
        }
        label$118 : {
         if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
          break label$118
         }
         $6_1 = 0;
         break label$116;
        }
        label$119 : {
         label$120 : {
          $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
          if ($6_1) {
           break label$120
          }
          $6_1 = 0;
          HEAP8[($0_1 + 40 | 0) >> 0] = 0;
          HEAP32[($0_1 + 32 | 0) >> 2] = 0;
          $10_1 = $14_1;
          break label$119;
         }
         $10_1 = $9_1 + $6_1 | 0;
         $6_1 = HEAPU8[$9_1 >> 0] | 0;
        }
        HEAP32[($0_1 + 168 | 0) >> 2] = $14_1;
        HEAP32[($0_1 + 172 | 0) >> 2] = $10_1;
       }
       $21_1 = $8_1 + $21_1 | 0;
       label$121 : while (1) {
        HEAP8[$7_1 >> 0] = $6_1;
        $7_1 = $7_1 + 4 | 0;
        $8_1 = $8_1 + -1 | 0;
        if ($8_1) {
         continue label$121
        }
        break label$121;
       };
      }
      if (($21_1 | 0) < ($15_1 | 0)) {
       continue label$101
      }
      break label$101;
     };
    }
    $20_1 = $20_1 + 1 | 0;
    if (($20_1 | 0) != (4 | 0)) {
     continue label$97
    }
    break label$97;
   };
  }
  label$122 : {
   if (!($4_1 & -5 | 0)) {
    break label$122
   }
   $16_1 = $377($16_1 | 0, 4 | 0, $4_1 | 0, $13_1 | 0, $12_1 | 0) | 0;
   if ($16_1) {
    break label$122
   }
   return 0 | 0;
  }
  label$123 : {
   if (!$3_1) {
    break label$123
   }
   HEAP32[$3_1 >> 2] = 4;
  }
  HEAP32[$2_1 >> 2] = $12_1;
  HEAP32[$1_1 >> 2] = $13_1;
  return $16_1 | 0;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $1_1 = 0, $2_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = $0_1 + 41 | 0;
  $2_1 = $0_1 + 40 | 0;
  $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
  $5_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       if ($4_1 >>> 0 >= $3_1 >>> 0) {
        break label$5
       }
       $6_1 = $4_1 + 1 | 0;
       HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
       $7_1 = HEAPU8[$4_1 >> 0] | 0;
       $4_1 = $6_1;
       break label$4;
      }
      label$6 : {
       if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
        break label$6
       }
       $7_1 = 0;
       break label$4;
      }
      label$7 : {
       label$8 : {
        $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $2_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
        if ($4_1) {
         break label$8
        }
        $7_1 = 0;
        HEAP8[($0_1 + 40 | 0) >> 0] = 0;
        HEAP32[($0_1 + 32 | 0) >> 2] = 0;
        $3_1 = $1_1;
        break label$7;
       }
       $3_1 = $2_1 + $4_1 | 0;
       $7_1 = HEAPU8[$2_1 >> 0] | 0;
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 172 | 0) >> 2] = $3_1;
      $4_1 = $1_1;
     }
     if (($7_1 & 255 | 0 | 0) != (HEAPU8[($5_1 + 68988 | 0) >> 0] | 0 | 0)) {
      break label$2
     }
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != (4 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $5_1 = 0;
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       label$12 : {
        if ($4_1 >>> 0 >= $3_1 >>> 0) {
         break label$12
        }
        $4_1 = $4_1 + 1 | 0;
        break label$11;
       }
       if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
        break label$10
       }
       label$13 : {
        label$14 : {
         $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $2_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
         if ($4_1) {
          break label$14
         }
         HEAP8[($0_1 + 40 | 0) >> 0] = 0;
         HEAP32[($0_1 + 32 | 0) >> 2] = 0;
         $3_1 = $1_1;
         break label$13;
        }
        $3_1 = $2_1 + $4_1 | 0;
       }
       HEAP32[($0_1 + 172 | 0) >> 2] = $3_1;
       $4_1 = $1_1;
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
     }
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != (84 | 0)) {
      continue label$9
     }
     break label$9;
    };
    $5_1 = 0;
    label$15 : while (1) {
     label$16 : {
      label$17 : {
       if ($4_1 >>> 0 >= $3_1 >>> 0) {
        break label$17
       }
       $6_1 = $4_1 + 1 | 0;
       HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
       $7_1 = HEAPU8[$4_1 >> 0] | 0;
       $4_1 = $6_1;
       break label$16;
      }
      label$18 : {
       if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
        break label$18
       }
       $7_1 = 0;
       break label$16;
      }
      label$19 : {
       label$20 : {
        $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $2_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
        if ($4_1) {
         break label$20
        }
        $7_1 = 0;
        HEAP8[($0_1 + 40 | 0) >> 0] = 0;
        HEAP32[($0_1 + 32 | 0) >> 2] = 0;
        $3_1 = $1_1;
        break label$19;
       }
       $3_1 = $2_1 + $4_1 | 0;
       $7_1 = HEAPU8[$2_1 >> 0] | 0;
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 172 | 0) >> 2] = $3_1;
      $4_1 = $1_1;
     }
     if (($7_1 & 255 | 0 | 0) != (HEAPU8[($5_1 + 68055 | 0) >> 0] | 0 | 0)) {
      break label$2
     }
     $7_1 = 1;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) == (4 | 0)) {
      break label$1
     }
     continue label$15;
    };
   }
   $7_1 = 0;
  }
  i64toi32_i32$1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
  HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
  HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
  return $7_1 | 0;
 }
 
 function $382($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $15_1 = 0, $14_1 = 0, $16_1 = 0, $8_1 = 0, $18_1 = 0, $6_1 = 0, $13_1 = 0, $11_1 = 0, $17_1 = 0, $12_1 = 0, $10_1 = 0, $20_1 = 0, $19_1 = 0, $7_1 = 0, $9_1 = 0, $28_1 = 0, $21_1 = 0, $5_1 = 0, $26_1 = 0, $32_1 = 0, $22_1 = 0, $31_1 = 0, $29_1 = 0, $24_1 = 0, $25_1 = 0, $30_1 = 0, $33_1 = 0, $23_1 = 0, $27_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $6_1 = $0_1 + 41 | 0;
  $7_1 = $0_1 + 36 | 0;
  $8_1 = $0_1 + 40 | 0;
  $9_1 = $0_1 + 28 | 0;
  $10_1 = $0_1 + 16 | 0;
  $11_1 = $0_1 + 32 | 0;
  $12_1 = $0_1 + 172 | 0;
  $13_1 = $0_1 + 168 | 0;
  $14_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
  $15_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
  $16_1 = 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($15_1 >>> 0 >= $14_1 >>> 0) {
       break label$4
      }
      $15_1 = $15_1 + 1 | 0;
      break label$3;
     }
     if (!(HEAP32[$11_1 >> 2] | 0)) {
      break label$2
     }
     label$5 : {
      label$6 : {
       $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
       if ($15_1) {
        break label$6
       }
       HEAP32[$11_1 >> 2] = 0;
       HEAP8[$8_1 >> 0] = 0;
       $14_1 = $6_1;
       break label$5;
      }
      $14_1 = $8_1 + $15_1 | 0;
     }
     HEAP32[$12_1 >> 2] = $14_1;
     $15_1 = $6_1;
    }
    HEAP32[$13_1 >> 2] = $15_1;
   }
   $16_1 = $16_1 + 1 | 0;
   if (($16_1 | 0) != (92 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$7 : {
   label$8 : {
    if ($15_1 >>> 0 >= $14_1 >>> 0) {
     break label$8
    }
    $16_1 = $15_1 + 1 | 0;
    HEAP32[$13_1 >> 2] = $16_1;
    $17_1 = HEAPU8[$15_1 >> 0] | 0;
    break label$7;
   }
   label$9 : {
    if (HEAP32[$11_1 >> 2] | 0) {
     break label$9
    }
    $17_1 = 0;
    $16_1 = $15_1;
    break label$7;
   }
   label$10 : {
    label$11 : {
     $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
     if ($15_1) {
      break label$11
     }
     $17_1 = 0;
     HEAP32[$11_1 >> 2] = 0;
     HEAP8[$8_1 >> 0] = 0;
     $14_1 = $6_1;
     break label$10;
    }
    $14_1 = $8_1 + $15_1 | 0;
    $17_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[$12_1 >> 2] = $14_1;
   HEAP32[$13_1 >> 2] = $6_1;
   $16_1 = $6_1;
  }
  label$12 : {
   label$13 : {
    if ($16_1 >>> 0 >= $14_1 >>> 0) {
     break label$13
    }
    $15_1 = $16_1 + 1 | 0;
    HEAP32[$13_1 >> 2] = $15_1;
    $18_1 = HEAPU8[$16_1 >> 0] | 0;
    break label$12;
   }
   label$14 : {
    if (HEAP32[$11_1 >> 2] | 0) {
     break label$14
    }
    $18_1 = 0;
    $15_1 = $16_1;
    break label$12;
   }
   label$15 : {
    label$16 : {
     $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
     if ($15_1) {
      break label$16
     }
     $18_1 = 0;
     HEAP32[$11_1 >> 2] = 0;
     HEAP8[$8_1 >> 0] = 0;
     $14_1 = $6_1;
     break label$15;
    }
    $14_1 = $8_1 + $15_1 | 0;
    $18_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[$12_1 >> 2] = $14_1;
   HEAP32[$13_1 >> 2] = $6_1;
   $15_1 = $6_1;
  }
  label$17 : {
   label$18 : {
    if ($15_1 >>> 0 >= $14_1 >>> 0) {
     break label$18
    }
    $16_1 = $15_1 + 1 | 0;
    HEAP32[$13_1 >> 2] = $16_1;
    $19_1 = HEAPU8[$15_1 >> 0] | 0;
    break label$17;
   }
   label$19 : {
    if (HEAP32[$11_1 >> 2] | 0) {
     break label$19
    }
    $19_1 = 0;
    $16_1 = $15_1;
    break label$17;
   }
   label$20 : {
    label$21 : {
     $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
     if ($15_1) {
      break label$21
     }
     $19_1 = 0;
     HEAP32[$11_1 >> 2] = 0;
     HEAP8[$8_1 >> 0] = 0;
     $14_1 = $6_1;
     break label$20;
    }
    $14_1 = $8_1 + $15_1 | 0;
    $19_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[$12_1 >> 2] = $14_1;
   HEAP32[$13_1 >> 2] = $6_1;
   $16_1 = $6_1;
  }
  label$22 : {
   label$23 : {
    if ($16_1 >>> 0 >= $14_1 >>> 0) {
     break label$23
    }
    $15_1 = $16_1 + 1 | 0;
    HEAP32[$13_1 >> 2] = $15_1;
    $20_1 = HEAPU8[$16_1 >> 0] | 0;
    break label$22;
   }
   label$24 : {
    if (HEAP32[$11_1 >> 2] | 0) {
     break label$24
    }
    $20_1 = 0;
    $15_1 = $16_1;
    break label$22;
   }
   label$25 : {
    label$26 : {
     $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
     if ($15_1) {
      break label$26
     }
     $20_1 = 0;
     HEAP32[$11_1 >> 2] = 0;
     HEAP8[$8_1 >> 0] = 0;
     $14_1 = $6_1;
     break label$25;
    }
    $14_1 = $8_1 + $15_1 | 0;
    $20_1 = HEAPU8[$8_1 >> 0] | 0;
   }
   HEAP32[$12_1 >> 2] = $14_1;
   HEAP32[$13_1 >> 2] = $6_1;
   $15_1 = $6_1;
  }
  label$27 : {
   label$28 : {
    label$29 : {
     label$30 : {
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       break label$30
      }
      if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
       break label$28
      }
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       break label$29
      }
      $14_1 = HEAP32[$12_1 >> 2] | 0;
      $15_1 = HEAP32[$13_1 >> 2] | 0;
     }
     if ($15_1 >>> 0 < $14_1 >>> 0) {
      break label$28
     }
    }
    $15_1 = 0;
    HEAP32[(0 + 96956 | 0) >> 2] = 67522;
    break label$27;
   }
   label$31 : {
    $21_1 = ($17_1 & 255 | 0) << 8 | 0 | ($18_1 & 255 | 0) | 0;
    $22_1 = ($19_1 & 255 | 0) << 8 | 0 | ($20_1 & 255 | 0) | 0;
    if (((268435456 >>> 0) / ($21_1 >>> 0) | 0) >>> 0 >= $22_1 >>> 0) {
     break label$31
    }
    $15_1 = 0;
    HEAP32[(0 + 96956 | 0) >> 2] = 67572;
    break label$27;
   }
   $379($0_1 | 0) | 0;
   label$32 : {
    label$33 : {
     label$34 : {
      $15_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      $16_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
      if ($15_1 >>> 0 >= $16_1 >>> 0) {
       break label$34
      }
      $15_1 = $15_1 + 1 | 0;
      break label$33;
     }
     if (!(HEAP32[$11_1 >> 2] | 0)) {
      break label$32
     }
     label$35 : {
      label$36 : {
       $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
       if ($15_1) {
        break label$36
       }
       HEAP32[$11_1 >> 2] = 0;
       HEAP8[$8_1 >> 0] = 0;
       $16_1 = $6_1;
       break label$35;
      }
      $16_1 = $8_1 + $15_1 | 0;
     }
     HEAP32[$12_1 >> 2] = $16_1;
     $15_1 = $6_1;
    }
    HEAP32[$13_1 >> 2] = $15_1;
   }
   label$37 : {
    label$38 : {
     label$39 : {
      if ($15_1 >>> 0 >= $16_1 >>> 0) {
       break label$39
      }
      $15_1 = $15_1 + 1 | 0;
      break label$38;
     }
     if (!(HEAP32[$11_1 >> 2] | 0)) {
      break label$37
     }
     label$40 : {
      label$41 : {
       $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
       if ($15_1) {
        break label$41
       }
       HEAP32[$11_1 >> 2] = 0;
       HEAP8[$8_1 >> 0] = 0;
       $16_1 = $6_1;
       break label$40;
      }
      $16_1 = $8_1 + $15_1 | 0;
     }
     HEAP32[$12_1 >> 2] = $16_1;
     $15_1 = $6_1;
    }
    HEAP32[$13_1 >> 2] = $15_1;
   }
   label$42 : {
    label$43 : {
     label$44 : {
      if ($15_1 >>> 0 >= $16_1 >>> 0) {
       break label$44
      }
      $15_1 = $15_1 + 1 | 0;
      break label$43;
     }
     if (!(HEAP32[$11_1 >> 2] | 0)) {
      break label$42
     }
     label$45 : {
      label$46 : {
       $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
       if ($15_1) {
        break label$46
       }
       HEAP32[$11_1 >> 2] = 0;
       HEAP8[$8_1 >> 0] = 0;
       $16_1 = $6_1;
       break label$45;
      }
      $16_1 = $8_1 + $15_1 | 0;
     }
     HEAP32[$12_1 >> 2] = $16_1;
     $15_1 = $6_1;
    }
    HEAP32[$13_1 >> 2] = $15_1;
   }
   label$47 : {
    label$48 : {
     label$49 : {
      if ($15_1 >>> 0 >= $16_1 >>> 0) {
       break label$49
      }
      $15_1 = $15_1 + 1 | 0;
      break label$48;
     }
     if (!(HEAP32[$11_1 >> 2] | 0)) {
      break label$47
     }
     label$50 : {
      label$51 : {
       $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
       if ($15_1) {
        break label$51
       }
       HEAP32[$11_1 >> 2] = 0;
       HEAP8[$8_1 >> 0] = 0;
       $15_1 = $6_1;
       break label$50;
      }
      $15_1 = $8_1 + $15_1 | 0;
     }
     HEAP32[$12_1 >> 2] = $15_1;
     $15_1 = $6_1;
    }
    HEAP32[$13_1 >> 2] = $15_1;
   }
   $23_1 = $21_1 << 2 | 0;
   $15_1 = Math_imul($23_1, $22_1);
   $24_1 = $483($15_1 | 0) | 0;
   $25_1 = $411($24_1 | 0, 255 | 0, $15_1 | 0) | 0;
   $16_1 = 0;
   $15_1 = 1;
   $26_1 = 0;
   label$52 : {
    label$53 : {
     label$54 : while (1) {
      $27_1 = $15_1;
      label$55 : {
       if (($16_1 | 0) != (10 | 0)) {
        break label$55
       }
       HEAP32[(0 + 96956 | 0) >> 2] = 66177;
       break label$53;
      }
      $18_1 = Math_imul($16_1, 3);
      label$56 : {
       label$57 : {
        $14_1 = HEAP32[$13_1 >> 2] | 0;
        $15_1 = HEAP32[$12_1 >> 2] | 0;
        if ($14_1 >>> 0 >= $15_1 >>> 0) {
         break label$57
        }
        $17_1 = $14_1 + 1 | 0;
        HEAP32[$13_1 >> 2] = $17_1;
        $28_1 = HEAPU8[$14_1 >> 0] | 0;
        break label$56;
       }
       label$58 : {
        if (HEAP32[$11_1 >> 2] | 0) {
         break label$58
        }
        $28_1 = 0;
        $17_1 = $14_1;
        break label$56;
       }
       label$59 : {
        label$60 : {
         $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
         if ($15_1) {
          break label$60
         }
         $28_1 = 0;
         HEAP32[$11_1 >> 2] = 0;
         HEAP8[$8_1 >> 0] = 0;
         $15_1 = $6_1;
         break label$59;
        }
        $15_1 = $8_1 + $15_1 | 0;
        $28_1 = HEAPU8[$8_1 >> 0] | 0;
       }
       HEAP32[$12_1 >> 2] = $15_1;
       HEAP32[$13_1 >> 2] = $6_1;
       $17_1 = $6_1;
      }
      $14_1 = ($5_1 + 16 | 0) + $18_1 | 0;
      label$61 : {
       label$62 : {
        if ($17_1 >>> 0 >= $15_1 >>> 0) {
         break label$62
        }
        $18_1 = $17_1 + 1 | 0;
        HEAP32[$13_1 >> 2] = $18_1;
        $19_1 = HEAPU8[$17_1 >> 0] | 0;
        break label$61;
       }
       label$63 : {
        if (HEAP32[$11_1 >> 2] | 0) {
         break label$63
        }
        $19_1 = 0;
        $18_1 = $17_1;
        break label$61;
       }
       label$64 : {
        label$65 : {
         $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
         if ($15_1) {
          break label$65
         }
         $19_1 = 0;
         HEAP32[$11_1 >> 2] = 0;
         HEAP8[$8_1 >> 0] = 0;
         $15_1 = $6_1;
         break label$64;
        }
        $15_1 = $8_1 + $15_1 | 0;
        $19_1 = HEAPU8[$8_1 >> 0] | 0;
       }
       HEAP32[$12_1 >> 2] = $15_1;
       HEAP32[$13_1 >> 2] = $6_1;
       $18_1 = $6_1;
      }
      HEAP8[$14_1 >> 0] = $19_1;
      label$66 : {
       label$67 : {
        if ($18_1 >>> 0 >= $15_1 >>> 0) {
         break label$67
        }
        $17_1 = $18_1 + 1 | 0;
        HEAP32[$13_1 >> 2] = $17_1;
        $20_1 = HEAPU8[$18_1 >> 0] | 0;
        break label$66;
       }
       label$68 : {
        if (HEAP32[$11_1 >> 2] | 0) {
         break label$68
        }
        $20_1 = 0;
        $17_1 = $18_1;
        break label$66;
       }
       label$69 : {
        label$70 : {
         $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
         if ($15_1) {
          break label$70
         }
         $20_1 = 0;
         HEAP32[$11_1 >> 2] = 0;
         HEAP8[$8_1 >> 0] = 0;
         $15_1 = $6_1;
         break label$69;
        }
        $15_1 = $8_1 + $15_1 | 0;
        $20_1 = HEAPU8[$8_1 >> 0] | 0;
       }
       HEAP32[$12_1 >> 2] = $15_1;
       HEAP32[$13_1 >> 2] = $6_1;
       $17_1 = $6_1;
      }
      HEAP8[($14_1 + 1 | 0) >> 0] = $20_1;
      label$71 : {
       label$72 : {
        if ($17_1 >>> 0 >= $15_1 >>> 0) {
         break label$72
        }
        $20_1 = $17_1 + 1 | 0;
        HEAP32[$13_1 >> 2] = $20_1;
        $18_1 = HEAPU8[$17_1 >> 0] | 0;
        break label$71;
       }
       label$73 : {
        if (HEAP32[$11_1 >> 2] | 0) {
         break label$73
        }
        $18_1 = 0;
        $20_1 = $17_1;
        break label$71;
       }
       label$74 : {
        label$75 : {
         $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
         if ($15_1) {
          break label$75
         }
         $18_1 = 0;
         HEAP32[$11_1 >> 2] = 0;
         HEAP8[$8_1 >> 0] = 0;
         $15_1 = $6_1;
         break label$74;
        }
        $15_1 = $8_1 + $15_1 | 0;
        $18_1 = HEAPU8[$8_1 >> 0] | 0;
       }
       HEAP32[$12_1 >> 2] = $15_1;
       HEAP32[$13_1 >> 2] = $6_1;
       $20_1 = $6_1;
      }
      HEAP8[($14_1 + 2 | 0) >> 0] = $18_1;
      label$76 : {
       label$77 : {
        label$78 : {
         if (!(HEAP32[$10_1 >> 2] | 0)) {
          break label$78
         }
         if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
          break label$76
         }
         if (!(HEAP32[$11_1 >> 2] | 0)) {
          break label$77
         }
         $15_1 = HEAP32[$12_1 >> 2] | 0;
         $20_1 = HEAP32[$13_1 >> 2] | 0;
        }
        if ($20_1 >>> 0 < $15_1 >>> 0) {
         break label$76
        }
       }
       HEAP32[(0 + 96956 | 0) >> 2] = 67522;
       break label$53;
      }
      label$79 : {
       if (($19_1 & 255 | 0 | 0) == (8 | 0)) {
        break label$79
       }
       HEAP32[(0 + 96956 | 0) >> 2] = 66177;
       break label$53;
      }
      $16_1 = $16_1 + 1 | 0;
      $26_1 = $26_1 | ($18_1 & 255 | 0) | 0;
      $15_1 = $27_1 + 1 | 0;
      if ($28_1 & 255 | 0) {
       continue label$54
      }
      break label$54;
     };
     HEAP32[$3_1 >> 2] = $26_1 & 16 | 0 ? 4 : 3;
     label$80 : {
      if (!$22_1) {
       break label$80
      }
      $29_1 = 0;
      label$81 : while (1) {
       $30_1 = $25_1 + Math_imul($23_1, $29_1) | 0;
       $26_1 = 0;
       label$82 : while (1) {
        label$83 : {
         label$84 : {
          label$85 : {
           label$86 : {
            label$87 : {
             $15_1 = ($5_1 + 16 | 0) + Math_imul($26_1, 3) | 0;
             switch (HEAPU8[($15_1 + 1 | 0) >> 0] | 0 | 0) {
             case 1:
              break label$84;
             case 0:
              break label$85;
             case 2:
              break label$87;
             default:
              break label$86;
             };
            }
            if (!$21_1) {
             break label$83
            }
            $20_1 = $15_1 + 2 | 0;
            $31_1 = $21_1;
            $17_1 = $30_1;
            label$88 : {
             label$89 : while (1) {
              label$90 : {
               label$91 : {
                $14_1 = HEAP32[$13_1 >> 2] | 0;
                $16_1 = HEAP32[$12_1 >> 2] | 0;
                if ($14_1 >>> 0 >= $16_1 >>> 0) {
                 break label$91
                }
                $18_1 = $14_1 + 1 | 0;
                HEAP32[$13_1 >> 2] = $18_1;
                $15_1 = HEAPU8[$14_1 >> 0] | 0;
                break label$90;
               }
               label$92 : {
                if (HEAP32[$11_1 >> 2] | 0) {
                 break label$92
                }
                $15_1 = 0;
                $18_1 = $14_1;
                break label$90;
               }
               label$93 : {
                label$94 : {
                 $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
                 if ($15_1) {
                  break label$94
                 }
                 $15_1 = 0;
                 HEAP32[$11_1 >> 2] = 0;
                 HEAP8[$8_1 >> 0] = 0;
                 $16_1 = $6_1;
                 break label$93;
                }
                $16_1 = $8_1 + $15_1 | 0;
                $15_1 = HEAPU8[$8_1 >> 0] | 0;
               }
               HEAP32[$12_1 >> 2] = $16_1;
               HEAP32[$13_1 >> 2] = $6_1;
               $18_1 = $6_1;
              }
              label$95 : {
               label$96 : {
                label$97 : {
                 if (!(HEAP32[$10_1 >> 2] | 0)) {
                  break label$97
                 }
                 if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
                  break label$95
                 }
                 if (!(HEAP32[$11_1 >> 2] | 0)) {
                  break label$96
                 }
                 $16_1 = HEAP32[$12_1 >> 2] | 0;
                 $18_1 = HEAP32[$13_1 >> 2] | 0;
                }
                if ($18_1 >>> 0 < $16_1 >>> 0) {
                 break label$95
                }
               }
               HEAP32[(0 + 96956 | 0) >> 2] = 67522;
               break label$53;
              }
              $32_1 = $15_1 & 255 | 0;
              label$98 : {
               label$99 : {
                label$100 : {
                 if (($15_1 << 24 >> 24 | 0) > (-1 | 0)) {
                  break label$100
                 }
                 label$101 : {
                  label$102 : {
                   if (($32_1 | 0) != (128 | 0)) {
                    break label$102
                   }
                   label$103 : {
                    label$104 : {
                     $14_1 = HEAP32[$13_1 >> 2] | 0;
                     $16_1 = HEAP32[$12_1 >> 2] | 0;
                     if ($14_1 >>> 0 >= $16_1 >>> 0) {
                      break label$104
                     }
                     $15_1 = $14_1 + 1 | 0;
                     HEAP32[$13_1 >> 2] = $15_1;
                     $18_1 = HEAPU8[$14_1 >> 0] | 0;
                     break label$103;
                    }
                    label$105 : {
                     if (HEAP32[$11_1 >> 2] | 0) {
                      break label$105
                     }
                     $18_1 = 0;
                     $15_1 = $14_1;
                     break label$103;
                    }
                    label$106 : {
                     label$107 : {
                      $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
                      if ($15_1) {
                       break label$107
                      }
                      $18_1 = 0;
                      HEAP32[$11_1 >> 2] = 0;
                      HEAP8[$8_1 >> 0] = 0;
                      $16_1 = $6_1;
                      break label$106;
                     }
                     $16_1 = $8_1 + $15_1 | 0;
                     $18_1 = HEAPU8[$8_1 >> 0] | 0;
                    }
                    HEAP32[$12_1 >> 2] = $16_1;
                    HEAP32[$13_1 >> 2] = $6_1;
                    $15_1 = $6_1;
                   }
                   label$108 : {
                    label$109 : {
                     if ($15_1 >>> 0 >= $16_1 >>> 0) {
                      break label$109
                     }
                     HEAP32[$13_1 >> 2] = $15_1 + 1 | 0;
                     $15_1 = HEAPU8[$15_1 >> 0] | 0;
                     break label$108;
                    }
                    label$110 : {
                     if (HEAP32[$11_1 >> 2] | 0) {
                      break label$110
                     }
                     $15_1 = 0;
                     break label$108;
                    }
                    label$111 : {
                     label$112 : {
                      $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
                      if ($15_1) {
                       break label$112
                      }
                      $15_1 = 0;
                      HEAP32[$11_1 >> 2] = 0;
                      HEAP8[$8_1 >> 0] = 0;
                      $16_1 = $6_1;
                      break label$111;
                     }
                     $16_1 = $8_1 + $15_1 | 0;
                     $15_1 = HEAPU8[$8_1 >> 0] | 0;
                    }
                    HEAP32[$12_1 >> 2] = $16_1;
                    HEAP32[$13_1 >> 2] = $6_1;
                   }
                   $28_1 = ($18_1 & 255 | 0) << 8 | 0 | ($15_1 & 255 | 0) | 0;
                   break label$101;
                  }
                  $28_1 = $32_1 + -127 | 0;
                 }
                 if (($28_1 | 0) > ($31_1 | 0)) {
                  break label$88
                 }
                 $19_1 = HEAPU8[$20_1 >> 0] | 0;
                 $15_1 = 128;
                 $16_1 = 0;
                 label$113 : while (1) {
                  label$114 : {
                   if (!($15_1 & $19_1 | 0)) {
                    break label$114
                   }
                   label$115 : {
                    label$116 : {
                     if (!(HEAP32[$10_1 >> 2] | 0)) {
                      break label$116
                     }
                     label$117 : {
                      if (FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) {
                       break label$117
                      }
                      $18_1 = HEAP32[$12_1 >> 2] | 0;
                      $14_1 = HEAP32[$13_1 >> 2] | 0;
                      break label$115;
                     }
                     if (!(HEAP32[$11_1 >> 2] | 0)) {
                      break label$88
                     }
                    }
                    $14_1 = HEAP32[$13_1 >> 2] | 0;
                    $18_1 = HEAP32[$12_1 >> 2] | 0;
                    if ($14_1 >>> 0 >= $18_1 >>> 0) {
                     break label$88
                    }
                   }
                   label$118 : {
                    label$119 : {
                     if ($14_1 >>> 0 >= $18_1 >>> 0) {
                      break label$119
                     }
                     HEAP32[$13_1 >> 2] = $14_1 + 1 | 0;
                     $14_1 = HEAPU8[$14_1 >> 0] | 0;
                     break label$118;
                    }
                    label$120 : {
                     if (HEAP32[$11_1 >> 2] | 0) {
                      break label$120
                     }
                     $14_1 = 0;
                     break label$118;
                    }
                    label$121 : {
                     label$122 : {
                      $14_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
                      if ($14_1) {
                       break label$122
                      }
                      $14_1 = 0;
                      HEAP32[$11_1 >> 2] = 0;
                      HEAP8[$8_1 >> 0] = 0;
                      $18_1 = $6_1;
                      break label$121;
                     }
                     $18_1 = $8_1 + $14_1 | 0;
                     $14_1 = HEAPU8[$8_1 >> 0] | 0;
                    }
                    HEAP32[$12_1 >> 2] = $18_1;
                    HEAP32[$13_1 >> 2] = $6_1;
                   }
                   HEAP8[(($5_1 + 12 | 0) + $16_1 | 0) >> 0] = $14_1;
                  }
                  $15_1 = $15_1 >>> 1 | 0;
                  $16_1 = $16_1 + 1 | 0;
                  if (($16_1 | 0) != (4 | 0)) {
                   continue label$113
                  }
                  break label$113;
                 };
                 $18_1 = 0;
                 if (($28_1 | 0) < (1 | 0)) {
                  break label$99
                 }
                 label$123 : while (1) {
                  $14_1 = HEAPU8[$20_1 >> 0] | 0;
                  $16_1 = 128;
                  $15_1 = 0;
                  label$124 : while (1) {
                   label$125 : {
                    if (!($16_1 & $14_1 | 0)) {
                     break label$125
                    }
                    HEAP8[($17_1 + $15_1 | 0) >> 0] = HEAPU8[(($5_1 + 12 | 0) + $15_1 | 0) >> 0] | 0;
                   }
                   $16_1 = $16_1 >>> 1 | 0;
                   $15_1 = $15_1 + 1 | 0;
                   if (($15_1 | 0) != (4 | 0)) {
                    continue label$124
                   }
                   break label$124;
                  };
                  $17_1 = $17_1 + 4 | 0;
                  $18_1 = $18_1 + 1 | 0;
                  if (($18_1 | 0) != ($28_1 | 0)) {
                   continue label$123
                  }
                  break label$99;
                 };
                }
                if ($31_1 >>> 0 <= $32_1 >>> 0) {
                 break label$98
                }
                $28_1 = $32_1 + 1 | 0;
                $33_1 = 0;
                label$126 : while (1) {
                 $19_1 = HEAPU8[$20_1 >> 0] | 0;
                 $15_1 = 128;
                 $16_1 = 0;
                 label$127 : while (1) {
                  label$128 : {
                   if (!($15_1 & $19_1 | 0)) {
                    break label$128
                   }
                   label$129 : {
                    label$130 : {
                     label$131 : {
                      if (!(HEAP32[$10_1 >> 2] | 0)) {
                       break label$131
                      }
                      label$132 : {
                       if (FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) {
                        break label$132
                       }
                       $18_1 = HEAP32[$12_1 >> 2] | 0;
                       $14_1 = HEAP32[$13_1 >> 2] | 0;
                       break label$129;
                      }
                      if (!(HEAP32[$11_1 >> 2] | 0)) {
                       break label$130
                      }
                     }
                     $14_1 = HEAP32[$13_1 >> 2] | 0;
                     $18_1 = HEAP32[$12_1 >> 2] | 0;
                     if ($14_1 >>> 0 < $18_1 >>> 0) {
                      break label$129
                     }
                    }
                    HEAP32[(0 + 96956 | 0) >> 2] = 67522;
                    break label$53;
                   }
                   label$133 : {
                    label$134 : {
                     if ($14_1 >>> 0 >= $18_1 >>> 0) {
                      break label$134
                     }
                     HEAP32[$13_1 >> 2] = $14_1 + 1 | 0;
                     $14_1 = HEAPU8[$14_1 >> 0] | 0;
                     break label$133;
                    }
                    label$135 : {
                     if (HEAP32[$11_1 >> 2] | 0) {
                      break label$135
                     }
                     $14_1 = 0;
                     break label$133;
                    }
                    label$136 : {
                     label$137 : {
                      $14_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
                      if ($14_1) {
                       break label$137
                      }
                      $14_1 = 0;
                      HEAP32[$11_1 >> 2] = 0;
                      HEAP8[$8_1 >> 0] = 0;
                      $18_1 = $6_1;
                      break label$136;
                     }
                     $18_1 = $8_1 + $14_1 | 0;
                     $14_1 = HEAPU8[$8_1 >> 0] | 0;
                    }
                    HEAP32[$12_1 >> 2] = $18_1;
                    HEAP32[$13_1 >> 2] = $6_1;
                   }
                   HEAP8[($17_1 + $16_1 | 0) >> 0] = $14_1;
                  }
                  $15_1 = $15_1 >>> 1 | 0;
                  $16_1 = $16_1 + 1 | 0;
                  if (($16_1 | 0) != (4 | 0)) {
                   continue label$127
                  }
                  break label$127;
                 };
                 if (!$17_1) {
                  break label$53
                 }
                 $17_1 = $17_1 + 4 | 0;
                 $15_1 = ($33_1 | 0) != ($32_1 | 0);
                 $33_1 = $33_1 + 1 | 0;
                 if ($15_1) {
                  continue label$126
                 }
                 break label$126;
                };
               }
               $31_1 = $31_1 - $28_1 | 0;
               if (($31_1 | 0) > (0 | 0)) {
                continue label$89
               }
               break label$83;
              }
              break label$89;
             };
             HEAP32[(0 + 96956 | 0) >> 2] = 67522;
             break label$53;
            }
            HEAP32[(0 + 96956 | 0) >> 2] = 67522;
            break label$53;
           }
           HEAP32[(0 + 96956 | 0) >> 2] = 66177;
           break label$53;
          }
          if (!$21_1) {
           break label$83
          }
          $18_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
          $20_1 = 0;
          $28_1 = 1;
          $19_1 = $30_1;
          label$138 : while (1) {
           $15_1 = 128;
           $16_1 = 0;
           label$139 : {
            label$140 : while (1) {
             label$141 : {
              if (!($15_1 & $18_1 | 0)) {
               break label$141
              }
              label$142 : {
               label$143 : {
                label$144 : {
                 if (!(HEAP32[$10_1 >> 2] | 0)) {
                  break label$144
                 }
                 label$145 : {
                  if (FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) {
                   break label$145
                  }
                  $17_1 = HEAP32[$12_1 >> 2] | 0;
                  $14_1 = HEAP32[$13_1 >> 2] | 0;
                  break label$142;
                 }
                 if (!(HEAP32[$11_1 >> 2] | 0)) {
                  break label$143
                 }
                }
                $14_1 = HEAP32[$13_1 >> 2] | 0;
                $17_1 = HEAP32[$12_1 >> 2] | 0;
                if ($14_1 >>> 0 < $17_1 >>> 0) {
                 break label$142
                }
               }
               HEAP32[(0 + 96956 | 0) >> 2] = 67522;
               break label$139;
              }
              label$146 : {
               label$147 : {
                if ($14_1 >>> 0 >= $17_1 >>> 0) {
                 break label$147
                }
                HEAP32[$13_1 >> 2] = $14_1 + 1 | 0;
                $14_1 = HEAPU8[$14_1 >> 0] | 0;
                break label$146;
               }
               label$148 : {
                if (HEAP32[$11_1 >> 2] | 0) {
                 break label$148
                }
                $14_1 = 0;
                break label$146;
               }
               label$149 : {
                label$150 : {
                 $14_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
                 if ($14_1) {
                  break label$150
                 }
                 $14_1 = 0;
                 HEAP32[$11_1 >> 2] = 0;
                 HEAP8[$8_1 >> 0] = 0;
                 $17_1 = $6_1;
                 break label$149;
                }
                $17_1 = $8_1 + $14_1 | 0;
                $14_1 = HEAPU8[$8_1 >> 0] | 0;
               }
               HEAP32[$12_1 >> 2] = $17_1;
               HEAP32[$13_1 >> 2] = $6_1;
              }
              HEAP8[($19_1 + $16_1 | 0) >> 0] = $14_1;
             }
             $15_1 = $15_1 >>> 1 | 0;
             $16_1 = $16_1 + 1 | 0;
             if (($16_1 | 0) != (4 | 0)) {
              continue label$140
             }
             break label$140;
            };
            if (!$19_1) {
             break label$139
            }
            $19_1 = $19_1 + 4 | 0;
            $20_1 = $20_1 + 1 | 0;
            $28_1 = $20_1 >>> 0 < $21_1 >>> 0;
            if (($20_1 | 0) != ($21_1 | 0)) {
             continue label$138
            }
            break label$83;
           }
           break label$138;
          };
          if (!($28_1 & 1 | 0)) {
           break label$83
          }
          break label$53;
         }
         if (!$21_1) {
          break label$83
         }
         $20_1 = $15_1 + 2 | 0;
         $28_1 = $21_1;
         $17_1 = $30_1;
         label$151 : while (1) {
          label$152 : {
           label$153 : {
            $14_1 = HEAP32[$13_1 >> 2] | 0;
            $16_1 = HEAP32[$12_1 >> 2] | 0;
            if ($14_1 >>> 0 >= $16_1 >>> 0) {
             break label$153
            }
            $18_1 = $14_1 + 1 | 0;
            HEAP32[$13_1 >> 2] = $18_1;
            $15_1 = HEAPU8[$14_1 >> 0] | 0;
            break label$152;
           }
           label$154 : {
            if (HEAP32[$11_1 >> 2] | 0) {
             break label$154
            }
            $15_1 = 0;
            $18_1 = $14_1;
            break label$152;
           }
           label$155 : {
            label$156 : {
             $15_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
             if ($15_1) {
              break label$156
             }
             $15_1 = 0;
             HEAP32[$11_1 >> 2] = 0;
             HEAP8[$8_1 >> 0] = 0;
             $16_1 = $6_1;
             break label$155;
            }
            $16_1 = $8_1 + $15_1 | 0;
            $15_1 = HEAPU8[$8_1 >> 0] | 0;
           }
           HEAP32[$12_1 >> 2] = $16_1;
           HEAP32[$13_1 >> 2] = $6_1;
           $18_1 = $6_1;
          }
          label$157 : {
           label$158 : {
            label$159 : {
             if (!(HEAP32[$10_1 >> 2] | 0)) {
              break label$159
             }
             if (!(FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0)) {
              break label$158
             }
             if (!(HEAP32[$11_1 >> 2] | 0)) {
              break label$157
             }
             $16_1 = HEAP32[$12_1 >> 2] | 0;
             $18_1 = HEAP32[$13_1 >> 2] | 0;
            }
            if ($18_1 >>> 0 >= $16_1 >>> 0) {
             break label$157
            }
           }
           $32_1 = $28_1 >>> 0 < ($15_1 & 255 | 0) >>> 0 ? $28_1 : $15_1;
           $19_1 = HEAPU8[$20_1 >> 0] | 0;
           $15_1 = 128;
           $16_1 = 0;
           label$160 : while (1) {
            label$161 : {
             if (!($15_1 & $19_1 | 0)) {
              break label$161
             }
             label$162 : {
              label$163 : {
               if (!(HEAP32[$10_1 >> 2] | 0)) {
                break label$163
               }
               label$164 : {
                if (FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) {
                 break label$164
                }
                $18_1 = HEAP32[$12_1 >> 2] | 0;
                $14_1 = HEAP32[$13_1 >> 2] | 0;
                break label$162;
               }
               if (!(HEAP32[$11_1 >> 2] | 0)) {
                break label$157
               }
              }
              $14_1 = HEAP32[$13_1 >> 2] | 0;
              $18_1 = HEAP32[$12_1 >> 2] | 0;
              if ($14_1 >>> 0 >= $18_1 >>> 0) {
               break label$157
              }
             }
             label$165 : {
              label$166 : {
               if ($14_1 >>> 0 >= $18_1 >>> 0) {
                break label$166
               }
               HEAP32[$13_1 >> 2] = $14_1 + 1 | 0;
               $14_1 = HEAPU8[$14_1 >> 0] | 0;
               break label$165;
              }
              label$167 : {
               if (HEAP32[$11_1 >> 2] | 0) {
                break label$167
               }
               $14_1 = 0;
               break label$165;
              }
              label$168 : {
               label$169 : {
                $14_1 = FUNCTION_TABLE[HEAP32[$10_1 >> 2] | 0 | 0](HEAP32[$9_1 >> 2] | 0, $8_1, HEAP32[$7_1 >> 2] | 0) | 0;
                if ($14_1) {
                 break label$169
                }
                $14_1 = 0;
                HEAP32[$11_1 >> 2] = 0;
                HEAP8[$8_1 >> 0] = 0;
                $18_1 = $6_1;
                break label$168;
               }
               $18_1 = $8_1 + $14_1 | 0;
               $14_1 = HEAPU8[$8_1 >> 0] | 0;
              }
              HEAP32[$12_1 >> 2] = $18_1;
              HEAP32[$13_1 >> 2] = $6_1;
             }
             HEAP8[(($5_1 + 12 | 0) + $16_1 | 0) >> 0] = $14_1;
            }
            $15_1 = $15_1 >>> 1 | 0;
            $16_1 = $16_1 + 1 | 0;
            if (($16_1 | 0) != (4 | 0)) {
             continue label$160
            }
            break label$160;
           };
           $18_1 = 0;
           label$170 : {
            $19_1 = $32_1 & 255 | 0;
            if (!$19_1) {
             break label$170
            }
            label$171 : while (1) {
             $14_1 = HEAPU8[$20_1 >> 0] | 0;
             $16_1 = 128;
             $15_1 = 0;
             label$172 : while (1) {
              label$173 : {
               if (!($16_1 & $14_1 | 0)) {
                break label$173
               }
               HEAP8[($17_1 + $15_1 | 0) >> 0] = HEAPU8[(($5_1 + 12 | 0) + $15_1 | 0) >> 0] | 0;
              }
              $16_1 = $16_1 >>> 1 | 0;
              $15_1 = $15_1 + 1 | 0;
              if (($15_1 | 0) != (4 | 0)) {
               continue label$172
              }
              break label$172;
             };
             $17_1 = $17_1 + 4 | 0;
             $18_1 = $18_1 + 1 | 0;
             if (($18_1 | 0) != ($19_1 | 0)) {
              continue label$171
             }
             break label$171;
            };
           }
           $28_1 = $28_1 - $19_1 | 0;
           if (($28_1 | 0) > (0 | 0)) {
            continue label$151
           }
           break label$83;
          }
          break label$151;
         };
         HEAP32[(0 + 96956 | 0) >> 2] = 67522;
         break label$53;
        }
        $26_1 = $26_1 + 1 | 0;
        if (($26_1 | 0) != ($27_1 | 0)) {
         continue label$82
        }
        break label$82;
       };
       $29_1 = $29_1 + 1 | 0;
       if (($29_1 | 0) != ($22_1 | 0)) {
        continue label$81
       }
       break label$81;
      };
     }
     if ($25_1) {
      break label$52
     }
    }
    $484($25_1 | 0);
    $24_1 = 0;
   }
   HEAP32[$1_1 >> 2] = $21_1;
   HEAP32[$2_1 >> 2] = $22_1;
   label$174 : {
    if ($4_1) {
     break label$174
    }
    $4_1 = HEAP32[$3_1 >> 2] | 0;
   }
   $15_1 = $377($24_1 | 0, 4 | 0, $4_1 | 0, $21_1 | 0, $22_1 | 0) | 0;
  }
  global$0 = $5_1 + 48 | 0;
  return $15_1 | 0;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $1_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $3_1 = $1_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $4_1 = 0;
    $3_1 = $1_1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $3_1 = $0_1 + 40 | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($2_1) {
      break label$5
     }
     $4_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $2_1 = $0_1 + 41 | 0;
     break label$4;
    }
    $2_1 = $3_1 + $2_1 | 0;
    $4_1 = HEAPU8[$3_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
   $3_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
  }
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$9
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      break label$8;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$7
     }
     label$10 : {
      label$11 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$11
       }
       $2_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $1_1 = $0_1 + 41 | 0;
       break label$10;
      }
      $1_1 = $3_1 + $2_1 | 0;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 168 | 0) >> 2] = $0_1 + 41 | 0;
    }
    if (($4_1 & 255 | 0 | 0) != (80 | 0)) {
     break label$7
    }
    $3_1 = 1;
    if ((($2_1 + -55 | 0) & 255 | 0) >>> 0 > 253 >>> 0) {
     break label$6
    }
   }
   i64toi32_i32$1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
   HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $384($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = 0;
  label$1 : {
   $6_1 = $0_1 + 8 | 0;
   if (!($360($0_1 | 0, $0_1 | 0, $0_1 + 4 | 0 | 0, $6_1 | 0) | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   label$2 : {
    $2_1 = Math_imul(Math_imul(HEAP32[$0_1 >> 2] | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0), HEAP32[($0_1 + 4 | 0) >> 2] | 0);
    $3_1 = $483($2_1 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    HEAP32[(0 + 96956 | 0) >> 2] = 66853;
    return 0 | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($7_1) {
       break label$5
      }
      $8_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
      $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      break label$4;
     }
     $8_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
     $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     $9_1 = $8_1 - $1_1 | 0;
     if (($2_1 | 0) <= ($9_1 | 0)) {
      break label$4
     }
     $1_1 = $410($3_1 | 0, $1_1 | 0, $9_1 | 0) | 0;
     FUNCTION_TABLE[$7_1 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $1_1 + $9_1 | 0, $2_1 - $9_1 | 0) | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
     break label$3;
    }
    $9_1 = $1_1 + $2_1 | 0;
    if ($9_1 >>> 0 > $8_1 >>> 0) {
     break label$3
    }
    $410($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $9_1;
   }
   label$6 : {
    if (!$4_1) {
     break label$6
    }
    $2_1 = HEAP32[$6_1 >> 2] | 0;
    if (($2_1 | 0) == ($4_1 | 0)) {
     break label$6
    }
    $3_1 = $377($3_1 | 0, $2_1 | 0, $4_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    if (!$3_1) {
     break label$1
    }
   }
   $5_1 = $3_1;
  }
  return $5_1 | 0;
 }
 
 function $385($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $12_1 = Math_fround(0), $4_1 = 0, $7_1 = 0, $11_1 = Math_fround(0), $13_1 = 0.0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  label$1 : {
   $4_1 = Math_imul($2_1, $1_1);
   $5_1 = $483(Math_imul($4_1, $3_1) | 0) | 0;
   if ($5_1) {
    break label$1
   }
   $484($0_1 | 0);
   HEAP32[(0 + 96956 | 0) >> 2] = 66853;
   return $5_1 | 0;
  }
  label$2 : {
   if (($4_1 | 0) < (1 | 0)) {
    break label$2
   }
   $6_1 = 0;
   $11_1 = Math_fround(HEAPF32[(0 + 96428 | 0) >> 2]);
   $13_1 = +Math_fround(HEAPF32[(0 + 96424 | 0) >> 2]);
   $7_1 = ($3_1 + ($3_1 & 1 | 0) | 0) + -1 | 0;
   $8_1 = ($7_1 | 0) < (1 | 0);
   label$3 : while (1) {
    $1_1 = 0;
    label$4 : {
     if ($8_1) {
      break label$4
     }
     $9_1 = Math_imul($6_1, $3_1);
     $1_1 = 0;
     label$5 : while (1) {
      $2_1 = $1_1 + $9_1 | 0;
      $10_1 = $5_1 + $2_1 | 0;
      label$6 : {
       label$7 : {
        $12_1 = Math_fround(Math_min(Math_fround(Math_max(Math_fround(Math_fround(Math_fround(+$456(+(+Math_fround(Math_fround(HEAPF32[($0_1 + ($2_1 << 2 | 0) | 0) >> 2]) * $11_1)), +$13_1)) * Math_fround(255.0)) + Math_fround(.5)), Math_fround(0.0))), Math_fround(255.0)));
        if (!(Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0))) {
         break label$7
        }
        $2_1 = ~~$12_1;
        break label$6;
       }
       $2_1 = -2147483648;
      }
      HEAP8[$10_1 >> 0] = $2_1;
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($7_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $1_1 = $7_1;
    }
    label$8 : {
     if (($1_1 | 0) >= ($3_1 | 0)) {
      break label$8
     }
     $1_1 = $1_1 + Math_imul($6_1, $3_1) | 0;
     $2_1 = $5_1 + $1_1 | 0;
     label$9 : {
      label$10 : {
       $12_1 = Math_fround(Math_min(Math_fround(Math_max(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + ($1_1 << 2 | 0) | 0) >> 2]) * Math_fround(255.0)) + Math_fround(.5)), Math_fround(0.0))), Math_fround(255.0)));
       if (!(Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0))) {
        break label$10
       }
       $1_1 = ~~$12_1;
       break label$9;
      }
      $1_1 = -2147483648;
     }
     HEAP8[$2_1 >> 0] = $1_1;
    }
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($4_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $484($0_1 | 0);
  return $5_1 | 0;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $1_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
     if ($1_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     break label$2;
    }
    if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
     break label$1
    }
    label$4 : {
     label$5 : {
      $3_1 = $0_1 + 40 | 0;
      $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($2_1) {
       break label$5
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $2_1 = $0_1 + 41 | 0;
      break label$4;
     }
     $2_1 = $3_1 + $2_1 | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
    $1_1 = $0_1 + 41 | 0;
   }
   HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
  }
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      if ($1_1 >>> 0 >= $2_1 >>> 0) {
       break label$9
      }
      $4_1 = $1_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
      $3_1 = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $4_1;
      break label$8;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$7
     }
     label$10 : {
      label$11 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$11
       }
       $3_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$10;
      }
      $2_1 = $3_1 + $2_1 | 0;
      $3_1 = HEAPU8[$3_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $1_1 = $0_1 + 41 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
    }
    $4_1 = 0;
    if (($3_1 & 255 | 0) >>> 0 > 1 >>> 0) {
     break label$6
    }
   }
   label$12 : {
    label$13 : {
     if ($1_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     $3_1 = $1_1 + 1 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
     $1_1 = HEAPU8[$1_1 >> 0] | 0;
     break label$12;
    }
    label$14 : {
     if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
      break label$14
     }
     return 0 | 0;
    }
    label$15 : {
     label$16 : {
      $3_1 = $0_1 + 40 | 0;
      $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($2_1) {
       break label$16
      }
      $1_1 = 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $2_1 = $0_1 + 41 | 0;
      break label$15;
     }
     $2_1 = $3_1 + $2_1 | 0;
     $1_1 = HEAPU8[$3_1 >> 0] | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
    $3_1 = $0_1 + 41 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   $4_1 = 0;
   $1_1 = $1_1 & 255 | 0;
   if ($1_1 >>> 0 > 11 >>> 0) {
    break label$6
   }
   if (!((1 << $1_1 | 0) & 3598 | 0)) {
    break label$6
   }
   label$17 : {
    label$18 : {
     label$19 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$19
      }
      $3_1 = $3_1 + 1 | 0;
      break label$18;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$17
     }
     label$20 : {
      label$21 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$21
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$20;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$22 : {
    label$23 : {
     label$24 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$24
      }
      $3_1 = $3_1 + 1 | 0;
      break label$23;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$22
     }
     label$25 : {
      label$26 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$26
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$25;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$27 : {
    label$28 : {
     label$29 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$29
      }
      $3_1 = $3_1 + 1 | 0;
      break label$28;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$27
     }
     label$30 : {
      label$31 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$31
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$30;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$32 : {
    label$33 : {
     label$34 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$34
      }
      $3_1 = $3_1 + 1 | 0;
      break label$33;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$32
     }
     label$35 : {
      label$36 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$36
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$35;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$37 : {
    label$38 : {
     label$39 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$39
      }
      $3_1 = $3_1 + 1 | 0;
      break label$38;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$37
     }
     label$40 : {
      label$41 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$41
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$40;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$42 : {
    label$43 : {
     label$44 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$44
      }
      $3_1 = $3_1 + 1 | 0;
      break label$43;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$42
     }
     label$45 : {
      label$46 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$46
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$45;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$47 : {
    label$48 : {
     label$49 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$49
      }
      $3_1 = $3_1 + 1 | 0;
      break label$48;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$47
     }
     label$50 : {
      label$51 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$51
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$50;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$52 : {
    label$53 : {
     label$54 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$54
      }
      $3_1 = $3_1 + 1 | 0;
      break label$53;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$52
     }
     label$55 : {
      label$56 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$56
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$55;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$57 : {
    label$58 : {
     label$59 : {
      if ($3_1 >>> 0 >= $2_1 >>> 0) {
       break label$59
      }
      $3_1 = $3_1 + 1 | 0;
      break label$58;
     }
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      break label$57
     }
     label$60 : {
      label$61 : {
       $3_1 = $0_1 + 40 | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($2_1) {
        break label$61
       }
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $2_1 = $0_1 + 41 | 0;
       break label$60;
      }
      $2_1 = $3_1 + $2_1 | 0;
     }
     HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
     $3_1 = $0_1 + 41 | 0;
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   label$62 : {
    label$63 : {
     if ($3_1 >>> 0 >= $2_1 >>> 0) {
      break label$63
     }
     $1_1 = $3_1 + 1 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$62;
    }
    label$64 : {
     if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
      break label$64
     }
     $5_1 = 0;
     $1_1 = $3_1;
     break label$62;
    }
    label$65 : {
     label$66 : {
      $3_1 = $0_1 + 40 | 0;
      $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($2_1) {
       break label$66
      }
      $5_1 = 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $2_1 = $0_1 + 41 | 0;
      break label$65;
     }
     $2_1 = $3_1 + $2_1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
    $1_1 = $0_1 + 41 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
   }
   label$67 : {
    label$68 : {
     if ($1_1 >>> 0 >= $2_1 >>> 0) {
      break label$68
     }
     $3_1 = $1_1 + 1 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
     $6_1 = HEAPU8[$1_1 >> 0] | 0;
     break label$67;
    }
    label$69 : {
     if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
      break label$69
     }
     $6_1 = 0;
     $3_1 = $1_1;
     break label$67;
    }
    label$70 : {
     label$71 : {
      $3_1 = $0_1 + 40 | 0;
      $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($2_1) {
       break label$71
      }
      $6_1 = 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $2_1 = $0_1 + 41 | 0;
      break label$70;
     }
     $2_1 = $3_1 + $2_1 | 0;
     $6_1 = HEAPU8[$3_1 >> 0] | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
    $3_1 = $0_1 + 41 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   if (!(($5_1 & 255 | 0) << 8 | 0 | ($6_1 & 255 | 0) | 0)) {
    break label$6
   }
   label$72 : {
    label$73 : {
     if ($3_1 >>> 0 >= $2_1 >>> 0) {
      break label$73
     }
     $1_1 = $3_1 + 1 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$72;
    }
    label$74 : {
     if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
      break label$74
     }
     $5_1 = 0;
     $1_1 = $3_1;
     break label$72;
    }
    label$75 : {
     label$76 : {
      $3_1 = $0_1 + 40 | 0;
      $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($2_1) {
       break label$76
      }
      $5_1 = 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $2_1 = $0_1 + 41 | 0;
      break label$75;
     }
     $2_1 = $3_1 + $2_1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
    $1_1 = $0_1 + 41 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $1_1;
   }
   label$77 : {
    label$78 : {
     if ($1_1 >>> 0 >= $2_1 >>> 0) {
      break label$78
     }
     $3_1 = $1_1 + 1 | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
     $6_1 = HEAPU8[$1_1 >> 0] | 0;
     break label$77;
    }
    label$79 : {
     if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
      break label$79
     }
     $6_1 = 0;
     $3_1 = $1_1;
     break label$77;
    }
    label$80 : {
     label$81 : {
      $3_1 = $0_1 + 40 | 0;
      $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($2_1) {
       break label$81
      }
      $6_1 = 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $2_1 = $0_1 + 41 | 0;
      break label$80;
     }
     $2_1 = $3_1 + $2_1 | 0;
     $6_1 = HEAPU8[$3_1 >> 0] | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
    $3_1 = $0_1 + 41 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   }
   if (!(($5_1 & 255 | 0) << 8 | 0 | ($6_1 & 255 | 0) | 0)) {
    break label$6
   }
   label$82 : {
    label$83 : {
     if ($3_1 >>> 0 >= $2_1 >>> 0) {
      break label$83
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $3_1 + 1 | 0;
     $3_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$82;
    }
    label$84 : {
     if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
      break label$84
     }
     $3_1 = 0;
     break label$82;
    }
    label$85 : {
     $3_1 = $0_1 + 40 | 0;
     if (FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $3_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0) {
      break label$85
     }
     $3_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     break label$82;
    }
    $3_1 = HEAPU8[$3_1 >> 0] | 0;
   }
   i64toi32_i32$1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
   HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$1;
   $4_1 = !(($3_1 + -8 | 0) & 231 | 0);
  }
  return $4_1 | 0;
 }
 
 function $387($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, $9_1 = 0, $7_1 = 0, $16_1 = 0, $20_1 = 0, $6_1 = 0, $21_1 = 0, $12_1 = 0, $19_1 = 0, $14_1 = 0, $13_1 = 0, $18_1 = 0, $15_1 = 0, $24_1 = 0, $22_1 = 0, $10_1 = 0, $11_1 = 0, $17_1 = 0, $23_1 = 0, $5_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = $0_1 + 168 | 0;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $8_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= $8_1 >>> 0) {
     break label$2
    }
    $9_1 = $7_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $9_1;
    $10_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $10_1 = 0;
    $9_1 = $7_1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$5
     }
     $10_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$4;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $10_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $9_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $9_1;
  }
  label$6 : {
   label$7 : {
    if ($9_1 >>> 0 >= $8_1 >>> 0) {
     break label$7
    }
    $7_1 = $9_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $7_1;
    $11_1 = HEAPU8[$9_1 >> 0] | 0;
    break label$6;
   }
   label$8 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$8
    }
    $11_1 = 0;
    $7_1 = $9_1;
    break label$6;
   }
   label$9 : {
    label$10 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$10
     }
     $11_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$9;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $11_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $7_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
  }
  label$11 : {
   label$12 : {
    if ($7_1 >>> 0 >= $8_1 >>> 0) {
     break label$12
    }
    $9_1 = $7_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $9_1;
    $12_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$11;
   }
   label$13 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$13
    }
    $12_1 = 0;
    $9_1 = $7_1;
    break label$11;
   }
   label$14 : {
    label$15 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$15
     }
     $12_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$14;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $12_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $9_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $9_1;
  }
  label$16 : {
   label$17 : {
    if ($9_1 >>> 0 >= $8_1 >>> 0) {
     break label$17
    }
    $7_1 = $9_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $7_1;
    $13_1 = HEAPU8[$9_1 >> 0] | 0;
    break label$16;
   }
   label$18 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$18
    }
    $13_1 = 0;
    $7_1 = $9_1;
    break label$16;
   }
   label$19 : {
    label$20 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$20
     }
     $13_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$19;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $13_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $7_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
  }
  label$21 : {
   label$22 : {
    if ($7_1 >>> 0 >= $8_1 >>> 0) {
     break label$22
    }
    $9_1 = $7_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $9_1;
    $14_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$21;
   }
   label$23 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$23
    }
    $14_1 = 0;
    $9_1 = $7_1;
    break label$21;
   }
   label$24 : {
    label$25 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$25
     }
     $14_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$24;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $14_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $9_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $9_1;
  }
  label$26 : {
   label$27 : {
    if ($9_1 >>> 0 >= $8_1 >>> 0) {
     break label$27
    }
    $7_1 = $9_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $7_1;
    $15_1 = HEAPU8[$9_1 >> 0] | 0;
    break label$26;
   }
   label$28 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$28
    }
    $15_1 = 0;
    $7_1 = $9_1;
    break label$26;
   }
   label$29 : {
    label$30 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$30
     }
     $15_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$29;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $15_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $7_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
  }
  label$31 : {
   label$32 : {
    if ($7_1 >>> 0 >= $8_1 >>> 0) {
     break label$32
    }
    $16_1 = $7_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $16_1;
    $17_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$31;
   }
   label$33 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$33
    }
    $17_1 = 0;
    $16_1 = $7_1;
    break label$31;
   }
   label$34 : {
    label$35 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$35
     }
     $17_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$34;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $17_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $16_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $16_1;
  }
  label$36 : {
   label$37 : {
    if ($16_1 >>> 0 >= $8_1 >>> 0) {
     break label$37
    }
    $9_1 = $16_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $9_1;
    $18_1 = HEAPU8[$16_1 >> 0] | 0;
    break label$36;
   }
   label$38 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$38
    }
    $18_1 = 0;
    $9_1 = $16_1;
    break label$36;
   }
   label$39 : {
    label$40 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$40
     }
     $18_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$39;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $18_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $9_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $9_1;
  }
  label$41 : {
   label$42 : {
    label$43 : {
     if ($9_1 >>> 0 >= $8_1 >>> 0) {
      break label$43
     }
     $9_1 = $9_1 + 1 | 0;
     break label$42;
    }
    if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
     break label$41
    }
    label$44 : {
     label$45 : {
      $8_1 = $0_1 + 40 | 0;
      $9_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($9_1) {
       break label$45
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $8_1 = $0_1 + 41 | 0;
      break label$44;
     }
     $8_1 = $8_1 + $9_1 | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
    $9_1 = $0_1 + 41 | 0;
   }
   HEAP32[$6_1 >> 2] = $9_1;
  }
  label$46 : {
   label$47 : {
    label$48 : {
     if ($9_1 >>> 0 >= $8_1 >>> 0) {
      break label$48
     }
     $9_1 = $9_1 + 1 | 0;
     break label$47;
    }
    if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
     break label$46
    }
    label$49 : {
     label$50 : {
      $8_1 = $0_1 + 40 | 0;
      $9_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($9_1) {
       break label$50
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $8_1 = $0_1 + 41 | 0;
      break label$49;
     }
     $8_1 = $8_1 + $9_1 | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
    $9_1 = $0_1 + 41 | 0;
   }
   HEAP32[$6_1 >> 2] = $9_1;
  }
  label$51 : {
   label$52 : {
    label$53 : {
     if ($9_1 >>> 0 >= $8_1 >>> 0) {
      break label$53
     }
     $9_1 = $9_1 + 1 | 0;
     break label$52;
    }
    if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
     break label$51
    }
    label$54 : {
     label$55 : {
      $8_1 = $0_1 + 40 | 0;
      $9_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($9_1) {
       break label$55
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $8_1 = $0_1 + 41 | 0;
      break label$54;
     }
     $8_1 = $8_1 + $9_1 | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
    $9_1 = $0_1 + 41 | 0;
   }
   HEAP32[$6_1 >> 2] = $9_1;
  }
  label$56 : {
   label$57 : {
    label$58 : {
     if ($9_1 >>> 0 >= $8_1 >>> 0) {
      break label$58
     }
     $9_1 = $9_1 + 1 | 0;
     break label$57;
    }
    if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
     break label$56
    }
    label$59 : {
     label$60 : {
      $8_1 = $0_1 + 40 | 0;
      $9_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
      if ($9_1) {
       break label$60
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $8_1 = $0_1 + 41 | 0;
      break label$59;
     }
     $8_1 = $8_1 + $9_1 | 0;
    }
    HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
    $9_1 = $0_1 + 41 | 0;
   }
   HEAP32[$6_1 >> 2] = $9_1;
  }
  label$61 : {
   label$62 : {
    if ($9_1 >>> 0 >= $8_1 >>> 0) {
     break label$62
    }
    $7_1 = $9_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $7_1;
    $19_1 = HEAPU8[$9_1 >> 0] | 0;
    break label$61;
   }
   label$63 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$63
    }
    $19_1 = 0;
    $7_1 = $9_1;
    break label$61;
   }
   label$64 : {
    label$65 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$65
     }
     $19_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$64;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $19_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $7_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
  }
  label$66 : {
   label$67 : {
    if ($7_1 >>> 0 >= $8_1 >>> 0) {
     break label$67
    }
    $9_1 = $7_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $9_1;
    $16_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$66;
   }
   label$68 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$68
    }
    $16_1 = 0;
    $9_1 = $7_1;
    break label$66;
   }
   label$69 : {
    label$70 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$70
     }
     $16_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$69;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $16_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $9_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $9_1;
  }
  label$71 : {
   label$72 : {
    if ($9_1 >>> 0 >= $8_1 >>> 0) {
     break label$72
    }
    $7_1 = $9_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $7_1;
    $20_1 = HEAPU8[$9_1 >> 0] | 0;
    break label$71;
   }
   label$73 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$73
    }
    $20_1 = 0;
    $7_1 = $9_1;
    break label$71;
   }
   label$74 : {
    label$75 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$75
     }
     $20_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$74;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $20_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $7_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
  }
  $16_1 = $16_1 & 255 | 0;
  label$76 : {
   label$77 : {
    if ($7_1 >>> 0 >= $8_1 >>> 0) {
     break label$77
    }
    $9_1 = $7_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $9_1;
    $21_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$76;
   }
   label$78 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$78
    }
    $21_1 = 0;
    $9_1 = $7_1;
    break label$76;
   }
   label$79 : {
    label$80 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$80
     }
     $21_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$79;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $21_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $9_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $9_1;
  }
  $19_1 = $19_1 & 255 | 0;
  $16_1 = $16_1 << 8 | 0;
  label$81 : {
   label$82 : {
    if ($9_1 >>> 0 >= $8_1 >>> 0) {
     break label$82
    }
    $7_1 = $9_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $7_1;
    $22_1 = HEAPU8[$9_1 >> 0] | 0;
    break label$81;
   }
   label$83 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$83
    }
    $22_1 = 0;
    $7_1 = $9_1;
    break label$81;
   }
   label$84 : {
    label$85 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$85
     }
     $22_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$84;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $22_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $7_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $7_1;
  }
  $23_1 = $16_1 | $19_1 | 0;
  label$86 : {
   label$87 : {
    if ($7_1 >>> 0 >= $8_1 >>> 0) {
     break label$87
    }
    $16_1 = $7_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = $16_1;
    $24_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$86;
   }
   label$88 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$88
    }
    $24_1 = 0;
    $16_1 = $7_1;
    break label$86;
   }
   label$89 : {
    label$90 : {
     $9_1 = $0_1 + 40 | 0;
     $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($8_1) {
      break label$90
     }
     $24_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $8_1 = $0_1 + 41 | 0;
     break label$89;
    }
    $8_1 = $9_1 + $8_1 | 0;
    $24_1 = HEAPU8[$9_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $8_1;
   $16_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $16_1;
  }
  $9_1 = 0;
  label$91 : {
   if (!$23_1) {
    break label$91
   }
   $19_1 = ($21_1 << 8 | 0) & 65280 | 0 | ($20_1 & 255 | 0) | 0;
   if (!$19_1) {
    break label$91
   }
   $7_1 = $12_1 & 255 | 0;
   $7_1 = ($12_1 & 255 | 0) >>> 0 > 7 >>> 0 ? $7_1 + -8 | 0 : $7_1;
   if (($7_1 | 0) < (1 | 0)) {
    break label$91
   }
   if (($7_1 | 0) > (3 | 0)) {
    break label$91
   }
   if ((($22_1 << 5 | 0 | ((($22_1 << 24 | 0) + -134217728 | 0) >>> 27 | 0) | 0) & 255 | 0) >>> 0 > 3 >>> 0) {
    break label$91
   }
   HEAP32[$1_1 >> 2] = $23_1;
   HEAP32[$2_1 >> 2] = $19_1;
   $21_1 = $18_1 & 255 | 0;
   $25_1 = $22_1 & 255 | 0;
   $26_1 = $25_1 >>> 3 | 0;
   $2_1 = $11_1 & 255 | 0 ? $21_1 >>> 3 | 0 : $26_1;
   label$92 : {
    if (!$3_1) {
     break label$92
    }
    HEAP32[$3_1 >> 2] = $2_1;
   }
   label$93 : {
    $18_1 = Math_imul($19_1, $23_1);
    $9_1 = $483(Math_imul($2_1, $18_1) | 0) | 0;
    if ($9_1) {
     break label$93
    }
    $9_1 = 0;
    HEAP32[(0 + 96956 | 0) >> 2] = 66853;
    break label$91;
   }
   $20_1 = ($24_1 ^ -1 | 0) >>> 5 | 0;
   $7_1 = $10_1 & 255 | 0;
   label$94 : {
    label$95 : {
     if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
      break label$95
     }
     $3_1 = $8_1 - $16_1 | 0;
     if (($3_1 | 0) >= ($7_1 | 0)) {
      break label$95
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
     FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1 - $3_1 | 0);
     break label$94;
    }
    HEAP32[$6_1 >> 2] = $16_1 + $7_1 | 0;
   }
   $10_1 = $20_1 & 1 | 0;
   label$96 : {
    label$97 : {
     $8_1 = $11_1 & 255 | 0;
     if ($8_1) {
      break label$97
     }
     if (($12_1 & 255 | 0) >>> 0 > 7 >>> 0) {
      break label$97
     }
     $7_1 = Math_imul($2_1, $23_1);
     $8_1 = 0;
     label$98 : while (1) {
      $21_1 = $9_1 + Math_imul($7_1, $10_1 ? $19_1 + ($8_1 ^ -1 | 0) | 0 : $8_1) | 0;
      label$99 : {
       label$100 : {
        label$101 : {
         label$102 : {
          $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          if ($3_1) {
           break label$102
          }
          $12_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
          $16_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
          break label$101;
         }
         $12_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
         $16_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
         $20_1 = $12_1 - $16_1 | 0;
         if (($7_1 | 0) <= ($20_1 | 0)) {
          break label$101
         }
         $16_1 = $410($21_1 | 0, $16_1 | 0, $20_1 | 0) | 0;
         FUNCTION_TABLE[$3_1 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $16_1 + $20_1 | 0, $7_1 - $20_1 | 0) | 0;
         $20_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
         break label$100;
        }
        $20_1 = $16_1 + $7_1 | 0;
        if ($20_1 >>> 0 > $12_1 >>> 0) {
         break label$99
        }
        $410($21_1 | 0, $16_1 | 0, $7_1 | 0) | 0;
       }
       HEAP32[$6_1 >> 2] = $20_1;
      }
      $8_1 = $8_1 + 1 | 0;
      if (($8_1 | 0) != ($19_1 | 0)) {
       continue label$98
      }
      break label$96;
     };
    }
    $27_1 = ($17_1 & 255 | 0) << 8 | 0 | ($15_1 & 255 | 0) | 0;
    label$103 : {
     label$104 : {
      if ($8_1) {
       break label$104
      }
      $14_1 = 0;
      break label$103;
     }
     $8_1 = ($14_1 & 255 | 0) << 8 | 0 | ($13_1 & 255 | 0) | 0;
     label$105 : {
      label$106 : {
       label$107 : {
        if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
         break label$107
        }
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        break label$106;
       }
       $16_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
       $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
       $20_1 = $16_1 - $7_1 | 0;
       if (($8_1 | 0) <= ($20_1 | 0)) {
        break label$106
       }
       HEAP32[($0_1 + 168 | 0) >> 2] = $16_1;
       FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $8_1 - $20_1 | 0);
       break label$105;
      }
      HEAP32[$6_1 >> 2] = $7_1 + $8_1 | 0;
     }
     label$108 : {
      $8_1 = Math_imul($27_1, $21_1) >>> 3 | 0;
      $14_1 = $483($8_1 | 0) | 0;
      if ($14_1) {
       break label$108
      }
      $484($9_1 | 0);
      $9_1 = 0;
      HEAP32[(0 + 96956 | 0) >> 2] = 66853;
      break label$91;
     }
     label$109 : {
      label$110 : {
       label$111 : {
        label$112 : {
         $21_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if ($21_1) {
          break label$112
         }
         $16_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
         $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
         break label$111;
        }
        $16_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
        $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
        $20_1 = $16_1 - $7_1 | 0;
        if (($8_1 | 0) > ($20_1 | 0)) {
         break label$110
        }
       }
       $20_1 = $7_1 + $8_1 | 0;
       if ($20_1 >>> 0 > $16_1 >>> 0) {
        break label$109
       }
       $410($14_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
       HEAP32[$6_1 >> 2] = $20_1;
       break label$103;
      }
      $7_1 = $410($14_1 | 0, $7_1 | 0, $20_1 | 0) | 0;
      $8_1 = $8_1 - $20_1 | 0;
      $7_1 = FUNCTION_TABLE[$21_1 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1 + $20_1 | 0, $8_1) | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
      if (($7_1 | 0) == ($8_1 | 0)) {
       break label$103
      }
     }
     $484($9_1 | 0);
     $484($14_1 | 0);
     $9_1 = 0;
     HEAP32[(0 + 96956 | 0) >> 2] = 67401;
     break label$91;
    }
    label$113 : {
     if (($18_1 | 0) < (1 | 0)) {
      break label$113
     }
     $3_1 = $0_1 + 41 | 0;
     $1_1 = $0_1 + 40 | 0;
     $20_1 = ($25_1 + -1 | 0) >>> 3 | 0;
     $25_1 = $20_1 + 1 | 0;
     $17_1 = ($12_1 & 255 | 0) >>> 0 < 8 >>> 0;
     $8_1 = 1;
     $13_1 = 0;
     $24_1 = 0;
     $15_1 = 0;
     label$114 : while (1) {
      label$115 : {
       label$116 : {
        if ($17_1) {
         break label$116
        }
        label$117 : {
         if ($24_1) {
          break label$117
         }
         label$118 : {
          label$119 : {
           $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
           if ($8_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
            break label$119
           }
           HEAP32[$6_1 >> 2] = $8_1 + 1 | 0;
           $8_1 = HEAPU8[$8_1 >> 0] | 0;
           break label$118;
          }
          label$120 : {
           if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
            break label$120
           }
           $8_1 = 0;
           break label$118;
          }
          label$121 : {
           label$122 : {
            $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $1_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
            if ($8_1) {
             break label$122
            }
            $8_1 = 0;
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            HEAP32[($0_1 + 32 | 0) >> 2] = 0;
            $7_1 = $3_1;
            break label$121;
           }
           $7_1 = $1_1 + $8_1 | 0;
           $8_1 = HEAPU8[$1_1 >> 0] | 0;
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
          HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
         }
         $13_1 = ($8_1 & 128 | 0) >>> 7 | 0;
         $24_1 = ($8_1 & 127 | 0) + 1 | 0;
         break label$116;
        }
        label$123 : {
         if ((!$13_1 | $8_1 | 0) & 1 | 0) {
          break label$123
         }
         $13_1 = 1;
         break label$115;
        }
        $13_1 = ($13_1 | 0) != (0 | 0);
       }
       label$124 : {
        if ($11_1 & 255 | 0) {
         break label$124
        }
        if (!($22_1 & 255 | 0)) {
         break label$115
        }
        $12_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
        $7_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
        $16_1 = 0;
        label$125 : while (1) {
         $8_1 = $16_1;
         label$126 : {
          label$127 : {
           if ($7_1 >>> 0 >= $12_1 >>> 0) {
            break label$127
           }
           $21_1 = $7_1 + 1 | 0;
           HEAP32[$6_1 >> 2] = $21_1;
           $16_1 = HEAPU8[$7_1 >> 0] | 0;
           $7_1 = $21_1;
           break label$126;
          }
          label$128 : {
           if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
            break label$128
           }
           $16_1 = 0;
           break label$126;
          }
          label$129 : {
           label$130 : {
            $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $1_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
            if ($7_1) {
             break label$130
            }
            $16_1 = 0;
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            HEAP32[($0_1 + 32 | 0) >> 2] = 0;
            $12_1 = $3_1;
            break label$129;
           }
           $12_1 = $1_1 + $7_1 | 0;
           $16_1 = HEAPU8[$1_1 >> 0] | 0;
          }
          HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
          HEAP32[($0_1 + 172 | 0) >> 2] = $12_1;
          $7_1 = $3_1;
         }
         HEAP8[(($5_1 + 12 | 0) + $8_1 | 0) >> 0] = $16_1;
         $16_1 = $8_1 + 1 | 0;
         if (($8_1 | 0) != ($20_1 | 0)) {
          continue label$125
         }
         break label$115;
        };
       }
       label$131 : {
        label$132 : {
         $8_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
         if ($8_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
          break label$132
         }
         HEAP32[$6_1 >> 2] = $8_1 + 1 | 0;
         $8_1 = HEAPU8[$8_1 >> 0] | 0;
         break label$131;
        }
        label$133 : {
         if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
          break label$133
         }
         $8_1 = 0;
         break label$131;
        }
        label$134 : {
         label$135 : {
          $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $1_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
          if ($8_1) {
           break label$135
          }
          $8_1 = 0;
          HEAP8[($0_1 + 40 | 0) >> 0] = 0;
          HEAP32[($0_1 + 32 | 0) >> 2] = 0;
          $7_1 = $3_1;
          break label$134;
         }
         $7_1 = $1_1 + $8_1 | 0;
         $8_1 = HEAPU8[$1_1 >> 0] | 0;
        }
        HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
        HEAP32[($0_1 + 172 | 0) >> 2] = $7_1;
       }
       if (!($22_1 & 255 | 0)) {
        break label$115
       }
       $8_1 = $8_1 & 255 | 0;
       $410($5_1 + 12 | 0 | 0, $14_1 + Math_imul($27_1 >>> 0 > $8_1 >>> 0 ? $8_1 : 0, $26_1) | 0 | 0, $25_1 | 0) | 0;
      }
      label$136 : {
       if (!$2_1) {
        break label$136
       }
       $410($9_1 + Math_imul($2_1, $15_1) | 0 | 0, $5_1 + 12 | 0 | 0, $2_1 | 0) | 0;
      }
      $24_1 = $24_1 + -1 | 0;
      $8_1 = 0;
      $15_1 = $15_1 + 1 | 0;
      if (($15_1 | 0) != ($18_1 | 0)) {
       continue label$114
      }
      break label$114;
     };
    }
    label$137 : {
     if (!$10_1) {
      break label$137
     }
     $21_1 = Math_imul($2_1, $23_1);
     $3_1 = ($19_1 + -1 | 0) >>> 1 | 0;
     $20_1 = 0;
     label$138 : while (1) {
      label$139 : {
       if (!$21_1) {
        break label$139
       }
       $0_1 = Math_imul($21_1, $20_1);
       $8_1 = Math_imul($21_1, $19_1 + ($20_1 ^ -1 | 0) | 0);
       $6_1 = $21_1;
       label$140 : while (1) {
        $7_1 = $9_1 + $0_1 | 0;
        $16_1 = HEAPU8[$7_1 >> 0] | 0;
        $12_1 = $9_1 + $8_1 | 0;
        HEAP8[$7_1 >> 0] = HEAPU8[$12_1 >> 0] | 0;
        HEAP8[$12_1 >> 0] = $16_1;
        $8_1 = $8_1 + 1 | 0;
        $0_1 = $0_1 + 1 | 0;
        $7_1 = ($6_1 | 0) > (1 | 0);
        $6_1 = $6_1 + -1 | 0;
        if ($7_1) {
         continue label$140
        }
        break label$140;
       };
      }
      $0_1 = ($20_1 | 0) != ($3_1 | 0);
      $20_1 = $20_1 + 1 | 0;
      if ($0_1) {
       continue label$138
      }
      break label$138;
     };
    }
    if (!$14_1) {
     break label$96
    }
    $484($14_1 | 0);
   }
   label$141 : {
    if ($2_1 >>> 0 < 3 >>> 0) {
     break label$141
    }
    if (($18_1 | 0) < (1 | 0)) {
     break label$141
    }
    $8_1 = 0;
    $0_1 = $9_1;
    label$142 : while (1) {
     $6_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
     HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[$0_1 >> 0] | 0;
     HEAP8[$0_1 >> 0] = $6_1;
     $0_1 = $0_1 + $2_1 | 0;
     $8_1 = $8_1 + 1 | 0;
     if (($8_1 | 0) != ($18_1 | 0)) {
      continue label$142
     }
     break label$142;
    };
   }
   if (!$4_1) {
    break label$91
   }
   if (($2_1 | 0) == ($4_1 | 0)) {
    break label$91
   }
   $9_1 = $377($9_1 | 0, $2_1 | 0, $4_1 | 0, $23_1 | 0, $19_1 | 0) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP16[(($0_1 + ($1_1 << 2 | 0) | 0) + 2088 | 0) >> 1] | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $388($0_1 | 0, $2_1 & 65535 | 0 | 0);
  }
  label$2 : {
   $2_1 = HEAP32[($0_1 + 18508 | 0) >> 2] | 0;
   if (($2_1 | 0) >= (HEAP32[($0_1 + 18500 | 0) >> 2] | 0 | 0)) {
    break label$2
   }
   label$3 : {
    $1_1 = (HEAP32[($0_1 + 18472 | 0) >> 2] | 0) + ((HEAPU8[(($0_1 + ($1_1 << 2 | 0) | 0) + 2091 | 0) >> 0] | 0) << 2 | 0) | 0;
    if ((HEAP8[($1_1 + 3 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
     break label$3
    }
    $2_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 18504 | 0) >> 2] | 0) + $2_1 | 0) | 0;
    HEAP8[$2_1 >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
   }
   $1_1 = (HEAP32[($0_1 + 18504 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($0_1 + 18504 | 0) >> 2] = $1_1;
   if (($1_1 | 0) < (HEAP32[($0_1 + 18496 | 0) >> 2] | 0 | 0)) {
    break label$2
   }
   HEAP32[($0_1 + 18504 | 0) >> 2] = HEAP32[($0_1 + 18488 | 0) >> 2] | 0;
   $1_1 = (HEAP32[($0_1 + 18508 | 0) >> 2] | 0) + (HEAP32[($0_1 + 18480 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 18508 | 0) >> 2] = $1_1;
   $3_1 = HEAP32[($0_1 + 18500 | 0) >> 2] | 0;
   if (($1_1 | 0) < ($3_1 | 0)) {
    break label$2
   }
   $1_1 = HEAP32[($0_1 + 18476 | 0) >> 2] | 0;
   label$4 : while (1) {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $2_1 = $1_1 + -1 | 0;
    HEAP32[($0_1 + 18476 | 0) >> 2] = $2_1;
    $1_1 = (HEAP32[($0_1 + 18512 | 0) >> 2] | 0) << $1_1 | 0;
    HEAP32[($0_1 + 18480 | 0) >> 2] = $1_1;
    $4_1 = (HEAP32[($0_1 + 18492 | 0) >> 2] | 0) + ($1_1 >> 1 | 0) | 0;
    HEAP32[($0_1 + 18508 | 0) >> 2] = $4_1;
    $1_1 = $2_1;
    if (($4_1 | 0) >= ($3_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
 }
 
 function $389($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (($1_1 | 0) > (-1 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
   return;
  }
  label$2 : {
   label$3 : {
    if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
     break label$3
    }
    $2_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    break label$2;
   }
   $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
   $4_1 = $3_1 - $2_1 | 0;
   if (($4_1 | 0) >= ($1_1 | 0)) {
    break label$2
   }
   HEAP32[($0_1 + 168 | 0) >> 2] = $3_1;
   FUNCTION_TABLE[HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $1_1 - $4_1 | 0);
   return;
  }
  HEAP32[($0_1 + 168 | 0) >> 2] = $2_1 + $1_1 | 0;
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return -1 | 0;
  }
  $1_1 = $0_1 >>> 0 > 65535 >>> 0;
  $2_1 = $1_1 << 4 | 0;
  $0_1 = $1_1 ? $0_1 >>> 16 | 0 : $0_1;
  $1_1 = $0_1 >>> 0 > 255 >>> 0;
  $2_1 = $1_1 ? $2_1 | 8 | 0 : $2_1;
  $0_1 = $1_1 ? $0_1 >>> 8 | 0 : $0_1;
  $1_1 = $0_1 >>> 0 > 15 >>> 0;
  $2_1 = $1_1 ? $2_1 | 4 | 0 : $2_1;
  $0_1 = $1_1 ? $0_1 >>> 4 | 0 : $0_1;
  $1_1 = $0_1 >>> 0 > 3 >>> 0;
  return ($1_1 ? $2_1 | 2 | 0 : $2_1) + (($1_1 ? $0_1 >>> 2 | 0 : $0_1) >>> 0 > 1 >>> 0) | 0 | 0;
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = (($0_1 >>> 1 | 0) & 1431655765 | 0) + ($0_1 & 1431655765 | 0) | 0;
  $0_1 = (($0_1 >>> 2 | 0) & 858993459 | 0) + ($0_1 & 858993459 | 0) | 0;
  $0_1 = (($0_1 >>> 4 | 0) + $0_1 | 0) & 252645135 | 0;
  $0_1 = ($0_1 >>> 8 | 0) + $0_1 | 0;
  return (($0_1 >>> 16 | 0) + $0_1 | 0) & 63 | 0 | 0;
 }
 
 function $392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$2
    }
    $4_1 = $2_1 + 1 | 0;
    HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
    $5_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $5_1 = 0;
    $4_1 = $2_1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $4_1 = $0_1 + 40 | 0;
     $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($5_1) {
      break label$5
     }
     $5_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $3_1 = $0_1 + 41 | 0;
     break label$4;
    }
    $3_1 = $4_1 + $5_1 | 0;
    $5_1 = HEAPU8[$4_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $3_1;
   $4_1 = $0_1 + 41 | 0;
   HEAP32[($0_1 + 168 | 0) >> 2] = $4_1;
  }
  $6_1 = $0_1 + 41 | 0;
  $7_1 = $0_1 + 40 | 0;
  $2_1 = 0;
  label$6 : {
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
       break label$9
      }
      label$10 : {
       if (FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) {
        break label$10
       }
       $4_1 = 0;
       break label$8;
      }
      if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
       break label$6
      }
      $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
      $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     }
     $4_1 = $4_1 >>> 0 >= $3_1 >>> 0;
    }
    if ($4_1) {
     break label$6
    }
    if (($5_1 & 255 | 0 | 0) == (10 | 0)) {
     break label$6
    }
    HEAP8[($1_1 + $2_1 | 0) >> 0] = $5_1;
    label$11 : {
     label$12 : {
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != (1023 | 0)) {
       break label$12
      }
      label$13 : while (1) {
       label$14 : {
        label$15 : {
         if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
          break label$15
         }
         label$16 : {
          if (FUNCTION_TABLE[HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) {
           break label$16
          }
          $5_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
          $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
          break label$14;
         }
         if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
          break label$11
         }
        }
        $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
        $5_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
        if ($4_1 >>> 0 >= $5_1 >>> 0) {
         break label$11
        }
       }
       label$17 : {
        label$18 : {
         if ($4_1 >>> 0 >= $5_1 >>> 0) {
          break label$18
         }
         HEAP32[($0_1 + 168 | 0) >> 2] = $4_1 + 1 | 0;
         $4_1 = HEAPU8[$4_1 >> 0] | 0;
         break label$17;
        }
        label$19 : {
         if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
          break label$19
         }
         $4_1 = 0;
         break label$17;
        }
        label$20 : {
         label$21 : {
          $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
          if ($4_1) {
           break label$21
          }
          $4_1 = 0;
          HEAP8[($0_1 + 40 | 0) >> 0] = 0;
          HEAP32[($0_1 + 32 | 0) >> 2] = 0;
          $5_1 = $6_1;
          break label$20;
         }
         $5_1 = $7_1 + $4_1 | 0;
         $4_1 = HEAPU8[$7_1 >> 0] | 0;
        }
        HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
        HEAP32[($0_1 + 172 | 0) >> 2] = $5_1;
       }
       if (($4_1 & 255 | 0 | 0) != (10 | 0)) {
        continue label$13
       }
       break label$11;
      };
     }
     label$22 : {
      $4_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      $3_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
      if ($4_1 >>> 0 >= $3_1 >>> 0) {
       break label$22
      }
      $8_1 = $4_1 + 1 | 0;
      HEAP32[($0_1 + 168 | 0) >> 2] = $8_1;
      $5_1 = HEAPU8[$4_1 >> 0] | 0;
      $4_1 = $8_1;
      continue label$7;
     }
     $5_1 = 0;
     if (!(HEAP32[($0_1 + 32 | 0) >> 2] | 0)) {
      continue label$7
     }
     label$23 : {
      label$24 : {
       $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $7_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
       if ($4_1) {
        break label$24
       }
       $5_1 = 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $3_1 = $6_1;
       break label$23;
      }
      $3_1 = $7_1 + $4_1 | 0;
      $5_1 = HEAPU8[$7_1 >> 0] | 0;
     }
     HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 172 | 0) >> 2] = $3_1;
     $4_1 = $6_1;
     continue label$7;
    }
    break label$7;
   };
   $2_1 = 1023;
  }
  HEAP8[($1_1 + $2_1 | 0) >> 0] = 0;
  return $1_1 | 0;
 }
 
 function $393($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 172 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 168 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $1_1 = 0;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $1_1 = $0_1 + 40 | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 28 | 0) >> 2] | 0, $1_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
     if ($2_1) {
      break label$5
     }
     $1_1 = 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     $2_1 = $0_1 + 41 | 0;
     break label$4;
    }
    $2_1 = $1_1 + $2_1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
   }
   HEAP32[($0_1 + 172 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 168 | 0) >> 2] = $0_1 + 41 | 0;
  }
  return $1_1 & 255 | 0 | 0;
 }
 
 function $394($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    $3_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = Math_fround(+$437(+(1.0), $3_1 + -136 | 0 | 0));
    $3_1 = HEAPU8[$1_1 >> 0] | 0;
    label$3 : {
     label$4 : {
      if (($2_1 | 0) > (2 | 0)) {
       break label$4
      }
      HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($4_1 * Math_fround(((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + $3_1 | 0) + (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) | 0 | 0)) / Math_fround(3.0));
      break label$3;
     }
     HEAPF32[$0_1 >> 2] = Math_fround($4_1 * Math_fround($3_1 >>> 0));
     HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($4_1 * Math_fround((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) >>> 0));
     HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround($4_1 * Math_fround((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) >>> 0));
    }
    label$5 : {
     switch ($2_1 + -2 | 0 | 0) {
     case 0:
      HEAP32[($0_1 + 4 | 0) >> 2] = 1065353216;
      return;
     case 2:
      break label$5;
     default:
      break label$1;
     };
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 1065353216;
    return;
   }
   label$7 : {
    switch ($2_1 + -1 | 0 | 0) {
    case 3:
     HEAP32[($0_1 + 12 | 0) >> 2] = 1065353216;
    case 2:
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
     return;
    case 1:
     HEAP32[($0_1 + 4 | 0) >> 2] = 1065353216;
     break;
    case 0:
     break label$7;
    default:
     break label$1;
    };
   }
   HEAP32[$0_1 >> 2] = 0;
  }
 }
 
 function $395($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $17_1 = 0, $15_1 = 0, $16_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP32[($2_1 + 168 | 0) >> 2] | 0;
    $4_1 = HEAP32[($2_1 + 172 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    $5_1 = $3_1 + 1 | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $5_1;
    $6_1 = HEAPU8[$3_1 >> 0] | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $6_1 = 0;
    $5_1 = $3_1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $5_1 = $2_1 + 40 | 0;
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
     if ($4_1) {
      break label$5
     }
     $6_1 = 0;
     HEAP8[($2_1 + 40 | 0) >> 0] = 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = 0;
     $4_1 = $2_1 + 41 | 0;
     break label$4;
    }
    $4_1 = $5_1 + $4_1 | 0;
    $6_1 = HEAPU8[$5_1 >> 0] | 0;
   }
   HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
   $5_1 = $2_1 + 41 | 0;
   HEAP32[($2_1 + 168 | 0) >> 2] = $5_1;
  }
  label$6 : {
   label$7 : {
    if ($5_1 >>> 0 >= $4_1 >>> 0) {
     break label$7
    }
    $7_1 = $5_1 + 1 | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $7_1;
    $3_1 = HEAPU8[$5_1 >> 0] | 0;
    break label$6;
   }
   label$8 : {
    if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
     break label$8
    }
    $3_1 = 0;
    $7_1 = $5_1;
    break label$6;
   }
   label$9 : {
    label$10 : {
     $5_1 = $2_1 + 40 | 0;
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
     if ($4_1) {
      break label$10
     }
     $3_1 = 0;
     HEAP8[($2_1 + 40 | 0) >> 0] = 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = 0;
     $4_1 = $2_1 + 41 | 0;
     break label$9;
    }
    $4_1 = $5_1 + $4_1 | 0;
    $3_1 = HEAPU8[$5_1 >> 0] | 0;
   }
   HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
   $7_1 = $2_1 + 41 | 0;
   HEAP32[($2_1 + 168 | 0) >> 2] = $7_1;
  }
  $5_1 = 66816;
  label$11 : {
   $8_1 = ($6_1 & 255 | 0) << 8 | 0 | ($3_1 & 255 | 0) | 0;
   if ($8_1 >>> 0 < 11 >>> 0) {
    break label$11
   }
   label$12 : {
    label$13 : {
     if ($7_1 >>> 0 >= $4_1 >>> 0) {
      break label$13
     }
     $3_1 = $7_1 + 1 | 0;
     HEAP32[($2_1 + 168 | 0) >> 2] = $3_1;
     $6_1 = HEAPU8[$7_1 >> 0] | 0;
     break label$12;
    }
    label$14 : {
     if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
      break label$14
     }
     $5_1 = 66054;
     break label$11;
    }
    label$15 : {
     label$16 : {
      $5_1 = $2_1 + 40 | 0;
      $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$16
      }
      $6_1 = 0;
      HEAP8[($2_1 + 40 | 0) >> 0] = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      $4_1 = $2_1 + 41 | 0;
      break label$15;
     }
     $4_1 = $5_1 + $4_1 | 0;
     $6_1 = HEAPU8[$5_1 >> 0] | 0;
    }
    HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
    $3_1 = $2_1 + 41 | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $3_1;
   }
   $5_1 = 66054;
   if (($6_1 & 255 | 0 | 0) != (8 | 0)) {
    break label$11
   }
   label$17 : {
    label$18 : {
     if ($3_1 >>> 0 >= $4_1 >>> 0) {
      break label$18
     }
     $5_1 = $3_1 + 1 | 0;
     HEAP32[($2_1 + 168 | 0) >> 2] = $5_1;
     $6_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$17;
    }
    label$19 : {
     if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
      break label$19
     }
     $6_1 = 0;
     $5_1 = $3_1;
     break label$17;
    }
    label$20 : {
     label$21 : {
      $5_1 = $2_1 + 40 | 0;
      $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$21
      }
      $6_1 = 0;
      HEAP8[($2_1 + 40 | 0) >> 0] = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      $4_1 = $2_1 + 41 | 0;
      break label$20;
     }
     $4_1 = $5_1 + $4_1 | 0;
     $6_1 = HEAPU8[$5_1 >> 0] | 0;
    }
    HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
    $5_1 = $2_1 + 41 | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $5_1;
   }
   label$22 : {
    label$23 : {
     if ($5_1 >>> 0 >= $4_1 >>> 0) {
      break label$23
     }
     $3_1 = $5_1 + 1 | 0;
     HEAP32[($2_1 + 168 | 0) >> 2] = $3_1;
     $7_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$22;
    }
    label$24 : {
     if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
      break label$24
     }
     $7_1 = 0;
     $3_1 = $5_1;
     break label$22;
    }
    label$25 : {
     label$26 : {
      $5_1 = $2_1 + 40 | 0;
      $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$26
      }
      $7_1 = 0;
      HEAP8[($2_1 + 40 | 0) >> 0] = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      $4_1 = $2_1 + 41 | 0;
      break label$25;
     }
     $4_1 = $5_1 + $4_1 | 0;
     $7_1 = HEAPU8[$5_1 >> 0] | 0;
    }
    HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
    $3_1 = $2_1 + 41 | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $3_1;
   }
   $5_1 = ($6_1 & 255 | 0) << 8 | 0 | ($7_1 & 255 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
   label$27 : {
    if ($5_1) {
     break label$27
    }
    $5_1 = 66065;
    break label$11;
   }
   label$28 : {
    label$29 : {
     if ($3_1 >>> 0 >= $4_1 >>> 0) {
      break label$29
     }
     $5_1 = $3_1 + 1 | 0;
     HEAP32[($2_1 + 168 | 0) >> 2] = $5_1;
     $6_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$28;
    }
    label$30 : {
     if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
      break label$30
     }
     $6_1 = 0;
     $5_1 = $3_1;
     break label$28;
    }
    label$31 : {
     label$32 : {
      $5_1 = $2_1 + 40 | 0;
      $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$32
      }
      $6_1 = 0;
      HEAP8[($2_1 + 40 | 0) >> 0] = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      $4_1 = $2_1 + 41 | 0;
      break label$31;
     }
     $4_1 = $5_1 + $4_1 | 0;
     $6_1 = HEAPU8[$5_1 >> 0] | 0;
    }
    HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
    $5_1 = $2_1 + 41 | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $5_1;
   }
   label$33 : {
    label$34 : {
     if ($5_1 >>> 0 >= $4_1 >>> 0) {
      break label$34
     }
     $3_1 = $5_1 + 1 | 0;
     HEAP32[($2_1 + 168 | 0) >> 2] = $3_1;
     $7_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$33;
    }
    label$35 : {
     if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
      break label$35
     }
     $7_1 = 0;
     $3_1 = $5_1;
     break label$33;
    }
    label$36 : {
     label$37 : {
      $5_1 = $2_1 + 40 | 0;
      $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$37
      }
      $7_1 = 0;
      HEAP8[($2_1 + 40 | 0) >> 0] = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      $4_1 = $2_1 + 41 | 0;
      break label$36;
     }
     $4_1 = $5_1 + $4_1 | 0;
     $7_1 = HEAPU8[$5_1 >> 0] | 0;
    }
    HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
    $3_1 = $2_1 + 41 | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $3_1;
   }
   $5_1 = ($6_1 & 255 | 0) << 8 | 0 | ($7_1 & 255 | 0) | 0;
   HEAP32[$2_1 >> 2] = $5_1;
   label$38 : {
    if ($5_1) {
     break label$38
    }
    $5_1 = 67108;
    break label$11;
   }
   label$39 : {
    label$40 : {
     if ($3_1 >>> 0 >= $4_1 >>> 0) {
      break label$40
     }
     $7_1 = $3_1 + 1 | 0;
     HEAP32[($2_1 + 168 | 0) >> 2] = $7_1;
     $3_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$39;
    }
    label$41 : {
     if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
      break label$41
     }
     $5_1 = 65947;
     break label$11;
    }
    label$42 : {
     label$43 : {
      $5_1 = $2_1 + 40 | 0;
      $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $5_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
      if ($4_1) {
       break label$43
      }
      $3_1 = 0;
      HEAP8[($2_1 + 40 | 0) >> 0] = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      $4_1 = $2_1 + 41 | 0;
      break label$42;
     }
     $4_1 = $5_1 + $4_1 | 0;
     $3_1 = HEAPU8[$5_1 >> 0] | 0;
    }
    HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
    $7_1 = $2_1 + 41 | 0;
    HEAP32[($2_1 + 168 | 0) >> 2] = $7_1;
   }
   $5_1 = 65947;
   if (($3_1 & 253 | 0 | 0) != (1 | 0)) {
    break label$11
   }
   $6_1 = $3_1 & 255 | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $6_1;
   $5_1 = 0;
   label$44 : while (1) {
    $3_1 = $0_1 + Math_imul($5_1, 72) | 0;
    HEAP32[($3_1 + 17876 | 0) >> 2] = 0;
    HEAP32[($3_1 + 17864 | 0) >> 2] = 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($6_1 | 0)) {
     continue label$44
    }
    break label$44;
   };
   $5_1 = 66816;
   if (($8_1 | 0) != (Math_imul($6_1, 3) + 8 | 0 | 0)) {
    break label$11
   }
   $8_1 = $2_1 + 41 | 0;
   $9_1 = $2_1 + 40 | 0;
   $10_1 = 0;
   label$45 : {
    label$46 : {
     label$47 : while (1) {
      $3_1 = $10_1;
      $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      if (($3_1 | 0) >= ($6_1 | 0)) {
       break label$46
      }
      label$48 : {
       label$49 : {
        if ($7_1 >>> 0 >= $4_1 >>> 0) {
         break label$49
        }
        $6_1 = $7_1 + 1 | 0;
        HEAP32[($2_1 + 168 | 0) >> 2] = $6_1;
        $10_1 = HEAPU8[$7_1 >> 0] | 0;
        break label$48;
       }
       label$50 : {
        if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
         break label$50
        }
        $10_1 = 0;
        $6_1 = $7_1;
        break label$48;
       }
       label$51 : {
        label$52 : {
         $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
         if ($4_1) {
          break label$52
         }
         $10_1 = 0;
         HEAP8[($2_1 + 40 | 0) >> 0] = 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = 0;
         $4_1 = $8_1;
         break label$51;
        }
        $4_1 = $9_1 + $4_1 | 0;
        $10_1 = HEAPU8[$9_1 >> 0] | 0;
       }
       HEAP32[($2_1 + 168 | 0) >> 2] = $8_1;
       HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
       $6_1 = $8_1;
      }
      $5_1 = $0_1 + Math_imul($3_1, 72) | 0;
      $7_1 = $10_1 & 255 | 0;
      HEAP32[($5_1 + 17820 | 0) >> 2] = $7_1;
      label$53 : {
       $10_1 = $3_1 + 1 | 0;
       if (($10_1 | 0) == ($7_1 | 0)) {
        break label$53
       }
       if (($3_1 | 0) == ($7_1 | 0)) {
        break label$53
       }
       $5_1 = 68326;
       break label$11;
      }
      label$54 : {
       label$55 : {
        if ($6_1 >>> 0 >= $4_1 >>> 0) {
         break label$55
        }
        $3_1 = $6_1 + 1 | 0;
        HEAP32[($2_1 + 168 | 0) >> 2] = $3_1;
        $6_1 = HEAPU8[$6_1 >> 0] | 0;
        break label$54;
       }
       label$56 : {
        if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
         break label$56
        }
        HEAP32[(($0_1 + Math_imul($3_1, 72) | 0) + 17824 | 0) >> 2] = 0;
        break label$45;
       }
       label$57 : {
        label$58 : {
         $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
         if ($4_1) {
          break label$58
         }
         $6_1 = 0;
         HEAP8[($2_1 + 40 | 0) >> 0] = 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = 0;
         $4_1 = $8_1;
         break label$57;
        }
        $4_1 = $9_1 + $4_1 | 0;
        $6_1 = HEAPU8[$9_1 >> 0] | 0;
       }
       HEAP32[($2_1 + 168 | 0) >> 2] = $8_1;
       HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
       $3_1 = $8_1;
      }
      $7_1 = $6_1 & 255 | 0;
      HEAP32[($5_1 + 17824 | 0) >> 2] = $7_1 >>> 4 | 0;
      if ((($6_1 + -80 | 0) & 255 | 0) >>> 0 < 192 >>> 0) {
       break label$45
      }
      $6_1 = $7_1 & 15 | 0;
      HEAP32[($5_1 + 17828 | 0) >> 2] = $6_1;
      label$59 : {
       if (($6_1 + -5 | 0) >>> 0 >= -4 >>> 0) {
        break label$59
       }
       $5_1 = 68040;
       break label$11;
      }
      label$60 : {
       label$61 : {
        if ($3_1 >>> 0 >= $4_1 >>> 0) {
         break label$61
        }
        $7_1 = $3_1 + 1 | 0;
        HEAP32[($2_1 + 168 | 0) >> 2] = $7_1;
        $6_1 = HEAPU8[$3_1 >> 0] | 0;
        break label$60;
       }
       label$62 : {
        if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
         break label$62
        }
        $6_1 = 0;
        $7_1 = $3_1;
        break label$60;
       }
       label$63 : {
        label$64 : {
         $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 28 | 0) >> 2] | 0, $9_1, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
         if ($4_1) {
          break label$64
         }
         $6_1 = 0;
         HEAP8[($2_1 + 40 | 0) >> 0] = 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = 0;
         $4_1 = $8_1;
         break label$63;
        }
        $4_1 = $9_1 + $4_1 | 0;
        $6_1 = HEAPU8[$9_1 >> 0] | 0;
       }
       HEAP32[($2_1 + 168 | 0) >> 2] = $8_1;
       HEAP32[($2_1 + 172 | 0) >> 2] = $4_1;
       $7_1 = $8_1;
      }
      $3_1 = $6_1 & 255 | 0;
      HEAP32[($5_1 + 17832 | 0) >> 2] = $3_1;
      $5_1 = 68138;
      if ($3_1 >>> 0 <= 3 >>> 0) {
       continue label$47
      }
      break label$11;
     };
    }
    $8_1 = 1;
    label$65 : {
     if ($1_1) {
      break label$65
     }
     $5_1 = 67572;
     $11_1 = HEAP32[$2_1 >> 2] | 0;
     $12_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (((((1073741824 >>> 0) / ($11_1 >>> 0) | 0) >>> 0) / ($6_1 >>> 0) | 0) >>> 0 < $12_1 >>> 0) {
      break label$11
     }
     $8_1 = 1;
     $4_1 = 1;
     $5_1 = 1;
     label$66 : {
      $1_1 = ($6_1 | 0) < (1 | 0);
      if ($1_1) {
       break label$66
      }
      $2_1 = 0;
      $5_1 = 1;
      $4_1 = 1;
      label$67 : while (1) {
       $3_1 = $0_1 + Math_imul($2_1, 72) | 0;
       $7_1 = HEAP32[($3_1 + 17828 | 0) >> 2] | 0;
       $5_1 = ($7_1 | 0) > ($5_1 | 0) ? $7_1 : $5_1;
       $3_1 = HEAP32[($3_1 + 17824 | 0) >> 2] | 0;
       $4_1 = ($3_1 | 0) > ($4_1 | 0) ? $3_1 : $4_1;
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($6_1 | 0)) {
        continue label$67
       }
       break label$67;
      };
     }
     HEAP32[($0_1 + 17800 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 17796 | 0) >> 2] = $4_1;
     $2_1 = $5_1 << 3 | 0;
     HEAP32[($0_1 + 17816 | 0) >> 2] = $2_1;
     $3_1 = $4_1 << 3 | 0;
     HEAP32[($0_1 + 17812 | 0) >> 2] = $3_1;
     $13_1 = ((($12_1 + $2_1 | 0) + -1 | 0) >>> 0) / ($2_1 >>> 0) | 0;
     HEAP32[($0_1 + 17808 | 0) >> 2] = $13_1;
     $14_1 = ((($11_1 + $3_1 | 0) + -1 | 0) >>> 0) / ($3_1 >>> 0) | 0;
     HEAP32[($0_1 + 17804 | 0) >> 2] = $14_1;
     if ($1_1) {
      break label$65
     }
     $15_1 = $5_1 + -1 | 0;
     $16_1 = $4_1 + -1 | 0;
     $3_1 = 0;
     label$68 : while (1) {
      $2_1 = $0_1 + Math_imul($3_1, 72) | 0;
      $7_1 = HEAP32[($2_1 + 17828 | 0) >> 2] | 0;
      $1_1 = Math_imul($7_1, $13_1);
      $8_1 = $1_1 << 3 | 0;
      HEAP32[($2_1 + 17860 | 0) >> 2] = $8_1;
      $10_1 = HEAP32[($2_1 + 17824 | 0) >> 2] | 0;
      $9_1 = Math_imul($10_1, $14_1);
      $17_1 = $9_1 << 3 | 0;
      HEAP32[($2_1 + 17856 | 0) >> 2] = $17_1;
      HEAP32[($2_1 + 17848 | 0) >> 2] = (($16_1 + Math_imul($10_1, $11_1) | 0) >>> 0) / ($4_1 >>> 0) | 0;
      HEAP32[($2_1 + 17852 | 0) >> 2] = (($15_1 + Math_imul($7_1, $12_1) | 0) >>> 0) / ($5_1 >>> 0) | 0;
      $7_1 = $483(Math_imul($8_1, $17_1) | 15 | 0 | 0) | 0;
      HEAP32[($2_1 + 17868 | 0) >> 2] = $7_1;
      label$69 : {
       if ($7_1) {
        break label$69
       }
       $5_1 = 66853;
       if (!$3_1) {
        break label$11
       }
       label$70 : while (1) {
        $2_1 = $3_1 + -1 | 0;
        $4_1 = ($0_1 + Math_imul($2_1, 72) | 0) + 17868 | 0;
        $484(HEAP32[$4_1 >> 2] | 0 | 0);
        HEAP32[$4_1 >> 2] = 0;
        $4_1 = ($3_1 | 0) > (1 | 0);
        $3_1 = $2_1;
        if ($4_1) {
         continue label$70
        }
        break label$11;
       };
      }
      $8_1 = 0;
      HEAP32[($2_1 + 17876 | 0) >> 2] = 0;
      HEAP32[($2_1 + 17864 | 0) >> 2] = ($7_1 + 15 | 0) & -16 | 0;
      $7_1 = 0;
      label$71 : {
       if (!(HEAP32[($0_1 + 18124 | 0) >> 2] | 0)) {
        break label$71
       }
       HEAP32[($2_1 + 17888 | 0) >> 2] = $1_1;
       HEAP32[($2_1 + 17884 | 0) >> 2] = $9_1;
       $7_1 = $483(Math_imul($9_1, $1_1) << 7 | 0 | 15 | 0 | 0) | 0;
       $8_1 = ($7_1 + 15 | 0) & -16 | 0;
      }
      HEAP32[($2_1 + 17872 | 0) >> 2] = $7_1;
      HEAP32[($2_1 + 17880 | 0) >> 2] = $8_1;
      $8_1 = 1;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($6_1 | 0)) {
       continue label$68
      }
      break label$68;
     };
    }
    return $8_1 | 0;
   }
   $5_1 = 68231;
  }
  HEAP32[(0 + 96956 | 0) >> 2] = $5_1;
  return 0 | 0;
 }
 
 function $396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0;
  $2_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    $4_1 = $1_1 + ($2_1 << 2 | 0) | 0;
    if ((HEAP32[$4_1 >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    $5_1 = $2_1 + 1 | 0;
    $6_1 = 0;
    label$3 : while (1) {
     HEAP8[(($0_1 + $3_1 | 0) + 1280 | 0) >> 0] = $5_1;
     $3_1 = $3_1 + 1 | 0;
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) < (HEAP32[$4_1 >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (16 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $6_1 = 0;
  HEAP8[(($0_1 + $3_1 | 0) + 1280 | 0) >> 0] = 0;
  $5_1 = 1;
  $3_1 = 0;
  label$4 : while (1) {
   $2_1 = $0_1 + ($5_1 << 2 | 0) | 0;
   HEAP32[($2_1 + 1612 | 0) >> 2] = $3_1 - $6_1 | 0;
   label$5 : {
    if (($5_1 | 0) != (HEAPU8[(($0_1 + $3_1 | 0) + 1280 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    label$6 : while (1) {
     $4_1 = $6_1;
     HEAP16[(($0_1 + ($3_1 << 1 | 0) | 0) + 512 | 0) >> 1] = $4_1;
     $6_1 = $4_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     if (($5_1 | 0) == (HEAPU8[(($0_1 + $3_1 | 0) + 1280 | 0) >> 0] | 0 | 0)) {
      continue label$6
     }
     break label$6;
    };
    if (($4_1 | 0) < (1 << $5_1 | 0 | 0)) {
     break label$5
    }
    HEAP32[(0 + 96956 | 0) >> 2] = 66291;
    return 0 | 0;
   }
   HEAP32[($2_1 + 1540 | 0) >> 2] = $6_1 << (16 - $5_1 | 0) | 0;
   $6_1 = $6_1 << 1 | 0;
   $5_1 = $5_1 + 1 | 0;
   if (($5_1 | 0) != (17 | 0)) {
    continue label$4
   }
   break label$4;
  };
  HEAP32[($0_1 + 1608 | 0) >> 2] = -1;
  $6_1 = $411($0_1 | 0, 255 | 0, 512 | 0) | 0;
  $4_1 = 1;
  label$7 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$7
   }
   $0_1 = 0;
   label$8 : while (1) {
    label$9 : {
     $4_1 = HEAPU8[(($6_1 + $0_1 | 0) + 1280 | 0) >> 0] | 0;
     if ($4_1 >>> 0 > 9 >>> 0) {
      break label$9
     }
     $4_1 = 9 - $4_1 | 0;
     $411($6_1 + ((HEAPU16[(($6_1 + ($0_1 << 1 | 0) | 0) + 512 | 0) >> 1] | 0) << $4_1 | 0) | 0 | 0, $0_1 | 0, 1 << $4_1 | 0 | 0) | 0;
    }
    $4_1 = 1;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) != ($3_1 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  return $4_1 | 0;
 }
 
 function $397($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $13_1 = 0, $8_1 = 0, $16_1 = 0, $23_1 = 0, $9_1 = 0, $26_1 = 0, $24_1 = 0, $27_1 = 0, $25_1 = 0, $18_1 = 0, $20_1 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0, $11_1 = 0, $10_1 = 0, $28_1 = 0, $17_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $291_1 = 0, $296_1 = 0, $309_1 = 0, $320_1 = 0, $336_1 = 0, $578_1 = 0, $583_1 = 0, $596_1 = 0, $607_1 = 0, $623_1 = 0;
  $8_1 = HEAP32[$0_1 >> 2] | 0;
  $9_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  $10_1 = $9_1 + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $11_1 = ($9_1 | 0) == ($3_1 | 0);
     if ($11_1) {
      break label$3
     }
     if (($10_1 | 0) != ($3_1 | 0)) {
      break label$2
     }
    }
    $12_1 = Math_imul($4_1, $3_1);
    $13_1 = $483(Math_imul($12_1, $5_1) | 0) | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $13_1;
    label$4 : {
     if ($13_1) {
      break label$4
     }
     $13_1 = 66853;
     break label$1;
    }
    $14_1 = Math_imul($9_1, $4_1);
    $15_1 = (Math_imul($14_1, $6_1) + 7 | 0) >>> 3 | 0;
    $16_1 = Math_imul($15_1 + 1 | 0, $5_1);
    label$5 : {
     label$6 : {
      if ((HEAP32[$8_1 >> 2] | 0 | 0) != ($4_1 | 0)) {
       break label$6
      }
      if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
       break label$6
      }
      $13_1 = 66232;
      if (($16_1 | 0) == ($2_1 | 0)) {
       break label$5
      }
      break label$1;
     }
     $13_1 = 66232;
     if ($16_1 >>> 0 > $2_1 >>> 0) {
      break label$1
     }
    }
    label$7 : {
     if ($5_1) {
      break label$7
     }
     return 1 | 0;
    }
    $17_1 = ($6_1 | 0) < (8 | 0) | $11_1 | 0;
    $18_1 = $4_1 + -1 | 0;
    $19_1 = $12_1 - $15_1 | 0;
    $20_1 = 0;
    $21_1 = 0 - $12_1 | 0;
    $22_1 = ($6_1 | 0) > (7 | 0);
    label$8 : while (1) {
     label$9 : {
      $23_1 = HEAPU8[$1_1 >> 0] | 0;
      if ($23_1 >>> 0 <= 4 >>> 0) {
       break label$9
      }
      $13_1 = 66430;
      break label$1;
     }
     $13_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + Math_imul($20_1, $12_1) | 0;
     $24_1 = $13_1;
     $16_1 = $9_1;
     $25_1 = $4_1;
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         if ($22_1) {
          break label$13
         }
         if ($15_1 >>> 0 > $4_1 >>> 0) {
          break label$12
         }
         $24_1 = $13_1 + $19_1 | 0;
         $16_1 = 1;
         $25_1 = $15_1;
        }
        label$14 : {
         if ($20_1) {
          break label$14
         }
         $23_1 = HEAPU8[($23_1 + 71468 | 0) >> 0] | 0;
        }
        $2_1 = $1_1 + 1 | 0;
        $26_1 = $13_1 + $21_1 | 0;
        $13_1 = 0;
        label$15 : {
         if (($16_1 | 0) < (1 | 0)) {
          break label$15
         }
         label$16 : while (1) {
          label$17 : {
           label$18 : {
            label$19 : {
             switch ($23_1 & 255 | 0 | 0) {
             case 0:
              $8_1 = HEAPU8[($2_1 + $13_1 | 0) >> 0] | 0;
              break label$18;
             case 1:
              $8_1 = HEAPU8[($2_1 + $13_1 | 0) >> 0] | 0;
              break label$18;
             case 2:
              $8_1 = (HEAPU8[($26_1 + $13_1 | 0) >> 0] | 0) + (HEAPU8[($2_1 + $13_1 | 0) >> 0] | 0) | 0;
              break label$18;
             case 3:
              $8_1 = ((HEAPU8[($26_1 + $13_1 | 0) >> 0] | 0) >>> 1 | 0) + (HEAPU8[($2_1 + $13_1 | 0) >> 0] | 0) | 0;
              break label$18;
             case 4:
              $8_1 = (HEAPU8[($26_1 + $13_1 | 0) >> 0] | 0) + (HEAPU8[($2_1 + $13_1 | 0) >> 0] | 0) | 0;
              break label$18;
             case 5:
              $8_1 = HEAPU8[($2_1 + $13_1 | 0) >> 0] | 0;
              break label$18;
             case 6:
              break label$19;
             default:
              break label$17;
             };
            }
            $8_1 = HEAPU8[($2_1 + $13_1 | 0) >> 0] | 0;
           }
           HEAP8[($24_1 + $13_1 | 0) >> 0] = $8_1;
          }
          $13_1 = $13_1 + 1 | 0;
          if (($13_1 | 0) != ($16_1 | 0)) {
           continue label$16
          }
          break label$16;
         };
        }
        label$26 : {
         label$27 : {
          if (($6_1 | 0) != (8 | 0)) {
           break label$27
          }
          label$28 : {
           if ($11_1) {
            break label$28
           }
           HEAP8[($24_1 + $9_1 | 0) >> 0] = 255;
          }
          $1_1 = $2_1 + $9_1 | 0;
          $13_1 = $3_1;
          break label$26;
         }
         $1_1 = $1_1 + 2 | 0;
         $13_1 = 1;
        }
        $2_1 = $26_1 + $13_1 | 0;
        $13_1 = $24_1 + $13_1 | 0;
        label$29 : {
         if (!$17_1) {
          break label$29
         }
         $8_1 = Math_imul($25_1 + -1 | 0, $9_1);
         label$30 : {
          label$31 : {
           switch ($23_1 & 255 | 0 | 0) {
           case 0:
            $410($13_1 | 0, $1_1 | 0, $8_1 | 0) | 0;
            $1_1 = $1_1 + $8_1 | 0;
            break label$10;
           case 1:
            $2_1 = 0;
            if (($8_1 | 0) <= (0 | 0)) {
             break label$30
            }
            label$38 : while (1) {
             HEAP8[($13_1 + $2_1 | 0) >> 0] = (HEAPU8[($13_1 + ($2_1 - $16_1 | 0) | 0) >> 0] | 0) + (HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0) | 0;
             $2_1 = $2_1 + 1 | 0;
             if (($2_1 | 0) != ($8_1 | 0)) {
              continue label$38
             }
             break label$30;
            };
           case 2:
            $16_1 = 0;
            if (($8_1 | 0) <= (0 | 0)) {
             break label$30
            }
            label$39 : while (1) {
             HEAP8[($13_1 + $16_1 | 0) >> 0] = (HEAPU8[($2_1 + $16_1 | 0) >> 0] | 0) + (HEAPU8[($1_1 + $16_1 | 0) >> 0] | 0) | 0;
             $16_1 = $16_1 + 1 | 0;
             if (($16_1 | 0) != ($8_1 | 0)) {
              continue label$39
             }
             break label$30;
            };
           case 3:
            $23_1 = 0;
            if (($8_1 | 0) <= (0 | 0)) {
             break label$30
            }
            label$40 : while (1) {
             HEAP8[($13_1 + $23_1 | 0) >> 0] = (HEAPU8[($1_1 + $23_1 | 0) >> 0] | 0) + (((HEAPU8[($13_1 + ($23_1 - $16_1 | 0) | 0) >> 0] | 0) + (HEAPU8[($2_1 + $23_1 | 0) >> 0] | 0) | 0) >>> 1 | 0) | 0;
             $23_1 = $23_1 + 1 | 0;
             if (($23_1 | 0) != ($8_1 | 0)) {
              continue label$40
             }
             break label$30;
            };
           case 4:
            $23_1 = 0;
            if (($8_1 | 0) <= (0 | 0)) {
             break label$30
            }
            label$41 : while (1) {
             $25_1 = $23_1 - $16_1 | 0;
             $24_1 = HEAPU8[($2_1 + $25_1 | 0) >> 0] | 0;
             $291_1 = $24_1;
             $26_1 = HEAPU8[($2_1 + $23_1 | 0) >> 0] | 0;
             $296_1 = $26_1;
             $25_1 = HEAPU8[($13_1 + $25_1 | 0) >> 0] | 0;
             $27_1 = ($26_1 + $25_1 | 0) - $24_1 | 0;
             $26_1 = $27_1 - $26_1 | 0;
             $309_1 = $26_1;
             $26_1 = $26_1 >> 31 | 0;
             $26_1 = ($309_1 ^ $26_1 | 0) - $26_1 | 0;
             $24_1 = $27_1 - $24_1 | 0;
             $320_1 = $24_1;
             $24_1 = $24_1 >> 31 | 0;
             $24_1 = ($320_1 ^ $24_1 | 0) - $24_1 | 0;
             $28_1 = $26_1 >>> 0 > $24_1 >>> 0 ? $291_1 : $296_1;
             $27_1 = $27_1 - $25_1 | 0;
             $336_1 = $27_1;
             $27_1 = $27_1 >> 31 | 0;
             $27_1 = ($336_1 ^ $27_1 | 0) - $27_1 | 0;
             HEAP8[($13_1 + $23_1 | 0) >> 0] = ($27_1 >>> 0 > $26_1 >>> 0 ? $28_1 : $27_1 >>> 0 > $24_1 >>> 0 ? $28_1 : $25_1) + (HEAPU8[($1_1 + $23_1 | 0) >> 0] | 0) | 0;
             $23_1 = $23_1 + 1 | 0;
             if (($23_1 | 0) != ($8_1 | 0)) {
              continue label$41
             }
             break label$30;
            };
           case 5:
            $2_1 = 0;
            if (($8_1 | 0) <= (0 | 0)) {
             break label$30
            }
            label$42 : while (1) {
             HEAP8[($13_1 + $2_1 | 0) >> 0] = ((HEAPU8[($13_1 + ($2_1 - $16_1 | 0) | 0) >> 0] | 0) >>> 1 | 0) + (HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0) | 0;
             $2_1 = $2_1 + 1 | 0;
             if (($2_1 | 0) != ($8_1 | 0)) {
              continue label$42
             }
             break label$30;
            };
           case 6:
            break label$31;
           default:
            break label$30;
           };
          }
          $2_1 = 0;
          if (($8_1 | 0) <= (0 | 0)) {
           break label$30
          }
          label$43 : while (1) {
           HEAP8[($13_1 + $2_1 | 0) >> 0] = (HEAPU8[($13_1 + ($2_1 - $16_1 | 0) | 0) >> 0] | 0) + (HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0) | 0;
           $2_1 = $2_1 + 1 | 0;
           if (($2_1 | 0) != ($8_1 | 0)) {
            continue label$43
           }
           break label$43;
          };
         }
         $1_1 = $1_1 + $8_1 | 0;
         break label$10;
        }
        if (($10_1 | 0) != ($3_1 | 0)) {
         break label$11
        }
        label$44 : {
         switch ($23_1 & 255 | 0 | 0) {
         case 0:
          $2_1 = $18_1;
          if (!$2_1) {
           break label$10
          }
          label$51 : while (1) {
           $8_1 = 0;
           label$52 : {
            if (($9_1 | 0) < (1 | 0)) {
             break label$52
            }
            label$53 : while (1) {
             HEAP8[($13_1 + $8_1 | 0) >> 0] = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
             $8_1 = $8_1 + 1 | 0;
             if (($8_1 | 0) != ($9_1 | 0)) {
              continue label$53
             }
             break label$53;
            };
           }
           HEAP8[($13_1 + $9_1 | 0) >> 0] = 255;
           $13_1 = $13_1 + $3_1 | 0;
           $1_1 = $1_1 + $9_1 | 0;
           $2_1 = $2_1 + -1 | 0;
           if (!$2_1) {
            break label$10
           }
           continue label$51;
          };
         case 1:
          $2_1 = $18_1;
          if (!$2_1) {
           break label$10
          }
          label$54 : while (1) {
           $8_1 = 0;
           label$55 : {
            if (($9_1 | 0) < (1 | 0)) {
             break label$55
            }
            label$56 : while (1) {
             HEAP8[($13_1 + $8_1 | 0) >> 0] = (HEAPU8[($13_1 + ($8_1 - $3_1 | 0) | 0) >> 0] | 0) + (HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0) | 0;
             $8_1 = $8_1 + 1 | 0;
             if (($8_1 | 0) != ($9_1 | 0)) {
              continue label$56
             }
             break label$56;
            };
           }
           HEAP8[($13_1 + $9_1 | 0) >> 0] = 255;
           $13_1 = $13_1 + $3_1 | 0;
           $1_1 = $1_1 + $9_1 | 0;
           $2_1 = $2_1 + -1 | 0;
           if (!$2_1) {
            break label$10
           }
           continue label$54;
          };
         case 2:
          $16_1 = $18_1;
          if (!$16_1) {
           break label$10
          }
          label$57 : while (1) {
           $8_1 = 0;
           label$58 : {
            if (($9_1 | 0) < (1 | 0)) {
             break label$58
            }
            label$59 : while (1) {
             HEAP8[($13_1 + $8_1 | 0) >> 0] = (HEAPU8[($2_1 + $8_1 | 0) >> 0] | 0) + (HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0) | 0;
             $8_1 = $8_1 + 1 | 0;
             if (($8_1 | 0) != ($9_1 | 0)) {
              continue label$59
             }
             break label$59;
            };
           }
           HEAP8[($13_1 + $9_1 | 0) >> 0] = 255;
           $2_1 = $2_1 + $3_1 | 0;
           $13_1 = $13_1 + $3_1 | 0;
           $1_1 = $1_1 + $9_1 | 0;
           $16_1 = $16_1 + -1 | 0;
           if (!$16_1) {
            break label$10
           }
           continue label$57;
          };
         case 3:
          $16_1 = $18_1;
          if (!$16_1) {
           break label$10
          }
          label$60 : while (1) {
           $8_1 = 0;
           label$61 : {
            if (($9_1 | 0) < (1 | 0)) {
             break label$61
            }
            label$62 : while (1) {
             HEAP8[($13_1 + $8_1 | 0) >> 0] = (HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0) + (((HEAPU8[($13_1 + ($8_1 - $3_1 | 0) | 0) >> 0] | 0) + (HEAPU8[($2_1 + $8_1 | 0) >> 0] | 0) | 0) >>> 1 | 0) | 0;
             $8_1 = $8_1 + 1 | 0;
             if (($8_1 | 0) != ($9_1 | 0)) {
              continue label$62
             }
             break label$62;
            };
           }
           HEAP8[($13_1 + $9_1 | 0) >> 0] = 255;
           $2_1 = $2_1 + $3_1 | 0;
           $13_1 = $13_1 + $3_1 | 0;
           $1_1 = $1_1 + $9_1 | 0;
           $16_1 = $16_1 + -1 | 0;
           if (!$16_1) {
            break label$10
           }
           continue label$60;
          };
         case 4:
          $27_1 = $18_1;
          if (!$27_1) {
           break label$10
          }
          label$63 : while (1) {
           $8_1 = 0;
           label$64 : {
            if (($9_1 | 0) < (1 | 0)) {
             break label$64
            }
            label$65 : while (1) {
             $24_1 = $8_1 - $3_1 | 0;
             $16_1 = HEAPU8[($2_1 + $24_1 | 0) >> 0] | 0;
             $578_1 = $16_1;
             $23_1 = HEAPU8[($2_1 + $8_1 | 0) >> 0] | 0;
             $583_1 = $23_1;
             $24_1 = HEAPU8[($13_1 + $24_1 | 0) >> 0] | 0;
             $26_1 = ($23_1 + $24_1 | 0) - $16_1 | 0;
             $23_1 = $26_1 - $23_1 | 0;
             $596_1 = $23_1;
             $23_1 = $23_1 >> 31 | 0;
             $23_1 = ($596_1 ^ $23_1 | 0) - $23_1 | 0;
             $16_1 = $26_1 - $16_1 | 0;
             $607_1 = $16_1;
             $16_1 = $16_1 >> 31 | 0;
             $16_1 = ($607_1 ^ $16_1 | 0) - $16_1 | 0;
             $25_1 = $23_1 >>> 0 > $16_1 >>> 0 ? $578_1 : $583_1;
             $26_1 = $26_1 - $24_1 | 0;
             $623_1 = $26_1;
             $26_1 = $26_1 >> 31 | 0;
             $26_1 = ($623_1 ^ $26_1 | 0) - $26_1 | 0;
             HEAP8[($13_1 + $8_1 | 0) >> 0] = ($26_1 >>> 0 > $23_1 >>> 0 ? $25_1 : $26_1 >>> 0 > $16_1 >>> 0 ? $25_1 : $24_1) + (HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0) | 0;
             $8_1 = $8_1 + 1 | 0;
             if (($8_1 | 0) != ($9_1 | 0)) {
              continue label$65
             }
             break label$65;
            };
           }
           HEAP8[($13_1 + $9_1 | 0) >> 0] = 255;
           $2_1 = $2_1 + $3_1 | 0;
           $13_1 = $13_1 + $3_1 | 0;
           $1_1 = $1_1 + $9_1 | 0;
           $27_1 = $27_1 + -1 | 0;
           if (!$27_1) {
            break label$10
           }
           continue label$63;
          };
         case 5:
          $2_1 = $18_1;
          if (!$2_1) {
           break label$10
          }
          label$66 : while (1) {
           $8_1 = 0;
           label$67 : {
            if (($9_1 | 0) < (1 | 0)) {
             break label$67
            }
            label$68 : while (1) {
             HEAP8[($13_1 + $8_1 | 0) >> 0] = ((HEAPU8[($13_1 + ($8_1 - $3_1 | 0) | 0) >> 0] | 0) >>> 1 | 0) + (HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0) | 0;
             $8_1 = $8_1 + 1 | 0;
             if (($8_1 | 0) != ($9_1 | 0)) {
              continue label$68
             }
             break label$68;
            };
           }
           HEAP8[($13_1 + $9_1 | 0) >> 0] = 255;
           $13_1 = $13_1 + $3_1 | 0;
           $1_1 = $1_1 + $9_1 | 0;
           $2_1 = $2_1 + -1 | 0;
           if (!$2_1) {
            break label$10
           }
           continue label$66;
          };
         case 6:
          break label$44;
         default:
          break label$10;
         };
        }
        $2_1 = $18_1;
        if (!$2_1) {
         break label$10
        }
        label$69 : while (1) {
         $8_1 = 0;
         label$70 : {
          if (($9_1 | 0) < (1 | 0)) {
           break label$70
          }
          label$71 : while (1) {
           HEAP8[($13_1 + $8_1 | 0) >> 0] = (HEAPU8[($13_1 + ($8_1 - $3_1 | 0) | 0) >> 0] | 0) + (HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0) | 0;
           $8_1 = $8_1 + 1 | 0;
           if (($8_1 | 0) != ($9_1 | 0)) {
            continue label$71
           }
           break label$71;
          };
         }
         HEAP8[($13_1 + $9_1 | 0) >> 0] = 255;
         $13_1 = $13_1 + $3_1 | 0;
         $1_1 = $1_1 + $9_1 | 0;
         $2_1 = $2_1 + -1 | 0;
         if (!$2_1) {
          break label$10
         }
         continue label$69;
        };
       }
       fimport$54(65734 | 0, 67153 | 0, 4011 | 0, 65794 | 0);
       wasm2js_trap();
      }
      fimport$54(66836 | 0, 67153 | 0, 4064 | 0, 65794 | 0);
      wasm2js_trap();
     }
     $20_1 = $20_1 + 1 | 0;
     if (($20_1 | 0) != ($5_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
    $13_1 = 1;
    label$72 : {
     if (($6_1 | 0) > (7 | 0)) {
      break label$72
     }
     $26_1 = $4_1 + -1 | 0;
     $24_1 = 0 - $15_1 | 0;
     $25_1 = $6_1 + 71320 | 0;
     $20_1 = ($14_1 | 0) > (7 | 0);
     $16_1 = 0;
     label$73 : while (1) {
      $23_1 = Math_imul($16_1, $12_1);
      $13_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $23_1 | 0;
      $1_1 = $13_1 + $12_1 | 0;
      $8_1 = 1;
      label$74 : {
       if ($7_1) {
        break label$74
       }
       $8_1 = HEAPU8[$25_1 >> 0] | 0;
      }
      $1_1 = $1_1 + $24_1 | 0;
      label$75 : {
       label$76 : {
        switch ($6_1 + -1 | 0 | 0) {
        case 3:
         $3_1 = $14_1;
         label$79 : {
          if (($3_1 | 0) < (2 | 0)) {
           break label$79
          }
          label$80 : while (1) {
           HEAP8[$13_1 >> 0] = Math_imul((HEAPU8[$1_1 >> 0] | 0) >>> 4 | 0, $8_1);
           HEAP8[($13_1 + 1 | 0) >> 0] = Math_imul((HEAPU8[$1_1 >> 0] | 0) & 15 | 0, $8_1);
           $1_1 = $1_1 + 1 | 0;
           $13_1 = $13_1 + 2 | 0;
           $2_1 = $3_1 >>> 0 > 3 >>> 0;
           $3_1 = $3_1 + -2 | 0;
           if ($2_1) {
            continue label$80
           }
           break label$80;
          };
         }
         if (($3_1 | 0) != (1 | 0)) {
          break label$75
         }
         HEAP8[$13_1 >> 0] = Math_imul((HEAPU8[$1_1 >> 0] | 0) >>> 4 | 0, $8_1);
         break label$75;
        case 1:
         $3_1 = $14_1;
         label$81 : {
          if (($3_1 | 0) <= (3 | 0)) {
           break label$81
          }
          label$82 : while (1) {
           HEAP8[$13_1 >> 0] = Math_imul((HEAPU8[$1_1 >> 0] | 0) >>> 6 | 0, $8_1);
           HEAP8[($13_1 + 1 | 0) >> 0] = Math_imul(((HEAPU8[$1_1 >> 0] | 0) >>> 4 | 0) & 3 | 0, $8_1);
           HEAP8[($13_1 + 2 | 0) >> 0] = Math_imul(((HEAPU8[$1_1 >> 0] | 0) >>> 2 | 0) & 3 | 0, $8_1);
           HEAP8[($13_1 + 3 | 0) >> 0] = Math_imul((HEAPU8[$1_1 >> 0] | 0) & 3 | 0, $8_1);
           $1_1 = $1_1 + 1 | 0;
           $13_1 = $13_1 + 4 | 0;
           $2_1 = $3_1 >>> 0 > 7 >>> 0;
           $3_1 = $3_1 + -4 | 0;
           if ($2_1) {
            continue label$82
           }
           break label$82;
          };
         }
         if (($3_1 | 0) < (1 | 0)) {
          break label$75
         }
         HEAP8[$13_1 >> 0] = Math_imul((HEAPU8[$1_1 >> 0] | 0) >>> 6 | 0, $8_1);
         if (($3_1 | 0) == (1 | 0)) {
          break label$75
         }
         HEAP8[($13_1 + 1 | 0) >> 0] = Math_imul(((HEAPU8[$1_1 >> 0] | 0) >>> 4 | 0) & 3 | 0, $8_1);
         if ($3_1 >>> 0 < 3 >>> 0) {
          break label$75
         }
         HEAP8[($13_1 + 2 | 0) >> 0] = Math_imul(((HEAPU8[$1_1 >> 0] | 0) >>> 2 | 0) & 3 | 0, $8_1);
         break label$75;
        case 0:
         break label$76;
        default:
         break label$75;
        };
       }
       $3_1 = $14_1;
       label$83 : {
        if (!$20_1) {
         break label$83
        }
        label$84 : while (1) {
         HEAP8[$13_1 >> 0] = ((HEAP8[$1_1 >> 0] | 0) >>> 7 | 0) & $8_1 | 0;
         HEAP8[($13_1 + 1 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 1 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
         HEAP8[($13_1 + 2 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 2 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
         HEAP8[($13_1 + 3 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 3 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
         HEAP8[($13_1 + 4 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 4 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
         HEAP8[($13_1 + 5 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 5 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
         HEAP8[($13_1 + 6 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 6 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
         HEAP8[($13_1 + 7 | 0) >> 0] = (0 - ((HEAPU8[$1_1 >> 0] | 0) & 1 | 0) | 0) & $8_1 | 0;
         $1_1 = $1_1 + 1 | 0;
         $13_1 = $13_1 + 8 | 0;
         $2_1 = $3_1 >>> 0 > 15 >>> 0;
         $3_1 = $3_1 + -8 | 0;
         if ($2_1) {
          continue label$84
         }
         break label$84;
        };
       }
       if (($3_1 | 0) < (1 | 0)) {
        break label$75
       }
       HEAP8[$13_1 >> 0] = ((HEAP8[$1_1 >> 0] | 0) >>> 7 | 0) & $8_1 | 0;
       if (($3_1 | 0) == (1 | 0)) {
        break label$75
       }
       HEAP8[($13_1 + 1 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 1 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
       if ($3_1 >>> 0 < 3 >>> 0) {
        break label$75
       }
       HEAP8[($13_1 + 2 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 2 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
       if (($3_1 | 0) == (3 | 0)) {
        break label$75
       }
       HEAP8[($13_1 + 3 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 3 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
       if ($3_1 >>> 0 < 5 >>> 0) {
        break label$75
       }
       HEAP8[($13_1 + 4 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 4 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
       if (($3_1 | 0) == (5 | 0)) {
        break label$75
       }
       HEAP8[($13_1 + 5 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 5 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
       if ($3_1 >>> 0 < 7 >>> 0) {
        break label$75
       }
       HEAP8[($13_1 + 6 | 0) >> 0] = (((HEAPU8[$1_1 >> 0] | 0) << 6 | 0) << 24 >> 24 >>> 7 | 0) & $8_1 | 0;
      }
      label$85 : {
       if ($11_1) {
        break label$85
       }
       $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $23_1 | 0;
       label$86 : {
        switch ($9_1 + -1 | 0 | 0) {
        case 0:
         $13_1 = $26_1;
         if (($13_1 | 0) < (0 | 0)) {
          break label$85
         }
         label$89 : while (1) {
          $8_1 = $1_1 + ($13_1 << 1 | 0) | 0;
          HEAP8[($8_1 + 1 | 0) >> 0] = 255;
          HEAP8[$8_1 >> 0] = HEAPU8[($1_1 + $13_1 | 0) >> 0] | 0;
          $8_1 = ($13_1 | 0) > (0 | 0);
          $13_1 = $13_1 + -1 | 0;
          if ($8_1) {
           continue label$89
          }
          break label$85;
         };
        default:
         fimport$54(69092 | 0, 67153 | 0, 4144 | 0, 65794 | 0);
         wasm2js_trap();
        case 2:
         break label$86;
        };
       }
       $13_1 = $26_1;
       if (($13_1 | 0) <= (-1 | 0)) {
        break label$85
       }
       label$90 : while (1) {
        $8_1 = $1_1 + ($13_1 << 2 | 0) | 0;
        HEAP8[($8_1 + 3 | 0) >> 0] = 255;
        $3_1 = $1_1 + Math_imul($13_1, 3) | 0;
        HEAP8[($8_1 + 2 | 0) >> 0] = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        HEAP8[($8_1 + 1 | 0) >> 0] = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        HEAP8[$8_1 >> 0] = HEAPU8[$3_1 >> 0] | 0;
        $8_1 = ($13_1 | 0) > (0 | 0);
        $13_1 = $13_1 + -1 | 0;
        if ($8_1) {
         continue label$90
        }
        break label$90;
       };
      }
      $13_1 = 1;
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != ($5_1 | 0)) {
       continue label$73
      }
      break label$73;
     };
    }
    return $13_1 | 0;
   }
   fimport$54(69121 | 0, 67153 | 0, 3989 | 0, 65794 | 0);
   wasm2js_trap();
  }
  HEAP32[(0 + 96956 | 0) >> 2] = $13_1;
  return 0 | 0;
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  $2_1 = Math_imul(HEAP32[($1_1 + 4 | 0) >> 2] | 0, HEAP32[$1_1 >> 2] | 0);
  $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    switch ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + -3 | 0 | 0) {
    case 0:
     if (!$2_1) {
      break label$1
     }
     $1_1 = 0;
     label$5 : while (1) {
      $3_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[$0_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $3_1;
      $0_1 = $0_1 + 3 | 0;
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$5
      }
      break label$1;
     };
    default:
     fimport$54(69018 | 0, 67153 | 0, 4290 | 0, 67489 | 0);
     wasm2js_trap();
    case 1:
     break label$2;
    };
   }
   $4_1 = 0;
   label$6 : {
    if (!(HEAP32[(0 + 96964 | 0) >> 2] | 0)) {
     break label$6
    }
    if (!$2_1) {
     break label$1
    }
    label$7 : while (1) {
     $5_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
     $1_1 = HEAPU8[$0_1 >> 0] | 0;
     label$8 : {
      label$9 : {
       $3_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       if (!$3_1) {
        break label$9
       }
       HEAP8[$0_1 >> 0] = (Math_imul($5_1 & 255 | 0, 255) >>> 0) / ($3_1 >>> 0) | 0;
       HEAP8[($0_1 + 1 | 0) >> 0] = (Math_imul(HEAPU8[($0_1 + 1 | 0) >> 0] | 0, 255) >>> 0) / ($3_1 >>> 0) | 0;
       $1_1 = (Math_imul($1_1 & 255 | 0, 255) >>> 0) / ($3_1 >>> 0) | 0;
       break label$8;
      }
      HEAP8[$0_1 >> 0] = $5_1;
     }
     HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
     $0_1 = $0_1 + 4 | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($2_1 | 0)) {
      continue label$7
     }
     break label$1;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $1_1 = 0;
   label$10 : while (1) {
    $3_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[$0_1 >> 0] | 0;
    HEAP8[$0_1 >> 0] = $3_1;
    $0_1 = $0_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$10
    }
    break label$10;
   };
  }
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  return $471(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $400() {
  var $0_1 = 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 97296 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0 | 0]();
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[(0 + 97296 | 0) >> 2] | 0;
  HEAP32[(0 + 97296 | 0) >> 2] = $0_1;
 }
 
 function $402() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  fimport$60(95948 | 0, 67753 | 0);
  fimport$61(95972 | 0, 66866 | 0, 1 | 0, 1 | 0, 0 | 0);
  fimport$62(95984 | 0, 66592 | 0, 1 | 0, -128 | 0, 127 | 0);
  fimport$62(96008 | 0, 66585 | 0, 1 | 0, -128 | 0, 127 | 0);
  fimport$62(95996 | 0, 66583 | 0, 1 | 0, 0 | 0, 255 | 0);
  fimport$62(96020 | 0, 65928 | 0, 2 | 0, -32768 | 0, 32767 | 0);
  fimport$62(96032 | 0, 65919 | 0, 2 | 0, 0 | 0, 65535 | 0);
  fimport$62(96044 | 0, 66020 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  fimport$62(96056 | 0, 66011 | 0, 4 | 0, 0 | 0, -1 | 0);
  fimport$62(96068 | 0, 67248 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  fimport$62(96080 | 0, 67239 | 0, 4 | 0, 0 | 0, -1 | 0);
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 2147483647;
  $2089(96092 | 0, 66193 | 0, 8 | 0, 0 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  $2089(96104 | 0, 66192 | 0, 8 | 0, 0 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
  fimport$63(96116 | 0, 66112 | 0, 4 | 0);
  fimport$63(96128 | 0, 67531 | 0, 8 | 0);
  fimport$64(71040 | 0, 67279 | 0);
  fimport$64(72096 | 0, 68782 | 0);
  fimport$65(72168 | 0, 4 | 0, 67253 | 0);
  fimport$65(72244 | 0, 2 | 0, 67291 | 0);
  fimport$65(72320 | 0, 4 | 0, 67306 | 0);
  fimport$66(70928 | 0, 67003 | 0);
  fimport$67(72360 | 0, 0 | 0, 68713 | 0);
  fimport$67(72400 | 0, 0 | 0, 68815 | 0);
  fimport$67(72440 | 0, 1 | 0, 68743 | 0);
  fimport$67(72480 | 0, 2 | 0, 68345 | 0);
  fimport$67(72520 | 0, 3 | 0, 68376 | 0);
  fimport$67(72560 | 0, 4 | 0, 68416 | 0);
  fimport$67(72600 | 0, 5 | 0, 68445 | 0);
  fimport$67(72640 | 0, 4 | 0, 68852 | 0);
  fimport$67(72680 | 0, 5 | 0, 68882 | 0);
  fimport$67(72400 | 0, 0 | 0, 68547 | 0);
  fimport$67(72440 | 0, 1 | 0, 68514 | 0);
  fimport$67(72480 | 0, 2 | 0, 68613 | 0);
  fimport$67(72520 | 0, 3 | 0, 68579 | 0);
  fimport$67(72560 | 0, 4 | 0, 68680 | 0);
  fimport$67(72600 | 0, 5 | 0, 68646 | 0);
  fimport$67(72720 | 0, 6 | 0, 68483 | 0);
  fimport$67(72760 | 0, 7 | 0, 68921 | 0);
 }
 
 function $403() {
  HEAP32[(0 + 97300 | 0) >> 2] = 49;
  HEAP32[(0 + 97304 | 0) >> 2] = 0;
  $402();
  HEAP32[(0 + 97304 | 0) >> 2] = HEAP32[(0 + 97296 | 0) >> 2] | 0;
  HEAP32[(0 + 97296 | 0) >> 2] = 97300;
 }
 
 function $404($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 0 | 0;
 }
 
 function $405($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0.0;
  $0_1 = $0_1 * $0_1;
  $1_1 = $0_1 * $0_1;
  return Math_fround(Math_fround($0_1 * $1_1 * ($0_1 * 2.439044879627741e-05 + -.001388676377460993) + ($1_1 * .04166662332373906 + ($0_1 * -.499999997251031 + 1.0))));
 }
 
 function $406($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = $0_1 * $0_1;
  $2_1 = $1_1 * $0_1;
  return Math_fround(Math_fround($2_1 * ($1_1 * $1_1) * ($1_1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2_1 * ($1_1 * .008333329385889463 + -.16666666641626524) + $0_1)));
 }
 
 function $407($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $21_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $22_1 = 0.0, $13_1 = 0, $14_1 = 0, $9_1 = 0, $8_1 = 0, $20_1 = 0, $10_1 = 0, $18_1 = 0, $12_1 = 0, $23_1 = 0.0, $7_1 = 0, $16_1 = 0, $19_1 = 0, $15_1 = 0, $17_1 = 0, $206_1 = 0, $209_1 = 0, $526_1 = 0.0, $564_1 = 0.0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  label$1 : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 72768 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $21_1 = 0.0;
      break label$3;
     }
     $21_1 = +(HEAP32[(($2_1 << 2 | 0) + 72784 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $21_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $11_1 = 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $14_1 = ($3_1 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$14_1) {
      break label$7
     }
     $21_1 = 0.0;
     break label$6;
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    $21_1 = 0.0;
    label$8 : while (1) {
     $21_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $21_1;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label$5
   }
   break label$5;
  };
  $15_1 = 47 - $8_1 | 0;
  $16_1 = 48 - $8_1 | 0;
  $17_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  label$9 : {
   label$10 : while (1) {
    $21_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    label$11 : {
     $10_1 = ($11_1 | 0) < (1 | 0);
     if ($10_1) {
      break label$11
     }
     label$12 : while (1) {
      $13_1 = $2_1 << 2 | 0;
      label$13 : {
       label$14 : {
        $22_1 = $21_1 * 5.9604644775390625e-08;
        if (!(Math_abs($22_1) < 2147483648.0)) {
         break label$14
        }
        $14_1 = ~~$22_1;
        break label$13;
       }
       $14_1 = -2147483648;
      }
      $13_1 = ($5_1 + 480 | 0) + $13_1 | 0;
      label$15 : {
       label$16 : {
        $22_1 = +($14_1 | 0);
        $21_1 = $22_1 * -16777216.0 + $21_1;
        if (!(Math_abs($21_1) < 2147483648.0)) {
         break label$16
        }
        $14_1 = ~~$21_1;
        break label$15;
       }
       $14_1 = -2147483648;
      }
      HEAP32[$13_1 >> 2] = $14_1;
      $6_1 = $6_1 + -1 | 0;
      $21_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $22_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $21_1 = +$467(+$21_1, $12_1 | 0);
    label$17 : {
     label$18 : {
      $21_1 = $21_1 + +$421(+($21_1 * .125)) * -8.0;
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$18
      }
      $18_1 = ~~$21_1;
      break label$17;
     }
     $18_1 = -2147483648;
    }
    $21_1 = $21_1 - +($18_1 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $19_1 = ($12_1 | 0) < (1 | 0);
         if ($19_1) {
          break label$23
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $206_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $209_1 = $2_1;
         $2_1 = $2_1 >> $16_1 | 0;
         $6_1 = $209_1 - ($2_1 << $16_1 | 0) | 0;
         HEAP32[$206_1 >> 2] = $6_1;
         $20_1 = $6_1 >> $15_1 | 0;
         $18_1 = $2_1 + $18_1 | 0;
         break label$22;
        }
        if ($12_1) {
         break label$21
        }
        $20_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($20_1 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $20_1 = 2;
      if ($21_1 >= .5) {
       break label$20
      }
      $20_1 = 0;
      break label$19;
     }
     $2_1 = 0;
     $14_1 = 0;
     label$24 : {
      if ($10_1) {
       break label$24
      }
      label$25 : while (1) {
       $10_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$10_1 >> 2] | 0;
       $13_1 = 16777215;
       label$26 : {
        label$27 : {
         if ($14_1) {
          break label$27
         }
         $13_1 = 16777216;
         if ($6_1) {
          break label$27
         }
         $14_1 = 0;
         break label$26;
        }
        HEAP32[$10_1 >> 2] = $13_1 - $6_1 | 0;
        $14_1 = 1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$28 : {
      if ($19_1) {
       break label$28
      }
      $2_1 = 8388607;
      label$29 : {
       switch ($17_1 | 0) {
       case 1:
        $2_1 = 4194303;
        break;
       case 0:
        break label$29;
       default:
        break label$28;
       };
      }
      $6_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) & $2_1 | 0;
     }
     $18_1 = $18_1 + 1 | 0;
     if (($20_1 | 0) != (2 | 0)) {
      break label$19
     }
     $21_1 = 1.0 - $21_1;
     $20_1 = 2;
     if (!$14_1) {
      break label$19
     }
     $21_1 = $21_1 - +$467(+(1.0), $12_1 | 0);
    }
    label$31 : {
     if ($21_1 != 0.0) {
      break label$31
     }
     $6_1 = 0;
     $2_1 = $11_1;
     label$32 : {
      if (($2_1 | 0) <= ($9_1 | 0)) {
       break label$32
      }
      label$33 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       $6_1 = HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | $6_1 | 0;
       if (($2_1 | 0) > ($9_1 | 0)) {
        continue label$33
       }
       break label$33;
      };
      if (!$6_1) {
       break label$32
      }
      $8_1 = $12_1;
      label$34 : while (1) {
       $8_1 = $8_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$34
       }
       break label$9;
      };
     }
     $2_1 = 1;
     label$35 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$35
      }
      break label$35;
     };
     $13_1 = $6_1 + $11_1 | 0;
     label$36 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 72784 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $21_1 = 0.0;
      label$37 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        $21_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $21_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
      if (($11_1 | 0) < ($13_1 | 0)) {
       continue label$36
      }
      break label$36;
     };
     $11_1 = $13_1;
     continue label$10;
    }
    break label$10;
   };
   label$39 : {
    label$40 : {
     $21_1 = +$467(+$21_1, 24 - $8_1 | 0 | 0);
     if (!($21_1 >= 16777216.0)) {
      break label$40
     }
     $3_1 = $11_1 << 2 | 0;
     label$41 : {
      label$42 : {
       $22_1 = $21_1 * 5.9604644775390625e-08;
       if (!(Math_abs($22_1) < 2147483648.0)) {
        break label$42
       }
       $2_1 = ~~$22_1;
       break label$41;
      }
      $2_1 = -2147483648;
     }
     $3_1 = ($5_1 + 480 | 0) + $3_1 | 0;
     label$43 : {
      label$44 : {
       $21_1 = +($2_1 | 0) * -16777216.0 + $21_1;
       if (!(Math_abs($21_1) < 2147483648.0)) {
        break label$44
       }
       $6_1 = ~~$21_1;
       break label$43;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$3_1 >> 2] = $6_1;
     $11_1 = $11_1 + 1 | 0;
     break label$39;
    }
    label$45 : {
     label$46 : {
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$46
      }
      $2_1 = ~~$21_1;
      break label$45;
     }
     $2_1 = -2147483648;
    }
    $8_1 = $12_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $21_1 = +$467(+(1.0), $8_1 | 0);
  label$47 : {
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$47
   }
   $3_1 = $11_1;
   label$48 : while (1) {
    $2_1 = $3_1;
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3_1 = $2_1 + -1 | 0;
    $21_1 = $21_1 * 5.9604644775390625e-08;
    if ($2_1) {
     continue label$48
    }
    break label$48;
   };
   $13_1 = 0;
   if (($11_1 | 0) < (0 | 0)) {
    break label$47
   }
   $9_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
   $6_1 = $11_1;
   label$49 : while (1) {
    $0_1 = $9_1 >>> 0 < $13_1 >>> 0 ? $9_1 : $13_1;
    $14_1 = $11_1 - $6_1 | 0;
    $2_1 = 0;
    $21_1 = 0.0;
    label$50 : while (1) {
     $21_1 = +HEAPF64[(($2_1 << 3 | 0) + 75552 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3] + $21_1;
     $3_1 = ($2_1 | 0) != ($0_1 | 0);
     $2_1 = $2_1 + 1 | 0;
     if ($3_1) {
      continue label$50
     }
     break label$50;
    };
    HEAPF64[(($5_1 + 160 | 0) + ($14_1 << 3 | 0) | 0) >> 3] = $21_1;
    $6_1 = $6_1 + -1 | 0;
    $2_1 = ($13_1 | 0) != ($11_1 | 0);
    $13_1 = $13_1 + 1 | 0;
    if ($2_1) {
     continue label$49
    }
    break label$49;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4_1 | 0) {
     case 3:
      $23_1 = 0.0;
      label$56 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$56
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$57 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $526_1 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($526_1 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = $2_1 >>> 0 > 1 >>> 0;
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$57
        }
        break label$57;
       };
       if (($11_1 | 0) < (2 | 0)) {
        break label$56
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$58 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $564_1 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($564_1 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = $2_1 >>> 0 > 2 >>> 0;
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$58
        }
        break label$58;
       };
       $23_1 = 0.0;
       if (($11_1 | 0) <= (1 | 0)) {
        break label$56
       }
       label$59 : while (1) {
        $23_1 = $23_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$59
        }
        break label$59;
       };
      }
      $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($20_1) {
       break label$52
      }
      HEAPF64[$1_1 >> 3] = $21_1;
      $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      HEAPF64[($1_1 + 16 | 0) >> 3] = $23_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $21_1;
      break label$51;
     case 0:
      $21_1 = 0.0;
      label$60 : {
       if (($11_1 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $2_1 = $11_1;
        $11_1 = $2_1 + -1 | 0;
        $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
        if ($2_1) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $21_1 = 0.0;
    label$62 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$62
     }
     $3_1 = $11_1;
     label$63 : while (1) {
      $2_1 = $3_1;
      $3_1 = $2_1 + -1 | 0;
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      if ($2_1) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
    $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $21_1;
    $2_1 = 1;
    label$64 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $20_1 ? -$21_1 : $21_1;
    break label$51;
   }
   HEAPF64[$1_1 >> 3] = -$21_1;
   $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$23_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$21_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $18_1 & 7 | 0 | 0;
 }
 
 function $408($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0.0, $2_1 = 0, $3_1 = 0, $6_1 = 0.0, $8_1 = 0.0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if ($4_1 >>> 0 > 1305022426 >>> 0) {
     break label$2
    }
    $6_1 = +$0_1;
    $7_1 = $6_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $8_1 = $6_1 + $7_1 * -1.5707963109016418 + $7_1 * -1.5893254773528196e-08;
    HEAPF64[$1_1 >> 3] = $8_1;
    $3_1 = $8_1 < -.7853981852531433;
    label$3 : {
     label$4 : {
      if (!(Math_abs($7_1) < 2147483648.0)) {
       break label$4
      }
      $4_1 = ~~$7_1;
      break label$3;
     }
     $4_1 = -2147483648;
    }
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     $7_1 = $7_1 + -1.0;
     HEAPF64[$1_1 >> 3] = $6_1 + $7_1 * -1.5707963109016418 + $7_1 * -1.5893254773528196e-08;
     $4_1 = $4_1 + -1 | 0;
     break label$1;
    }
    if (!($8_1 > .7853981852531433)) {
     break label$1
    }
    $7_1 = $7_1 + 1.0;
    HEAPF64[$1_1 >> 3] = $6_1 + $7_1 * -1.5707963109016418 + $7_1 * -1.5893254773528196e-08;
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   label$6 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$6
    }
    HEAPF64[$1_1 >> 3] = +Math_fround($0_1 - $0_1);
    $4_1 = 0;
    break label$1;
   }
   $5_1 = ($4_1 >>> 23 | 0) + -150 | 0;
   HEAPF64[($2_1 + 8 | 0) >> 3] = +(wasm2js_scratch_store_i32(2, $4_1 - ($5_1 << 23 | 0) | 0), wasm2js_scratch_load_f32());
   $4_1 = $407($2_1 + 8 | 0 | 0, $2_1 | 0, $5_1 | 0, 1 | 0, 0 | 0) | 0;
   $7_1 = +HEAPF64[$2_1 >> 3];
   label$7 : {
    if (($3_1 | 0) > (-1 | 0)) {
     break label$7
    }
    HEAPF64[$1_1 >> 3] = -$7_1;
    $4_1 = 0 - $4_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $7_1;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $409($0_1) {
  $0_1 = Math_fround($0_1);
  var $4_1 = Math_fround(0), $1_1 = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    $4_1 = Math_fround(1.0);
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $4_1 = Math_fround($405(+(+$0_1)));
    break label$1;
   }
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    label$4 : {
     if ($3_1 >>> 0 < 1075235812 >>> 0) {
      break label$4
     }
     $4_1 = Math_fround(-Math_fround($405(+((($2_1 | 0) < (0 | 0) ? 3.141592653589793 : -3.141592653589793) + +$0_1))));
     break label$1;
    }
    $5_1 = +$0_1;
    label$5 : {
     if (($2_1 | 0) > (-1 | 0)) {
      break label$5
     }
     $4_1 = Math_fround($406(+($5_1 + 1.5707963267948966)));
     break label$1;
    }
    $4_1 = Math_fround($406(+(1.5707963267948966 - $5_1)));
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3_1 >>> 0 < 1085271520 >>> 0) {
      break label$7
     }
     $4_1 = Math_fround($405(+((($2_1 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + +$0_1)));
     break label$1;
    }
    label$8 : {
     if (($2_1 | 0) > (-1 | 0)) {
      break label$8
     }
     $4_1 = Math_fround($406(+(-4.71238898038469 - +$0_1)));
     break label$1;
    }
    $4_1 = Math_fround($406(+(+$0_1 + -4.71238898038469)));
    break label$1;
   }
   label$9 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $4_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    switch (($408(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $4_1 = Math_fround($405(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $4_1 = Math_fround($406(+-+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $4_1 = Math_fround(-Math_fround($405(+(+HEAPF64[($1_1 + 8 | 0) >> 3]))));
     break label$1;
    default:
     break label$10;
    };
   }
   $4_1 = Math_fround($406(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($4_1);
 }
 
 function $410($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$68($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($2_1) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $411($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = $1_1;
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $412() {
  return 97308 | 0;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0.0, i64toi32_i32$2 = 0, $2_1 = 0, $2$hi = 0, $1_1 = 0.0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = +fimport$69() / 1.0e3;
    if (!(Math_abs($1_1) < 9223372036854775808.0)) {
     break label$2
    }
    i64toi32_i32$0 = $1_1;
    if (Math_abs(i64toi32_i32$0) >= 1.0) {
     if (i64toi32_i32$0 > 0.0) {
      $7_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $7_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $8_1 = $7_1;
    } else {
     $8_1 = 0
    }
    i64toi32_i32$1 = $8_1;
    $2_1 = ~~i64toi32_i32$0 >>> 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = -2147483648;
   $2_1 = 0;
   $2$hi = i64toi32_i32$1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = $0_1;
   HEAP32[i64toi32_i32$2 >> 2] = $2_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function $414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, $2_1 = 0.0, i64toi32_i32$0 = 0.0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0.0, $9_1 = 0, $10_1 = 0, $4$hi = 0;
  label$1 : {
   if (HEAPU8[(0 + 97312 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP8[(0 + 97313 | 0) >> 0] = fimport$70() | 0;
   HEAP8[97312 >> 0] = 1;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      switch ($0_1 | 0) {
      case 0:
       break label$3;
      case 1:
      case 4:
       break label$5;
      default:
       break label$4;
      };
     }
     if (!(HEAPU8[(0 + 97313 | 0) >> 0] | 0)) {
      break label$4
     }
     $2_1 = +fimport$71();
     break label$2;
    }
    HEAP32[($412() | 0) >> 2] = 28;
    return -1 | 0;
   }
   $2_1 = +fimport$69();
  }
  label$6 : {
   label$7 : {
    $3_1 = $2_1 / 1.0e3;
    if (!(Math_abs($3_1) < 9223372036854775808.0)) {
     break label$7
    }
    i64toi32_i32$0 = $3_1;
    if (Math_abs(i64toi32_i32$0) >= 1.0) {
     if (i64toi32_i32$0 > 0.0) {
      $9_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $9_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $10_1 = $9_1;
    } else {
     $10_1 = 0
    }
    i64toi32_i32$1 = $10_1;
    $4_1 = ~~i64toi32_i32$0 >>> 0;
    $4$hi = i64toi32_i32$1;
    break label$6;
   }
   i64toi32_i32$1 = -2147483648;
   $4_1 = 0;
   $4$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $1_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$8 : {
   label$9 : {
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $2_1 = ($2_1 - (+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0))) * 1.0e3 * 1.0e3;
    if (!(Math_abs($2_1) < 2147483648.0)) {
     break label$9
    }
    $0_1 = ~~$2_1;
    break label$8;
   }
   $0_1 = -2147483648;
  }
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  return 0 | 0;
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $416($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $417($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = 1;
    break label$1;
   }
   $1_1 = !($415($0_1 | 0) | 0);
  }
  $2_1 = $420($0_1 | 0) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $416($0_1 | 0);
  }
  label$4 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 1 | 0) {
    break label$4
   }
   $417($0_1 | 0);
   $1_1 = $447() | 0;
   label$5 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$5
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$6 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$6
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$7 : {
    if ((HEAP32[$1_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$7
    }
    HEAP32[$1_1 >> 2] = $5_1;
   }
   $448();
   $484(HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0);
   $484($0_1 | 0);
  }
  return $3_1 | $2_1 | 0 | 0;
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $2_1 = $415($0_1 | 0) | 0;
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $416($0_1 | 0);
  }
  return ($1_1 >>> 4 | 0) & 1 | 0 | 0;
 }
 
 function $420($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $1_1 = 0;
   label$2 : {
    if (!(HEAP32[(0 + 96752 | 0) >> 2] | 0)) {
     break label$2
    }
    $1_1 = $420(HEAP32[(0 + 96752 | 0) >> 2] | 0 | 0) | 0;
   }
   label$3 : {
    if (!(HEAP32[(0 + 96904 | 0) >> 2] | 0)) {
     break label$3
    }
    $1_1 = $420(HEAP32[(0 + 96904 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
   }
   label$4 : {
    $0_1 = HEAP32[($447() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    label$5 : while (1) {
     $2_1 = 0;
     label$6 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      $2_1 = $415($0_1 | 0) | 0;
     }
     label$7 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $1_1 = $420($0_1 | 0) | 0 | $1_1 | 0;
     }
     label$8 : {
      if (!$2_1) {
       break label$8
      }
      $416($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $448();
   return $1_1 | 0;
  }
  $2_1 = 0;
  label$9 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$9
   }
   $2_1 = $415($0_1 | 0) | 0;
  }
  label$10 : {
   label$11 : {
    label$12 : {
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$12
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
     if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
      break label$12
     }
     $1_1 = -1;
     if ($2_1) {
      break label$11
     }
     break label$10;
    }
    label$13 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$13
     }
     i64toi32_i32$1 = $1_1 - $3_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1_1 = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    if (!$2_1) {
     break label$10
    }
   }
   $416($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $421($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $422($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($469($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $469($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $469($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $423($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $445(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $424($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $4_1 = $3_1 + 16 | 0;
  $7_1 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($482(fimport$75(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break label$5
       }
       $5_1 = $4_1;
       break label$4;
      }
      label$6 : while (1) {
       $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$3
       }
       label$7 : {
        if (($1_1 | 0) > (-1 | 0)) {
         break label$7
        }
        $5_1 = $4_1;
        break label$2;
       }
       $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       $9_1 = $1_1 >>> 0 > $8_1 >>> 0;
       $5_1 = $4_1 + ($9_1 << 3 | 0) | 0;
       $8_1 = $1_1 - ($9_1 ? $8_1 : 0) | 0;
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + $8_1 | 0;
       $4_1 = $4_1 + ($9_1 ? 12 : 4) | 0;
       HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $1_1 | 0;
       $4_1 = $5_1;
       $7_1 = $7_1 - $9_1 | 0;
       if (!($482(fimport$75(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $4_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $1_1 = $2_1;
    break label$1;
   }
   $1_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $1_1 = $2_1 - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $425($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = 0;
  $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($5_1 | 0) != (0 | 0)) | 0;
  $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
  $5_1 = 32;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($482(fimport$76(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($5_1 | 0) > (0 | 0)) {
      break label$2
     }
     $5_1 = $5_1 ? 32 : 16;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | $5_1 | 0;
    break label$1;
   }
   $4_1 = $5_1;
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($5_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + ($5_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$77($426(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $34_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($469(67874 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($412() | 0) >> 2] = 28;
      break label$3;
     }
     $3_1 = $483(1176 | 0) | 0;
     if ($3_1) {
      break label$2
     }
    }
    $3_1 = 0;
    break label$1;
   }
   $411($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if ($469($1_1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1_1 = fimport$73($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$8
     }
     i64toi32_i32$1 = $1_1 | 1024 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $34_1;
     HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     fimport$73($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP32[($3_1 + 80 | 0) >> 2] = -1;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$9 : {
    if ($1_1 & 8 | 0) {
     break label$9
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $2_1;
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    if (fimport$74($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    HEAP32[($3_1 + 80 | 0) >> 2] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 50;
   HEAP32[($3_1 + 36 | 0) >> 2] = 51;
   HEAP32[($3_1 + 32 | 0) >> 2] = 52;
   HEAP32[($3_1 + 12 | 0) >> 2] = 53;
   label$10 : {
    if (HEAPU8[(0 + 97317 | 0) >> 0] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $449($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($469(67874 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($412() | 0) >> 2] = 28;
     break label$2;
    }
    $3_1 = $422($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    HEAP32[($2_1 + 4 | 0) >> 2] = 0;
    $4_1 = 0;
    $0_1 = $479(fimport$72(-100 | 0, $0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $428($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
    fimport$77($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $431($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $415($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    if (($6_1 | 0) != ($7_1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $7_1 = $7_1 - $6_1 | 0;
   $7_1 = $7_1 >>> 0 < $5_1 >>> 0 ? $7_1 : $5_1;
   $410($0_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $7_1 | 0;
   $6_1 = $5_1 - $7_1 | 0;
   $0_1 = $0_1 + $7_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($430($3_1 | 0) | 0) {
       break label$7
      }
      $7_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0]($3_1, $0_1, $6_1) | 0;
      if ($7_1) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $416($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $7_1 | 0;
    $6_1 = $6_1 - $7_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $416($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $432($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $18_1 = 0, $18$hi = 0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 < 3 >>> 0) {
     break label$2
    }
    HEAP32[($412() | 0) >> 2] = 28;
    break label$1;
   }
   label$3 : {
    if (($2_1 | 0) != (1 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$3
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $3_1 - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $1$hi = i64toi32_i32$5;
   }
   label$4 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$1
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $433($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $432($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $415($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $432($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $416($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $434($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  return $433($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $435($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $39_1 = 0, $39$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) ? 1 : 2;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1 | 0]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $13_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $14_1 = 0
     } else {
      $14_1 = 1
     }
     $15_1 = $14_1;
    } else {
     $15_1 = 0
    }
    $13_1 = $15_1;
   }
   if ($13_1) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$4
     }
     $0_1 = $0_1 + 4 | 0;
     break label$3;
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $0_1 = $0_1 + 20 | 0;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[$0_1 >> 2] | 0) - $2_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $39_1 = i64toi32_i32$1;
   $39$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $39$hi;
   i64toi32_i32$0 = $39_1;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$3 | 0;
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $435($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $415($0_1 | 0) | 0;
  i64toi32_i32$0 = $435($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $416($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $437($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  return +(+$467(+$0_1, $1_1 | 0));
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $440($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $441($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $442($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $443($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $445($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $482($2090($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2_1 ? -1 : $1_1;
  i64toi32_i32$2 = $2_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $446($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     if (($1_1 | $0_1 | 0) & 3 | 0) {
      break label$2
     }
     label$4 : while (1) {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1_1 = $1_1 + 4 | 0;
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   label$5 : {
    label$6 : while (1) {
     $3_1 = HEAPU8[$0_1 >> 0] | 0;
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$1
     }
     continue label$6;
    };
   }
   return $3_1 - $4_1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $447() {
  $443(97372 | 0);
  return 97376 | 0;
 }
 
 function $448() {
  $444(97372 | 0);
 }
 
 function $449($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $447() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $448();
  return $0_1 | 0;
 }
 
 function $450($0_1) {
  $0_1 = +$0_1;
  $0_1 = $0_1 - $0_1;
  return +($0_1 / $0_1);
 }
 
 function $451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  return +(+$452(+($0_1 ? -$1_1 : $1_1)) * $1_1);
 }
 
 function $452($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$451($0_1 | 0, +(3105036184601417870297958.0e207)));
 }
 
 function $454($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$451($0_1 | 0, +(1.2882297539194267e-231)));
 }
 
 function $455($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $456($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0.0, $9_1 = 0, $9$hi = 0, i64toi32_i32$4 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $24_1 = 0, $10_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $12_1 = 0.0, $10$hi = 0, $55_1 = 0.0, $57_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $457(+$0_1) | 0;
  $4_1 = $457(+$1_1) | 0;
  $5_1 = $4_1 & 2047 | 0;
  $6_1 = $5_1 + -1086 | 0;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $8$hi = i64toi32_i32$0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $9_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $9$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($3_1 + -2047 | 0) >>> 0 < -2046 >>> 0) {
      break label$3
     }
     $7_1 = 0;
     if ($6_1 >>> 0 > -129 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $8$hi;
     if (!($458($8_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$4
     }
     $11_1 = 1.0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = 1072693248;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $24_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $24_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $10_1 = $24_1;
     $10$hi = i64toi32_i32$0;
     if (!($10_1 | i64toi32_i32$0 | 0)) {
      break label$1
     }
     label$5 : {
      label$6 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 1;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $25_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $9_1 = $25_1;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$2 = -2097152;
       i64toi32_i32$1 = 0;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break label$6
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = -2097152;
       i64toi32_i32$2 = 1;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$5
       }
      }
      $11_1 = $0_1 + $1_1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = 2145386496;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     $55_1 = $1_1 * $1_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = 2145386495;
     i64toi32_i32$0 = -1;
     $57_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = $8_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     $11_1 = $57_1 ^ $26_1 | 0 ? 0.0 : $55_1;
     break label$1;
    }
    label$7 : {
     i64toi32_i32$0 = $9$hi;
     if (!($458($9_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$7
     }
     $11_1 = $0_1 * $0_1;
     label$8 : {
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $29_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $30_1 = 0
        } else {
         $30_1 = 1
        }
        $31_1 = $30_1;
       } else {
        $31_1 = 0
       }
       $29_1 = $31_1;
      }
      if ($29_1) {
       break label$8
      }
      i64toi32_i32$1 = $8$hi;
      $11_1 = ($459($8_1 | 0, i64toi32_i32$1 | 0) | 0 | 0) == (1 | 0) ? -$11_1 : $11_1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $32_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $33_1 = 0
       } else {
        $33_1 = 1
       }
       $34_1 = $33_1;
      } else {
       $34_1 = 0
      }
      $32_1 = $34_1;
     }
     if ($32_1) {
      break label$1
     }
     $11_1 = +$460(+(1.0 / $11_1));
     break label$1;
    }
    $7_1 = 0;
    label$9 : {
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
      $35_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $36_1 = 0
       } else {
        $36_1 = 1
       }
       $37_1 = $36_1;
      } else {
       $37_1 = 0
      }
      $35_1 = $37_1;
     }
     if ($35_1) {
      break label$9
     }
     label$10 : {
      i64toi32_i32$3 = $8$hi;
      $7_1 = $459($8_1 | 0, i64toi32_i32$3 | 0) | 0;
      if ($7_1) {
       break label$10
      }
      $11_1 = +$450(+$0_1);
      break label$1;
     }
     $3_1 = $3_1 & 2047 | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $9_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $9$hi = i64toi32_i32$2;
     $7_1 = (($7_1 | 0) == (1 | 0)) << 18 | 0;
    }
    label$11 : {
     if ($6_1 >>> 0 > -129 >>> 0) {
      break label$11
     }
     $11_1 = 1.0;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$0 = 1072693248;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$12 : {
      if ($5_1 >>> 0 > 957 >>> 0) {
       break label$12
      }
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = 1072693248;
      i64toi32_i32$0 = 0;
      $11_1 = (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0 ? $1_1 : -$1_1) + 1.0;
      break label$1;
     }
     label$13 : {
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$0 = $9_1;
      i64toi32_i32$3 = 1072693248;
      i64toi32_i32$2 = 1;
      if (($4_1 >>> 0 < 2048 >>> 0 | 0) == (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0 | 0)) {
       break label$13
      }
      $11_1 = +$453(0 | 0);
      break label$1;
     }
     $11_1 = +$454(0 | 0);
     break label$1;
    }
    if ($3_1) {
     break label$2
    }
    wasm2js_scratch_store_f64(+($0_1 * 4503599627370496.0));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = -54525952;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$0 = $8$hi & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $11_1 = +wasm2js_scratch_load_f64();
   i64toi32_i32$0 = $9$hi;
   $12_1 = +$461($9_1 | 0, i64toi32_i32$0 | 0, $2_1 + 8 | 0 | 0);
   wasm2js_scratch_store_f64(+$12_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $11_1 = +$462(+($11_1 * $0_1), +(($1_1 - $11_1) * $0_1 + (+HEAPF64[($2_1 + 8 | 0) >> 3] + ($12_1 - $0_1)) * $1_1), $7_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return +$11_1;
 }
 
 function $457($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $6_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $6_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $458($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $8_1 = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = 2097152;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 2097152;
  i64toi32_i32$3 = 1;
  return i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 | 0;
 }
 
 function $459($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $3$hi = 0, $14$hi = 0, $17$hi = 0;
  $1_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $14_1 & 2047 | 0;
   if ($2_1 >>> 0 < 1023 >>> 0) {
    break label$1
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 1075 >>> 0) {
    break label$1
   }
   $1_1 = 0;
   i64toi32_i32$1 = 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = 1075 - $2_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $15_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $3_1 = $15_1;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $17$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $1_1 = !(i64toi32_i32$3 & i64toi32_i32$2 | 0 | i64toi32_i32$1 | 0) ? 2 : 1;
  }
  return $1_1 | 0;
 }
 
 function $460($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $461($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0.0, $6_1 = 0.0, i64toi32_i32$4 = 0, $5_1 = 0.0, $7_1 = 0.0, $9_1 = 0, $2_1 = 0, $2$hi = 0, $27_1 = 0, $29_1 = 0, $8_1 = 0.0, $10_1 = 0, $19_1 = 0.0, $28_1 = 0.0, $31_1 = 0, $31$hi = 0, $61_1 = 0.0, $85_1 = 0.0, $93_1 = 0.0, $123_1 = 0.0;
  $10_1 = $1_1;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = -1072076117;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $2_1 = i64toi32_i32$4;
  $2$hi = i64toi32_i32$5;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $27_1 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
   $27_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $3_1 = +($27_1 | 0);
  $19_1 = $3_1 * +HEAPF64[(0 + 77784 | 0) >> 3];
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 45;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $29_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $9_1 = ($29_1 & 127 | 0) << 5 | 0;
  $28_1 = $19_1 + +HEAPF64[($9_1 + 77872 | 0) >> 3];
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = -1048576;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
  $31_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $31$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = $31$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
  $0_1 = i64toi32_i32$1;
  $0$hi = i64toi32_i32$4;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = -1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $4_1 = +wasm2js_scratch_load_f64();
  $5_1 = +HEAPF64[($9_1 + 77848 | 0) >> 3];
  $6_1 = $4_1 * $5_1 + -1.0;
  i64toi32_i32$5 = $0$hi;
  wasm2js_scratch_store_i32(0 | 0, $0_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $5_1 = (+wasm2js_scratch_load_f64() - $4_1) * $5_1;
  $4_1 = $6_1 + $5_1;
  $3_1 = $3_1 * +HEAPF64[(0 + 77776 | 0) >> 3] + +HEAPF64[($9_1 + 77864 | 0) >> 3];
  $61_1 = $3_1;
  $3_1 = $4_1 + $3_1;
  $7_1 = +HEAPF64[(0 + 77792 | 0) >> 3];
  $8_1 = $4_1 * $7_1;
  $7_1 = $6_1 * $7_1;
  $6_1 = $6_1 * $7_1;
  $85_1 = $6_1;
  $6_1 = $3_1 + $6_1;
  $93_1 = $28_1 + ($4_1 + ($61_1 - $3_1)) + $5_1 * ($8_1 + $7_1) + ($85_1 + ($3_1 - $6_1));
  $3_1 = $4_1 * $8_1;
  $4_1 = $93_1 + $4_1 * $3_1 * ($3_1 * ($3_1 * ($4_1 * +HEAPF64[(0 + 77840 | 0) >> 3] + +HEAPF64[(0 + 77832 | 0) >> 3]) + ($4_1 * +HEAPF64[(0 + 77824 | 0) >> 3] + +HEAPF64[(0 + 77816 | 0) >> 3])) + ($4_1 * +HEAPF64[(0 + 77808 | 0) >> 3] + +HEAPF64[(0 + 77800 | 0) >> 3]));
  $123_1 = $4_1;
  $4_1 = $6_1 + $4_1;
  HEAPF64[$10_1 >> 3] = $123_1 + ($6_1 - $4_1);
  return +$4_1;
 }
 
 function $462($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $6_1 = 0.0, $3_1 = 0, $8$hi = 0, $8_1 = 0, $9$hi = 0, $5_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $7_1 = 0.0, $27_1 = 0, $9_1 = 0, $73_1 = 0.0, $80_1 = 0.0, $96_1 = 0, $96$hi = 0, $99$hi = 0, $101$hi = 0;
  label$1 : {
   $3_1 = ($457(+$0_1) | 0) & 2047 | 0;
   $4_1 = $457(+(5.551115123125783e-17)) | 0;
   $5_1 = $3_1 - $4_1 | 0;
   if ($5_1 >>> 0 < (($457(+(512.0)) | 0) - $4_1 | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    if (($5_1 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $0_1 + 1.0;
    return +($2_1 ? -$0_1 : $0_1);
   }
   $4_1 = $3_1 >>> 0 < ($457(+(1024.0)) | 0) >>> 0;
   $3_1 = 0;
   if ($4_1) {
    break label$1
   }
   label$3 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $24_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $25_1 = 0
      } else {
       $25_1 = 1
      }
      $26_1 = $25_1;
     } else {
      $26_1 = 0
     }
     $24_1 = $26_1;
    }
    if ($24_1) {
     break label$3
    }
    return +(+$454($2_1 | 0));
   }
   return +(+$453($2_1 | 0));
  }
  $6_1 = +HEAPF64[(0 + 75624 | 0) >> 3];
  $7_1 = +HEAPF64[(0 + 75616 | 0) >> 3] * $0_1 + $6_1;
  $6_1 = $7_1 - $6_1;
  $0_1 = $6_1 * +HEAPF64[(0 + 75640 | 0) >> 3] + ($6_1 * +HEAPF64[(0 + 75632 | 0) >> 3] + $0_1) + $1_1;
  $1_1 = $0_1 * $0_1;
  $73_1 = $1_1 * $1_1 * ($0_1 * +HEAPF64[(0 + 75672 | 0) >> 3] + +HEAPF64[(0 + 75664 | 0) >> 3]);
  $80_1 = $1_1 * ($0_1 * +HEAPF64[(0 + 75656 | 0) >> 3] + +HEAPF64[(0 + 75648 | 0) >> 3]);
  wasm2js_scratch_store_f64(+$7_1);
  i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $8$hi = i64toi32_i32$2;
  $4_1 = ($8_1 << 4 | 0) & 2032 | 0;
  $0_1 = $73_1 + ($80_1 + (+HEAPF64[($4_1 + 75728 | 0) >> 3] + $0_1));
  i64toi32_i32$3 = $4_1 + 75736 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
  $96_1 = i64toi32_i32$2;
  $96$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = 0;
  $99$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$3 = $8_1;
  i64toi32_i32$2 = $99$hi;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 45;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $101$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $96$hi;
  i64toi32_i32$5 = $96_1;
  i64toi32_i32$0 = $101$hi;
  i64toi32_i32$1 = $27_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $9_1 = i64toi32_i32$2;
  $9$hi = i64toi32_i32$4;
  label$4 : {
   if ($3_1) {
    break label$4
   }
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$5 = $8$hi;
   return +(+$463(+$0_1, $9_1 | 0, i64toi32_i32$4 | 0, $8_1 | 0, i64toi32_i32$5 | 0));
  }
  i64toi32_i32$5 = $9$hi;
  wasm2js_scratch_store_i32(0 | 0, $9_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $1_1 = +wasm2js_scratch_load_f64();
  return +($1_1 * $0_1 + $1_1);
 }
 
 function $463($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0, $6_1 = 0.0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  label$1 : {
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = -1058013184;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   return +(($3_1 * $0_1 + $3_1) * 5486124068793688683255936.0e279);
  }
  label$2 : {
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$3 = 1071644672;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$4;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   $4_1 = $3_1 * $0_1;
   $0_1 = $4_1 + $3_1;
   if (!(+$455(+$0_1) < 1.0)) {
    break label$2
   }
   $464(+(+$460(+(2.2250738585072014e-308)) * 2.2250738585072014e-308));
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$0 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 & i64toi32_i32$2 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $5_1 = $0_1 < 0.0 ? -1.0 : 1.0;
   $6_1 = $0_1 + $5_1;
   $0_1 = $6_1 + ($4_1 + ($3_1 - $0_1) + ($0_1 + ($5_1 - $6_1))) - $5_1;
   $0_1 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0_1, wasm2js_i32$0 = $0_1 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
  }
  return +($0_1 * 2.2250738585072014e-308);
 }
 
 function $464($0_1) {
  $0_1 = +$0_1;
  HEAPF64[((global$0 - 16 | 0) + 8 | 0) >> 3] = $0_1;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 97384 | 0) >> 2] = $0_1 + -1 | 0;
  HEAP32[(i64toi32_i32$1 + 97388 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $466() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $7_1 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 97384 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 97388 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 1481765933;
  i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, 1284865837 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$2 + 97384 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 97388 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 33;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $6_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   $6_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $467($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1_1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   label$4 : {
    if ($1_1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1_1 = $1_1 + 969 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = (($1_1 | 0) > (-2960 | 0) ? $1_1 : -2960) + 1938 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $468($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $3_1 = 0, $4_1 = 0.0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $0_1 = Math_fround($406(+(+$0_1)));
    break label$1;
   }
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $4_1 = +$0_1;
    label$4 : {
     if ($3_1 >>> 0 > 1075235811 >>> 0) {
      break label$4
     }
     label$5 : {
      if (($2_1 | 0) > (-1 | 0)) {
       break label$5
      }
      $0_1 = Math_fround(-Math_fround($405(+($4_1 + 1.5707963267948966))));
      break label$1;
     }
     $0_1 = Math_fround($405(+($4_1 + -1.5707963267948966)));
     break label$1;
    }
    $0_1 = Math_fround($406(+-((($2_1 | 0) > (-1 | 0) ? -3.141592653589793 : 3.141592653589793) + $4_1)));
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3_1 >>> 0 > 1085271519 >>> 0) {
      break label$7
     }
     $4_1 = +$0_1;
     label$8 : {
      if (($2_1 | 0) > (-1 | 0)) {
       break label$8
      }
      $0_1 = Math_fround($405(+($4_1 + 4.71238898038469)));
      break label$1;
     }
     $0_1 = Math_fround(-Math_fround($405(+($4_1 + -4.71238898038469))));
     break label$1;
    }
    $0_1 = Math_fround($406(+((($2_1 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + +$0_1)));
    break label$1;
   }
   label$9 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    switch (($408(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0_1 = Math_fround($406(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $0_1 = Math_fround($405(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
     break label$1;
    case 2:
     $0_1 = Math_fround($406(+-+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$10;
    };
   }
   $0_1 = Math_fround(-Math_fround($405(+(+HEAPF64[($1_1 + 8 | 0) >> 3]))));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($0_1);
 }
 
 function $469($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $470($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $470($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($472($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $471($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = ($472($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $483($1_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $410($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    $1_1 = $0_1;
    label$3 : while (1) {
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : while (1) {
    $1_1 = $2_1;
    $2_1 = $1_1 + 1 | 0;
    if (HEAPU8[$1_1 >> 0] | 0) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $473($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $4_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (!$5_1) {
      break label$3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$3
     }
     if (($4_1 & 255 | 0 | 0) != ($5_1 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $3_1 = $4_1;
  }
  return ($3_1 & 255 | 0) - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $474($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $475($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $476($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $476($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $8_1 = 0, $11$hi = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13$hi = 0, $13_1 = 0, $14$hi = 0, $14_1 = 0, $101_1 = 0, $101$hi = 0, $146$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) > (36 | 0)) {
       break label$4
      }
      $5_1 = 0;
      $6_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1) {
       break label$3
      }
      $7_1 = $0_1;
      break label$2;
     }
     HEAP32[($412() | 0) >> 2] = 28;
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     break label$1;
    }
    $7_1 = $0_1;
    label$5 : {
     label$6 : while (1) {
      if (!($474($6_1 << 24 >> 24 | 0) | 0)) {
       break label$5
      }
      $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
      $8_1 = $7_1 + 1 | 0;
      $7_1 = $8_1;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
     $7_1 = $8_1;
     break label$2;
    }
    label$7 : {
     $6_1 = HEAPU8[$7_1 >> 0] | 0;
     switch ($6_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$2;
     };
    }
    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
    $7_1 = $7_1 + 1 | 0;
   }
   label$8 : {
    label$9 : {
     if (($2_1 | 16 | 0 | 0) != (16 | 0)) {
      break label$9
     }
     if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$9
     }
     $9_1 = 1;
     label$10 : {
      if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
       break label$10
      }
      $7_1 = $7_1 + 2 | 0;
      $10_1 = 16;
      break label$8;
     }
     $7_1 = $7_1 + 1 | 0;
     $10_1 = $2_1 ? $2_1 : 8;
     break label$8;
    }
    $10_1 = $2_1 ? $2_1 : 10;
    $9_1 = 0;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $10_1;
   $11$hi = i64toi32_i32$0;
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   label$11 : {
    label$12 : while (1) {
     $6_1 = -48;
     label$13 : {
      $8_1 = HEAP8[$7_1 >> 0] | 0;
      if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
       break label$13
      }
      $6_1 = -87;
      if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 < 26 >>> 0) {
       break label$13
      }
      $6_1 = -55;
      if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
       break label$11
      }
     }
     $8_1 = $6_1 + $8_1 | 0;
     if (($8_1 | 0) >= ($10_1 | 0)) {
      break label$11
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = 0;
     $492($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
     $6_1 = 1;
     label$14 : {
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$14
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $14_1 = $8_1;
      $14$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $8_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $101_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $101$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = $101$hi;
      i64toi32_i32$3 = $101_1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$14
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      $9_1 = 1;
      $6_1 = $2_1;
     }
     $7_1 = $7_1 + 1 | 0;
     $2_1 = $6_1;
     continue label$12;
    };
   }
   label$15 : {
    if (!$1_1) {
     break label$15
    }
    HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
   }
   label$16 : {
    label$17 : {
     label$18 : {
      if (!$2_1) {
       break label$18
      }
      HEAP32[($412() | 0) >> 2] = 68;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $11$hi = i64toi32_i32$3;
      $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
      i64toi32_i32$3 = i64toi32_i32$5;
      $12_1 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$3;
      break label$17;
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$16
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$3;
    }
    label$19 : {
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$19
     }
     if ($5_1) {
      break label$19
     }
     HEAP32[($412() | 0) >> 2] = 68;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$4;
     break label$1;
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$16
    }
    HEAP32[($412() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$0 = $12_1;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
   $146$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $146$hi;
   i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$2;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $477($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $476($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $478($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $476($0_1 | 0, $1_1 | 0, $2_1 | 0, -2147483648 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $479($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($412() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $480($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0.0;
  $2_1 = $0_1 * $0_1;
  $3_1 = $2_1 * $0_1;
  $4_1 = $2_1 * $2_1;
  $2_1 = $3_1 * $4_1 * ($4_1 * ($2_1 * .009465647849436732 + .002974357433599673) + ($2_1 * .024528318116654728 + .05338123784456704)) + ($3_1 * ($2_1 * .13339200271297674 + .3333313950307914) + $0_1);
  return Math_fround(Math_fround($1_1 ? -1.0 / $2_1 : $2_1));
 }
 
 function $481($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $2_1 = 0, $4_1 = 0.0, $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $0_1 = Math_fround($480(+(+$0_1), 0 | 0));
    break label$1;
   }
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $4_1 = +$0_1;
    label$4 : {
     if ($3_1 >>> 0 > 1075235811 >>> 0) {
      break label$4
     }
     $0_1 = Math_fround($480(+((($2_1 | 0) < (0 | 0) ? 1.5707963267948966 : -1.5707963267948966) + $4_1), 1 | 0));
     break label$1;
    }
    $0_1 = Math_fround($480(+((($2_1 | 0) < (0 | 0) ? 3.141592653589793 : -3.141592653589793) + $4_1), 0 | 0));
    break label$1;
   }
   label$5 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$5
    }
    $4_1 = +$0_1;
    label$6 : {
     if ($3_1 >>> 0 > 1085271519 >>> 0) {
      break label$6
     }
     $0_1 = Math_fround($480(+((($2_1 | 0) < (0 | 0) ? 4.71238898038469 : -4.71238898038469) + $4_1), 1 | 0));
     break label$1;
    }
    $0_1 = Math_fround($480(+((($2_1 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + $4_1), 0 | 0));
    break label$1;
   }
   label$7 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$7
    }
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   $3_1 = $408(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0;
   $0_1 = Math_fround($480(+(+HEAPF64[($1_1 + 8 | 0) >> 3]), $3_1 & 1 | 0 | 0));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($0_1);
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($412() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $483($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $1_1 = 0, $79_1 = 0, $191_1 = 0, $1104_1 = 0, $1106_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            if ($0_1 >>> 0 > 244 >>> 0) {
             break label$10
            }
            label$11 : {
             $2_1 = HEAP32[(0 + 97392 | 0) >> 2] | 0;
             $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
             $4_1 = $3_1 >>> 3 | 0;
             $0_1 = $2_1 >>> $4_1 | 0;
             if (!($0_1 & 3 | 0)) {
              break label$11
             }
             label$12 : {
              label$13 : {
               $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
               $4_1 = $5_1 << 3 | 0;
               $0_1 = $4_1 + 97432 | 0;
               $4_1 = HEAP32[($4_1 + 97440 | 0) >> 2] | 0;
               $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
               if (($0_1 | 0) != ($3_1 | 0)) {
                break label$13
               }
               HEAP32[(0 + 97392 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
               break label$12;
              }
              HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
             }
             $0_1 = $4_1 + 8 | 0;
             $5_1 = $5_1 << 3 | 0;
             HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
             $4_1 = $4_1 + $5_1 | 0;
             HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             break label$1;
            }
            $6_1 = HEAP32[(0 + 97400 | 0) >> 2] | 0;
            if ($3_1 >>> 0 <= $6_1 >>> 0) {
             break label$9
            }
            label$14 : {
             if (!$0_1) {
              break label$14
             }
             label$15 : {
              label$16 : {
               $79_1 = $0_1 << $4_1 | 0;
               $0_1 = 2 << $4_1 | 0;
               $0_1 = $79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
               $4_1 = __wasm_ctz_i32($0_1 & (0 - $0_1 | 0) | 0 | 0) | 0;
               $0_1 = $4_1 << 3 | 0;
               $5_1 = $0_1 + 97432 | 0;
               $0_1 = HEAP32[($0_1 + 97440 | 0) >> 2] | 0;
               $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if (($5_1 | 0) != ($7_1 | 0)) {
                break label$16
               }
               $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
               HEAP32[(0 + 97392 | 0) >> 2] = $2_1;
               break label$15;
              }
              HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $7_1 = $0_1 + $3_1 | 0;
             $4_1 = $4_1 << 3 | 0;
             $5_1 = $4_1 - $3_1 | 0;
             HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
             HEAP32[($0_1 + $4_1 | 0) >> 2] = $5_1;
             label$17 : {
              if (!$6_1) {
               break label$17
              }
              $3_1 = ($6_1 & -8 | 0) + 97432 | 0;
              $4_1 = HEAP32[(0 + 97412 | 0) >> 2] | 0;
              label$18 : {
               label$19 : {
                $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
                if ($2_1 & $8_1 | 0) {
                 break label$19
                }
                HEAP32[(0 + 97392 | 0) >> 2] = $2_1 | $8_1 | 0;
                $8_1 = $3_1;
                break label$18;
               }
               $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
              }
              HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
              HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
             }
             $0_1 = $0_1 + 8 | 0;
             HEAP32[(0 + 97412 | 0) >> 2] = $7_1;
             HEAP32[(0 + 97400 | 0) >> 2] = $5_1;
             break label$1;
            }
            $9_1 = HEAP32[(0 + 97396 | 0) >> 2] | 0;
            if (!$9_1) {
             break label$9
            }
            $7_1 = HEAP32[(((__wasm_ctz_i32($9_1 & (0 - $9_1 | 0) | 0 | 0) | 0) << 2 | 0) + 97696 | 0) >> 2] | 0;
            $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
            $5_1 = $7_1;
            label$20 : {
             label$21 : while (1) {
              label$22 : {
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                break label$22
               }
               $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$20
               }
              }
              $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $191_1 = $5_1;
              $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
              $4_1 = $5_1 ? $191_1 : $4_1;
              $7_1 = $5_1 ? $0_1 : $7_1;
              $5_1 = $0_1;
              continue label$21;
             };
            }
            $10_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
            label$23 : {
             $8_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
             if (($8_1 | 0) == ($7_1 | 0)) {
              break label$23
             }
             $0_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
             HEAP32[(0 + 97408 | 0) >> 2] | 0;
             HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
             HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
             break label$2;
            }
            label$24 : {
             $5_1 = $7_1 + 20 | 0;
             $0_1 = HEAP32[$5_1 >> 2] | 0;
             if ($0_1) {
              break label$24
             }
             $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$8
             }
             $5_1 = $7_1 + 16 | 0;
            }
            label$25 : while (1) {
             $11_1 = $5_1;
             $8_1 = $0_1;
             $5_1 = $0_1 + 20 | 0;
             $0_1 = HEAP32[$5_1 >> 2] | 0;
             if ($0_1) {
              continue label$25
             }
             $5_1 = $8_1 + 16 | 0;
             $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
             if ($0_1) {
              continue label$25
             }
             break label$25;
            };
            HEAP32[$11_1 >> 2] = 0;
            break label$2;
           }
           $3_1 = -1;
           if ($0_1 >>> 0 > -65 >>> 0) {
            break label$9
           }
           $0_1 = $0_1 + 11 | 0;
           $3_1 = $0_1 & -8 | 0;
           $6_1 = HEAP32[(0 + 97396 | 0) >> 2] | 0;
           if (!$6_1) {
            break label$9
           }
           $11_1 = 0;
           label$26 : {
            if ($3_1 >>> 0 < 256 >>> 0) {
             break label$26
            }
            $11_1 = 31;
            if ($3_1 >>> 0 > 16777215 >>> 0) {
             break label$26
            }
            $0_1 = Math_clz32($0_1 >>> 8 | 0);
            $11_1 = ((($3_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
           }
           $4_1 = 0 - $3_1 | 0;
           label$27 : {
            label$28 : {
             label$29 : {
              label$30 : {
               $5_1 = HEAP32[(($11_1 << 2 | 0) + 97696 | 0) >> 2] | 0;
               if ($5_1) {
                break label$30
               }
               $0_1 = 0;
               $8_1 = 0;
               break label$29;
              }
              $0_1 = 0;
              $7_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
              $8_1 = 0;
              label$31 : while (1) {
               label$32 : {
                $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                if ($2_1 >>> 0 >= $4_1 >>> 0) {
                 break label$32
                }
                $4_1 = $2_1;
                $8_1 = $5_1;
                if ($4_1) {
                 break label$32
                }
                $4_1 = 0;
                $8_1 = $5_1;
                $0_1 = $5_1;
                break label$28;
               }
               $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
               $5_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
               $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
               $7_1 = $7_1 << 1 | 0;
               if ($5_1) {
                continue label$31
               }
               break label$31;
              };
             }
             label$33 : {
              if ($0_1 | $8_1 | 0) {
               break label$33
              }
              $8_1 = 0;
              $0_1 = 2 << $11_1 | 0;
              $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $6_1 | 0;
              if (!$0_1) {
               break label$9
              }
              $0_1 = HEAP32[(((__wasm_ctz_i32($0_1 & (0 - $0_1 | 0) | 0 | 0) | 0) << 2 | 0) + 97696 | 0) >> 2] | 0;
             }
             if (!$0_1) {
              break label$27
             }
            }
            label$34 : while (1) {
             $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
             $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
             label$35 : {
              $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
              if ($5_1) {
               break label$35
              }
              $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
             }
             $4_1 = $7_1 ? $2_1 : $4_1;
             $8_1 = $7_1 ? $0_1 : $8_1;
             $0_1 = $5_1;
             if ($0_1) {
              continue label$34
             }
             break label$34;
            };
           }
           if (!$8_1) {
            break label$9
           }
           if ($4_1 >>> 0 >= ((HEAP32[(0 + 97400 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
            break label$9
           }
           $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
           label$36 : {
            $7_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
            if (($7_1 | 0) == ($8_1 | 0)) {
             break label$36
            }
            $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
            HEAP32[(0 + 97408 | 0) >> 2] | 0;
            HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
            HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
            break label$3;
           }
           label$37 : {
            $5_1 = $8_1 + 20 | 0;
            $0_1 = HEAP32[$5_1 >> 2] | 0;
            if ($0_1) {
             break label$37
            }
            $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
            if (!$0_1) {
             break label$7
            }
            $5_1 = $8_1 + 16 | 0;
           }
           label$38 : while (1) {
            $2_1 = $5_1;
            $7_1 = $0_1;
            $5_1 = $0_1 + 20 | 0;
            $0_1 = HEAP32[$5_1 >> 2] | 0;
            if ($0_1) {
             continue label$38
            }
            $5_1 = $7_1 + 16 | 0;
            $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
            if ($0_1) {
             continue label$38
            }
            break label$38;
           };
           HEAP32[$2_1 >> 2] = 0;
           break label$3;
          }
          label$39 : {
           $0_1 = HEAP32[(0 + 97400 | 0) >> 2] | 0;
           if ($0_1 >>> 0 < $3_1 >>> 0) {
            break label$39
           }
           $4_1 = HEAP32[(0 + 97412 | 0) >> 2] | 0;
           label$40 : {
            label$41 : {
             $5_1 = $0_1 - $3_1 | 0;
             if ($5_1 >>> 0 < 16 >>> 0) {
              break label$41
             }
             HEAP32[(0 + 97400 | 0) >> 2] = $5_1;
             $7_1 = $4_1 + $3_1 | 0;
             HEAP32[(0 + 97412 | 0) >> 2] = $7_1;
             HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
             HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
             HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             break label$40;
            }
            HEAP32[(0 + 97412 | 0) >> 2] = 0;
            HEAP32[(0 + 97400 | 0) >> 2] = 0;
            HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
            $0_1 = $4_1 + $0_1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
           }
           $0_1 = $4_1 + 8 | 0;
           break label$1;
          }
          label$42 : {
           $7_1 = HEAP32[(0 + 97404 | 0) >> 2] | 0;
           if ($7_1 >>> 0 <= $3_1 >>> 0) {
            break label$42
           }
           $4_1 = $7_1 - $3_1 | 0;
           HEAP32[(0 + 97404 | 0) >> 2] = $4_1;
           $0_1 = HEAP32[(0 + 97416 | 0) >> 2] | 0;
           $5_1 = $0_1 + $3_1 | 0;
           HEAP32[(0 + 97416 | 0) >> 2] = $5_1;
           HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $0_1 = $0_1 + 8 | 0;
           break label$1;
          }
          label$43 : {
           label$44 : {
            if (!(HEAP32[(0 + 97864 | 0) >> 2] | 0)) {
             break label$44
            }
            $4_1 = HEAP32[(0 + 97872 | 0) >> 2] | 0;
            break label$43;
           }
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = -1;
           HEAP32[(i64toi32_i32$1 + 97876 | 0) >> 2] = -1;
           HEAP32[(i64toi32_i32$1 + 97880 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = 4096;
           HEAP32[(i64toi32_i32$1 + 97868 | 0) >> 2] = 4096;
           HEAP32[(i64toi32_i32$1 + 97872 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[(0 + 97864 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
           HEAP32[(0 + 97884 | 0) >> 2] = 0;
           HEAP32[(0 + 97836 | 0) >> 2] = 0;
           $4_1 = 4096;
          }
          $0_1 = 0;
          $6_1 = $3_1 + 47 | 0;
          $2_1 = $4_1 + $6_1 | 0;
          $11_1 = 0 - $4_1 | 0;
          $8_1 = $2_1 & $11_1 | 0;
          if ($8_1 >>> 0 <= $3_1 >>> 0) {
           break label$1
          }
          $0_1 = 0;
          label$45 : {
           $4_1 = HEAP32[(0 + 97832 | 0) >> 2] | 0;
           if (!$4_1) {
            break label$45
           }
           $5_1 = HEAP32[(0 + 97824 | 0) >> 2] | 0;
           $9_1 = $5_1 + $8_1 | 0;
           if ($9_1 >>> 0 <= $5_1 >>> 0) {
            break label$1
           }
           if ($9_1 >>> 0 > $4_1 >>> 0) {
            break label$1
           }
          }
          label$46 : {
           label$47 : {
            if ((HEAPU8[(0 + 97836 | 0) >> 0] | 0) & 4 | 0) {
             break label$47
            }
            label$48 : {
             label$49 : {
              label$50 : {
               label$51 : {
                label$52 : {
                 $4_1 = HEAP32[(0 + 97416 | 0) >> 2] | 0;
                 if (!$4_1) {
                  break label$52
                 }
                 $0_1 = 97840;
                 label$53 : while (1) {
                  label$54 : {
                   $5_1 = HEAP32[$0_1 >> 2] | 0;
                   if ($5_1 >>> 0 > $4_1 >>> 0) {
                    break label$54
                   }
                   if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                    break label$51
                   }
                  }
                  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                  if ($0_1) {
                   continue label$53
                  }
                  break label$53;
                 };
                }
                $7_1 = $491(0 | 0) | 0;
                if (($7_1 | 0) == (-1 | 0)) {
                 break label$48
                }
                $2_1 = $8_1;
                label$55 : {
                 $0_1 = HEAP32[(0 + 97868 | 0) >> 2] | 0;
                 $4_1 = $0_1 + -1 | 0;
                 if (!($4_1 & $7_1 | 0)) {
                  break label$55
                 }
                 $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
                }
                if ($2_1 >>> 0 <= $3_1 >>> 0) {
                 break label$48
                }
                label$56 : {
                 $0_1 = HEAP32[(0 + 97832 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$56
                 }
                 $4_1 = HEAP32[(0 + 97824 | 0) >> 2] | 0;
                 $5_1 = $4_1 + $2_1 | 0;
                 if ($5_1 >>> 0 <= $4_1 >>> 0) {
                  break label$48
                 }
                 if ($5_1 >>> 0 > $0_1 >>> 0) {
                  break label$48
                 }
                }
                $0_1 = $491($2_1 | 0) | 0;
                if (($0_1 | 0) != ($7_1 | 0)) {
                 break label$50
                }
                break label$46;
               }
               $2_1 = ($2_1 - $7_1 | 0) & $11_1 | 0;
               $7_1 = $491($2_1 | 0) | 0;
               if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
                break label$49
               }
               $0_1 = $7_1;
              }
              if (($0_1 | 0) == (-1 | 0)) {
               break label$48
              }
              label$57 : {
               if (($3_1 + 48 | 0) >>> 0 > $2_1 >>> 0) {
                break label$57
               }
               $7_1 = $0_1;
               break label$46;
              }
              $4_1 = HEAP32[(0 + 97872 | 0) >> 2] | 0;
              $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
              if (($491($4_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$48
              }
              $2_1 = $4_1 + $2_1 | 0;
              $7_1 = $0_1;
              break label$46;
             }
             if (($7_1 | 0) != (-1 | 0)) {
              break label$46
             }
            }
            HEAP32[(0 + 97836 | 0) >> 2] = HEAP32[(0 + 97836 | 0) >> 2] | 0 | 4 | 0;
           }
           $7_1 = $491($8_1 | 0) | 0;
           $0_1 = $491(0 | 0) | 0;
           if (($7_1 | 0) == (-1 | 0)) {
            break label$4
           }
           if (($0_1 | 0) == (-1 | 0)) {
            break label$4
           }
           if ($7_1 >>> 0 >= $0_1 >>> 0) {
            break label$4
           }
           $2_1 = $0_1 - $7_1 | 0;
           if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
            break label$4
           }
          }
          $0_1 = (HEAP32[(0 + 97824 | 0) >> 2] | 0) + $2_1 | 0;
          HEAP32[(0 + 97824 | 0) >> 2] = $0_1;
          label$58 : {
           if ($0_1 >>> 0 <= (HEAP32[(0 + 97828 | 0) >> 2] | 0) >>> 0) {
            break label$58
           }
           HEAP32[(0 + 97828 | 0) >> 2] = $0_1;
          }
          label$59 : {
           label$60 : {
            $4_1 = HEAP32[(0 + 97416 | 0) >> 2] | 0;
            if (!$4_1) {
             break label$60
            }
            $0_1 = 97840;
            label$61 : while (1) {
             $5_1 = HEAP32[$0_1 >> 2] | 0;
             $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
              break label$59
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             if ($0_1) {
              continue label$61
             }
             break label$6;
            };
           }
           label$62 : {
            label$63 : {
             $0_1 = HEAP32[(0 + 97408 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$63
             }
             if ($7_1 >>> 0 >= $0_1 >>> 0) {
              break label$62
             }
            }
            HEAP32[(0 + 97408 | 0) >> 2] = $7_1;
           }
           $0_1 = 0;
           HEAP32[(0 + 97844 | 0) >> 2] = $2_1;
           HEAP32[(0 + 97840 | 0) >> 2] = $7_1;
           HEAP32[(0 + 97424 | 0) >> 2] = -1;
           HEAP32[(0 + 97428 | 0) >> 2] = HEAP32[(0 + 97864 | 0) >> 2] | 0;
           HEAP32[(0 + 97852 | 0) >> 2] = 0;
           label$64 : while (1) {
            $4_1 = $0_1 << 3 | 0;
            $5_1 = $4_1 + 97432 | 0;
            HEAP32[($4_1 + 97440 | 0) >> 2] = $5_1;
            HEAP32[($4_1 + 97444 | 0) >> 2] = $5_1;
            $0_1 = $0_1 + 1 | 0;
            if (($0_1 | 0) != (32 | 0)) {
             continue label$64
            }
            break label$64;
           };
           $0_1 = $2_1 + -40 | 0;
           $4_1 = ($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0;
           $5_1 = $0_1 - $4_1 | 0;
           HEAP32[(0 + 97404 | 0) >> 2] = $5_1;
           $4_1 = $7_1 + $4_1 | 0;
           HEAP32[(0 + 97416 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
           HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
           HEAP32[(0 + 97420 | 0) >> 2] = HEAP32[(0 + 97880 | 0) >> 2] | 0;
           break label$5;
          }
          if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
           break label$6
          }
          if ($4_1 >>> 0 < $5_1 >>> 0) {
           break label$6
          }
          if ($4_1 >>> 0 >= $7_1 >>> 0) {
           break label$6
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
          $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
          $5_1 = $4_1 + $0_1 | 0;
          HEAP32[(0 + 97416 | 0) >> 2] = $5_1;
          $7_1 = (HEAP32[(0 + 97404 | 0) >> 2] | 0) + $2_1 | 0;
          $0_1 = $7_1 - $0_1 | 0;
          HEAP32[(0 + 97404 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
          HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 97420 | 0) >> 2] = HEAP32[(0 + 97880 | 0) >> 2] | 0;
          break label$5;
         }
         $8_1 = 0;
         break label$2;
        }
        $7_1 = 0;
        break label$3;
       }
       label$65 : {
        $8_1 = HEAP32[(0 + 97408 | 0) >> 2] | 0;
        if ($7_1 >>> 0 >= $8_1 >>> 0) {
         break label$65
        }
        HEAP32[(0 + 97408 | 0) >> 2] = $7_1;
        $8_1 = $7_1;
       }
       $5_1 = $7_1 + $2_1 | 0;
       $0_1 = 97840;
       label$66 : {
        label$67 : {
         label$68 : {
          label$69 : {
           label$70 : {
            label$71 : {
             label$72 : {
              label$73 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$72
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$73
               }
               break label$71;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$70
             }
            }
            $0_1 = 97840;
            label$74 : while (1) {
             label$75 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$75
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$69
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$74;
            };
           }
           HEAP32[$0_1 >> 2] = $7_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $7_1 + (($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $11_1 + $3_1 | 0;
           $0_1 = $2_1 - $3_1 | 0;
           label$76 : {
            if (($2_1 | 0) != ($4_1 | 0)) {
             break label$76
            }
            HEAP32[(0 + 97416 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 97404 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 97404 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$67;
           }
           label$77 : {
            if (($2_1 | 0) != (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
             break label$77
            }
            HEAP32[(0 + 97412 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 97400 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 97400 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$67;
           }
           label$78 : {
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$78
            }
            $6_1 = $4_1 & -8 | 0;
            label$79 : {
             label$80 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$80
              }
              $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $4_1 >>> 3 | 0;
              $7_1 = ($8_1 << 3 | 0) + 97432 | 0;
              label$81 : {
               $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($4_1 | 0) != ($5_1 | 0)) {
                break label$81
               }
               HEAP32[(0 + 97392 | 0) >> 2] = (HEAP32[(0 + 97392 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
               break label$79;
              }
              HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
              break label$79;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$82 : {
              label$83 : {
               $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($7_1 | 0) == ($2_1 | 0)) {
                break label$83
               }
               $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
               HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
               break label$82;
              }
              label$84 : {
               $4_1 = $2_1 + 20 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                break label$84
               }
               $4_1 = $2_1 + 16 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                break label$84
               }
               $7_1 = 0;
               break label$82;
              }
              label$85 : while (1) {
               $8_1 = $4_1;
               $7_1 = $5_1;
               $4_1 = $7_1 + 20 | 0;
               $5_1 = HEAP32[$4_1 >> 2] | 0;
               if ($5_1) {
                continue label$85
               }
               $4_1 = $7_1 + 16 | 0;
               $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
               if ($5_1) {
                continue label$85
               }
               break label$85;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$79
             }
             label$86 : {
              label$87 : {
               $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($5_1 << 2 | 0) + 97696 | 0;
               if (($2_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
                break label$87
               }
               HEAP32[$4_1 >> 2] = $7_1;
               if ($7_1) {
                break label$86
               }
               HEAP32[(0 + 97396 | 0) >> 2] = (HEAP32[(0 + 97396 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
               break label$79;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
              if (!$7_1) {
               break label$79
              }
             }
             HEAP32[($7_1 + 24 | 0) >> 2] = $9_1;
             label$88 : {
              $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$88
              }
              HEAP32[($7_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
             }
             $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$79
             }
             HEAP32[($7_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
            }
            $0_1 = $6_1 + $0_1 | 0;
            $2_1 = $2_1 + $6_1 | 0;
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
           label$89 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$89
            }
            $4_1 = ($0_1 & -8 | 0) + 97432 | 0;
            label$90 : {
             label$91 : {
              $5_1 = HEAP32[(0 + 97392 | 0) >> 2] | 0;
              $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
              if ($5_1 & $0_1 | 0) {
               break label$91
              }
              HEAP32[(0 + 97392 | 0) >> 2] = $5_1 | $0_1 | 0;
              $0_1 = $4_1;
              break label$90;
             }
             $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
            break label$67;
           }
           $4_1 = 31;
           label$92 : {
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$92
            }
            $4_1 = Math_clz32($0_1 >>> 8 | 0);
            $4_1 = ((($0_1 >>> (38 - $4_1 | 0) | 0) & 1 | 0) - ($4_1 << 1 | 0) | 0) + 62 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $5_1 = ($4_1 << 2 | 0) + 97696 | 0;
           label$93 : {
            label$94 : {
             $7_1 = HEAP32[(0 + 97396 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($7_1 & $8_1 | 0) {
              break label$94
             }
             HEAP32[(0 + 97396 | 0) >> 2] = $7_1 | $8_1 | 0;
             HEAP32[$5_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
             break label$93;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $7_1 = HEAP32[$5_1 >> 2] | 0;
            label$95 : while (1) {
             $5_1 = $7_1;
             if (((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$68
             }
             $7_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($5_1 + ($7_1 & 4 | 0) | 0) + 16 | 0;
             $7_1 = HEAP32[$8_1 >> 2] | 0;
             if ($7_1) {
              continue label$95
             }
             break label$95;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$67;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($7_1 + 8 | 0) & 7 | 0 ? (-8 - $7_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 97404 | 0) >> 2] = $11_1;
          $8_1 = $7_1 + $8_1 | 0;
          HEAP32[(0 + 97416 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 97420 | 0) >> 2] = HEAP32[(0 + 97880 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 97848 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 97852 | 0) >> 2] | 0;
          $1104_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1104_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 97840 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 97844 | 0) >> 2] | 0;
          $1106_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1106_1;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 97848 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 97844 | 0) >> 2] = $2_1;
          HEAP32[(0 + 97840 | 0) >> 2] = $7_1;
          HEAP32[(0 + 97852 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$96 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $7_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($7_1 >>> 0 < $5_1 >>> 0) {
            continue label$96
           }
           break label$96;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$5
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $7_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $7_1;
          label$97 : {
           if ($7_1 >>> 0 > 255 >>> 0) {
            break label$97
           }
           $0_1 = ($7_1 & -8 | 0) + 97432 | 0;
           label$98 : {
            label$99 : {
             $5_1 = HEAP32[(0 + 97392 | 0) >> 2] | 0;
             $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
             if ($5_1 & $7_1 | 0) {
              break label$99
             }
             HEAP32[(0 + 97392 | 0) >> 2] = $5_1 | $7_1 | 0;
             $5_1 = $0_1;
             break label$98;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$5;
          }
          $0_1 = 31;
          label$100 : {
           if ($7_1 >>> 0 > 16777215 >>> 0) {
            break label$100
           }
           $0_1 = Math_clz32($7_1 >>> 8 | 0);
           $0_1 = ((($7_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
          }
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          $5_1 = ($0_1 << 2 | 0) + 97696 | 0;
          label$101 : {
           label$102 : {
            $8_1 = HEAP32[(0 + 97396 | 0) >> 2] | 0;
            $2_1 = 1 << $0_1 | 0;
            if ($8_1 & $2_1 | 0) {
             break label$102
            }
            HEAP32[(0 + 97396 | 0) >> 2] = $8_1 | $2_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$101;
           }
           $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $8_1 = HEAP32[$5_1 >> 2] | 0;
           label$103 : while (1) {
            $5_1 = $8_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
             break label$66
            }
            $8_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $2_1 = ($5_1 + ($8_1 & 4 | 0) | 0) + 16 | 0;
            $8_1 = HEAP32[$2_1 >> 2] | 0;
            if ($8_1) {
             continue label$103
            }
            break label$103;
           };
           HEAP32[$2_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$5;
         }
         $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 97404 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 97404 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 97416 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 97416 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($412() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$104 : {
     if (!$11_1) {
      break label$104
     }
     label$105 : {
      label$106 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 97696 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$106
       }
       HEAP32[$0_1 >> 2] = $7_1;
       if ($7_1) {
        break label$105
       }
       $6_1 = $6_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 97396 | 0) >> 2] = $6_1;
       break label$104;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$104
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $11_1;
     label$107 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$107
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$104
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
    }
    label$108 : {
     label$109 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$109
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$108;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $7_1 = $8_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
     label$110 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$110
      }
      $0_1 = ($4_1 & -8 | 0) + 97432 | 0;
      label$111 : {
       label$112 : {
        $5_1 = HEAP32[(0 + 97392 | 0) >> 2] | 0;
        $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
        if ($5_1 & $4_1 | 0) {
         break label$112
        }
        HEAP32[(0 + 97392 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$111;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      break label$108;
     }
     $0_1 = 31;
     label$113 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$113
      }
      $0_1 = Math_clz32($4_1 >>> 8 | 0);
      $0_1 = ((($4_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
     }
     HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$0 = 0;
     HEAP32[($7_1 + 16 | 0) >> 2] = 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 97696 | 0;
     label$114 : {
      label$115 : {
       label$116 : {
        $3_1 = 1 << $0_1 | 0;
        if ($6_1 & $3_1 | 0) {
         break label$116
        }
        HEAP32[(0 + 97396 | 0) >> 2] = $6_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $7_1;
        HEAP32[($7_1 + 24 | 0) >> 2] = $5_1;
        break label$115;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$117 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$114
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$117
        }
        break label$117;
       };
       HEAP32[$2_1 >> 2] = $7_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
      break label$108;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
     HEAP32[($7_1 + 24 | 0) >> 2] = 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$118 : {
    if (!$10_1) {
     break label$118
    }
    label$119 : {
     label$120 : {
      $5_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 97696 | 0;
      if (($7_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$120
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$119
      }
      HEAP32[(0 + 97396 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$118;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($7_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$118
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$121 : {
     $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$121
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$118
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$122 : {
    label$123 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$123
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $7_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$122;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $5_1 = $7_1 + $3_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($5_1 + $4_1 | 0) >> 2] = $4_1;
    label$124 : {
     if (!$6_1) {
      break label$124
     }
     $3_1 = ($6_1 & -8 | 0) + 97432 | 0;
     $0_1 = HEAP32[(0 + 97412 | 0) >> 2] | 0;
     label$125 : {
      label$126 : {
       $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
       if ($8_1 & $2_1 | 0) {
        break label$126
       }
       HEAP32[(0 + 97392 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$125;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 97412 | 0) >> 2] = $5_1;
    HEAP32[(0 + 97400 | 0) >> 2] = $4_1;
   }
   $0_1 = $7_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $484($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $6_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 97408 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if (($1_1 | 0) == (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 97432 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       HEAP32[(0 + 97392 | 0) >> 2] = (HEAP32[(0 + 97392 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 97696 | 0;
       if (($1_1 | 0) != (HEAP32[$2_1 >> 2] | 0 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       HEAP32[(0 + 97396 | 0) >> 2] = (HEAP32[(0 + 97396 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 97400 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($1_1 >>> 0 >= $3_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($3_1 | 0) != (HEAP32[(0 + 97416 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 97416 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 97404 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 97404 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 97400 | 0) >> 2] = 0;
      HEAP32[(0 + 97412 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($3_1 | 0) != (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 97412 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 97400 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 97400 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 97432 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 97392 | 0) >> 2] = (HEAP32[(0 + 97392 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 97408 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 97696 | 0;
        if (($3_1 | 0) != (HEAP32[$2_1 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 97396 | 0) >> 2] = (HEAP32[(0 + 97396 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 97400 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = ($0_1 & -8 | 0) + 97432 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 97392 | 0) >> 2] | 0;
      $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
      if ($4_1 & $0_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 97392 | 0) >> 2] = $4_1 | $0_1 | 0;
      $0_1 = $2_1;
      break label$28;
     }
     $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = Math_clz32($0_1 >>> 8 | 0);
    $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   $4_1 = ($2_1 << 2 | 0) + 97696 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 97396 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 97396 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 97424 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 97424 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $485($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $483($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($412() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $486($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $483($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $410($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $484($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 97872 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$5 : {
    label$6 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $489($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $4_1 = 0;
    label$7 : {
     if (($5_1 | 0) != (HEAP32[(0 + 97416 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     $3_1 = (HEAP32[(0 + 97404 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 97404 | 0) >> 2] = $1_1;
     HEAP32[(0 + 97416 | 0) >> 2] = $2_1;
     break label$5;
    }
    label$8 : {
     if (($5_1 | 0) != (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 97400 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 97412 | 0) >> 2] = $1_1;
     HEAP32[(0 + 97400 | 0) >> 2] = $4_1;
     break label$5;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      $9_1 = $6_1 >>> 3 | 0;
      $6_1 = ($9_1 << 3 | 0) + 97432 | 0;
      label$13 : {
       $4_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        break label$13
       }
       HEAP32[(0 + 97392 | 0) >> 2] = (HEAP32[(0 + 97392 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$15
       }
       $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 97408 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$14;
      }
      label$16 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $6_1 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9_1 = $3_1;
       $6_1 = $4_1;
       $3_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       $3_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 97696 | 0;
       if (($5_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
        break label$19
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$18
       }
       HEAP32[(0 + 97396 | 0) >> 2] = (HEAP32[(0 + 97396 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$11
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $10_1;
     label$20 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$11
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    }
    label$21 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $489($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $487($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 16;
  label$1 : {
   label$2 : {
    $3_1 = $0_1 >>> 0 > 16 >>> 0 ? $0_1 : 16;
    if ($3_1 & ($3_1 + -1 | 0) | 0) {
     break label$2
    }
    $0_1 = $3_1;
    break label$1;
   }
   label$3 : while (1) {
    $0_1 = $2_1;
    $2_1 = $0_1 << 1 | 0;
    if ($0_1 >>> 0 < $3_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   if ((-64 - $0_1 | 0) >>> 0 > $1_1 >>> 0) {
    break label$4
   }
   HEAP32[($412() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$5 : {
   $1_1 = $1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0;
   $2_1 = $483(($1_1 + $0_1 | 0) + 12 | 0 | 0) | 0;
   if ($2_1) {
    break label$5
   }
   return 0 | 0;
  }
  $3_1 = $2_1 + -8 | 0;
  label$6 : {
   label$7 : {
    if (($0_1 + -1 | 0) & $2_1 | 0) {
     break label$7
    }
    $0_1 = $3_1;
    break label$6;
   }
   $4_1 = $2_1 + -4 | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   $2_1 = ((($2_1 + $0_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0) + -8 | 0;
   $0_1 = $2_1 + (($2_1 - $3_1 | 0) >>> 0 > 15 >>> 0 ? 0 : $0_1) | 0;
   $2_1 = $0_1 - $3_1 | 0;
   $6_1 = ($5_1 & -8 | 0) - $2_1 | 0;
   label$8 : {
    if ($5_1 & 3 | 0) {
     break label$8
    }
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $3_1 + $2_1 | 0;
    break label$6;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $0_1 + $6_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   HEAP32[$4_1 >> 2] = $2_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $3_1 + $2_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $489($3_1 | 0, $2_1 | 0);
  }
  label$9 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 3 | 0)) {
    break label$9
   }
   $3_1 = $2_1 & -8 | 0;
   if ($3_1 >>> 0 <= ($1_1 + 16 | 0) >>> 0) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
   $2_1 = $0_1 + $1_1 | 0;
   $1_1 = $3_1 - $1_1 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
   $3_1 = $0_1 + $3_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $489($2_1 | 0, $1_1 | 0);
  }
  return $0_1 + 8 | 0 | 0;
 }
 
 function $488($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) != (8 | 0)) {
      break label$3
     }
     $1_1 = $483($2_1 | 0) | 0;
     break label$2;
    }
    $3_1 = 28;
    if ($1_1 >>> 0 < 4 >>> 0) {
     break label$1
    }
    if ($1_1 & 3 | 0) {
     break label$1
    }
    $4_1 = $1_1 >>> 2 | 0;
    if ($4_1 & ($4_1 + -1 | 0) | 0) {
     break label$1
    }
    $3_1 = 48;
    if ((-64 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $1_1 = $487(($1_1 >>> 0 > 16 >>> 0 ? $1_1 : 16) | 0, $2_1 | 0) | 0;
   }
   label$4 : {
    if ($1_1) {
     break label$4
    }
    return 48 | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      $0_1 = $0_1 - $3_1 | 0;
      if (($0_1 | 0) == (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 97432 | 0;
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$3
       }
       HEAP32[(0 + 97392 | 0) >> 2] = (HEAP32[(0 + 97392 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($0_1 | 0)) {
         break label$7
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 97408 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$6;
       }
       label$8 : {
        $3_1 = $0_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $3_1 = $0_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $6_1 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5_1 = $3_1;
        $6_1 = $4_1;
        $3_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        $3_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 97696 | 0;
        if (($0_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
         break label$11
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$10
        }
        HEAP32[(0 + 97396 | 0) >> 2] = (HEAP32[(0 + 97396 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$2;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$2
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$12 : {
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$12
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      break label$2;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 97400 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   }
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($2_1 | 0) != (HEAP32[(0 + 97416 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 97416 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 97404 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 97404 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 97400 | 0) >> 2] = 0;
      HEAP32[(0 + 97412 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($2_1 | 0) != (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 97412 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 97400 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 97400 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$17 : {
      label$18 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 97432 | 0;
       label$19 : {
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 97392 | 0) >> 2] = (HEAP32[(0 + 97392 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$21
        }
        $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 97408 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$20;
       }
       label$22 : {
        $4_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $4_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $4_1;
        $6_1 = $3_1;
        $4_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        $4_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 97696 | 0;
        if (($2_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 97396 | 0) >> 2] = (HEAP32[(0 + 97396 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 97412 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 97400 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$27 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3_1 = ($1_1 & -8 | 0) + 97432 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 97392 | 0) >> 2] | 0;
      $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
      if ($4_1 & $1_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 97392 | 0) >> 2] = $4_1 | $1_1 | 0;
      $1_1 = $3_1;
      break label$28;
     }
     $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    return;
   }
   $3_1 = 31;
   label$30 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3_1 = Math_clz32($1_1 >>> 8 | 0);
    $3_1 = ((($1_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   $4_1 = ($3_1 << 2 | 0) + 97696 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6_1 = HEAP32[(0 + 97396 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 97396 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$32;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$4_1 >> 2] | 0;
     label$34 : while (1) {
      $4_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$31
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $490() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $491($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 96460 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 7 | 0) & -8 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($490() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$78($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 96460 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($412() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $492($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $46_1;
  $2$hi = i64toi32_i32$2;
  $16_1 = $2_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $48_1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1_1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $493($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $494($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $495() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $496() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $496() {
  var $0_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $21_1 = 0;
  $0_1 = global$0 - 48 | 0;
  global$0 = $0_1;
  label$1 : {
   if (!($414(1 | 0, $0_1 + 24 | 0 | 0) | 0)) {
    break label$1
   }
   $2021(HEAP32[($412() | 0) >> 2] | 0 | 0, 67766 | 0);
   wasm2js_trap();
  }
  i64toi32_i32$0 = $498($493($0_1 + 8 | 0 | 0, $0_1 + 24 | 0 | 0, 0 | 0) | 0 | 0, $497($0_1 | 0, $0_1 + 32 | 0 | 0, 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $21_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $21_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $499($0_1 + 40 | 0 | 0, $0_1 + 16 | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  global$0 = $0_1 + 48 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $497($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $14_1 = 0, $15_1 = 0, $18_1 = 0, $18$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $26($500($2_1 + 8 | 0 | 0, $0_1 | 0, 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $14_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $26(i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $18_1 = i64toi32_i32$0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $15_1;
  HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$1 = $72($2_1 + 24 | 0 | 0, $2_1 + 16 | 0 | 0, 0 | 0) | 0;
  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$2;
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $500($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $9_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $501($1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $9_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $26(i64toi32_i32$0 + 8 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
  return i64toi32_i32$1 | 0;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  i64toi32_i32$0 = $502($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  global$0 = $1_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $10_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $494($1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $10_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $72(i64toi32_i32$0 + 8 | 0 | 0, i64toi32_i32$0 | 0, 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $503() {
  return ($504() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $504() {
  return $2031() | 0 | 0;
 }
 
 function $505($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = $0_1 + $2_1 | 0;
    if (($1_1 - $3_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $410($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4_1) {
       break label$9
      }
      label$10 : {
       if (!($3_1 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $506($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $507($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($506($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $410($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $508($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $507($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $415($3_1 | 0) | 0;
   $0_1 = $507($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $416($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $509($0_1) {
  $0_1 = $0_1 | 0;
  return $775($0_1 | 0) | 0 | 0;
 }
 
 function $510($0_1) {
  $0_1 = $0_1 | 0;
  $509($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $511($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 81944 + 8 | 0;
  $1537($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  $511($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $513($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 81944 + 8 | 0;
  $1535($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $514($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $516($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $517($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $517($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $518($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $517($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $519($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $521($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $522($3_1 + 12 | 0 | 0, $522($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $523($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $524($0_1 | 0, $5_1 | 0);
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP8[$1_1 >> 0] = $525($5_1 | 0) | 0;
     $5_1 = 1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $522($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $526($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $523($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $527($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $524($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $525($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 << 24 >> 24 | 0;
 }
 
 function $526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $700($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $527($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $701($0_1 | 0, $0_1 + $1_1 | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $528($0_1) {
  $0_1 = $0_1 | 0;
  return $190() | 0 | 0;
 }
 
 function $529($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($190() | 0 | 0)) {
    break label$1
   }
   return $190() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $338(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $190() | 0 | 0;
 }
 
 function $531($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $190() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $338(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $522($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $523(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $190() | 0 | 0;
 }
 
 function $533($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $533($0_1 | 0, 82048 | 0) | 0;
  $509($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  return $534($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $536($0_1) {
  $0_1 = $0_1 | 0;
  $1979($534($0_1 | 0) | 0 | 0);
 }
 
 function $537($0_1) {
  $0_1 = $0_1 | 0;
  $536($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $538($0_1) {
  $0_1 = $0_1 | 0;
  return $543($0_1 | 0) | 0 | 0;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $540($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($53($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $556($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   label$2 : {
    if (!($314($1_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    if (($544($53($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $49($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $557($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $334($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $542($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ((HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + (($2_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $543($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $545($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $338($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP8[$2_1 >> 0] = $1_1;
  return $338($1_1 | 0) | 0 | 0;
 }
 
 function $546($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $547() {
  return $548() | 0 | 0;
 }
 
 function $548() {
  return 2147483647 | 0;
 }
 
 function $549($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $773($0_1 | 0, $1_1 | 0);
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $551($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $552($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $551($0_1 | 0, 82096 | 0) | 0;
  $509($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  return $552($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $554($0_1) {
  $0_1 = $0_1 | 0;
  $1979($552($0_1 | 0) | 0 | 0);
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  $554($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($538($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($539($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $540($539($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $557($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($53($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($538($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($316($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($503() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($544($53($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $49($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $556($2_1 + 24 | 0 | 0, $0_1 | 0) | 0;
  label$1 : {
   if (!($314($2_1 + 24 | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $1_1 = $559($2_1 + 16 | 0 | 0, $1_1 | 0) | 0;
    $3_1 = $43($2_1 + 8 | 0 | 0) | 0;
    $4_1 = 0;
    $5_1 = $315($2_1 | 0, $0_1 | 0) | 0;
    label$3 : {
     label$4 : while (1) {
      if ($541($1_1 | 0, $3_1 | 0) | 0) {
       break label$3
      }
      $6_1 = $332($1_1 | 0) | 0;
      $561($560($5_1 | 0) | 0 | 0, $6_1 | 0) | 0;
      if ($319($5_1 | 0) | 0) {
       break label$3
      }
      $333($1_1 | 0) | 0;
      $562($5_1 | 0) | 0;
      $4_1 = $4_1 + 1 | 0;
      continue label$4;
     };
    }
    if ($4_1) {
     break label$1
    }
    $49($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 4 | 0);
    break label$1;
   }
   $49($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  $557($2_1 + 24 | 0 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $559($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $560($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($325($545($2_1 | 0, $1_1 | 0) | 0 | 0, $190() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $562($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $563($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $556($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
  label$1 : {
   if (!($314($2_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   $3_1 = $315($2_1 | 0, $0_1 | 0) | 0;
   $561($560($3_1 | 0) | 0 | 0, $1_1 | 0) | 0;
   if (!($319($3_1 | 0) | 0)) {
    break label$1
   }
   $49($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  $557($2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $564($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $551($0_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  return $533($0_1 | 0, $1_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $565($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $564($0_1 | 0, 82164 | 0) | 0;
  $509($0_1 + 12 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $566($0_1) {
  $0_1 = $0_1 | 0;
  return $565($0_1 + -8 | 0 | 0) | 0 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  return $565($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  $1979($565($0_1 | 0) | 0 | 0);
 }
 
 function $569($0_1) {
  $0_1 = $0_1 | 0;
  $568($0_1 + -8 | 0 | 0);
 }
 
 function $570($0_1) {
  $0_1 = $0_1 | 0;
  $568($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  return $775($0_1 | 0) | 0 | 0;
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  $571($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 82192 + 8 | 0;
  $1537($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  $573($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $575($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 82192 + 8 | 0;
  $1535($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $576($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $577($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $578($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $517($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $579($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $517($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $580($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $581($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $582($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $522($3_1 + 12 | 0 | 0, $522($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $583($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $584($0_1 | 0, $5_1 | 0);
      $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP32[$1_1 >> 2] = $585($5_1 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $5_1 = 1;
    }
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $583($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $586($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $584($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $585($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $586($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $719($0_1 | 0, $0_1 + ($1_1 << 2 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $587($0_1) {
  $0_1 = $0_1 | 0;
  return $588() | 0 | 0;
 }
 
 function $588() {
  return -1 | 0;
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($588() | 0 | 0)) {
    break label$1
   }
   return $588() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $590(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $591($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $588() | 0 | 0;
 }
 
 function $592($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $588() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $590(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $522($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $583(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    $7_1 = $6_1 << 2 | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $7_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $593($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $588() | 0 | 0;
 }
 
 function $594($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $595($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $594($0_1 | 0, 82296 | 0) | 0;
  $571($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  return $595($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  $1979($595($0_1 | 0) | 0 | 0);
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  $597($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  return $543($0_1 | 0) | 0 | 0;
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $601($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($608($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $621($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   label$2 : {
    if (!($609($1_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    if (($610($608($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $607($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $622($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101396 | 0) | 0 | 0;
 }
 
 function $603($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $611($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  return $612(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $605($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  $613(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $607($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $192($0_1 | 0, $1_1 | 0);
 }
 
 function $608($0_1) {
  $0_1 = $0_1 | 0;
  return $328($0_1 | 0) | 0 | 0;
 }
 
 function $609($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $610($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($763($0_1 | 0) | 0) ^ ($763($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $590(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $590(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $614($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $590($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $590($1_1 | 0) | 0 | 0;
 }
 
 function $616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $616($0_1 | 0, 82344 | 0) | 0;
  $571($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  return $617($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  $1979($617($0_1 | 0) | 0 | 0);
 }
 
 function $620($0_1) {
  $0_1 = $0_1 | 0;
  $619($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $621($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($599($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($600($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $601($600($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($608($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($599($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($316($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($503() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($610($608($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $607($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $623($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $624($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($614($615($2_1 | 0, $1_1 | 0) | 0 | 0, $588() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $626($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $627($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $628($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $632($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $633($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
 }
 
 function $634($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
 }
 
 function $635($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $636($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1536($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $637($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $639($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
    if (!($3_1 & 16 | 0)) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) >>> 0 >= ($631($1_1 | 0) | 0) >>> 0) {
      break label$3
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $631($1_1 | 0) | 0;
    }
    $3_1 = $630($1_1 | 0) | 0;
    $4_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
    $640($1_1 + 32 | 0 | 0);
    $641($0_1 | 0, $3_1 | 0, $4_1 | 0, $2_1 + 24 | 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (!($3_1 & 8 | 0)) {
     break label$4
    }
    $3_1 = $627($1_1 | 0) | 0;
    $4_1 = $629($1_1 | 0) | 0;
    $640($1_1 + 32 | 0 | 0);
    $641($0_1 | 0, $3_1 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   $640($1_1 + 32 | 0 | 0);
   $642($0_1 | 0, $2_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  $7($0_1 | 0) | 0;
 }
 
 function $641($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $643($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $644($3_1 | 0, $1_1 | 0, $2_1 | 0);
  $5($3_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $642($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $643($0_1 | 0, $2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $5($1_1 | 0);
  $59($1_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $643($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $739($280($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $644($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $740($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($741($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($742($4_1 | 0) | 0)) {
      break label$3
     }
     $297($0_1 | 0, $4_1 | 0);
     $5_1 = $298($0_1 | 0) | 0;
     break label$2;
    }
    $744($3_1 + 8 | 0 | 0, $292($0_1 | 0) | 0 | 0, ($743($4_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $745($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $746($0_1 | 0, $5_1 | 0);
    $747($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $748($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $299($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $299($5_1 | 0, $3_1 + 7 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $749($0_1 | 0);
  wasm2js_trap();
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  label$1 : {
   if (!($10($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($294($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2003($0_1 | 0, $1_1 | 0, 0 | 0);
 }
 
 function $647($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $648($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0) >>> 0 >= ($631($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $631($0_1 | 0) | 0;
  }
  label$2 : {
   if (!((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 8 | 0)) {
    break label$2
   }
   label$3 : {
    if (($629($0_1 | 0) | 0) >>> 0 >= (HEAP32[($0_1 + 44 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    $633($0_1 | 0, $627($0_1 | 0) | 0 | 0, $628($0_1 | 0) | 0 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0);
   }
   if (($628($0_1 | 0) | 0) >>> 0 >= ($629($0_1 | 0) | 0) >>> 0) {
    break label$2
   }
   return $338(HEAP8[($628($0_1 | 0) | 0) >> 0] | 0 | 0) | 0 | 0;
  }
  return $190() | 0 | 0;
 }
 
 function $649($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0) >>> 0 >= ($631($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $631($0_1 | 0) | 0;
  }
  label$2 : {
   if (($627($0_1 | 0) | 0) >>> 0 >= ($628($0_1 | 0) | 0) >>> 0) {
    break label$2
   }
   label$3 : {
    if (!($325($1_1 | 0, $190() | 0 | 0) | 0)) {
     break label$3
    }
    $633($0_1 | 0, $627($0_1 | 0) | 0 | 0, ($628($0_1 | 0) | 0) + -1 | 0 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0);
    return $650($1_1 | 0) | 0 | 0;
   }
   label$4 : {
    if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 16 | 0) {
     break label$4
    }
    if (!($546($525($1_1 | 0) | 0 | 0, HEAP8[(($628($0_1 | 0) | 0) + -1 | 0) >> 0] | 0 | 0) | 0)) {
     break label$2
    }
   }
   $633($0_1 | 0, $627($0_1 | 0) | 0 | 0, ($628($0_1 | 0) | 0) + -1 | 0 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0);
   $2_1 = $525($1_1 | 0) | 0;
   HEAP8[($628($0_1 | 0) | 0) >> 0] = $2_1;
   return $1_1 | 0;
  }
  return $190() | 0 | 0;
 }
 
 function $650($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($325($0_1 | 0, $190() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($190() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $9_1 = 0, $2_1 = 0, $10_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($325($1_1 | 0, $190() | 0 | 0) | 0) {
     break label$2
    }
    $3_1 = $628($0_1 | 0) | 0;
    $4_1 = $627($0_1 | 0) | 0;
    label$3 : {
     if (($631($0_1 | 0) | 0 | 0) != ($632($0_1 | 0) | 0 | 0)) {
      break label$3
     }
     label$4 : {
      if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 16 | 0) {
       break label$4
      }
      $0_1 = $190() | 0;
      break label$1;
     }
     $5_1 = $631($0_1 | 0) | 0;
     $6_1 = $630($0_1 | 0) | 0;
     $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     $8_1 = $630($0_1 | 0) | 0;
     $9_1 = $0_1 + 32 | 0;
     $2000($9_1 | 0, 0 | 0);
     $646($9_1 | 0, $645($9_1 | 0) | 0 | 0);
     $10_1 = $323($9_1 | 0) | 0;
     $634($0_1 | 0, $10_1 | 0, $10_1 + ($52($9_1 | 0) | 0) | 0 | 0);
     $635($0_1 | 0, $5_1 - $6_1 | 0 | 0);
     HEAP32[($0_1 + 44 | 0) >> 2] = ($630($0_1 | 0) | 0) + ($7_1 - $8_1 | 0) | 0;
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = ($631($0_1 | 0) | 0) + 1 | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($652($2_1 + 12 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
    label$5 : {
     if (!((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 8 | 0)) {
      break label$5
     }
     $9_1 = $323($0_1 + 32 | 0 | 0) | 0;
     $633($0_1 | 0, $9_1 | 0, $9_1 + ($3_1 - $4_1 | 0) | 0 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0);
    }
    $0_1 = $545($0_1 | 0, $525($1_1 | 0) | 0 | 0) | 0;
    break label$1;
   }
   $0_1 = $650($1_1 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $653($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $762($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $654($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $6$hi = 0, $6_1 = 0, $7$hi = 0, $7_1 = 0, $5_1 = 0, $5$hi = 0, i64toi32_i32$4 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0;
  label$1 : {
   if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) >>> 0 >= ($631($1_1 | 0) | 0) >>> 0) {
    break label$1
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = $631($1_1 | 0) | 0;
  }
  i64toi32_i32$0 = -1;
  $5_1 = -1;
  $5$hi = i64toi32_i32$0;
  label$2 : {
   $8_1 = $4_1 & 24 | 0;
   if (!$8_1) {
    break label$2
   }
   label$3 : {
    if (($3_1 | 0) != (1 | 0)) {
     break label$3
    }
    if (($8_1 | 0) == (24 | 0)) {
     break label$2
    }
   }
   i64toi32_i32$0 = 0;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   label$4 : {
    $8_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$4
    }
    i64toi32_i32$1 = $8_1 - ($323($1_1 + 32 | 0 | 0) | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$0;
   }
   label$5 : {
    label$6 : {
     switch ($3_1 | 0) {
     case 1:
      label$8 : {
       if (!($4_1 & 8 | 0)) {
        break label$8
       }
       i64toi32_i32$1 = ($628($1_1 | 0) | 0) - ($627($1_1 | 0) | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $6_1 = i64toi32_i32$1;
       $6$hi = i64toi32_i32$0;
       break label$5;
      }
      i64toi32_i32$1 = ($631($1_1 | 0) | 0) - ($630($1_1 | 0) | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$0;
      break label$5;
     case 0:
      break label$5;
     case 2:
      break label$6;
     default:
      break label$2;
     };
    }
    i64toi32_i32$0 = $7$hi;
    $6_1 = $7_1;
    $6$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + $2$hi | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $2_1 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if (($2$hi | 0) < (i64toi32_i32$2 | 0)) {
    $19_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $20_1 = 0
     } else {
      $20_1 = 1
     }
     $21_1 = $20_1;
    } else {
     $21_1 = 0
    }
    $19_1 = $21_1;
   }
   if ($19_1) {
    break label$2
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   if ((i64toi32_i32$0 | 0) < ($2$hi | 0)) {
    $22_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
      $23_1 = 0
     } else {
      $23_1 = 1
     }
     $24_1 = $23_1;
    } else {
     $24_1 = 0
    }
    $22_1 = $24_1;
   }
   if ($22_1) {
    break label$2
   }
   $3_1 = $4_1 & 8 | 0;
   label$9 : {
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $2$hi;
    if (!($2_1 | $2$hi | 0)) {
     break label$9
    }
    label$10 : {
     if (!$3_1) {
      break label$10
     }
     if (!($628($1_1 | 0) | 0)) {
      break label$2
     }
    }
    if (!($4_1 & 16 | 0)) {
     break label$9
    }
    if (!($631($1_1 | 0) | 0)) {
     break label$2
    }
   }
   label$11 : {
    if (!$3_1) {
     break label$11
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $2$hi;
    $633($1_1 | 0, $627($1_1 | 0) | 0 | 0, ($627($1_1 | 0) | 0) + $2_1 | 0 | 0, HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0);
   }
   label$12 : {
    if (!($4_1 & 16 | 0)) {
     break label$12
    }
    $634($1_1 | 0, $630($1_1 | 0) | 0 | 0, $632($1_1 | 0) | 0 | 0);
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $2$hi;
    $647($1_1 | 0, $2_1 | 0);
   }
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $2$hi;
   $5_1 = $2_1;
   $5$hi = $2$hi;
  }
  i64toi32_i32$3 = $5$hi;
  $517($0_1 | 0, $5_1 | 0, i64toi32_i32$3 | 0) | 0;
 }
 
 function $655($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = $656($0_1 + 8 | 0 | 0, $1_1 | 0, $2_1 | 8 | 0 | 0) | 0;
  $0_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $549($0_1 | 0, 0 | 0);
   return;
  }
  $49($0_1 | 0, 4 | 0);
 }
 
 function $656($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($0_1 + 64 | 0) >> 2] | 0) {
     break label$2
    }
    $4_1 = $657($2_1 | 0) | 0;
    if (!$4_1) {
     break label$2
    }
    $1_1 = $429($1_1 | 0, $4_1 | 0) | 0;
    HEAP32[($0_1 + 64 | 0) >> 2] = $1_1;
    if (!$1_1) {
     break label$2
    }
    HEAP32[($0_1 + 88 | 0) >> 2] = $2_1;
    if (!($2_1 & 2 | 0)) {
     break label$1
    }
    $3_1 = 0;
    if (!($434($1_1 | 0, 0 | 0, 2 | 0) | 0)) {
     break label$1
    }
    $418(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($0_1 + 64 | 0) >> 2] = 0;
   }
   return $3_1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 65819;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                $0_1 = $0_1 & -3 | 0;
                switch ($0_1 + -1 | 0 | 0) {
                case 15:
                 break label$1;
                case 23:
                 break label$11;
                case 7:
                 break label$12;
                case 0:
                case 16:
                 break label$13;
                case 1:
                case 2:
                case 3:
                case 5:
                case 6:
                case 9:
                case 10:
                case 13:
                case 14:
                case 17:
                case 18:
                case 21:
                case 22:
                case 25:
                case 26:
                 break label$2;
                case 12:
                case 28:
                 break label$3;
                case 27:
                 break label$5;
                case 11:
                 break label$6;
                case 4:
                case 20:
                 break label$7;
                case 19:
                 break label$8;
                case 8:
                case 24:
                 break label$9;
                default:
                 break label$14;
                };
               }
               label$15 : {
                switch ($0_1 + -48 | 0 | 0) {
                case 0:
                 break label$1;
                case 1:
                case 2:
                case 3:
                 break label$2;
                case 4:
                 break label$8;
                default:
                 break label$15;
                };
               }
               switch ($0_1 + -56 | 0 | 0) {
               case 0:
                break label$10;
               case 4:
                break label$4;
               default:
                break label$2;
               };
              }
              return 67902 | 0;
             }
             return 66615 | 0;
            }
            return 69184 | 0;
           }
           return 69181 | 0;
          }
          return 69187 | 0;
         }
         return 67849 | 0;
        }
        return 67859 | 0;
       }
       return 67852 | 0;
      }
      return 67866 | 0;
     }
     return 67862 | 0;
    }
    return 67870 | 0;
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $658($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $513($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 82416 + 8 | 0;
  $411($0_1 + 52 | 0 | 0, 0 | 0, 47 | 0) | 0;
  $636($1_1 + 8 | 0 | 0, $0_1 | 0);
  $2_1 = $659($1_1 + 8 | 0 | 0) | 0;
  $1537($1_1 + 8 | 0 | 0) | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $636($1_1 | 0, $0_1 | 0);
   HEAP32[($0_1 + 68 | 0) >> 2] = $660($1_1 | 0) | 0;
   $1537($1_1 | 0) | 0;
   HEAP8[($0_1 + 98 | 0) >> 0] = $661(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, 0, 4096) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  return $1538($0_1 | 0, 101412 | 0) | 0 | 0;
 }
 
 function $660($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101412 | 0) | 0 | 0;
 }
 
 function $661($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 82416 + 8 | 0;
  $663($0_1 | 0) | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 96 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $1980($1_1 | 0);
  }
  label$2 : {
   if (!(HEAPU8[($0_1 + 97 | 0) >> 0] | 0)) {
    break label$2
   }
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   $1980($1_1 | 0);
  }
  return $511($0_1 | 0) | 0 | 0;
 }
 
 function $663($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if ($2_1) {
     break label$2
    }
    $0_1 = 0;
    break label$1;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = 54;
   $2_1 = $664($1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
   $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
   $4_1 = $418($665($2_1 | 0) | 0 | 0) | 0;
   HEAP32[($0_1 + 64 | 0) >> 2] = 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   $666($2_1 | 0) | 0;
   $0_1 = $4_1 | $3_1 | 0 ? 0 : $0_1;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $664($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $668($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $665($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($669($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($669($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $666($0_1) {
  $0_1 = $0_1 | 0;
  $670($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  $662($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $668($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $765($0_1 | 0, $1_1 | 0) | 0;
  $766($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $669($0_1) {
  $0_1 = $0_1 | 0;
  return $768($0_1 | 0) | 0 | 0;
 }
 
 function $670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($669($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($669($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($767($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1) | 0;
  }
 }
 
 function $671($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[($0_1 + 64 | 0) >> 2] | 0) {
      break label$3
     }
     $2_1 = $190() | 0;
     break label$2;
    }
    $2_1 = $672($0_1 | 0) | 0;
    label$4 : {
     if ($628($0_1 | 0) | 0) {
      break label$4
     }
     $3_1 = $1_1 + 16 | 0;
     $633($0_1 | 0, $1_1 + 15 | 0 | 0, $3_1 | 0, $3_1 | 0);
    }
    $3_1 = 0;
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $2_1 = $629($0_1 | 0) | 0;
     $3_1 = $627($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = 4;
     HEAP32[($1_1 + 8 | 0) >> 2] = ($2_1 - $3_1 | 0 | 0) / (2 | 0) | 0;
     $3_1 = HEAP32[($673($1_1 + 8 | 0 | 0, $1_1 + 4 | 0 | 0) | 0) >> 2] | 0;
    }
    $2_1 = $190() | 0;
    label$6 : {
     label$7 : {
      if (($628($0_1 | 0) | 0 | 0) != ($629($0_1 | 0) | 0 | 0)) {
       break label$7
      }
      $505($627($0_1 | 0) | 0 | 0, ($629($0_1 | 0) | 0) - $3_1 | 0 | 0, $3_1 | 0) | 0;
      label$8 : {
       if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
        break label$8
       }
       $4_1 = $629($0_1 | 0) | 0;
       $5_1 = $627($0_1 | 0) | 0;
       $4_1 = $431(($627($0_1 | 0) | 0) + $3_1 | 0 | 0, 1 | 0, $4_1 - ($3_1 + $5_1 | 0) | 0 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0;
       if (!$4_1) {
        break label$6
       }
       $633($0_1 | 0, $627($0_1 | 0) | 0 | 0, ($627($0_1 | 0) | 0) + $3_1 | 0 | 0, (($627($0_1 | 0) | 0) + $3_1 | 0) + $4_1 | 0 | 0);
       $2_1 = $338(HEAP8[($628($0_1 | 0) | 0) >> 0] | 0 | 0) | 0;
       break label$6;
      }
      label$9 : {
       label$10 : {
        $5_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
        if (($5_1 | 0) != ($4_1 | 0)) {
         break label$10
        }
        $6_1 = $4_1;
        break label$9;
       }
       $505(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $4_1 | 0, $5_1 - $4_1 | 0 | 0) | 0;
       $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       $6_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      }
      $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $4_1 = $5_1 + ($6_1 - $4_1 | 0) | 0;
      HEAP32[($0_1 + 36 | 0) >> 2] = $4_1;
      $5_1 = $5_1 + (wasm2js_i32$0 = 8, wasm2js_i32$1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0, wasm2js_i32$2 = ($5_1 | 0) == ($0_1 + 44 | 0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $5_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 60 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 - $4_1 | 0;
      $4_1 = HEAP32[($673($1_1 + 8 | 0 | 0, $1_1 + 4 | 0 | 0) | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
      HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      HEAP32[($0_1 + 84 | 0) >> 2] = i64toi32_i32$1;
      $4_1 = $431(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0, $4_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0;
      if (!$4_1) {
       break label$6
      }
      $5_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$1
      }
      $4_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $4_1 | 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
      label$11 : {
       label$12 : {
        if (($674($5_1 | 0, $0_1 + 72 | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $4_1 | 0, $0_1 + 36 | 0 | 0, ($627($0_1 | 0) | 0) + $3_1 | 0 | 0, ($627($0_1 | 0) | 0) + (HEAP32[($0_1 + 60 | 0) >> 2] | 0) | 0 | 0, $1_1 + 8 | 0 | 0) | 0 | 0) != (3 | 0)) {
         break label$12
        }
        $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $633($0_1 | 0, $2_1 | 0, $2_1 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0);
        break label$11;
       }
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == (($627($0_1 | 0) | 0) + $3_1 | 0 | 0)) {
        break label$6
       }
       $633($0_1 | 0, $627($0_1 | 0) | 0 | 0, ($627($0_1 | 0) | 0) + $3_1 | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
      }
      $2_1 = $338(HEAP8[($628($0_1 | 0) | 0) >> 0] | 0 | 0) | 0;
      break label$6;
     }
     $2_1 = $338(HEAP8[($628($0_1 | 0) | 0) >> 0] | 0 | 0) | 0;
    }
    if (($627($0_1 | 0) | 0 | 0) != ($1_1 + 15 | 0 | 0)) {
     break label$2
    }
    $633($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
   }
   global$0 = $1_1 + 16 | 0;
   return $2_1 | 0;
  }
  $675();
  wasm2js_trap();
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $14_1 = 0, $24_1 = 0;
  label$1 : {
   $1_1 = (HEAP32[($0_1 + 92 | 0) >> 2] | 0) & 8 | 0;
   if ($1_1) {
    break label$1
   }
   $634($0_1 | 0, 0 | 0, 0 | 0);
   label$2 : {
    label$3 : {
     if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
      break label$3
     }
     $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     $14_1 = $2_1;
     $2_1 = $2_1 + (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0;
     $633($0_1 | 0, $14_1 | 0, $2_1 | 0, $2_1 | 0);
     break label$2;
    }
    $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $24_1 = $2_1;
    $2_1 = $2_1 + (HEAP32[($0_1 + 60 | 0) >> 2] | 0) | 0;
    $633($0_1 | 0, $24_1 | 0, $2_1 | 0, $2_1 | 0);
   }
   HEAP32[($0_1 + 92 | 0) >> 2] = 8;
  }
  return !$1_1 | 0;
 }
 
 function $673($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $676($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $674($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $675() {
  fimport$79();
  wasm2js_trap();
 }
 
 function $676($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $761($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $677($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
    break label$1
   }
   if (($627($0_1 | 0) | 0) >>> 0 >= ($628($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    if (!($325($1_1 | 0, $190() | 0 | 0) | 0)) {
     break label$2
    }
    $524($0_1 | 0, -1 | 0);
    return $650($1_1 | 0) | 0 | 0;
   }
   label$3 : {
    if ((HEAPU8[($0_1 + 88 | 0) >> 0] | 0) & 16 | 0) {
     break label$3
    }
    if (!($546($525($1_1 | 0) | 0 | 0, HEAP8[(($628($0_1 | 0) | 0) + -1 | 0) >> 0] | 0 | 0) | 0)) {
     break label$1
    }
   }
   $524($0_1 | 0, -1 | 0);
   $2_1 = $525($1_1 | 0) | 0;
   HEAP8[($628($0_1 | 0) | 0) >> 0] = $2_1;
   return $1_1 | 0;
  }
  return $190() | 0 | 0;
 }
 
 function $678($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $7_1 = 0, $70_1 = 0, $72_1 = 0, $111_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
     break label$2
    }
    $679($0_1 | 0);
    $3_1 = $630($0_1 | 0) | 0;
    $4_1 = $632($0_1 | 0) | 0;
    label$3 : {
     if ($325($1_1 | 0, $190() | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      if ($631($0_1 | 0) | 0) {
       break label$4
      }
      $634($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 16 | 0 | 0);
     }
     $5_1 = $525($1_1 | 0) | 0;
     HEAP8[($631($0_1 | 0) | 0) >> 0] = $5_1;
     $647($0_1 | 0, 1 | 0);
    }
    label$5 : {
     if (($631($0_1 | 0) | 0 | 0) == ($630($0_1 | 0) | 0 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
        break label$7
       }
       $5_1 = $631($0_1 | 0) | 0;
       $6_1 = $630($0_1 | 0) | 0;
       $5_1 = $5_1 - $6_1 | 0;
       if (($508($630($0_1 | 0) | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
        break label$2
       }
       break label$6;
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $7_1 = $0_1 + 72 | 0;
      label$8 : {
       label$9 : while (1) {
        $5_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$8
        }
        $70_1 = $630($0_1 | 0) | 0;
        $72_1 = $631($0_1 | 0) | 0;
        $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $5_1 = $680($5_1 | 0, $7_1 | 0, $70_1 | 0, $72_1 | 0, $2_1 + 4 | 0 | 0, $6_1 | 0, $6_1 + (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
        if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) == ($630($0_1 | 0) | 0 | 0)) {
         break label$2
        }
        label$10 : {
         if (($5_1 | 0) != (3 | 0)) {
          break label$10
         }
         $5_1 = $631($0_1 | 0) | 0;
         $6_1 = $630($0_1 | 0) | 0;
         $5_1 = $5_1 - $6_1 | 0;
         if (($508($630($0_1 | 0) | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
          break label$2
         }
         break label$6;
        }
        if ($5_1 >>> 0 > 1 >>> 0) {
         break label$2
        }
        $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $111_1 = $6_1;
        $6_1 = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $6_1 | 0;
        if (($508($111_1 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
         break label$2
        }
        if (($5_1 | 0) != (1 | 0)) {
         break label$6
        }
        $634($0_1 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $631($0_1 | 0) | 0 | 0);
        $635($0_1 | 0, ($632($0_1 | 0) | 0) - ($630($0_1 | 0) | 0) | 0 | 0);
        continue label$9;
       };
      }
      $675();
      wasm2js_trap();
     }
     $634($0_1 | 0, $3_1 | 0, $4_1 | 0);
    }
    $0_1 = $650($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $190() | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $679($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAPU8[($0_1 + 92 | 0) >> 0] | 0) & 16 | 0) {
    break label$1
   }
   $633($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if ($1_1 >>> 0 < 9 >>> 0) {
      break label$3
     }
     label$4 : {
      if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
       break label$4
      }
      $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $634($0_1 | 0, $2_1 | 0, ($1_1 + $2_1 | 0) + -1 | 0 | 0);
      break label$2;
     }
     $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $634($0_1 | 0, $1_1 | 0, ($1_1 + (HEAP32[($0_1 + 60 | 0) >> 2] | 0) | 0) + -1 | 0 | 0);
     break label$2;
    }
    $634($0_1 | 0, 0 | 0, 0 | 0);
   }
   HEAP32[($0_1 + 92 | 0) >> 2] = 16;
  }
 }
 
 function $680($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $681($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $633($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
  $634($0_1 | 0, 0 | 0, 0 | 0);
  label$1 : {
   if (!(HEAPU8[($0_1 + 96 | 0) >> 0] | 0)) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $1980($4_1 | 0);
  }
  label$2 : {
   if (!(HEAPU8[($0_1 + 97 | 0) >> 0] | 0)) {
    break label$2
   }
   $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   $1980($4_1 | 0);
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($2_1 >>> 0 < 9 >>> 0) {
       break label$6
      }
      $4_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
      label$7 : {
       if (!$1_1) {
        break label$7
       }
       if (!($4_1 & 255 | 0)) {
        break label$7
       }
       HEAP8[($0_1 + 96 | 0) >> 0] = 0;
       HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
       break label$4;
      }
      $2_1 = $1978($2_1 | 0) | 0;
      HEAP8[($0_1 + 96 | 0) >> 0] = 1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
      break label$5;
     }
     HEAP8[($0_1 + 96 | 0) >> 0] = 0;
     HEAP32[($0_1 + 52 | 0) >> 2] = 8;
     HEAP32[($0_1 + 32 | 0) >> 2] = $0_1 + 44 | 0;
     $4_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
    }
    if ($4_1 & 255 | 0) {
     break label$4
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = 8;
    $4_1 = HEAP32[($682($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0) >> 2] | 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = $4_1;
    label$8 : {
     if (!$1_1) {
      break label$8
     }
     $2_1 = 0;
     if ($4_1 >>> 0 > 7 >>> 0) {
      break label$3
     }
    }
    $2_1 = 1;
    $1_1 = $1978($4_1 | 0) | 0;
    break label$3;
   }
   $1_1 = 0;
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
   $2_1 = 0;
  }
  HEAP8[($0_1 + 97 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $683($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $683($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $700($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $684($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $36_1 = 0, $38$hi = 0, $15_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   $6_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$1
   }
   $6_1 = $685($6_1 | 0) | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
       break label$4
      }
      label$5 : {
       i64toi32_i32$0 = $2$hi;
       if (!($2_1 | i64toi32_i32$0 | 0)) {
        break label$5
       }
       if (($6_1 | 0) < (1 | 0)) {
        break label$4
       }
      }
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
       break label$3
      }
     }
     i64toi32_i32$0 = -1;
     $517($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
     break label$2;
    }
    label$6 : {
     if ($3_1 >>> 0 < 3 >>> 0) {
      break label$6
     }
     i64toi32_i32$0 = -1;
     $517($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
     break label$2;
    }
    label$7 : {
     $36_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = $6_1 >> 31 | 0;
     $38$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $38$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, $2$hi | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     i64toi32_i32$4 = ($6_1 | 0) > (0 | 0);
     $15_1 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ? $15_1 : 0;
     i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
     if (!($433($36_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, $3_1 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$2 = -1;
     $517($0_1 | 0, -1 | 0, i64toi32_i32$2 | 0) | 0;
     break label$2;
    }
    i64toi32_i32$2 = $436(HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $6_1 = $517($0_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$3 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    HEAP32[i64toi32_i32$3 >> 2] = $2_1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$2;
    $686($6_1 | 0, i64toi32_i32$3 | 0);
   }
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $675();
  wasm2js_trap();
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $687($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $20_1 = 0, $32_1 = 0, $37_1 = 0, $40_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
      break label$3
     }
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($1_1) | 0)) {
      break label$2
     }
    }
    i64toi32_i32$0 = -1;
    $517($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    $20_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = $550($2_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    if (!($433($20_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0) | 0)) {
     break label$4
    }
    i64toi32_i32$1 = -1;
    $517($0_1 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
    break label$1;
   }
   $688($4_1 + 8 | 0 | 0, $2_1 | 0);
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   $32_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $32_1;
   HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $37_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $37_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[i64toi32_i32$1 >> 2] = $40_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $689($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $51_1 = 0, $73_1 = 0, $100$hi = 0, $128$hi = 0, $140_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     label$4 : {
      $4_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
      if (!($4_1 & 16 | 0)) {
       break label$4
      }
      label$5 : {
       if (($631($0_1 | 0) | 0 | 0) == ($630($0_1 | 0) | 0 | 0)) {
        break label$5
       }
       $2_1 = -1;
       if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $190() | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($190() | 0 | 0)) {
        break label$1
       }
      }
      $3_1 = $0_1 + 72 | 0;
      label$6 : while (1) {
       $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       $4_1 = $690(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 | 0, $2_1 + (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
       $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       $51_1 = $2_1;
       $2_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) - $2_1 | 0;
       if (($508($51_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != ($2_1 | 0)) {
        break label$2
       }
       label$7 : {
        switch ($4_1 + -1 | 0 | 0) {
        case 1:
         break label$2;
        case 0:
         continue label$6;
        default:
         break label$7;
        };
       }
       break label$6;
      };
      $2_1 = 0;
      if (!($420(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      break label$2;
     }
     if (!($4_1 & 8 | 0)) {
      break label$1
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $1_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
          break label$11
         }
         i64toi32_i32$0 = ($629($0_1 | 0) | 0) - ($628($0_1 | 0) | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
         $5_1 = i64toi32_i32$0;
         $5$hi = i64toi32_i32$1;
         break label$10;
        }
        $2_1 = $685($3_1 | 0) | 0;
        i64toi32_i32$0 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) - (HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $5_1 = i64toi32_i32$0;
        $5$hi = i64toi32_i32$1;
        label$12 : {
         if (($2_1 | 0) < (1 | 0)) {
          break label$12
         }
         i64toi32_i32$0 = Math_imul(($629($0_1 | 0) | 0) - ($628($0_1 | 0) | 0) | 0, $2_1);
         i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
         $100$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $5$hi;
         i64toi32_i32$1 = $100$hi;
         i64toi32_i32$2 = i64toi32_i32$0;
         i64toi32_i32$0 = $5$hi;
         i64toi32_i32$3 = $5_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $5_1 = i64toi32_i32$4;
         $5$hi = i64toi32_i32$5;
         break label$10;
        }
        if (($628($0_1 | 0) | 0 | 0) != ($629($0_1 | 0) | 0 | 0)) {
         break label$9
        }
       }
       $2_1 = 0;
       break label$8;
      }
      $2_1 = $691(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, ($628($0_1 | 0) | 0) - ($627($0_1 | 0) | 0) | 0 | 0) | 0;
      i64toi32_i32$2 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) - ($2_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $128$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $5$hi;
      i64toi32_i32$5 = $128$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + $5$hi | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $5_1 = i64toi32_i32$0;
      $5$hi = i64toi32_i32$4;
      $2_1 = 1;
     }
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
     i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     if ($433(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 | 0, 1 | 0) | 0) {
      break label$2
     }
     label$13 : {
      if (!$2_1) {
       break label$13
      }
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $140_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[($0_1 + 72 | 0) >> 2] = $140_1;
      HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$5;
     }
     $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
     HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
     $2_1 = 0;
     $633($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
     HEAP32[($0_1 + 92 | 0) >> 2] = 0;
     break label$1;
    }
    $675();
    wasm2js_trap();
   }
   $2_1 = -1;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $690($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $691($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $692($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $660($1_1 | 0) | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1;
  $2_1 = HEAPU8[($0_1 + 98 | 0) >> 0] | 0;
  $1_1 = $661($1_1 | 0) | 0;
  HEAP8[($0_1 + 98 | 0) >> 0] = $1_1;
  label$1 : {
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $633($0_1 | 0, 0 | 0, 0 | 0, 0 | 0);
   $634($0_1 | 0, 0 | 0, 0 | 0);
   $1_1 = HEAPU8[($0_1 + 96 | 0) >> 0] | 0;
   label$2 : {
    if (!(HEAPU8[($0_1 + 98 | 0) >> 0] | 0)) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 255 | 0)) {
      break label$3
     }
     $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     $1980($1_1 | 0);
    }
    HEAP8[($0_1 + 96 | 0) >> 0] = HEAPU8[($0_1 + 97 | 0) >> 0] | 0;
    HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
    $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    HEAP32[($0_1 + 56 | 0) >> 2] = 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = 0;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 97 | 0) >> 0] = 0;
    return;
   }
   label$4 : {
    if ($1_1 & 255 | 0) {
     break label$4
    }
    $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    if (($1_1 | 0) == ($0_1 + 44 | 0 | 0)) {
     break label$4
    }
    HEAP8[($0_1 + 97 | 0) >> 0] = 0;
    HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
    $1_1 = $1978($1_1 | 0) | 0;
    HEAP8[($0_1 + 96 | 0) >> 0] = 1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
    return;
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($0_1 + 60 | 0) >> 2] = $1_1;
   $1_1 = $1978($1_1 | 0) | 0;
   HEAP8[($0_1 + 97 | 0) >> 0] = 1;
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
  }
 }
 
 function $693($0_1) {
  $0_1 = $0_1 | 0;
  $1979($193($0_1 | 0) | 0 | 0);
 }
 
 function $694($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $550($2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$0, i64toi32_i32$1, 0, $3_1);
 }
 
 function $695($0_1) {
  $0_1 = $0_1 | 0;
  $1979($181($0_1 | 0) | 0 | 0);
 }
 
 function $696($0_1) {
  $0_1 = $0_1 | 0;
  $695($0_1 + -8 | 0 | 0);
 }
 
 function $697($0_1) {
  $0_1 = $0_1 | 0;
  $695($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $698($0_1) {
  $0_1 = $0_1 | 0;
  $1979($45($0_1 | 0) | 0 | 0);
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  $698($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $700($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $702($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $702($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $703($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $705($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $704($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $706($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $707($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $708($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $703($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $709($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  return $710($0_1 | 0) | 0 | 0;
 }
 
 function $705($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $2_1 - $1_1 | 0;
  label$1 : {
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $505($3_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1 + $5_1 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $5_1 | 0;
  $708($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $706($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $712($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $707($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $713($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $708($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $711($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $709($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $714($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $714($2_1 | 0) | 0;
  $715($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  return $327($0_1 | 0) | 0 | 0;
 }
 
 function $711($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $712($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $717($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($327($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  return $716($0_1 | 0) | 0 | 0;
 }
 
 function $715($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $716($0_1) {
  $0_1 = $0_1 | 0;
  return $14($0_1 | 0) | 0 | 0;
 }
 
 function $717($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $718($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $718($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($14($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $719($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $720($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $720($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $721($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $723($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $722($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $724($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $725($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $726($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $721($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $727($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  return $728($0_1 | 0) | 0 | 0;
 }
 
 function $723($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $2_1 - $1_1 | 0;
  label$1 : {
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $505($3_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1 + $5_1 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $5_1 | 0;
  $726($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $730($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $731($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $726($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $729($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $727($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $732($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $732($2_1 | 0) | 0;
  $733($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $728($0_1) {
  $0_1 = $0_1 | 0;
  return $736($0_1 | 0) | 0 | 0;
 }
 
 function $729($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $737($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $731($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($736($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $732($0_1) {
  $0_1 = $0_1 | 0;
  return $734($0_1 | 0) | 0 | 0;
 }
 
 function $733($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $734($0_1) {
  $0_1 = $0_1 | 0;
  return $735($0_1 | 0) | 0 | 0;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $737($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $738($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $738($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($735($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $739($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $740($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $750($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $741($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $751($7($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($752() | 0) >>> 1 | 0) >>> 0) | 0) + -16 | 0 | 0;
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 11 >>> 0 | 0;
 }
 
 function $743($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $755($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $744($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $754($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($12($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $747($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $12($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $12($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $748($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($12($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  $753(67266 | 0);
  wasm2js_trap();
 }
 
 function $750($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  return $752() | 0 | 0;
 }
 
 function $752() {
  return $756() | 0 | 0;
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
  fimport$79();
  wasm2js_trap();
 }
 
 function $754($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($751($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $757();
   wasm2js_trap();
  }
  return $758($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $755($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 15 | 0) & -16 | 0 | 0;
 }
 
 function $756() {
  return -1 | 0;
 }
 
 function $757() {
  fimport$79();
  wasm2js_trap();
 }
 
 function $758($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($305($1_1 | 0) | 0)) {
    break label$1
   }
   return $759($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  return $760($0_1 | 0) | 0 | 0;
 }
 
 function $759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1981($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $760($0_1) {
  $0_1 = $0_1 | 0;
  return $1977($0_1 | 0) | 0 | 0;
 }
 
 function $761($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $762($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $763($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($614($612($1_1 | 0) | 0 | 0, $588() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $765($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $766($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  return $769($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $768($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $769($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $770($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label$1;
  };
 }
 
 function $771($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1536($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $774($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
    break label$1
   }
   $777(66597 | 0);
   wasm2js_trap();
  }
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $761($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $775($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 83812 + 8 | 0;
  $770($0_1 | 0, 0 | 0);
  $1537($0_1 + 28 | 0 | 0) | 0;
  $484(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  $484(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
  $484(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
  $484(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  $775($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  fimport$79();
  wasm2js_trap();
 }
 
 function $778($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  $411($0_1 + 32 | 0 | 0, 0 | 0, 40 | 0) | 0;
  $1535($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $779($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $780($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $782($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $783($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $3_1 = $415($1_1 | 0) | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($4_1) {
       break label$5
      }
      $430($1_1 | 0) | 0;
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$4
      }
     }
     if ($4_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
      break label$3
     }
    }
    if (!$3_1) {
     break label$1
    }
    $416($1_1 | 0);
    return -1 | 0;
   }
   $2_1 = $4_1 + -1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP8[$2_1 >> 0] = $0_1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   label$6 : {
    if (!$3_1) {
     break label$6
    }
    $416($1_1 | 0);
   }
   $2_1 = $0_1 & 255 | 0;
  }
  return $2_1 | 0;
 }
 
 function $784() {
  return 42 | 0;
 }
 
 function $785() {
  return $784() | 0 | 0;
 }
 
 function $786() {
  return 99968 | 0;
 }
 
 function $787() {
  HEAP32[(0 + 100064 | 0) >> 2] = 97348;
  HEAP32[(0 + 99992 | 0) >> 2] = $785() | 0;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($430($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  return $790($0_1 | 0) | 0 | 0;
 }
 
 function $790($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    if (($1_1 & -1073741825 | 0 | 0) != (HEAP32[(($786() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $788($0_1 | 0) | 0 | 0;
  }
  return $791($0_1 | 0) | 0 | 0;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $0_1 + 76 | 0;
   if (!($792($1_1 | 0) | 0)) {
    break label$1
   }
   $415($0_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$2;
   }
   $0_1 = $788($0_1 | 0) | 0;
  }
  label$4 : {
   if (!(($793($1_1 | 0) | 0) & 1073741824 | 0)) {
    break label$4
   }
   $794($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $793($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $794($0_1) {
  $0_1 = $0_1 | 0;
  $438($0_1 | 0, 1 | 0) | 0;
 }
 
 function $795() {
  $816(100768 | 0) | 0;
  $404(140 | 0, 0 | 0, 65536 | 0) | 0;
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  $818(100768 | 0) | 0;
 }
 
 function $797($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[(0 + 83856 | 0) >> 2] | 0;
  $798(100772 | 0, $1_1 | 0, 100828 | 0) | 0;
  $799(100088 | 0, 100772 | 0) | 0;
  $2_1 = HEAP32[(0 + 83860 | 0) >> 2] | 0;
  $800(100836 | 0, $2_1 | 0, 100884 | 0) | 0;
  $801(100264 | 0, 100836 | 0) | 0;
  $3_1 = HEAP32[(0 + 83864 | 0) >> 2] | 0;
  $800(100892 | 0, $3_1 | 0, 100940 | 0) | 0;
  $801(100432 | 0, 100892 | 0) | 0;
  $801(100600 | 0, $53(100432 + (HEAP32[((HEAP32[(0 + 100432 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
  $802(100088 + (HEAP32[((HEAP32[(0 + 100088 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 100264 | 0) | 0;
  $803(100432 + (HEAP32[((HEAP32[(0 + 100432 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  $802(100432 + (HEAP32[((HEAP32[(0 + 100432 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 100264 | 0) | 0;
  $804(100948 | 0, $1_1 | 0, 101004 | 0) | 0;
  $805(100176 | 0, 100948 | 0) | 0;
  $806(101012 | 0, $2_1 | 0, 101060 | 0) | 0;
  $807(100348 | 0, 101012 | 0) | 0;
  $806(101068 | 0, $3_1 | 0, 101116 | 0) | 0;
  $807(100516 | 0, 101068 | 0) | 0;
  $807(100684 | 0, $608(100516 + (HEAP32[((HEAP32[(0 + 100516 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
  $808(100176 + (HEAP32[((HEAP32[(0 + 100176 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 100348 | 0) | 0;
  $803(100516 + (HEAP32[((HEAP32[(0 + 100516 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  $808(100516 + (HEAP32[((HEAP32[(0 + 100516 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 100348 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $798($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $513($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 83868 + 8 | 0;
  $2_1 = $190() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $636($3_1 + 8 | 0 | 0, $0_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 8 | 0);
  $1537($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $799($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $46($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 82008 + 12 | 0;
  HEAP32[$2_1 >> 2] = 82008 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $189($2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $800($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $513($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 83968 + 8 | 0;
  $636($3_1 + 8 | 0 | 0, $0_1 | 0);
  $1_1 = $660($3_1 + 8 | 0 | 0) | 0;
  $1537($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $661($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $46($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 82056 + 12 | 0;
  HEAP32[$2_1 >> 2] = 82056 + 32 | 0;
  $189($2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $803($0_1) {
  $0_1 = $0_1 | 0;
  $809($0_1 | 0, 8192 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $804($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $575($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 84072 + 8 | 0;
  $2_1 = $588() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $810($3_1 + 8 | 0 | 0, $0_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 8 | 0);
  $1537($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $805($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $811($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 82256 + 12 | 0;
  HEAP32[$2_1 >> 2] = 82256 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $812($2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $806($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $575($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 84172 + 8 | 0;
  $810($3_1 + 8 | 0 | 0, $0_1 | 0);
  $1_1 = $813($3_1 + 8 | 0 | 0) | 0;
  $1537($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $814($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $807($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $811($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 82304 + 12 | 0;
  HEAP32[$2_1 >> 2] = 82304 + 32 | 0;
  $812($2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $809($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $810($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1536($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $811($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $188($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 82916 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $778($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $588() | 0;
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101420 | 0) | 0 | 0;
 }
 
 function $814($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $815($0_1) {
  $0_1 = $0_1 | 0;
  $540(100264 | 0) | 0;
  $540(100600 | 0) | 0;
  $601(100348 | 0) | 0;
  $601(100684 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101125 | 0) >> 0] | 0) {
    break label$1
   }
   $797(101124 | 0) | 0;
   $404(141 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101125 | 0) >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  $815(101124 | 0) | 0;
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  $1979($511($0_1 | 0) | 0 | 0);
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $660($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $685($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $661(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $1187(65829 | 0);
   wasm2js_trap();
  }
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  return $822($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $822($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $190() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $3_1 = 0;
   $5_1 = HEAP32[($825($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      $4_1 = $789(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    label$6 : {
     label$7 : {
      if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
      break label$6;
     }
     $6_1 = ($2_1 + 23 | 0) + 1 | 0;
     label$8 : {
      label$9 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$10 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($674(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 0:
         break label$10;
        case 1:
         break label$3;
        case 2:
         break label$8;
        default:
         break label$6;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $789(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$9;
      };
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$11 : {
     label$12 : {
      if ($1_1) {
       break label$12
      }
      label$13 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($783($338(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$13;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $338(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    }
    $3_1 = $338(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $190() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $823($0_1) {
  $0_1 = $0_1 | 0;
  return $822($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $824($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $325($1_1 | 0, $190() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    if ($4_1 & 255 | 0) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($325($1_1 | 0, $190() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 255 | 0)) {
     break label$3
    }
    HEAP8[($2_1 + 19 | 0) >> 0] = $525(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     switch (($680(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, ($2_1 + 19 | 0) + 1 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
     case 2:
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = ($2_1 + 24 | 0) + 1 | 0;
      HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
     default:
      label$7 : while (1) {
       $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
       if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
        break label$3
       }
       $3_1 = $3_1 + -1 | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
       if (($783(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$7
       }
       break label$7;
      };
      break;
     case 0:
     case 1:
      break label$4;
     };
    }
    $1_1 = $190() | 0;
    break label$1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $825($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $826($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $826($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $827($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $827($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  $1979($511($0_1 | 0) | 0 | 0);
 }
 
 function $829($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $660($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $661($1_1 | 0) | 0;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $690(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($508($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $420(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $831($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $338(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($190() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $508($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $832($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($325($1_1 | 0, $190() | 0 | 0) | 0) {
      break label$3
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = $525($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($508($2_1 + 23 | 0 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = ($2_1 + 23 | 0) + 1 | 0;
     $5_1 = $2_1 + 23 | 0;
     label$5 : while (1) {
      $6_1 = $680(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($508($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($508($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $650($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $190() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  $1979($573($0_1 | 0) | 0 | 0);
 }
 
 function $834($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $813($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $835($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $814(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $1187(65829 | 0);
   wasm2js_trap();
  }
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
  return $837($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $837($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $588() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $3_1 = 0;
   $5_1 = HEAP32[($825($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      $4_1 = $789(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    label$6 : {
     label$7 : {
      if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
      break label$6;
     }
     $6_1 = $2_1 + 24 | 0;
     label$8 : {
      label$9 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$10 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($841(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 0:
         break label$10;
        case 1:
         break label$3;
        case 2:
         break label$8;
        default:
         break label$6;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $789(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$9;
      };
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$11 : {
     label$12 : {
      if ($1_1) {
       break label$12
      }
      label$13 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($783($590(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$13;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $590(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    }
    $3_1 = $590(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $588() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $838($0_1) {
  $0_1 = $0_1 | 0;
  return $837($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $839($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $614($1_1 | 0, $588() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    if ($4_1 & 255 | 0) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($614($1_1 | 0, $588() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 255 | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $585(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     switch (($840(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
     case 2:
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
      HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
     default:
      label$7 : while (1) {
       $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
       if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
        break label$3
       }
       $3_1 = $3_1 + -1 | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
       if (($783(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$7
       }
       break label$7;
      };
      break;
     case 0:
     case 1:
      break label$4;
     };
    }
    $1_1 = $588() | 0;
    break label$1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $840($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $841($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $842($0_1) {
  $0_1 = $0_1 | 0;
  $1979($573($0_1 | 0) | 0 | 0);
 }
 
 function $843($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $813($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $814($1_1 | 0) | 0;
 }
 
 function $844($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $845(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($508($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $420(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $845($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $846($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $590(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($588() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $508($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $847($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($614($1_1 | 0, $588() | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $585($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($508($2_1 + 20 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = $2_1 + 24 | 0;
     $5_1 = $2_1 + 20 | 0;
     label$5 : while (1) {
      $6_1 = $840(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($508($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($508($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $848($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $588() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $848($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($614($0_1 | 0, $588() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($588() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $849() {
  $795();
 }
 
 function $850($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $21$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $3_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $14_1 = $12_1;
    } else {
     $14_1 = 0
    }
    $11_1 = $14_1;
   }
   if ($11_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   $3_1 = $2_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
 }
 
 function $851($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $4$hi = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $7_1 = 0, $7$hi = 0, $15_1 = 0, $15$hi = 0, $35_1 = 0, $40_1 = 0, $40$hi = 0, $59_1 = 0, $59$hi = 0, $67_1 = 0, $74_1 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1_1 - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $4_1 = i64toi32_i32$4;
  $4$hi = i64toi32_i32$5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$5;
     $5$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     if ($26_1) {
      break label$2
     }
    }
    $2_1 = $788($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
   $35_1 = i64toi32_i32$2;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $2_1 - $1_1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40_1 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35_1;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $3_1 - $1_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59_1 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30_1 = 0
     } else {
      $30_1 = 1
     }
     $31_1 = $30_1;
    } else {
     $31_1 = 0
    }
    $29_1 = $31_1;
   }
   if ($29_1) {
    break label$4
   }
   i64toi32_i32$4 = $5$hi;
   $3_1 = $1_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $67_1 = $0_1;
  i64toi32_i32$4 = $4$hi;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1 - $1_1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74_1 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67_1;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  label$5 : {
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break label$5
   }
   HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $853($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $852($0_1 | 0) | 0 | 0;
 }
 
 function $854($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $855($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $854($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $856($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $854($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $857($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $858($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $14$hi = 0, $5_1 = 0, $11$hi = 0, $11_1 = 0, $14_1 = 0, $12$hi = 0, $6_1 = 0, $18$hi = 0, $12_1 = 0, $16$hi = 0, $10$hi = 0, $8_1 = 0, $10_1 = 0, $18_1 = 0, $20$hi = 0, $16_1 = 0, $7_1 = 0, $17$hi = 0, $13_1 = 0, $13$hi = 0, $15$hi = 0, $17_1 = 0, $20_1 = 0, $15_1 = 0, $9_1 = 0, $19$hi = 0, $21$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $220_1 = 0, $221_1 = 0, $223_1 = 0, $224_1 = 0, $226_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $19_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $237_1 = 0, $21_1 = 0, $239_1 = 0, $22_1 = 0, $240_1 = 0, $24_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $53_1 = 0, $57_1 = 0, $64_1 = 0, $68_1 = 0, $77_1 = 0, $77$hi = 0, $89_1 = 0, $89$hi = 0, $111_1 = 0, $112_1 = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $140_1 = 0, $141_1 = 0, $141$hi = 0, $142_1 = 0, $142$hi = 0, $149$hi = 0, $152$hi = 0, $170_1 = 0, $170$hi = 0, $175_1 = 0, $175$hi = 0, $182_1 = 0, $182$hi = 0, $189_1 = 0, $189$hi = 0, $194_1 = 0, $194$hi = 0, $203_1 = 0, $203$hi = 0, $205_1 = 0, $205$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $217_1 = 0, $217$hi = 0, $219_1 = 0, $219$hi = 0, $222_1 = 0, $224$hi = 0, $225_1 = 0, $225$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $238_1 = 0, $238$hi = 0, $244_1 = 0, $244$hi = 0, $249_1 = 0, $249$hi = 0, $252$hi = 0, $23_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $281_1 = 0, $282$hi = 0, $283$hi = 0, $286_1 = 0, $286$hi = 0, $287_1 = 0, $287$hi = 0, $288_1 = 0, $288$hi = 0, $291_1 = 0, $292$hi = 0, $295_1 = 0, $296$hi = 0, $297$hi = 0, $301_1 = 0, $302$hi = 0, $303_1 = 0, $303$hi = 0, $310_1 = 0, $310$hi = 0, $314_1 = 0, $316_1 = 0, $316$hi = 0, $318$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $321_1 = 0, $321$hi = 0, $323$hi = 0, $327_1 = 0, $328$hi = 0, $329_1 = 0, $329$hi = 0, $330_1 = 0, $330$hi = 0, $332_1 = 0, $332$hi = 0, $335_1 = 0, $336$hi = 0, $339_1 = 0, $340$hi = 0, $341$hi = 0, $344_1 = 0, $345$hi = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $352_1 = 0, $353$hi = 0, $354_1 = 0, $354$hi = 0, $355_1 = 0, $355$hi = 0, $358_1 = 0, $359$hi = 0, $362_1 = 0, $363$hi = 0, $364$hi = 0, $368_1 = 0, $369$hi = 0, $379_1 = 0, $379$hi = 0, $381$hi = 0, $384_1 = 0, $384$hi = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $392$hi = 0, $426_1 = 0, $426$hi = 0, $428_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $431_1 = 0, $431$hi = 0, $435_1 = 0, $435$hi = 0, $437_1 = 0, $438$hi = 0, $443_1 = 0, $443$hi = 0, $447_1 = 0, $447$hi = 0, $456$hi = 0, $458_1 = 0, $458$hi = 0, $464_1 = 0, $470_1 = 0, $470$hi = 0, $475_1 = 0, $476$hi = 0, $480_1 = 0, $480$hi = 0, $484_1 = 0, $484$hi = 0, $487_1 = 0, $487$hi = 0, $491_1 = 0, $492$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $220_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $220_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13_1 = $220_1;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $221_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $223_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $223_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $223_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$1 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $14_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $64_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break label$5
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     label$9 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2_1 | i64toi32_i32$2 | 0)) {
       break label$9
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $111_1 = $5_1 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112_1 = $1_1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     $113_1 = $12_1;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     $8_1 = !($12_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $224_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224_1 = i64toi32_i32$2
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224_1;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$2 = $8_1 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$1;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     $854($111_1 | 0, $112_1 | 0, i64toi32_i32$5 | 0, $113_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$4 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $226_1;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    $140_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $141_1 = $3_1;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $142_1 = $10_1;
    $142$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $228_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $228_1 = i64toi32_i32$5
    }
    $149$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $152$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $228_1;
    i64toi32_i32$2 = $152$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$1 = $141$hi;
    i64toi32_i32$3 = $142$hi;
    $854($140_1 | 0, $141_1 | 0, i64toi32_i32$1 | 0, $142_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$0 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $229_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
    $229_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $14_1 = $229_1;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$0;
   $170_1 = $2_1;
   $170$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $230_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $230_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $4_1 = $230_1;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $170$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($170_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$3;
   $175_1 = i64toi32_i32$1;
   $175$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $231_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $231_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $14_1 = $231_1;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $182_1 = i64toi32_i32$3;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $175$hi;
   i64toi32_i32$1 = $175_1;
   i64toi32_i32$3 = $182$hi;
   i64toi32_i32$5 = $182_1;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $232_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $232_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17_1 = $232_1;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $189_1 = i64toi32_i32$0;
   $189$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$4 = $17_1;
   i64toi32_i32$0 = $189$hi;
   i64toi32_i32$5 = $189_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $18_1 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$5 = $17_1;
   i64toi32_i32$1 = 0;
   $194_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $194$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $203_1 = i64toi32_i32$5;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$5 = $203$hi;
   i64toi32_i32$4 = $203_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $205_1 = i64toi32_i32$0;
   $205$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 49;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $233_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    $233_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
   }
   $207_1 = $233_1;
   $207$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    $234_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $234_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
   }
   $20_1 = $234_1;
   $20$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$1 = $207_1;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$4 = $20_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$2;
   $215$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $205$hi;
   i64toi32_i32$3 = $205_1;
   i64toi32_i32$2 = $215$hi;
   i64toi32_i32$4 = $215_1;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $10_1 = i64toi32_i32$5;
   $10$hi = i64toi32_i32$0;
   $217_1 = i64toi32_i32$5;
   $217$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $16_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $235_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $219_1 = $235_1;
   $219$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$4 = $15_1;
   $222_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $222_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    $237_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $237_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219_1;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$1 = $237_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $225_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $225$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $217$hi;
   i64toi32_i32$3 = $217_1;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$1 = $225_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $15_1 = i64toi32_i32$2;
   $15$hi = i64toi32_i32$5;
   $227_1 = i64toi32_i32$2;
   $227$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $16_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $16$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $16$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$4;
   $21$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$4;
   $236$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $236$hi;
   i64toi32_i32$1 = $236_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$2;
   $238_1 = i64toi32_i32$0;
   $238$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $239_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $239_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$2 = $239_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $244_1 = i64toi32_i32$2;
   $244$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $238$hi;
   i64toi32_i32$5 = $238_1;
   i64toi32_i32$2 = $244$hi;
   i64toi32_i32$1 = $244_1;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $20_1 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $249_1 = i64toi32_i32$5;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $249$hi;
   i64toi32_i32$1 = $249_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $22_1 = i64toi32_i32$2;
   $22$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $240_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
    $240_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $252$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $227$hi;
   i64toi32_i32$4 = $227_1;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$1 = $240_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $23_1 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $194$hi;
   i64toi32_i32$3 = $194_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$5;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $268_1 = i64toi32_i32$3;
     $268$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$2 = $24_1;
     i64toi32_i32$3 = $268$hi;
     i64toi32_i32$1 = $268_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$1 = $24_1;
     $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $273_1 = $272_1;
     $273$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $277_1 = i64toi32_i32$0;
     $277$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = $277$hi;
     i64toi32_i32$2 = $277_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     $281_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $282$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $273$hi;
     i64toi32_i32$2 = $273_1;
     i64toi32_i32$4 = $282$hi;
     i64toi32_i32$1 = $281_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $286_1 = i64toi32_i32$2;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $286$hi;
     i64toi32_i32$1 = $286_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $287_1 = i64toi32_i32$4;
     $287$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     $288_1 = $14_1;
     $288$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     $291_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $292$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = $17_1;
     $295_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $296$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $292$hi;
     i64toi32_i32$5 = $291_1;
     i64toi32_i32$3 = $296$hi;
     i64toi32_i32$0 = $295_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $297$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $288$hi;
     i64toi32_i32$1 = $288_1;
     i64toi32_i32$5 = $297$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$0 = $14_1;
     $301_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $302$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $287$hi;
     i64toi32_i32$0 = $287_1;
     i64toi32_i32$2 = $302$hi;
     i64toi32_i32$1 = $301_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $303_1 = i64toi32_i32$5;
     $303$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $310_1 = i64toi32_i32$0;
     $310$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $310$hi;
     i64toi32_i32$1 = $310_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $314_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $314_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $241_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $316_1 = $241_1;
     $316$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $242_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $318$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $316$hi;
     i64toi32_i32$5 = $316_1;
     i64toi32_i32$3 = $318$hi;
     i64toi32_i32$4 = $242_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $319_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $319$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $303$hi;
     i64toi32_i32$1 = $303_1;
     i64toi32_i32$5 = $319$hi;
     i64toi32_i32$4 = $319_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $320_1 = i64toi32_i32$0;
     $320$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     $321_1 = $4_1;
     $321$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $243_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
      $243_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $323$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$2 = $321_1;
     i64toi32_i32$3 = $323$hi;
     i64toi32_i32$4 = $243_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = $4_1;
     $327_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $328$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $320$hi;
     i64toi32_i32$4 = $320_1;
     i64toi32_i32$0 = $328$hi;
     i64toi32_i32$2 = $327_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $329_1 = i64toi32_i32$3;
     $329$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     $330_1 = $2_1;
     $330$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $245_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $245_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $332_1 = $245_1;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21_1;
     $335_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $336$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$1 = $13_1;
     $339_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $340$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $336$hi;
     i64toi32_i32$1 = $335_1;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$4 = $339_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $344_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $345$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $341$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = $345$hi;
     i64toi32_i32$1 = $344_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $246_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $246_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$0 = $332_1;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$1 = $246_1;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $348_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $348$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $330$hi;
     i64toi32_i32$4 = $330_1;
     i64toi32_i32$0 = $348$hi;
     i64toi32_i32$1 = $348_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $352_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $353$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $329$hi;
     i64toi32_i32$1 = $329_1;
     i64toi32_i32$5 = $353$hi;
     i64toi32_i32$4 = $352_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $354_1 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $355_1 = $4_1;
     $355$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$4 = $10_1;
     $358_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = $23_1;
     i64toi32_i32$1 = $15_1;
     $362_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $359$hi;
     i64toi32_i32$1 = $358_1;
     i64toi32_i32$2 = $363$hi;
     i64toi32_i32$3 = $362_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $364$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $355$hi;
     i64toi32_i32$4 = $355_1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $368_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $369$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $354$hi;
     i64toi32_i32$3 = $354_1;
     i64toi32_i32$5 = $369$hi;
     i64toi32_i32$4 = $368_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $247_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
     $247_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $3_1 = $247_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $248_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $379_1 = $248_1;
    $379$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $250_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $250_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $381$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $379$hi;
    i64toi32_i32$2 = $379_1;
    i64toi32_i32$0 = $381$hi;
    i64toi32_i32$4 = $250_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $251_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $384_1 = $251_1;
    $384$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $252_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $386$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $384$hi;
    i64toi32_i32$2 = $384_1;
    i64toi32_i32$0 = $386$hi;
    i64toi32_i32$4 = $252_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $253_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $253_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $18_1 = $253_1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    $390_1 = $3_1;
    $390$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $254_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $254_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $392$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $390$hi;
    i64toi32_i32$2 = $390_1;
    i64toi32_i32$0 = $392$hi;
    i64toi32_i32$4 = $254_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     $854($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     $854($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     $857($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     $857($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $426_1 = i64toi32_i32$2;
     $426$hi = i64toi32_i32$3;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $428_1 = i64toi32_i32$3;
     $428$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$0 = $426_1;
     i64toi32_i32$3 = $428$hi;
     i64toi32_i32$4 = $428_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $429_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $429$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
     $431_1 = i64toi32_i32$3;
     $431$hi = i64toi32_i32$0;
     i64toi32_i32$2 = (i64toi32_i32$2 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $435_1 = i64toi32_i32$0;
     $435$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $431$hi;
     i64toi32_i32$2 = $431_1;
     i64toi32_i32$0 = $435$hi;
     i64toi32_i32$4 = $435_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 0;
     $437_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = 0;
     $438$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $429$hi;
     i64toi32_i32$4 = $429_1;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$2 = $437_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $443_1 = i64toi32_i32$0;
     $443$hi = i64toi32_i32$4;
     i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $447_1 = i64toi32_i32$4;
     $447$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $443$hi;
     i64toi32_i32$3 = $443_1;
     i64toi32_i32$4 = $447$hi;
     i64toi32_i32$2 = $447_1;
     i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $1_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$4;
     break label$16;
    }
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $255_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
     $255_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $456$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $458_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $456$hi;
    i64toi32_i32$3 = $255_1;
    i64toi32_i32$4 = $458$hi;
    i64toi32_i32$2 = $458_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11$hi = i64toi32_i32$3;
   label$19 : {
    i64toi32_i32$3 = $18$hi;
    $464_1 = !($18_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $256_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $257_1 = 0
      } else {
       $257_1 = 1
      }
      $258_1 = $257_1;
     } else {
      $258_1 = 0
     }
     $256_1 = $258_1;
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464_1 : $256_1) {
     break label$19
    }
    i64toi32_i32$2 = $11$hi;
    $470_1 = $11_1;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    $475_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $476$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $470$hi;
    i64toi32_i32$3 = $470_1;
    i64toi32_i32$1 = $476$hi;
    i64toi32_i32$0 = $475_1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $480_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $480$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$2 = $480$hi;
    i64toi32_i32$0 = $480_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$3 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $11$hi;
   $484_1 = $11_1;
   $484$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $487_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $487$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = $487$hi;
   i64toi32_i32$5 = $487_1;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $491_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   $492$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $484$hi;
   i64toi32_i32$5 = $484_1;
   i64toi32_i32$4 = $492$hi;
   i64toi32_i32$3 = $491_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $11_1 = i64toi32_i32$0;
   $11$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $859() {
  return 0 | 0;
 }
 
 function $860() {
  return 0 | 0;
 }
 
 function $861($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $9$hi = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $12$hi = 0, $11$hi = 0, i64toi32_i32$6 = 0, $11_1 = 0, $8_1 = 0, $12_1 = 0, $135_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $152_1 = 0, $153_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $20_1 = 0, $25_1 = 0, $30_1 = 0, $34_1 = 0, $40_1 = 0, $48_1 = 0, $50_1 = 0, $58_1 = 0, $58$hi = 0, $64_1 = 0, $64$hi = 0, $68_1 = 0, $68$hi = 0, $78_1 = 0, $78$hi = 0, $106_1 = 0, $109_1 = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $168_1 = 0, $169_1 = 0, $169$hi = 0, $170_1 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $193_1 = 0, $193$hi = 0, $195$hi = 0, $199_1 = 0, $199$hi = 0, $201$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $230$hi = 0, $234_1 = 0, $234$hi = 0, $236_1 = 0, $237$hi = 0, $251_1 = 0, $251$hi = 0, $254_1 = 0, $254$hi = 0, $262$hi = 0, $265_1 = 0, $266$hi = 0, $271_1 = 0, $272_1 = 0, $272$hi = 0, $273_1 = 0, $273$hi = 0, $280$hi = 0, $283$hi = 0, $298_1 = 0, $298$hi = 0, $304_1 = 0, $305$hi = 0, $311_1 = 0, $311$hi = 0, $313$hi = 0, $314_1 = 0, $314$hi = 0, $316_1 = 0, $316$hi = 0, $343_1 = 0, $343$hi = 0, $345_1 = 0, $345$hi = 0, $349_1 = 0, $349$hi = 0, $351_1 = 0, $352$hi = 0, $358_1 = 0, $358$hi = 0, $360$hi = 0, $364_1 = 0, $364$hi = 0, $367_1 = 0, $367$hi = 0, $368$hi = 0, $375_1 = 0, $375$hi = 0, $379$hi = 0, $383_1 = 0, $384$hi = 0, $389_1 = 0, $389$hi = 0, $397_1 = 0, $398$hi = 0, $400_1 = 0, $400$hi = 0, $406_1 = 0, $407$hi = 0, $411_1 = 0, $412$hi = 0, $415_1 = 0, $415$hi = 0, $421_1 = 0, $422$hi = 0, $426_1 = 0, $427$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     $6_1 = !($1_1 | i64toi32_i32$1 | 0);
     $20_1 = $6_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $10$hi;
     if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : $25_1) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $48_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64_1;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2 ? 0 : $1_1;
     i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $78_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $78$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$3 = $78_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   $106_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$3 = $9_1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $109_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106_1 : $109_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$2;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $10_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $135_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $135_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8_1 = $135_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $139_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $139_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $6_1 = $139_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $136_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $137_1 = $9_1;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? $9_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $140_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $140_1 = i64toi32_i32$5
    }
    $145$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $148$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $145$hi;
    i64toi32_i32$2 = $140_1;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    $854($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$1 ? $1_1 : $3_1;
   i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $168_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $169_1 = $3_1;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $170_1 = $4_1;
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $4_1;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$3);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $141_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $141_1 = i64toi32_i32$5
    }
    $177$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $180$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $177$hi;
    i64toi32_i32$2 = $141_1;
    i64toi32_i32$3 = $180$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    i64toi32_i32$4 = $169$hi;
    i64toi32_i32$2 = $170$hi;
    $854($168_1 | 0, $169_1 | 0, i64toi32_i32$4 | 0, $170_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = $5_1 + 88 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $142_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $142_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193_1 = $142_1;
   $193$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $143_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $143_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $195$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$4 = $193_1;
   i64toi32_i32$2 = $195$hi;
   i64toi32_i32$5 = $143_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $144_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $199_1 = $144_1;
   $199$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $145_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $145_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $201$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $199$hi;
   i64toi32_i32$0 = $199_1;
   i64toi32_i32$4 = $201$hi;
   i64toi32_i32$5 = $145_1;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $146_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $146_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $10_1 = $146_1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   label$10 : {
    if (($6_1 | 0) == ($8_1 | 0)) {
     break label$10
    }
    label$11 : {
     $7_1 = $6_1 - $8_1 | 0;
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $10_1 = 1;
     $10$hi = i64toi32_i32$2;
     break label$10;
    }
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$4 = $1$hi;
    $854($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    $857($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $228_1 = i64toi32_i32$2;
    $228$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $230_1 = i64toi32_i32$4;
    $230$hi = i64toi32_i32$2;
    i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $234_1 = i64toi32_i32$2;
    $234$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $230$hi;
    i64toi32_i32$0 = $230_1;
    i64toi32_i32$2 = $234$hi;
    i64toi32_i32$5 = $234_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    $236_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $237$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $228$hi;
    i64toi32_i32$5 = $228_1;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$0 = $236_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = 524288;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $147_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $147_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $9_1 = $147_1;
   $9$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $148_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $149_1 = 0
       } else {
        $149_1 = 1
       }
       $150_1 = $149_1;
      } else {
       $150_1 = 0
      }
      $148_1 = $150_1;
     }
     if ($148_1) {
      break label$13
     }
     i64toi32_i32$2 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $251_1 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $251$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $254_1 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
     $254$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $251$hi;
     i64toi32_i32$4 = $251_1;
     i64toi32_i32$2 = $254$hi;
     i64toi32_i32$5 = $254_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     if (!(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
      break label$1
     }
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $262$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$5 = $10_1;
     $265_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $266$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $262$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = $266$hi;
     i64toi32_i32$2 = $265_1;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 524287;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$12
     }
     $271_1 = $5_1 + 32 | 0;
     i64toi32_i32$1 = $2$hi;
     $272_1 = $2_1;
     $272$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     $273_1 = $4_1;
     $273$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $2_1 : $4_1;
     i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$2);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $151_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $151_1 = i64toi32_i32$1
     }
     $280$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $280$hi;
     i64toi32_i32$5 = $151_1;
     i64toi32_i32$2 = $283$hi;
     i64toi32_i32$1 = $7_1 << 6 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $7_1 = i64toi32_i32$4 + -12 | 0;
     i64toi32_i32$0 = $272$hi;
     i64toi32_i32$5 = $273$hi;
     $854($271_1 | 0, $272_1 | 0, i64toi32_i32$0 | 0, $273_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$3 = $5_1 + 40 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$5;
     break label$12;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $298_1 = i64toi32_i32$2;
    $298$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    $304_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $305$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $298$hi;
    i64toi32_i32$1 = $298_1;
    i64toi32_i32$2 = $305$hi;
    i64toi32_i32$5 = $304_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = 1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0)) {
     break label$12
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $152_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     $152_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $311_1 = $152_1;
    $311$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $153_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $153_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $313$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $311$hi;
    i64toi32_i32$4 = $311_1;
    i64toi32_i32$1 = $313$hi;
    i64toi32_i32$5 = $153_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $314_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $314$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $316_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $316$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $314$hi;
    i64toi32_i32$1 = $314_1;
    i64toi32_i32$0 = $316$hi;
    i64toi32_i32$5 = $316_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $154_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $154_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $154_1;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$4;
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   $7_1 = 0;
   label$15 : {
    label$16 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$16
     }
     $7_1 = $6_1;
     break label$15;
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    $854($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    $857($5_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $343_1 = i64toi32_i32$0;
    $343$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $345_1 = i64toi32_i32$1;
    $345$hi = i64toi32_i32$0;
    i64toi32_i32$4 = (i64toi32_i32$4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $349_1 = i64toi32_i32$0;
    $349$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $345$hi;
    i64toi32_i32$4 = $345_1;
    i64toi32_i32$0 = $349$hi;
    i64toi32_i32$5 = $349_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $351_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = 0;
    $352$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $343$hi;
    i64toi32_i32$5 = $343_1;
    i64toi32_i32$0 = $352$hi;
    i64toi32_i32$4 = $351_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $155_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    $155_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $358_1 = $155_1;
   $358$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 61;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    $156_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $156_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   }
   $360$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $358$hi;
   i64toi32_i32$0 = $358_1;
   i64toi32_i32$5 = $360$hi;
   i64toi32_i32$4 = $156_1;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $157_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $157_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $364_1 = $157_1;
   $364$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $158_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $158_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$0 = $158_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $367_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $367$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $364$hi;
   i64toi32_i32$1 = $364_1;
   i64toi32_i32$0 = $367$hi;
   i64toi32_i32$4 = $367_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $368$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$0 = $368$hi;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   $6_1 = $2_1 & 7 | 0;
   label$17 : {
    label$18 : {
     label$19 : {
      switch ($859() | 0 | 0) {
      case 0:
       i64toi32_i32$1 = $4$hi;
       $375_1 = $4_1;
       $375$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = 0;
       $379$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$0 = $3_1;
       i64toi32_i32$5 = $379$hi;
       i64toi32_i32$4 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$4 = $3_1;
       $383_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $384$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $375$hi;
       i64toi32_i32$4 = $375_1;
       i64toi32_i32$3 = $384$hi;
       i64toi32_i32$0 = $383_1;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4_1 = i64toi32_i32$5;
       $4$hi = i64toi32_i32$2;
       label$22 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$22
        }
        i64toi32_i32$2 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$2;
        break label$18;
       }
       i64toi32_i32$2 = $4$hi;
       $389_1 = $4_1;
       $389$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $1_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$0 = $10_1;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $3_1 = i64toi32_i32$3;
       $3$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$0 = $1_1;
       $397_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $398$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $389$hi;
       i64toi32_i32$0 = $389_1;
       i64toi32_i32$5 = $398$hi;
       i64toi32_i32$2 = $397_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4_1 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$3;
       break label$17;
      case 1:
       i64toi32_i32$3 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 0;
       $406_1 = ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $407$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$3 = $407$hi;
       i64toi32_i32$0 = $406_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $10_1 = i64toi32_i32$5;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3_1;
       $411_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $412$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $400$hi;
       i64toi32_i32$0 = $400_1;
       i64toi32_i32$1 = $412$hi;
       i64toi32_i32$2 = $411_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $4_1 = i64toi32_i32$3;
       $4$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$5;
       break label$18;
      case 2:
       break label$19;
      default:
       break label$18;
      };
     }
     i64toi32_i32$5 = $4$hi;
     $415_1 = $4_1;
     $415$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $10$hi;
     $421_1 = !($10_1 | i64toi32_i32$5 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $422$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $422$hi;
     i64toi32_i32$2 = $421_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $426_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $427$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $415$hi;
     i64toi32_i32$2 = $415_1;
     i64toi32_i32$3 = $427$hi;
     i64toi32_i32$4 = $426_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     $3_1 = $10_1;
     $3$hi = i64toi32_i32$1;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $860() | 0;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $854($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $863($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $864($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $865($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $854($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $867($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $861($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $868($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $858($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if ($3_1 >>> 0 >= 32767 >>> 0) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $858($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   $858($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if ($3_1 >>> 0 <= -32652 >>> 0) {
     break label$4
    }
    $3_1 = $3_1 + 16269 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   $858($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-48920 | 0) ? $3_1 : -48920) + 32538 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $858($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $869($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$6 = 0, $13$hi = 0, $10$hi = 0, $13_1 = 0, $10_1 = 0, $16$hi = 0, $15$hi = 0, $12$hi = 0, $17$hi = 0, $21$hi = 0, $15_1 = 0, $11$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $11_1 = 0, $21_1 = 0, $14$hi = 0, $8_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $18_1 = 0, $22_1 = 0, $22$hi = 0, $24$hi = 0, $9_1 = 0, $19_1 = 0, $19$hi = 0, $322_1 = 0, $323_1 = 0, $7_1 = 0, $324_1 = 0, $325_1 = 0, $326_1 = 0, $327_1 = 0, $328_1 = 0, $329_1 = 0, $331_1 = 0, $332_1 = 0, $333_1 = 0, $334_1 = 0, $336_1 = 0, $337_1 = 0, $338_1 = 0, $339_1 = 0, $341_1 = 0, $342_1 = 0, $344_1 = 0, $345_1 = 0, $20_1 = 0, $20$hi = 0, $346_1 = 0, $347_1 = 0, $348_1 = 0, $350_1 = 0, $351_1 = 0, $352_1 = 0, $353_1 = 0, $355_1 = 0, $23_1 = 0, $23$hi = 0, $356_1 = 0, $357_1 = 0, $358_1 = 0, $359_1 = 0, $24_1 = 0, $360_1 = 0, $362_1 = 0, $363_1 = 0, $364_1 = 0, $365_1 = 0, $368_1 = 0, $369_1 = 0, $371_1 = 0, $372_1 = 0, $374_1 = 0, $375_1 = 0, $376_1 = 0, $377_1 = 0, $378_1 = 0, $380_1 = 0, $381_1 = 0, $382_1 = 0, $51_1 = 0, $55_1 = 0, $62_1 = 0, $66_1 = 0, $75_1 = 0, $75$hi = 0, $80_1 = 0, $80$hi = 0, $88_1 = 0, $88$hi = 0, $110_1 = 0, $111_1 = 0, $111$hi = 0, $112_1 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $137_1 = 0, $138_1 = 0, $138$hi = 0, $139_1 = 0, $139$hi = 0, $146$hi = 0, $149$hi = 0, $164_1 = 0, $166_1 = 0, $166$hi = 0, $170$hi = 0, $181_1 = 0, $181$hi = 0, $182$hi = 0, $185_1 = 0, $188_1 = 0, $188$hi = 0, $193$hi = 0, $203_1 = 0, $203$hi = 0, $204$hi = 0, $206_1 = 0, $209_1 = 0, $209$hi = 0, $214$hi = 0, $224_1 = 0, $224$hi = 0, $225$hi = 0, $227_1 = 0, $230_1 = 0, $230$hi = 0, $235$hi = 0, $245_1 = 0, $245$hi = 0, $246$hi = 0, $248_1 = 0, $249_1 = 0, $249$hi = 0, $252_1 = 0, $252$hi = 0, $257$hi = 0, $262_1 = 0, $264$hi = 0, $267_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $279_1 = 0, $279$hi = 0, $283_1 = 0, $284$hi = 0, $285$hi = 0, $287_1 = 0, $288$hi = 0, $289$hi = 0, $290$hi = 0, $294$hi = 0, $305_1 = 0, $305$hi = 0, $308_1 = 0, $308$hi = 0, $314$hi = 0, $315_1 = 0, $315$hi = 0, $321_1 = 0, $321$hi = 0, $330_1 = 0, $330$hi = 0, $335_1 = 0, $335$hi = 0, $340_1 = 0, $340$hi = 0, $342$hi = 0, $343_1 = 0, $343$hi = 0, $345$hi = 0, $346$hi = 0, $349_1 = 0, $350$hi = 0, $351$hi = 0, $354_1 = 0, $355$hi = 0, $361_1 = 0, $361$hi = 0, $366_1 = 0, $366$hi = 0, $367_1 = 0, $367$hi = 0, $370_1 = 0, $370$hi = 0, $373_1 = 0, $373$hi = 0, $375$hi = 0, $379_1 = 0, $379$hi = 0, $383_1 = 0, $384$hi = 0, $385$hi = 0, $388_1 = 0, $388$hi = 0, $389_1 = 0, $389$hi = 0, $396_1 = 0, $396$hi = 0, $402_1 = 0, $402$hi = 0, $404$hi = 0, $405_1 = 0, $405$hi = 0, $406_1 = 0, $406$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $413_1 = 0, $414$hi = 0, $415_1 = 0, $415$hi = 0, $416_1 = 0, $416$hi = 0, $425_1 = 0, $425$hi = 0, $429_1 = 0, $430_1 = 0, $430$hi = 0, $436_1 = 0, $436$hi = 0, $440_1 = 0, $441$hi = 0, $442$hi = 0, $446_1 = 0, $447$hi = 0, $448_1 = 0, $448$hi = 0, $449_1 = 0, $449$hi = 0, $456_1 = 0, $456$hi = 0, $461_1 = 0, $461$hi = 0, $466_1 = 0, $466$hi = 0, $469_1 = 0, $469$hi = 0, $472_1 = 0, $473$hi = 0, $476_1 = 0, $477$hi = 0, $478$hi = 0, $481_1 = 0, $482$hi = 0, $484$hi = 0, $485_1 = 0, $485$hi = 0, $489_1 = 0, $490$hi = 0, $491_1 = 0, $491$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $503_1 = 0, $503$hi = 0, $506_1 = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $514_1 = 0, $514$hi = 0, $515_1 = 0, $515$hi = 0, $517$hi = 0, $518$hi = 0, $520_1 = 0, $521$hi = 0, $522$hi = 0, $526_1 = 0, $527$hi = 0, $541$hi = 0, $545_1 = 0, $545$hi = 0, $546$hi = 0, $550_1 = 0, $551$hi = 0, $558_1 = 0, $560_1 = 0, $560$hi = 0, $562$hi = 0, $564_1 = 0, $564$hi = 0, $571$hi = 0, $575_1 = 0, $575$hi = 0, $576$hi = 0, $580_1 = 0, $581$hi = 0, $595_1 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603_1 = 0, $603$hi = 0, $636_1 = 0, $636$hi = 0, $641_1 = 0, $641$hi = 0, $645$hi = 0, $646_1 = 0, $646$hi = 0, $647_1 = 0, $647$hi = 0, $650_1 = 0, $650$hi = 0, $654_1 = 0, $655$hi = 0, $667_1 = 0, $667$hi = 0, $668_1 = 0, $668$hi = 0, $676_1 = 0, $680_1 = 0, $681$hi = 0, $685_1 = 0, $689_1 = 0, $690$hi = 0, $694_1 = 0, $695$hi = 0, $697_1 = 0, $697$hi = 0, $700_1 = 0, $703_1 = 0, $703$hi = 0, $704_1 = 0, $711_1 = 0, $716_1 = 0, $717$hi = 0, $721_1 = 0, $722$hi = 0, $724_1 = 0, $724$hi = 0, $727_1 = 0, $730_1 = 0, $730$hi = 0, $731_1 = 0, $737_1 = 0, $742_1 = 0, $743$hi = 0, $747_1 = 0, $748$hi = 0, $749$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $322_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $322_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $322_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $323_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $323_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $323_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $51_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $62_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $8_1 = 0;
    label$11 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $110_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111_1 = $1_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $112_1 = $11_1;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $324_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $324_1 = i64toi32_i32$1
     }
     $119$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $122$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $119$hi;
     i64toi32_i32$2 = $324_1;
     i64toi32_i32$4 = $122$hi;
     i64toi32_i32$1 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$2 = $112$hi;
     $854($110_1 | 0, $111_1 | 0, i64toi32_i32$5 | 0, $112_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5_1 + 328 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $137_1 = $5_1 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $138_1 = $3_1;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    $139_1 = $10_1;
    $139$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $325_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $325_1 = i64toi32_i32$3
    }
    $146$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $149$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $146$hi;
    i64toi32_i32$5 = $325_1;
    i64toi32_i32$1 = $149$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$0 = $138$hi;
    i64toi32_i32$5 = $139$hi;
    $854($137_1 | 0, $138_1 | 0, i64toi32_i32$0 | 0, $139_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $164_1 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $326_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $326_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $166_1 = $326_1;
   $166$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $327_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $327_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $170$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $166$hi;
   i64toi32_i32$4 = $166_1;
   i64toi32_i32$0 = $170$hi;
   i64toi32_i32$3 = $327_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   $492($164_1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $181_1 = i64toi32_i32$3;
   $181$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $181$hi;
   i64toi32_i32$2 = $181_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $182$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $182$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   $492($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $185_1 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $328_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $328_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $188_1 = $328_1;
   $188$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $329_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $329_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $188$hi;
   i64toi32_i32$5 = $188_1;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$1 = $329_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   $492($185_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $203_1 = i64toi32_i32$1;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $203$hi;
   i64toi32_i32$0 = $203_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $204$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $204$hi;
   i64toi32_i32$0 = 0;
   $492($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $206_1 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $331_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $331_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $209_1 = $331_1;
   $209$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $332_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $332_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $214$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $209$hi;
   i64toi32_i32$5 = $209_1;
   i64toi32_i32$2 = $214$hi;
   i64toi32_i32$4 = $332_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   $492($206_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $224_1 = i64toi32_i32$4;
   $224$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$2 = $224_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $225$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$2 = 0;
   $492($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $227_1 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $333_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $333_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $230_1 = $333_1;
   $230$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $334_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $334_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $235$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $230$hi;
   i64toi32_i32$5 = $230_1;
   i64toi32_i32$0 = $235$hi;
   i64toi32_i32$3 = $334_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $492($227_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $245_1 = i64toi32_i32$3;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $245$hi;
   i64toi32_i32$0 = $245_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $246$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $246$hi;
   i64toi32_i32$0 = 0;
   $492($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $248_1 = $5_1 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $249_1 = $2_1;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $336_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $336_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $252_1 = $336_1;
   $252$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $337_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $337_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $257$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$5 = $252_1;
   i64toi32_i32$2 = $257$hi;
   i64toi32_i32$1 = $337_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $249$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   $492($248_1 | 0, $249_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $262_1 = $5_1 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $338_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $338_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $264$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $264$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   $492($262_1 | 0, $338_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $267_1 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $268_1 = $4_1;
   $268$hi = i64toi32_i32$1;
   i64toi32_i32$0 = ($5_1 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $272_1 = i64toi32_i32$4;
   $272$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $279_1 = i64toi32_i32$4;
   $279$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$4 = $279$hi;
   i64toi32_i32$2 = $279_1;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $283_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $284$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $272$hi;
   i64toi32_i32$2 = $272_1;
   i64toi32_i32$3 = $284$hi;
   i64toi32_i32$0 = $283_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $285$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $287_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $288$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $285$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $288$hi;
   i64toi32_i32$2 = $287_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $289$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $289$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $290$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $268$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $290$hi;
   i64toi32_i32$2 = 0;
   $492($267_1 | 0, $268_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $294$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $294$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $492($5_1 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $339_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $339_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16_1 = $339_1;
     $16$hi = i64toi32_i32$3;
     $305_1 = $16_1;
     $305$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $341_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $341_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $308_1 = $341_1;
     $308$hi = i64toi32_i32$3;
     i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $342_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $342_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $314$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $308$hi;
     i64toi32_i32$2 = $308_1;
     i64toi32_i32$1 = $314$hi;
     i64toi32_i32$5 = $342_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $315_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $315$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $305$hi;
     i64toi32_i32$3 = $305_1;
     i64toi32_i32$2 = $315$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $344_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $344_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $344_1;
     $2$hi = i64toi32_i32$1;
     $321_1 = $2_1;
     $321$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $345_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $345_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $20_1 = $345_1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $346_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $346_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4_1 = $346_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($321_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$1;
     $330_1 = i64toi32_i32$0;
     $330$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $347_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $347_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $22_1 = $347_1;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $348_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $10_1 = $348_1;
     $10$hi = i64toi32_i32$4;
     $335_1 = $10_1;
     $335$hi = i64toi32_i32$4;
     i64toi32_i32$0 = ($5_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $350_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $340_1 = $350_1;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $351_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $351_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $340$hi;
     i64toi32_i32$4 = $340_1;
     i64toi32_i32$1 = $342$hi;
     i64toi32_i32$5 = $351_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $343_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $343$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $352_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $352_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$1 = $343_1;
     i64toi32_i32$0 = $345$hi;
     i64toi32_i32$5 = $352_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $346$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $349_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $346$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $350$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $354_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $355$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $351$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$5 = $354_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $353_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $13_1 = $353_1;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $335$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($335_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $361_1 = i64toi32_i32$0;
     $361$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $330$hi;
     i64toi32_i32$2 = $330_1;
     i64toi32_i32$0 = $361$hi;
     i64toi32_i32$5 = $361_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$5 = $21_1;
     i64toi32_i32$4 = 0;
     $366_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $367_1 = i64toi32_i32$1;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $370_1 = $15_1;
     $370$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $355_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $23_1 = $355_1;
     $23$hi = i64toi32_i32$5;
     $373_1 = $23_1;
     $373$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $356_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $356_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $375$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $373$hi;
     i64toi32_i32$5 = $373_1;
     i64toi32_i32$3 = $375$hi;
     i64toi32_i32$2 = $356_1;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $370$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($370_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $379_1 = i64toi32_i32$4;
     $379$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$3 = $367_1;
     i64toi32_i32$4 = $379$hi;
     i64toi32_i32$2 = $379_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $383_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $384$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $366$hi;
     i64toi32_i32$2 = $366_1;
     i64toi32_i32$1 = $384$hi;
     i64toi32_i32$3 = $383_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $385$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $388_1 = i64toi32_i32$2;
     $388$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $385$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $388$hi;
     i64toi32_i32$3 = $388_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $389_1 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $396_1 = i64toi32_i32$5;
     $396$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$5 = $396$hi;
     i64toi32_i32$3 = $396_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $402_1 = $357_1;
     $402$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $358_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $358_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $404$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $402$hi;
     i64toi32_i32$1 = $402_1;
     i64toi32_i32$4 = $404$hi;
     i64toi32_i32$0 = $358_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $405_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $405$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $389$hi;
     i64toi32_i32$3 = $389_1;
     i64toi32_i32$1 = $405$hi;
     i64toi32_i32$0 = $405_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $406_1 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $407_1 = $17_1;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $359_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $359_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $409$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $407$hi;
     i64toi32_i32$2 = $407_1;
     i64toi32_i32$4 = $409$hi;
     i64toi32_i32$0 = $359_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $413_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $414$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $406$hi;
     i64toi32_i32$0 = $406_1;
     i64toi32_i32$5 = $414$hi;
     i64toi32_i32$2 = $413_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $415_1 = i64toi32_i32$4;
     $415$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $416_1 = $16_1;
     $416$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $425_1 = i64toi32_i32$3;
     $425$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$3 = $425$hi;
     i64toi32_i32$2 = $425_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21_1;
     $429_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $430_1 = $429_1;
     $430$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = -2;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $21_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $436_1 = i64toi32_i32$2;
     $436$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$2 = $436$hi;
     i64toi32_i32$1 = $436_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     $440_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $441$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $430$hi;
     i64toi32_i32$1 = $430_1;
     i64toi32_i32$5 = $441$hi;
     i64toi32_i32$0 = $440_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $442$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $416$hi;
     i64toi32_i32$4 = $416_1;
     i64toi32_i32$1 = $442$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = $16_1;
     $446_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $447$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $415$hi;
     i64toi32_i32$0 = $415_1;
     i64toi32_i32$2 = $447$hi;
     i64toi32_i32$4 = $446_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $448_1 = i64toi32_i32$1;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $449_1 = $17_1;
     $449$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $456_1 = i64toi32_i32$0;
     $456$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$0 = $456$hi;
     i64toi32_i32$4 = $456_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $461_1 = i64toi32_i32$3;
     $461$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $461$hi;
     i64toi32_i32$4 = $461_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $466_1 = i64toi32_i32$5;
     $466$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$4 = $466_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $360_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $360_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $469_1 = $360_1;
     $469$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     $472_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $473$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = $4_1;
     $476_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $477$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $473$hi;
     i64toi32_i32$2 = $472_1;
     i64toi32_i32$0 = $477$hi;
     i64toi32_i32$1 = $476_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $478$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $481_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $482$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $478$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $482$hi;
     i64toi32_i32$2 = $481_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $362_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $362_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $484$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $469$hi;
     i64toi32_i32$5 = $469_1;
     i64toi32_i32$4 = $484$hi;
     i64toi32_i32$2 = $362_1;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $485_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $485$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $449$hi;
     i64toi32_i32$1 = $449_1;
     i64toi32_i32$5 = $485$hi;
     i64toi32_i32$2 = $485_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$2 = $17_1;
     $489_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $490$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $448$hi;
     i64toi32_i32$2 = $448_1;
     i64toi32_i32$0 = $490$hi;
     i64toi32_i32$1 = $489_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $491_1 = i64toi32_i32$5;
     $491$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $492_1 = $4_1;
     $492$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $493_1 = $24_1;
     $493$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $500_1 = i64toi32_i32$2;
     $500$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = $500$hi;
     i64toi32_i32$1 = $500_1;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $363_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $363_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $503_1 = $363_1;
     $503$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $506_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = $506_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $364_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $364_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $508$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $503$hi;
     i64toi32_i32$5 = $503_1;
     i64toi32_i32$1 = $508$hi;
     i64toi32_i32$3 = $364_1;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $509_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $509$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $493$hi;
     i64toi32_i32$4 = $493_1;
     i64toi32_i32$5 = $509$hi;
     i64toi32_i32$3 = $509_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24_1;
     i64toi32_i32$1 = 0;
     $514_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $514$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$0;
     $515_1 = i64toi32_i32$2;
     $515$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $365_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $365_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $517$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $515$hi;
     i64toi32_i32$1 = $515_1;
     i64toi32_i32$3 = $517$hi;
     i64toi32_i32$4 = $365_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $518$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $518$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     $520_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $521$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $514$hi;
     i64toi32_i32$4 = $514_1;
     i64toi32_i32$2 = $521$hi;
     i64toi32_i32$1 = $520_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $522$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$0 = $492_1;
     i64toi32_i32$4 = $522$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     $526_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $527$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$1 = $491_1;
     i64toi32_i32$3 = $527$hi;
     i64toi32_i32$0 = $526_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = 131071;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$1 = $23_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $14$hi;
     $492($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $368_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $368_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $541$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($5_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $545_1 = i64toi32_i32$5;
     $545$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $541$hi;
     i64toi32_i32$1 = $368_1;
     i64toi32_i32$5 = $545$hi;
     i64toi32_i32$2 = $545_1;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $546$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $550_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $551$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = $551$hi;
     i64toi32_i32$4 = $550_1;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$5;
     $13$hi = i64toi32_i32$3;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$5;
     break label$12;
    }
    $558_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $369_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $369_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560_1 = $369_1;
    $560$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $371_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $371_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $560$hi;
    i64toi32_i32$0 = $560_1;
    i64toi32_i32$5 = $562$hi;
    i64toi32_i32$4 = $371_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $2_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$5;
    $564_1 = $2_1;
    $564$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $372_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $372_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $372_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $564$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    $492($558_1 | 0, $564_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $374_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $374_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$5;
    i64toi32_i32$4 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $575_1 = i64toi32_i32$5;
    $575$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $571$hi;
    i64toi32_i32$4 = $374_1;
    i64toi32_i32$5 = $575$hi;
    i64toi32_i32$0 = $575_1;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $576$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $580_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$3 = 0;
    $581$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $576$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = $581$hi;
    i64toi32_i32$1 = $580_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$5;
    $13$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $10_1 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$5;
   }
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $375_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $375_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $595_1 = $375_1;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 63;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $376_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $376_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $597$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $595$hi;
     i64toi32_i32$2 = $595_1;
     i64toi32_i32$3 = $597$hi;
     i64toi32_i32$1 = $376_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 48;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $377_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $377_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $603_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $603$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $601$hi;
     i64toi32_i32$2 = $377_1;
     i64toi32_i32$3 = $603$hi;
     i64toi32_i32$1 = $603_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $378_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $378_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $4_1 = $378_1;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    $857($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $854($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$5;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = $15$hi;
    $492($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $636_1 = i64toi32_i32$1;
    $636$hi = i64toi32_i32$3;
    i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $380_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $380_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $641_1 = $380_1;
    $641$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $381_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $381_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $645$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $641$hi;
    i64toi32_i32$5 = $641_1;
    i64toi32_i32$1 = $645$hi;
    i64toi32_i32$2 = $381_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $646_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $636$hi;
    i64toi32_i32$3 = $636_1;
    i64toi32_i32$5 = $646$hi;
    i64toi32_i32$2 = $646_1;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $647_1 = i64toi32_i32$0;
    $647$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$3;
    $650_1 = i64toi32_i32$4;
    $650$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     $382_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $382_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $1_1 = $382_1;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $650$hi;
    i64toi32_i32$3 = $650_1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1_1;
    $654_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $655$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $647$hi;
    i64toi32_i32$2 = $647_1;
    i64toi32_i32$4 = $655$hi;
    i64toi32_i32$1 = $654_1;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $13_1 = i64toi32_i32$5;
    $13$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $492($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   $492($5_1 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = $15$hi;
   $667_1 = $15_1;
   $667$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $668_1 = $2_1;
   $668$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = $3_1;
   $676_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$5 = $1_1;
   $680_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $681$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$5 = $13_1;
   i64toi32_i32$3 = $681$hi;
   i64toi32_i32$4 = $680_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$4 = $14_1;
   $685_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $14_1;
   $689_1 = (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676_1 : $685_1;
   i64toi32_i32$4 = 0;
   $690$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $668$hi;
   i64toi32_i32$5 = $668_1;
   i64toi32_i32$1 = $690$hi;
   i64toi32_i32$2 = $689_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $694_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $695$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $667$hi;
   i64toi32_i32$2 = $667_1;
   i64toi32_i32$0 = $695$hi;
   i64toi32_i32$5 = $694_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   $697_1 = i64toi32_i32$1;
   $697$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$5 = 0;
   $700_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $703_1 = i64toi32_i32$4;
   $703$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $703$hi;
   i64toi32_i32$2 = $703_1;
   $704_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $711_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = $2_1;
   $716_1 = $700_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $704_1 : $711_1) | 0;
   i64toi32_i32$4 = 0;
   $717$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$3 = $716_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $721_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $722$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $697$hi;
   i64toi32_i32$3 = $697_1;
   i64toi32_i32$1 = $722$hi;
   i64toi32_i32$5 = $721_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$0;
   $724_1 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$5 = 0;
   $727_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $730_1 = i64toi32_i32$4;
   $730$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $730$hi;
   i64toi32_i32$3 = $730_1;
   $731_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $5_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   $737_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4_1;
   $742_1 = $727_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0 ? $731_1 : $737_1) | 0;
   i64toi32_i32$4 = 0;
   $743$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = $743$hi;
   i64toi32_i32$0 = $742_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $747_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $748$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $724$hi;
   i64toi32_i32$0 = $724_1;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$5 = $747_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $749$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $749$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $870($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $871($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $6_1 = 0, $11$hi = 0, $52_1 = 0, $7_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $11_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $123$hi = 0, $126_1 = 0, $127$hi = 0, $148_1 = 0, $148$hi = 0, $150$hi = 0, $153_1 = 0, $153$hi = 0, $155$hi = 0, $167$hi = 0, $170_1 = 0, $171$hi = 0, $200_1 = 0, $200$hi = 0, $202$hi = 0, $211_1 = 0, $212_1 = 0, $212$hi = 0, $214_1 = 0, $214$hi = 0, $220$hi = 0, $221_1 = 0, $221$hi = 0, $228_1 = 0, $228$hi = 0, $233$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($863($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $870($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $52_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $858($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $869($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $10$hi;
    if (($863($1_1 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $10$hi;
     if (!($863($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $858($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $53_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $6_1 = $53_1 & 32767 | 0;
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$6;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1081540608;
    $858($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $54_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $54_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $54_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1081540608;
    $858($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $55_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $55_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $55_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $11_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$1;
   label$9 : {
    if (($8_1 | 0) <= ($6_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $123$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $126_1 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $127$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $123$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $127$hi;
       i64toi32_i32$2 = $126_1;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $56_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $57_1 = 0
         } else {
          $57_1 = 1
         }
         $58_1 = $57_1;
        } else {
         $58_1 = 0
        }
        $56_1 = $58_1;
       }
       if ($56_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        $858($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$2 = $5_1 + 40 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$1;
        break label$1;
       }
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $59_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $59_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $148_1 = $59_1;
       $148$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $60_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $60_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $150$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $148$hi;
       i64toi32_i32$3 = $148_1;
       i64toi32_i32$1 = $150$hi;
       i64toi32_i32$0 = $60_1;
       i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       $9$hi = i64toi32_i32$1;
       break label$11;
      }
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $61_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $61_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $153_1 = $61_1;
      $153$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $62_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $62_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $155$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $153$hi;
      i64toi32_i32$3 = $153_1;
      i64toi32_i32$1 = $155$hi;
      i64toi32_i32$0 = $62_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $9$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $63_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $63_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4_1 = $63_1;
     $4$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($6_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8_1 = $6_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $167$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     $170_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $171$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $167$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $171$hi;
     i64toi32_i32$1 = $170_1;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
      $64_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        $65_1 = 0
       } else {
        $65_1 = 1
       }
       $66_1 = $65_1;
      } else {
       $66_1 = 0
      }
      $64_1 = $66_1;
     }
     if ($64_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    $858($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $67_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $67_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $67_1;
     $3$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $68_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $68_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $68_1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $200_1 = $3_1;
     $200$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $69_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $69_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $202$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $200$hi;
     i64toi32_i32$2 = $200_1;
     i64toi32_i32$3 = $202$hi;
     i64toi32_i32$0 = $69_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$2 = 65536;
     i64toi32_i32$0 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$18 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$18
    }
    $211_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $212_1 = $4_1;
    $212$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $214_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $214$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $70_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $70_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $214$hi;
    i64toi32_i32$3 = $214_1;
    i64toi32_i32$1 = $220$hi;
    i64toi32_i32$2 = $70_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $221_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $221$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $212$hi;
    i64toi32_i32$3 = $221$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1065811968;
    $858($211_1 | 0, $212_1 | 0, i64toi32_i32$1 | 0, $221_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $228_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $228$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $8_1 | $6_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $71_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $71_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $233$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $228$hi;
   i64toi32_i32$0 = $228_1;
   i64toi32_i32$2 = $233$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $2_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $872($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $873($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $6_1 = 0, $7_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $12_1 = 0, $12$hi = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 84348 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 84336 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $851($1_1 | 0) | 0;
     }
     if ($474($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $851($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 65560 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $851($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $20_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21_1 = 0
         } else {
          $21_1 = 1
         }
         $22_1 = $21_1;
        } else {
         $22_1 = 0
        }
        $20_1 = $22_1;
       }
       if ($20_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $23_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $24_1 = 0
        } else {
         $24_1 = 1
        }
        $25_1 = $24_1;
       } else {
        $25_1 = 0
       }
       $23_1 = $25_1;
      }
      $1_1 = $23_1;
      label$17 : while (1) {
       label$18 : {
        if ($1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $855($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$0 = $4_1 + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$3;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 66828 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $851($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($9_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $851($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $874($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$0 = $4_1 + 24 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$3;
          $11$hi = i64toi32_i32$2;
          i64toi32_i32$0 = $4_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$2;
          $10$hi = i64toi32_i32$3;
          break label$1;
         }
         i64toi32_i32$0 = $1_1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
          $26_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $27_1 = 0
           } else {
            $27_1 = 1
           }
           $28_1 = $27_1;
          } else {
           $28_1 = 0
          }
          $26_1 = $28_1;
         }
         if ($26_1) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $875($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$1 = $4_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$2;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      label$31 : {
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
        $29_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $30_1 = 0
         } else {
          $30_1 = 1
         }
         $31_1 = $30_1;
        } else {
         $31_1 = 0
        }
        $29_1 = $31_1;
       }
       if ($29_1) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($412() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $851($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$1 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $32_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $33_1 = 0
        } else {
         $33_1 = 1
        }
        $34_1 = $33_1;
       } else {
        $34_1 = 0
       }
       $32_1 = $34_1;
      }
      if ($32_1) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $851($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$3 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$3;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$3;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
       $35_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
         $36_1 = 0
        } else {
         $36_1 = 1
        }
        $37_1 = $36_1;
       } else {
        $37_1 = 0
       }
       $35_1 = $37_1;
      }
      if ($35_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      label$43 : {
       if (!$3_1) {
        break label$43
       }
       if ($9_1) {
        break label$42
       }
       i64toi32_i32$0 = 0;
       $10_1 = 0;
       $10$hi = i64toi32_i32$0;
       break label$1;
      }
      HEAP32[($412() | 0) >> 2] = 28;
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      break label$19;
     }
     label$44 : while (1) {
      $9_1 = $9_1 + -1 | 0;
      label$45 : {
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$1 = $12_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
        $38_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $39_1 = 0
         } else {
          $39_1 = 1
         }
         $40_1 = $39_1;
        } else {
         $40_1 = 0
        }
        $38_1 = $40_1;
       }
       if ($38_1) {
        break label$45
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$1 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$1;
      if ($9_1) {
       continue label$44
      }
      break label$1;
     };
    }
    i64toi32_i32$1 = $10$hi;
    $850($1_1 | 0, $10_1 | 0, i64toi32_i32$1 | 0);
   }
   i64toi32_i32$1 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $874($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $126_1 = 0, $127_1 = 0, $128_1 = 0, $130_1 = 0, $131_1 = 0, $132_1 = 0, $125_1 = 0, $125$hi = 0, $129_1 = 0, $129$hi = 0, $140_1 = 0, $140$hi = 0, $144_1 = 0, $144$hi = 0, $162_1 = 0, $162$hi = 0, $166_1 = 0, $166$hi = 0, $266$hi = 0, $273$hi = 0, $282_1 = 0, $282$hi = 0, $286_1 = 0, $286$hi = 0, $290_1 = 0, $290$hi = 0, $294_1 = 0, $294$hi = 0, $304_1 = 0, $304$hi = 0, $321_1 = 0, $321$hi = 0, $325_1 = 0, $325$hi = 0, $330_1 = 0, $330$hi = 0, $332_1 = 0, $332$hi = 0, $350$hi = 0, $358_1 = 0, $359_1 = 0, $362$hi = 0, $386_1 = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $426_1 = 0, $426$hi = 0, $430_1 = 0, $430$hi = 0, $434_1 = 0, $434$hi = 0, $438_1 = 0, $438$hi = 0, $447_1 = 0, $447$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $458_1 = 0, $458$hi = 0, $460_1 = 0, $460$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $472_1 = 0, $472$hi = 0, $504_1 = 0, $504$hi = 0, $508_1 = 0, $508$hi = 0, $512_1 = 0, $512$hi = 0, $516_1 = 0, $516$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $851($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $851($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $851($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $851($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$14 : {
     label$15 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($12_1 + -97 | 0) >>> 0 < 6 >>> 0) {
        break label$16
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8_1) {
       break label$12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$14;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $106_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $107_1 = 0
         } else {
          $107_1 = 1
         }
         $108_1 = $107_1;
        } else {
         $108_1 = 0
        }
        $106_1 = $108_1;
       }
       if ($106_1) {
        break label$18
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$19
       }
       $856($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $858($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $125_1 = i64toi32_i32$5;
       $125$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $129_1 = i64toi32_i32$2;
       $129$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $125$hi;
       i64toi32_i32$2 = $129$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       $858($6_1 + 16 | 0 | 0, $125_1 | 0, i64toi32_i32$5 | 0, $129_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $140_1 = i64toi32_i32$3;
       $140$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $144_1 = i64toi32_i32$0;
       $144$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $140$hi;
       i64toi32_i32$0 = $144$hi;
       i64toi32_i32$2 = $16$hi;
       i64toi32_i32$5 = $17$hi;
       $861($6_1 | 0, $140_1 | 0, i64toi32_i32$3 | 0, $144_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$17;
      }
      if (!$7_1) {
       break label$17
      }
      if ($11_1) {
       break label$17
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $858($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $162_1 = i64toi32_i32$3;
      $162$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $166_1 = i64toi32_i32$0;
      $166$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $162$hi;
      i64toi32_i32$0 = $166$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $861($6_1 + 64 | 0 | 0, $162_1 | 0, i64toi32_i32$3 | 0, $166_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$20 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$20
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$13;
    }
    $7_1 = $851($1_1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    if ($9_1) {
     break label$22
    }
    label$23 : {
     label$24 : {
      label$25 : {
       i64toi32_i32$5 = $1_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
        $109_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $110_1 = 0
         } else {
          $110_1 = 1
         }
         $111_1 = $110_1;
        } else {
         $111_1 = 0
        }
        $109_1 = $111_1;
       }
       if ($109_1) {
        break label$25
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
       if (!$5_1) {
        break label$24
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
       if (!$8_1) {
        break label$23
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
       break label$23;
      }
      if ($5_1) {
       break label$23
      }
     }
     i64toi32_i32$5 = 0;
     $850($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    }
    $862($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
    i64toi32_i32$3 = $6_1 + 104 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$5;
    break label$21;
   }
   label$26 : {
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $112_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $113_1 = 0
      } else {
       $113_1 = 1
      }
      $114_1 = $113_1;
     } else {
      $114_1 = 0
     }
     $112_1 = $114_1;
    }
    if ($112_1) {
     break label$26
    }
    i64toi32_i32$3 = $19$hi;
    $15_1 = $19_1;
    $15$hi = i64toi32_i32$3;
    label$27 : while (1) {
     $10_1 = $10_1 << 4 | 0;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15_1 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label$27
     }
     break label$27;
    };
   }
   label$28 : {
    label$29 : {
     label$30 : {
      label$31 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$31
       }
       i64toi32_i32$3 = $876($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = -2147483648;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$28
       }
       label$32 : {
        if (!$5_1) {
         break label$32
        }
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $115_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $116_1 = 0
          } else {
           $116_1 = 1
          }
          $117_1 = $116_1;
         } else {
          $117_1 = 0
         }
         $115_1 = $117_1;
        }
        if ($115_1) {
         break label$30
        }
        break label$29;
       }
       i64toi32_i32$4 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $850($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$4 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$4;
       break label$21;
      }
      i64toi32_i32$4 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
       $118_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $119_1 = 0
        } else {
         $119_1 = 1
        }
        $120_1 = $119_1;
       } else {
        $120_1 = 0
       }
       $118_1 = $120_1;
      }
      if ($118_1) {
       break label$28
      }
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = 0;
    $15_1 = 0;
    $15$hi = i64toi32_i32$3;
   }
   label$33 : {
    if ($10_1) {
     break label$33
    }
    $862($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
    i64toi32_i32$0 = $6_1 + 120 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$3;
    break label$21;
   }
   label$34 : {
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = i64toi32_i32$5 ? $14_1 : $19_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 2;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $121_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $121_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $266$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $266$hi;
    i64toi32_i32$0 = $121_1;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -32;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $273$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $273$hi;
    i64toi32_i32$3 = 0 - $3_1 | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $122_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $123_1 = 0
      } else {
       $123_1 = 1
      }
      $124_1 = $123_1;
     } else {
      $124_1 = 0
     }
     $122_1 = $124_1;
    }
    if ($122_1) {
     break label$34
    }
    HEAP32[($412() | 0) >> 2] = 68;
    $856($6_1 + 160 | 0 | 0, $4_1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
    $282_1 = i64toi32_i32$2;
    $282$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 160 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $286_1 = i64toi32_i32$1;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $282$hi;
    i64toi32_i32$1 = $286$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = 2147418111;
    $858($6_1 + 144 | 0 | 0, $282_1 | 0, i64toi32_i32$2 | 0, $286_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $290_1 = i64toi32_i32$4;
    $290$hi = i64toi32_i32$3;
    i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $294_1 = i64toi32_i32$3;
    $294$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $290$hi;
    i64toi32_i32$3 = $294$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $858($6_1 + 128 | 0 | 0, $290_1 | 0, i64toi32_i32$4 | 0, $294_1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = ($6_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    break label$21;
   }
   label$35 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $3_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $304_1 = i64toi32_i32$1;
    $304$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$1 = $304$hi;
    i64toi32_i32$4 = $304_1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $126_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $127_1 = 0
      } else {
       $127_1 = 1
      }
      $128_1 = $127_1;
     } else {
      $128_1 = 0
     }
     $126_1 = $128_1;
    }
    if ($126_1) {
     break label$35
    }
    label$36 : {
     if (($10_1 | 0) <= (-1 | 0)) {
      break label$36
     }
     label$37 : while (1) {
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1073807360;
      $861($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1073610752;
      $7_1 = $864($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$4 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
      $321_1 = i64toi32_i32$3;
      $321$hi = i64toi32_i32$2;
      $1_1 = ($7_1 | 0) < (0 | 0);
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $321$hi;
      i64toi32_i32$1 = i64toi32_i32$0 ? $16_1 : $321_1;
      i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
      $325_1 = i64toi32_i32$1;
      $325$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$0 = ($6_1 + 416 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $330_1 = i64toi32_i32$4;
      $330$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$4 = $330$hi;
      i64toi32_i32$2 = i64toi32_i32$3 ? $17_1 : $330_1;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
      $332_1 = i64toi32_i32$2;
      $332$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $325$hi;
      i64toi32_i32$1 = $332$hi;
      $861($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $325_1 | 0, i64toi32_i32$3 | 0, $332_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
      $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
      if (($10_1 | 0) > (-1 | 0)) {
       continue label$37
      }
      break label$37;
     };
    }
    label$38 : {
     label$39 : {
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $350$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$2 = $350$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $14_1 = i64toi32_i32$2;
      $14$hi = i64toi32_i32$3;
      $7_1 = i64toi32_i32$2;
      $358_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
      $359_1 = $2_1;
      i64toi32_i32$3 = 0;
      $362$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $362$hi;
      i64toi32_i32$0 = $2_1;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
       $130_1 = 1
      } else {
       if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $131_1 = 0
        } else {
         $131_1 = 1
        }
        $132_1 = $131_1;
       } else {
        $132_1 = 0
       }
       $130_1 = $132_1;
      }
      $7_1 = $130_1 ? $358_1 : $359_1;
      if (($7_1 | 0) < (113 | 0)) {
       break label$39
      }
      $856($6_1 + 384 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1 + 392 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$4;
      $14$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $20_1 = 0;
      $20$hi = i64toi32_i32$4;
      break label$38;
     }
     $862($6_1 + 352 | 0 | 0, +(+$467(+(1.0), 144 - $7_1 | 0 | 0)));
     $856($6_1 + 336 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
     $386_1 = i64toi32_i32$4;
     $386$hi = i64toi32_i32$3;
     i64toi32_i32$0 = (i64toi32_i32$0 + 352 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $390_1 = i64toi32_i32$3;
     $390$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$3;
     i64toi32_i32$0 = (i64toi32_i32$0 + 336 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $386$hi;
     i64toi32_i32$3 = $390$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$5 = $14$hi;
     $865($6_1 + 368 | 0 | 0, $386_1 | 0, i64toi32_i32$4 | 0, $390_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$3 = ($6_1 + 368 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 368 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 372 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 0;
    $7_1 = (($7_1 | 0) < (32 | 0) & ($863($16_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) | 0) & !($10_1 & 1 | 0) | 0;
    $866($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
    $426_1 = i64toi32_i32$4;
    $426$hi = i64toi32_i32$3;
    i64toi32_i32$0 = (i64toi32_i32$0 + 320 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $430_1 = i64toi32_i32$3;
    $430$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$0 = $426$hi;
    i64toi32_i32$5 = $430$hi;
    $858($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$3 | 0, $426_1 | 0, i64toi32_i32$0 | 0, $430_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 308 | 0) >> 2] | 0;
    $434_1 = i64toi32_i32$5;
    $434$hi = i64toi32_i32$0;
    i64toi32_i32$3 = (i64toi32_i32$3 + 304 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $438_1 = i64toi32_i32$0;
    $438$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $434$hi;
    i64toi32_i32$0 = $438$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$4 = $20$hi;
    $861($6_1 + 272 | 0 | 0, $434_1 | 0, i64toi32_i32$5 | 0, $438_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $16_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$3;
    $447_1 = i64toi32_i32$5;
    $447$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$3 ? 0 : $17_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$5;
    $450_1 = i64toi32_i32$4;
    $450$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$3 = $447$hi;
    i64toi32_i32$0 = $450$hi;
    $858($6_1 + 288 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $447_1 | 0, i64toi32_i32$3 | 0, $450_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
    $454_1 = i64toi32_i32$0;
    $454$hi = i64toi32_i32$3;
    i64toi32_i32$4 = (i64toi32_i32$4 + 288 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $458_1 = i64toi32_i32$3;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
    $460_1 = i64toi32_i32$0;
    $460$hi = i64toi32_i32$3;
    i64toi32_i32$4 = (i64toi32_i32$4 + 272 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $464_1 = i64toi32_i32$3;
    $464$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $454$hi;
    i64toi32_i32$3 = $458$hi;
    i64toi32_i32$4 = $460$hi;
    i64toi32_i32$1 = $464$hi;
    $861($6_1 + 256 | 0 | 0, $454_1 | 0, i64toi32_i32$0 | 0, $458_1 | 0, i64toi32_i32$3 | 0, $460_1 | 0, i64toi32_i32$4 | 0, $464_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 256 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 260 | 0) >> 2] | 0;
    $468_1 = i64toi32_i32$1;
    $468$hi = i64toi32_i32$4;
    i64toi32_i32$3 = (i64toi32_i32$3 + 256 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $472_1 = i64toi32_i32$4;
    $472$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $468$hi;
    i64toi32_i32$4 = $472$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$0 = $20$hi;
    $867($6_1 + 240 | 0 | 0, $468_1 | 0, i64toi32_i32$1 | 0, $472_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
    label$40 : {
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ($863($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
      break label$40
     }
     HEAP32[($412() | 0) >> 2] = 68;
    }
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$4 = $17$hi;
    $868($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0);
    i64toi32_i32$3 = ($6_1 + 224 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 224 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 228 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$4;
    break label$21;
   }
   HEAP32[($412() | 0) >> 2] = 68;
   $856($6_1 + 208 | 0 | 0, $4_1 | 0);
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 208 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 212 | 0) >> 2] | 0;
   $504_1 = i64toi32_i32$4;
   $504$hi = i64toi32_i32$1;
   i64toi32_i32$3 = (i64toi32_i32$3 + 208 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $508_1 = i64toi32_i32$1;
   $508$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $504$hi;
   i64toi32_i32$1 = $508$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 65536;
   $858($6_1 + 192 | 0 | 0, $504_1 | 0, i64toi32_i32$4 | 0, $508_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
   $512_1 = i64toi32_i32$0;
   $512$hi = i64toi32_i32$3;
   i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $516_1 = i64toi32_i32$3;
   $516$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $512$hi;
   i64toi32_i32$3 = $516$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 65536;
   $858($6_1 + 176 | 0 | 0, $512_1 | 0, i64toi32_i32$0 | 0, $516_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$3 = ($6_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$4;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 176 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 180 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $875($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18$hi = 0, $18_1 = 0, $14_1 = 0, $19$hi = 0, $13_1 = 0, i64toi32_i32$0 = 0, $19_1 = 0, $8_1 = 0, $11_1 = 0, $15_1 = 0, $21$hi = 0, $16_1 = 0, $20$hi = 0, $21_1 = 0, $20_1 = 0, $12_1 = 0, $9_1 = 0, $17_1 = 0, $22$hi = 0, $23$hi = 0, $22_1 = 0, $23_1 = 0, $10_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $178_1 = 0, $179_1 = 0, $180_1 = 0, $181_1 = 0, $182_1 = 0, $183_1 = 0, $184_1 = 0, $24_1 = 0.0, $126_1 = 0, $234_1 = 0, $234$hi = 0, $238_1 = 0, $238$hi = 0, $240_1 = 0, $240$hi = 0, $244_1 = 0, $244$hi = 0, $254$hi = 0, $263_1 = 0, $263$hi = 0, $267_1 = 0, $267$hi = 0, $271_1 = 0, $271$hi = 0, $275_1 = 0, $275$hi = 0, $285_1 = 0, $285$hi = 0, $294_1 = 0, $294$hi = 0, $298_1 = 0, $298$hi = 0, $302_1 = 0, $302$hi = 0, $306_1 = 0, $306$hi = 0, $355_1 = 0, $355$hi = 0, $359_1 = 0, $359$hi = 0, $361_1 = 0, $361$hi = 0, $365_1 = 0, $365$hi = 0, $384_1 = 0, $384$hi = 0, $388_1 = 0, $388$hi = 0, $390_1 = 0, $390$hi = 0, $394_1 = 0, $394$hi = 0, $405_1 = 0, $405$hi = 0, $409_1 = 0, $409$hi = 0, $411_1 = 0, $411$hi = 0, $415_1 = 0, $415$hi = 0, $443_1 = 0, $443$hi = 0, $447_1 = 0, $447$hi = 0, $449_1 = 0, $449$hi = 0, $453_1 = 0, $453$hi = 0, $463_1 = 0, $463$hi = 0, $467_1 = 0, $467$hi = 0, $469_1 = 0, $469$hi = 0, $473_1 = 0, $473$hi = 0, $512_1 = 0, $588$hi = 0, $590$hi = 0, $598_1 = 0, $598$hi = 0, $644_1 = 0, $646_1 = 0, $740_1 = 0, $740$hi = 0, $744_1 = 0, $744$hi = 0, $746_1 = 0, $746$hi = 0, $750_1 = 0, $750$hi = 0, $769_1 = 0, $769$hi = 0, $773_1 = 0, $773$hi = 0, $815_1 = 0, $876_1 = 0, $876$hi = 0, $880_1 = 0, $880$hi = 0, $899_1 = 0, $899$hi = 0, $903_1 = 0, $903$hi = 0, $921_1 = 0, $921$hi = 0, $925_1 = 0, $925$hi = 0, $962_1 = 0, $962$hi = 0, $966_1 = 0, $966$hi = 0, $985_1 = 0, $985$hi = 0, $989_1 = 0, $989$hi = 0, $1012_1 = 0, $1012$hi = 0, $1016_1 = 0, $1016$hi = 0, $1032_1 = 0, $1032$hi = 0, $1036_1 = 0, $1036$hi = 0, $1050_1 = 0, $1050$hi = 0, $1054_1 = 0, $1054$hi = 0, $1075_1 = 0, $1075$hi = 0, $1079_1 = 0, $1079$hi = 0, $1102_1 = 0, $1102$hi = 0, $1106_1 = 0, $1106$hi = 0, $1112_1 = 0, $1112$hi = 0, $1119_1 = 0, $1119$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = 0 - $4_1 | 0;
  $10_1 = $9_1 - $3_1 | 0;
  i64toi32_i32$0 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $851($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $851($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $851($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           break label$17
          }
          i64toi32_i32$5 = 0;
          $19_1 = 0;
          $19$hi = i64toi32_i32$5;
          if ($13_1 >>> 0 <= 9 >>> 0) {
           break label$17
          }
          $15_1 = 0;
          $16_1 = 0;
          break label$16;
         }
         i64toi32_i32$5 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$5;
         $16_1 = 0;
         $15_1 = 0;
         $12_1 = 0;
         label$18 : while (1) {
          label$19 : {
           label$20 : {
            if (!($14_1 & 1 | 0)) {
             break label$20
            }
            label$21 : {
             if ($8_1) {
              break label$21
             }
             i64toi32_i32$5 = $19$hi;
             $18_1 = $19_1;
             $18$hi = i64toi32_i32$5;
             $8_1 = 1;
             break label$19;
            }
            $14_1 = !$11_1;
            break label$15;
           }
           i64toi32_i32$5 = $19$hi;
           i64toi32_i32$0 = $19_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $19_1 = i64toi32_i32$1;
           $19$hi = i64toi32_i32$4;
           label$22 : {
            if (($15_1 | 0) > (2044 | 0)) {
             break label$22
            }
            $11_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $19$hi;
            $17_1 = $19_1;
            $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$23 : {
             if (!$16_1) {
              break label$23
             }
             $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $12_1 = $11_1 ? $12_1 : $17_1;
            HEAP32[$14_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $16_1 + 1 | 0;
            $126_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $16_1 = $2_1 ? 0 : $126_1;
            $15_1 = $15_1 + $2_1 | 0;
            break label$19;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$19
           }
           HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $12_1 = 18396;
          }
          label$24 : {
           label$25 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
             break label$25
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$24;
           }
           $2_1 = $851($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           continue label$18
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
           continue label$18
          }
          break label$18;
         };
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $18_1 = i64toi32_i32$3;
        $18$hi = i64toi32_i32$5;
        label$26 : {
         if (!$11_1) {
          break label$26
         }
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$26
         }
         label$27 : {
          i64toi32_i32$5 = $876($1_1 | 0, $6_1 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $20_1 = i64toi32_i32$5;
          $20$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$4 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
           break label$27
          }
          if (!$6_1) {
           break label$12
          }
          i64toi32_i32$2 = 0;
          $20_1 = 0;
          $20$hi = i64toi32_i32$2;
          i64toi32_i32$4 = $1_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
          i64toi32_i32$4 = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          i64toi32_i32$5 = 0;
          if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
           $169_1 = 1
          } else {
           if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
             $170_1 = 0
            } else {
             $170_1 = 1
            }
            $171_1 = $170_1;
           } else {
            $171_1 = 0
           }
           $169_1 = $171_1;
          }
          if ($169_1) {
           break label$27
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$11_1) {
          break label$13
         }
         i64toi32_i32$4 = $20$hi;
         i64toi32_i32$4 = $18$hi;
         i64toi32_i32$4 = $20$hi;
         i64toi32_i32$5 = $20_1;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$2 = $18_1;
         i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $18_1 = i64toi32_i32$0;
         $18$hi = i64toi32_i32$1;
         break label$11;
        }
        $14_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$14
        }
       }
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
        $172_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $173_1 = 0
         } else {
          $173_1 = 1
         }
         $174_1 = $173_1;
        } else {
         $174_1 = 0
        }
        $172_1 = $174_1;
       }
       if ($172_1) {
        break label$14
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$14_1) {
       break label$11
      }
     }
     HEAP32[($412() | 0) >> 2] = 28;
    }
    i64toi32_i32$4 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $850($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$4;
    break label$10;
   }
   label$28 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$28
    }
    $862($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$10;
   }
   label$29 : {
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 9;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
     $175_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $176_1 = 0
      } else {
       $176_1 = 1
      }
      $177_1 = $176_1;
     } else {
      $177_1 = 0
     }
     $175_1 = $177_1;
    }
    if ($175_1) {
     break label$29
    }
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$5 = $19_1;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
     break label$29
    }
    label$30 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$30
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$29
     }
    }
    $856($7_1 + 48 | 0 | 0, $5_1 | 0);
    $866($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
    $234_1 = i64toi32_i32$1;
    $234$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $238_1 = i64toi32_i32$2;
    $238$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    $240_1 = i64toi32_i32$1;
    $240$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$2;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $234$hi;
    i64toi32_i32$2 = $238$hi;
    i64toi32_i32$5 = $240$hi;
    i64toi32_i32$4 = $244$hi;
    $858($7_1 + 16 | 0 | 0, $234_1 | 0, i64toi32_i32$1 | 0, $238_1 | 0, i64toi32_i32$2 | 0, $240_1 | 0, i64toi32_i32$5 | 0, $244_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = 0;
    $254$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$5 = $254$hi;
    i64toi32_i32$1 = $9_1 >>> 1 | 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
     $178_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $179_1 = 0
      } else {
       $179_1 = 1
      }
      $180_1 = $179_1;
     } else {
      $180_1 = 0
     }
     $178_1 = $180_1;
    }
    if ($178_1) {
     break label$31
    }
    HEAP32[($412() | 0) >> 2] = 68;
    $856($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $263_1 = i64toi32_i32$2;
    $263$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $267_1 = i64toi32_i32$4;
    $267$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $263$hi;
    i64toi32_i32$4 = $267$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = 2147418111;
    $858($7_1 + 80 | 0 | 0, $263_1 | 0, i64toi32_i32$2 | 0, $267_1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
    $271_1 = i64toi32_i32$5;
    $271$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 80 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $275_1 = i64toi32_i32$1;
    $275$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $271$hi;
    i64toi32_i32$1 = $275$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = 2147418111;
    $858($7_1 + 64 | 0 | 0, $271_1 | 0, i64toi32_i32$5 | 0, $275_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$2;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$2;
    break label$10;
   }
   label$32 : {
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$4 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $285_1 = i64toi32_i32$4;
    $285$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $285$hi;
    i64toi32_i32$5 = $285_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
     $181_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       $182_1 = 0
      } else {
       $182_1 = 1
      }
      $183_1 = $182_1;
     } else {
      $183_1 = 0
     }
     $181_1 = $183_1;
    }
    if ($181_1) {
     break label$32
    }
    HEAP32[($412() | 0) >> 2] = 68;
    $856($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
    $294_1 = i64toi32_i32$1;
    $294$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $298_1 = i64toi32_i32$2;
    $298$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $294$hi;
    i64toi32_i32$2 = $298$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 65536;
    $858($7_1 + 128 | 0 | 0, $294_1 | 0, i64toi32_i32$1 | 0, $298_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $302_1 = i64toi32_i32$4;
    $302$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $306_1 = i64toi32_i32$5;
    $306$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $302$hi;
    i64toi32_i32$5 = $306$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 65536;
    $858($7_1 + 112 | 0 | 0, $302_1 | 0, i64toi32_i32$4 | 0, $306_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$33 : {
    if (!$16_1) {
     break label$33
    }
    label$34 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$34
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$35 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$35
      }
      break label$35;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$1 = $18$hi;
   $8_1 = $18_1;
   label$36 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$36
    }
    if (($12_1 | 0) > ($8_1 | 0)) {
     break label$36
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$36
    }
    label$37 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$37
     }
     $856($7_1 + 192 | 0 | 0, $5_1 | 0);
     $866($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] | 0;
     $355_1 = i64toi32_i32$1;
     $355$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $359_1 = i64toi32_i32$2;
     $359$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
     $361_1 = i64toi32_i32$1;
     $361$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $365_1 = i64toi32_i32$2;
     $365$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $355$hi;
     i64toi32_i32$2 = $359$hi;
     i64toi32_i32$5 = $361$hi;
     i64toi32_i32$4 = $365$hi;
     $858($7_1 + 160 | 0 | 0, $355_1 | 0, i64toi32_i32$1 | 0, $359_1 | 0, i64toi32_i32$2 | 0, $361_1 | 0, i64toi32_i32$5 | 0, $365_1 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$4;
     break label$10;
    }
    label$38 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$38
     }
     $856($7_1 + 272 | 0 | 0, $5_1 | 0);
     $866($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $384_1 = i64toi32_i32$4;
     $384$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $388_1 = i64toi32_i32$5;
     $388$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $390_1 = i64toi32_i32$4;
     $390$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $394_1 = i64toi32_i32$5;
     $394$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $384$hi;
     i64toi32_i32$5 = $388$hi;
     i64toi32_i32$2 = $390$hi;
     i64toi32_i32$1 = $394$hi;
     $858($7_1 + 240 | 0 | 0, $384_1 | 0, i64toi32_i32$4 | 0, $388_1 | 0, i64toi32_i32$5 | 0, $390_1 | 0, i64toi32_i32$2 | 0, $394_1 | 0, i64toi32_i32$1 | 0);
     $856($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 84304 | 0) >> 2] | 0 | 0);
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
     $405_1 = i64toi32_i32$1;
     $405$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $409_1 = i64toi32_i32$2;
     $409$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 228 | 0) >> 2] | 0;
     $411_1 = i64toi32_i32$1;
     $411$hi = i64toi32_i32$2;
     i64toi32_i32$5 = (i64toi32_i32$5 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $415_1 = i64toi32_i32$2;
     $415$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $405$hi;
     i64toi32_i32$2 = $409$hi;
     i64toi32_i32$5 = $411$hi;
     i64toi32_i32$4 = $415$hi;
     $869($7_1 + 208 | 0 | 0, $405_1 | 0, i64toi32_i32$1 | 0, $409_1 | 0, i64toi32_i32$2 | 0, $411_1 | 0, i64toi32_i32$5 | 0, $415_1 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$4;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$39 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$39
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$36
     }
    }
    $856($7_1 + 352 | 0 | 0, $5_1 | 0);
    $866($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $443_1 = i64toi32_i32$4;
    $443$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $447_1 = i64toi32_i32$5;
    $447$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $449_1 = i64toi32_i32$4;
    $449$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $453_1 = i64toi32_i32$5;
    $453$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $443$hi;
    i64toi32_i32$5 = $447$hi;
    i64toi32_i32$2 = $449$hi;
    i64toi32_i32$1 = $453$hi;
    $858($7_1 + 320 | 0 | 0, $443_1 | 0, i64toi32_i32$4 | 0, $447_1 | 0, i64toi32_i32$5 | 0, $449_1 | 0, i64toi32_i32$2 | 0, $453_1 | 0, i64toi32_i32$1 | 0);
    $856($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 84264 | 0) >> 2] | 0 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 324 | 0) >> 2] | 0;
    $463_1 = i64toi32_i32$1;
    $463$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $467_1 = i64toi32_i32$2;
    $467$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 308 | 0) >> 2] | 0;
    $469_1 = i64toi32_i32$1;
    $469$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $473_1 = i64toi32_i32$2;
    $473$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $463$hi;
    i64toi32_i32$2 = $467$hi;
    i64toi32_i32$5 = $469$hi;
    i64toi32_i32$4 = $473$hi;
    $858($7_1 + 288 | 0 | 0, $463_1 | 0, i64toi32_i32$1 | 0, $467_1 | 0, i64toi32_i32$2 | 0, $469_1 | 0, i64toi32_i32$5 | 0, $473_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$10;
   }
   label$40 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$40
    }
    break label$40;
   };
   $16_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $14_1 = 0;
     break label$41;
    }
    $14_1 = 0;
    $6_1 = ($8_1 | 0) < (0 | 0) ? $1_1 + 9 | 0 : $1_1;
    label$43 : {
     label$44 : {
      if ($2_1) {
       break label$44
      }
      $2_1 = 0;
      break label$43;
     }
     $11_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 84304 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $13_1 = 0;
     $1_1 = 0;
     $14_1 = 0;
     label$45 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $512_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $12_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $13_1 = $12_1 + $13_1 | 0;
      HEAP32[$512_1 >> 2] = $13_1;
      $13_1 = ($1_1 | 0) == ($14_1 | 0) & !$13_1 | 0;
      $14_1 = $13_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
      $8_1 = $13_1 ? $8_1 + -9 | 0 : $8_1;
      $13_1 = Math_imul($17_1, $15_1 - Math_imul($12_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$13_1) {
      break label$43
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $12_1 = ($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0;
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$49
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$12_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $11_1 = $2_1 + 2047 | 0;
      $13_1 = 0;
      label$50 : while (1) {
       label$51 : {
        label$52 : {
         $1_1 = $11_1 & 2047 | 0;
         $11_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $11_1;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         i64toi32_i32$1 = 29;
         i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $184_1 = 0;
         } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $184_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $588$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $590$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $588$hi;
         i64toi32_i32$5 = $184_1;
         i64toi32_i32$2 = $590$hi;
         i64toi32_i32$1 = $13_1;
         i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $18_1 = i64toi32_i32$3;
         $18$hi = i64toi32_i32$0;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          break label$52
         }
         $13_1 = 0;
         break label$51;
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $598_1 = i64toi32_i32$0;
        $598$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$1 = $18_1;
        i64toi32_i32$0 = $598$hi;
        i64toi32_i32$5 = $598_1;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $19$hi;
        $13_1 = $19_1;
       }
       i64toi32_i32$3 = $18$hi;
       $15_1 = $18_1;
       HEAP32[$11_1 >> 2] = $18_1;
       $2_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($14_1 | 0) ? $2_1 : $18_1 ? $2_1 : $1_1;
       $11_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($14_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$13_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      $14_1 = ($14_1 + -1 | 0) & 2047 | 0;
      if (($14_1 | 0) != ($2_1 | 0)) {
       break label$53
      }
      $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $644_1 = $1_1;
      $646_1 = HEAP32[$1_1 >> 2] | 0;
      $1_1 = ($2_1 + -1 | 0) & 2047 | 0;
      HEAP32[$644_1 >> 2] = $646_1 | (HEAP32[(($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $2_1 = $1_1;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $13_1;
     continue label$46;
    }
    break label$46;
   };
   label$54 : {
    label$55 : while (1) {
     $9_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $6_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$56 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$57 : {
       label$58 : while (1) {
        $11_1 = $14_1;
        $1_1 = 0;
        label$59 : {
         label$60 : {
          label$61 : while (1) {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) == ($2_1 | 0)) {
            break label$60
           }
           $14_1 = HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 84288 | 0) >> 2] | 0;
           if ($14_1 >>> 0 < $13_1 >>> 0) {
            break label$60
           }
           if ($14_1 >>> 0 > $13_1 >>> 0) {
            break label$59
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$59
         }
         i64toi32_i32$3 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         label$62 : while (1) {
          label$63 : {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) != ($2_1 | 0)) {
            break label$63
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          $866($7_1 + 768 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = 1075633366;
          $858($7_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $740_1 = i64toi32_i32$5;
          $740$hi = i64toi32_i32$4;
          i64toi32_i32$1 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $744_1 = i64toi32_i32$4;
          $744$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $746_1 = i64toi32_i32$5;
          $746$hi = i64toi32_i32$4;
          i64toi32_i32$1 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $750_1 = i64toi32_i32$4;
          $750$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $740$hi;
          i64toi32_i32$4 = $744$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$3 = $750$hi;
          $861($7_1 + 736 | 0 | 0, $740_1 | 0, i64toi32_i32$5 | 0, $744_1 | 0, i64toi32_i32$4 | 0, $746_1 | 0, i64toi32_i32$1 | 0, $750_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$4 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$3;
          $19$hi = i64toi32_i32$1;
          i64toi32_i32$4 = $7_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$1;
          $18$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$62
          }
          break label$62;
         };
         $856($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$4 = $7_1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
         $769_1 = i64toi32_i32$3;
         $769$hi = i64toi32_i32$1;
         i64toi32_i32$4 = (i64toi32_i32$4 + 720 | 0) + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
         $773_1 = i64toi32_i32$1;
         $773$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$1 = $19$hi;
         i64toi32_i32$4 = $769$hi;
         i64toi32_i32$5 = $773$hi;
         $858($7_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $769_1 | 0, i64toi32_i32$4 | 0, $773_1 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$4;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$4 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$5;
         $13_1 = $16_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $15_1 = ($1_1 | 0) < ($3_1 | 0);
         $14_1 = $15_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($14_1 | 0) <= (112 | 0)) {
          break label$57
         }
         i64toi32_i32$5 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$5;
         break label$54;
        }
        $16_1 = $15_1 + $16_1 | 0;
        $14_1 = $2_1;
        if (($11_1 | 0) == ($2_1 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $12_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $14_1 = $11_1;
       label$64 : while (1) {
        $13_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $815_1 = $13_1;
        $13_1 = HEAP32[$13_1 >> 2] | 0;
        $1_1 = ($13_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$815_1 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($14_1 | 0) & !$1_1 | 0;
        $14_1 = $1_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($13_1 & $17_1 | 0, $12_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($2_1 | 0)) {
         continue label$64
        }
        break label$64;
       };
       if (!$1_1) {
        continue label$56
       }
       label$65 : {
        if (($9_1 | 0) == ($14_1 | 0)) {
         break label$65
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $9_1;
        continue label$55;
       }
       HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 0 | 1 | 0;
       continue label$56;
      }
      break label$56;
     };
     break label$55;
    };
    $862($7_1 + 656 | 0 | 0, +(+$467(+(1.0), 225 - $14_1 | 0 | 0)));
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $876_1 = i64toi32_i32$5;
    $876$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $880_1 = i64toi32_i32$4;
    $880$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $876$hi;
    i64toi32_i32$4 = $880$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    $865($7_1 + 688 | 0 | 0, $876_1 | 0, i64toi32_i32$5 | 0, $880_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($7_1 + 688 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$3;
    $862(i64toi32_i32$4 + 640 | 0 | 0, +(+$467(+(1.0), 113 - $14_1 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
    $899_1 = i64toi32_i32$3;
    $899$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $903_1 = i64toi32_i32$1;
    $903$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = $899$hi;
    i64toi32_i32$5 = $903$hi;
    $871($7_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $899_1 | 0, i64toi32_i32$4 | 0, $903_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($7_1 + 672 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    $867($7_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
    $921_1 = i64toi32_i32$3;
    $921$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 624 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $925_1 = i64toi32_i32$1;
    $925$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$4 = $921$hi;
    i64toi32_i32$5 = $925$hi;
    $861($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $921_1 | 0, i64toi32_i32$4 | 0, $925_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$5;
   }
   label$66 : {
    $8_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($2_1 | 0)) {
     break label$66
    }
    label$67 : {
     label$68 : {
      $8_1 = HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$68
      }
      label$69 : {
       if ($8_1) {
        break label$69
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$67
       }
      }
      $862($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $962_1 = i64toi32_i32$5;
      $962$hi = i64toi32_i32$4;
      i64toi32_i32$1 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $966_1 = i64toi32_i32$4;
      $966$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $962$hi;
      i64toi32_i32$3 = $966$hi;
      $861($7_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $962_1 | 0, i64toi32_i32$1 | 0, $966_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break label$67;
     }
     label$70 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$70
      }
      $862($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
      $985_1 = i64toi32_i32$3;
      $985$hi = i64toi32_i32$1;
      i64toi32_i32$4 = (i64toi32_i32$4 + 592 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $989_1 = i64toi32_i32$1;
      $989$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $985$hi;
      i64toi32_i32$5 = $989$hi;
      $861($7_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $985_1 | 0, i64toi32_i32$4 | 0, $989_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      break label$67;
     }
     $24_1 = +($5_1 | 0);
     label$71 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$71
      }
      $862($7_1 + 528 | 0 | 0, +($24_1 * .5));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1012_1 = i64toi32_i32$5;
      $1012$hi = i64toi32_i32$4;
      i64toi32_i32$1 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $1016_1 = i64toi32_i32$4;
      $1016$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $1012$hi;
      i64toi32_i32$3 = $1016$hi;
      $861($7_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $1012_1 | 0, i64toi32_i32$1 | 0, $1016_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break label$67;
     }
     $862($7_1 + 560 | 0 | 0, +($24_1 * .75));
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
     $1032_1 = i64toi32_i32$3;
     $1032$hi = i64toi32_i32$1;
     i64toi32_i32$4 = (i64toi32_i32$4 + 560 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $1036_1 = i64toi32_i32$1;
     $1036$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $1032$hi;
     i64toi32_i32$5 = $1036$hi;
     $861($7_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $1032_1 | 0, i64toi32_i32$4 | 0, $1036_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
    }
    if (($14_1 | 0) > (111 | 0)) {
     break label$66
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $871($7_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
    $1050_1 = i64toi32_i32$3;
    $1050$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 464 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1054_1 = i64toi32_i32$1;
    $1054$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1050$hi;
    i64toi32_i32$1 = $1054$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if ($863($1050_1 | 0, i64toi32_i32$3 | 0, $1054_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
     break label$66
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $861($7_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($7_1 + 448 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $18$hi;
   i64toi32_i32$5 = $21$hi;
   $861($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1075_1 = i64toi32_i32$5;
   $1075$hi = i64toi32_i32$4;
   i64toi32_i32$1 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $1079_1 = i64toi32_i32$4;
   $1079$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$5 = $1075$hi;
   i64toi32_i32$4 = $1079$hi;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $23$hi;
   $867($7_1 + 416 | 0 | 0, $1075_1 | 0, i64toi32_i32$5 | 0, $1079_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$4 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$3;
   label$72 : {
    if (($13_1 & 2147483647 | 0 | 0) <= ($10_1 + -2 | 0 | 0)) {
     break label$72
    }
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    $872($7_1 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1073610752;
    $858($7_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1102_1 = i64toi32_i32$5;
    $1102$hi = i64toi32_i32$4;
    i64toi32_i32$3 = ($7_1 + 400 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1106_1 = i64toi32_i32$4;
    $1106$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1102$hi;
    i64toi32_i32$4 = $1106$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1081081856;
    $2_1 = $864($1102_1 | 0, i64toi32_i32$5 | 0, $1106_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1112_1 = i64toi32_i32$1;
    $1112$hi = i64toi32_i32$3;
    $13_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$1 = $1112$hi;
    i64toi32_i32$5 = i64toi32_i32$0 ? $19_1 : $1112_1;
    i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$1;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1119_1 = i64toi32_i32$4;
    $1119$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $13_1;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$4 = $1119$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $20_1 : $1119_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    $20_1 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    $11_1 = $863($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    label$73 : {
     $16_1 = $16_1 + (($2_1 | 0) > (-1 | 0)) | 0;
     if (($16_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break label$73
     }
     if (!(($13_1 ? $15_1 : $15_1 & ($14_1 | 0) != ($1_1 | 0) | 0) & ($11_1 | 0) != (0 | 0) | 0)) {
      break label$72
     }
    }
    HEAP32[($412() | 0) >> 2] = 68;
   }
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   $868($7_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0);
   i64toi32_i32$3 = ($7_1 + 368 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  HEAP32[i64toi32_i32$5 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $89$hi = 0, $91_1 = 0, $91$hi = 0, $140$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $3_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $3_1 = $851($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      switch ($3_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       label$8 : {
        label$9 : {
         $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$9
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$8;
        }
        $2_1 = $851($0_1 | 0) | 0;
       }
       $4_1 = ($3_1 | 0) == (45 | 0);
       $5_1 = $2_1 + -58 | 0;
       if (!$1_1) {
        break label$5
       }
       if ($5_1 >>> 0 > -11 >>> 0) {
        break label$5
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19_1 = 0
         } else {
          $19_1 = 1
         }
         $20_1 = $19_1;
        } else {
         $20_1 = 0
        }
        $18_1 = $20_1;
       }
       if ($18_1) {
        break label$4
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       break label$4;
      default:
       break label$6;
      };
     }
     $5_1 = $3_1 + -58 | 0;
     $4_1 = 0;
     $2_1 = $3_1;
    }
    if ($5_1 >>> 0 < -10 >>> 0) {
     break label$4
    }
    i64toi32_i32$2 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$2;
    label$10 : {
     $5_1 = $2_1 + -48 | 0;
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$10
     }
     $3_1 = 0;
     label$11 : while (1) {
      $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
      label$12 : {
       label$13 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$13
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$12;
       }
       $2_1 = $851($0_1 | 0) | 0;
      }
      $3_1 = $3_1 + -48 | 0;
      label$14 : {
       $5_1 = $2_1 + -48 | 0;
       if ($5_1 >>> 0 > 9 >>> 0) {
        break label$14
       }
       if (($3_1 | 0) < (214748364 | 0)) {
        continue label$11
       }
      }
      break label$11;
     };
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$2;
    }
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$2 = 0;
      $89$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $91_1 = i64toi32_i32$1;
      $91$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $89$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = $91$hi;
      i64toi32_i32$0 = $91_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $851($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -48;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$2 = 21474836;
      i64toi32_i32$0 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
       $21_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $22_1 = 0
        } else {
         $22_1 = 1
        }
        $23_1 = $22_1;
       } else {
        $23_1 = 0
       }
       $21_1 = $23_1;
      }
      if ($21_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $851($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $24_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $25_1 = 0
       } else {
        $25_1 = 1
       }
       $26_1 = $25_1;
      } else {
       $26_1 = 0
      }
      $24_1 = $26_1;
     }
     if ($24_1) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $140$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $140$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
    $6_1 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
    $27_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $28_1 = 0
     } else {
      $28_1 = 1
     }
     $29_1 = $28_1;
    } else {
     $29_1 = 0
    }
    $27_1 = $29_1;
   }
   if ($27_1) {
    break label$3
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$4 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function $877($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $9$hi = 0, $9_1 = 0, $7_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, $12$hi = 0, $6_1 = 0, $12_1 = 0, $4_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $8_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $193_1 = 0, $193$hi = 0, $250_1 = 0, $250$hi = 0, $417$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 36 >>> 0) {
      break label$3
     }
     if (($1_1 | 0) != (1 | 0)) {
      break label$2
     }
    }
    HEAP32[($412() | 0) >> 2] = 28;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
      $5_1 = HEAPU8[$5_1 >> 0] | 0;
      break label$5;
     }
     $5_1 = $851($0_1 | 0) | 0;
    }
    if ($474($5_1 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
   $6_1 = 0;
   label$7 : {
    label$8 : {
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$8;
     default:
      break label$7;
     };
    }
    $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
    label$9 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$7;
    }
    $5_1 = $851($0_1 | 0) | 0;
   }
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
         break label$14
        }
        if (($5_1 | 0) != (48 | 0)) {
         break label$14
        }
        label$15 : {
         label$16 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$16
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$15;
         }
         $5_1 = $851($0_1 | 0) | 0;
        }
        label$17 : {
         if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
          break label$17
         }
         label$18 : {
          label$19 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$19
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$18;
          }
          $5_1 = $851($0_1 | 0) | 0;
         }
         $1_1 = 16;
         if ((HEAPU8[($5_1 + 84369 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break label$12
         }
         i64toi32_i32$0 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$0;
         label$20 : {
          label$21 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $29_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $30_1 = 0
             } else {
              $30_1 = 1
             }
             $31_1 = $30_1;
            } else {
             $31_1 = 0
            }
            $29_1 = $31_1;
           }
           if ($29_1) {
            break label$21
           }
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
           if (!$2_1) {
            break label$20
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
           break label$1;
          }
          if ($2_1) {
           break label$1
          }
         }
         i64toi32_i32$2 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $850($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break label$1;
        }
        if ($1_1) {
         break label$13
        }
        $1_1 = 8;
        break label$12;
       }
       $1_1 = $1_1 ? $1_1 : 10;
       if ($1_1 >>> 0 > (HEAPU8[($5_1 + 84369 | 0) >> 0] | 0) >>> 0) {
        break label$13
       }
       i64toi32_i32$2 = 0;
       $3_1 = 0;
       $3$hi = i64toi32_i32$2;
       label$22 : {
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $32_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $33_1 = 0
          } else {
           $33_1 = 1
          }
          $34_1 = $33_1;
         } else {
          $34_1 = 0
         }
         $32_1 = $34_1;
        }
        if ($32_1) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       $850($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
       HEAP32[($412() | 0) >> 2] = 28;
       break label$1;
      }
      if (($1_1 | 0) != (10 | 0)) {
       break label$12
      }
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$23 : {
       $2_1 = $5_1 + -48 | 0;
       if ($2_1 >>> 0 > 9 >>> 0) {
        break label$23
       }
       $1_1 = 0;
       label$24 : while (1) {
        $1_1 = Math_imul($1_1, 10);
        label$25 : {
         label$26 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$26
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$25;
         }
         $5_1 = $851($0_1 | 0) | 0;
        }
        $1_1 = $1_1 + $2_1 | 0;
        label$27 : {
         $2_1 = $5_1 + -48 | 0;
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$27
         }
         if ($1_1 >>> 0 < 429496729 >>> 0) {
          continue label$24
         }
        }
        break label$24;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $1_1;
       $9$hi = i64toi32_i32$3;
      }
      label$28 : {
       if ($2_1 >>> 0 > 9 >>> 0) {
        break label$28
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       $11_1 = $2_1;
       $11$hi = i64toi32_i32$3;
       label$29 : while (1) {
        label$30 : {
         label$31 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$31
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$30;
         }
         $5_1 = $851($0_1 | 0) | 0;
        }
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$2 = $11_1;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $9_1 = i64toi32_i32$4;
        $9$hi = i64toi32_i32$5;
        $2_1 = $5_1 + -48 | 0;
        if ($2_1 >>> 0 > 9 >>> 0) {
         break label$28
        }
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$0 = 429496729;
        i64toi32_i32$2 = -1717986918;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
         break label$28
        }
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $10_1 = i64toi32_i32$5;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $11_1 = $2_1;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $193_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $193$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$2 = $193$hi;
        i64toi32_i32$0 = $193_1;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label$29
        }
        break label$29;
       };
       $1_1 = 10;
       break label$11;
      }
      $1_1 = 10;
      if ($2_1 >>> 0 <= 9 >>> 0) {
       break label$11
      }
      break label$10;
     }
     label$32 : {
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break label$32
      }
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$33 : {
       $7_1 = HEAPU8[($5_1 + 84369 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$33
       }
       $2_1 = 0;
       label$34 : while (1) {
        $2_1 = Math_imul($2_1, $1_1);
        label$35 : {
         label$36 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$36
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$35;
         }
         $5_1 = $851($0_1 | 0) | 0;
        }
        $2_1 = $7_1 + $2_1 | 0;
        label$37 : {
         $7_1 = HEAPU8[($5_1 + 84369 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $7_1 >>> 0) {
          break label$37
         }
         if ($2_1 >>> 0 < 119304647 >>> 0) {
          continue label$34
         }
        }
        break label$34;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $2_1;
       $9$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $7_1 >>> 0) {
       break label$11
      }
      i64toi32_i32$3 = 0;
      $10_1 = $1_1;
      $10$hi = i64toi32_i32$3;
      label$38 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $11_1 = i64toi32_i32$5;
       $11$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $7_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $12_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $12$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $250_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $250$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$5 = $11_1;
       i64toi32_i32$3 = $250$hi;
       i64toi32_i32$2 = $250_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$11
       }
       label$39 : {
        label$40 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$40
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$39;
        }
        $5_1 = $851($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$2 = $11_1;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $9_1 = i64toi32_i32$1;
       $9$hi = i64toi32_i32$4;
       $7_1 = HEAPU8[($5_1 + 84369 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$11
       }
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$4 = $9$hi;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $9$hi;
       i64toi32_i32$3 = 0;
       $492($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$11
       }
       continue label$38;
      };
     }
     $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 84625 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $9_1 = 0;
     $9$hi = i64toi32_i32$2;
     label$41 : {
      $2_1 = HEAPU8[($5_1 + 84369 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$41
      }
      $7_1 = 0;
      label$42 : while (1) {
       $7_1 = $7_1 << $8_1 | 0;
       label$43 : {
        label$44 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$44
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$43;
        }
        $5_1 = $851($0_1 | 0) | 0;
       }
       $7_1 = $2_1 | $7_1 | 0;
       label$45 : {
        $2_1 = HEAPU8[($5_1 + 84369 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$45
        }
        if ($7_1 >>> 0 < 134217728 >>> 0) {
         continue label$42
        }
       }
       break label$42;
      };
      i64toi32_i32$2 = 0;
      $9_1 = $7_1;
      $9$hi = i64toi32_i32$2;
     }
     if ($1_1 >>> 0 <= $2_1 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $11_1 = $8_1;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $35_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $35_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $12_1 = $35_1;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$3 = $9_1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$11
     }
     label$46 : while (1) {
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $36_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $36_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $9_1 = $36_1;
      $9$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $10_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $10$hi = i64toi32_i32$3;
      label$47 : {
       label$48 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$48
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$47;
       }
       $5_1 = $851($0_1 | 0) | 0;
      }
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$5 = $9_1;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$4 = $10_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $9$hi = i64toi32_i32$2;
      $2_1 = HEAPU8[($5_1 + 84369 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$11
      }
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$4 = $12_1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label$46
      }
      break label$46;
     };
    }
    if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 84369 | 0) >> 0] | 0) >>> 0) {
     break label$10
    }
    label$49 : while (1) {
     label$50 : {
      label$51 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$51
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break label$50;
      }
      $5_1 = $851($0_1 | 0) | 0;
     }
     if ($1_1 >>> 0 > (HEAPU8[($5_1 + 84369 | 0) >> 0] | 0) >>> 0) {
      continue label$49
     }
     break label$49;
    };
    HEAP32[($412() | 0) >> 2] = 68;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6_1 : 0;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$3;
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$3;
   }
   label$52 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $37_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $38_1 = 0
      } else {
       $38_1 = 1
      }
      $39_1 = $38_1;
     } else {
      $39_1 = 0
     }
     $37_1 = $39_1;
    }
    if ($37_1) {
     break label$52
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$53 : {
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$53
    }
    label$54 : {
     i64toi32_i32$5 = $3$hi;
     if ($3_1 & 1 | 0) {
      break label$54
     }
     if ($6_1) {
      break label$54
     }
     HEAP32[($412() | 0) >> 2] = 68;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$53
    }
    HEAP32[($412() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $417$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $417$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $878($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $854($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $857($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $879($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $33_1 = 0, $33$hi = 0, $36_1 = 0, $38_1 = 0, $43_1 = 0, $43$hi = 0, $45$hi = 0, $73_1 = 0, $73$hi = 0, $77$hi = 0, $80_1 = 0, $80$hi = 0, $82_1 = 0, $82$hi = 0, $86_1 = 0, $86$hi = 0, $88_1 = 0, $89$hi = 0, $98$hi = 0, $105_1 = 0, $105$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $44_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $33_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = $33$hi;
    i64toi32_i32$5 = $33_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $36_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$5 = 0;
    $38_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36_1 : $38_1) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $46_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $43_1 = $46_1;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $45$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $43$hi;
    i64toi32_i32$0 = $43_1;
    i64toi32_i32$5 = $45$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    i64toi32_i32$2 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $4$hi;
   $854($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   $857($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $73_1 = $49_1;
   $73$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $77$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $73$hi;
   i64toi32_i32$4 = $73_1;
   i64toi32_i32$2 = $77$hi;
   i64toi32_i32$5 = $50_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$2;
   label$5 : {
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $80_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $80$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $82_1 = i64toi32_i32$4;
    $82$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $86_1 = i64toi32_i32$0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $82$hi;
    i64toi32_i32$2 = $82_1;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$5 = $86_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $88_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = 0;
    $89$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $80$hi;
    i64toi32_i32$5 = $80_1;
    i64toi32_i32$0 = $89$hi;
    i64toi32_i32$2 = $88_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = 134217728;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $98$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = $98$hi;
   i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$4 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
  $105_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $105$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$1 = $105$hi;
  i64toi32_i32$2 = $105_1;
  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $880($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 101128;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = $3_1 << 24 >> 24;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      label$8 : {
       if (HEAP32[(HEAP32[(($786() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = $3_1 + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(($3_1 << 2 | 0) + 84640 | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($412() | 0) >> 2] = 25;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $881($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $882($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $11_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $15_1 = 0, $3_1 = 0, $9_1 = 0, $14_1 = 0, $12_1 = 0, $5_1 = 0, $18$hi = 0, $13_1 = 0, $19$hi = 0, $16_1 = 0, $18_1 = 0, $10_1 = 0, $19_1 = 0, $20$hi = 0, $7_1 = 0, $17_1 = 0, $20_1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $8_1 = 0, $76$hi = 0, $78$hi = 0, $83_1 = 0, $83$hi = 0, $143$hi = 0, $145$hi = 0, $151_1 = 0, $151$hi = 0, $209_1 = 0, $219_1 = 0, $281$hi = 0, $283$hi = 0, $288_1 = 0, $288$hi = 0, $328_1 = 0, $328$hi = 0, $334_1 = 0, $334$hi = 0, $335$hi = 0, $434_1 = 0, $434$hi = 0, $440_1 = 0, $440$hi = 0, $441$hi = 0, $655_1 = 0, $655$hi = 0, $660_1 = 0, $660$hi = 0, $686$hi = 0, $688$hi = 0, $694_1 = 0, $694$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $415($0_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $430($0_1 | 0) | 0;
      if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $5_1 = 0;
      break label$4;
     }
     label$6 : {
      $6_1 = HEAPU8[$1_1 >> 0] | 0;
      if ($6_1) {
       break label$6
      }
      $7_1 = 0;
      break label$2;
     }
     $8_1 = $3_1 + 16 | 0;
     i64toi32_i32$0 = 0;
     $18_1 = 0;
     $18$hi = i64toi32_i32$0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : while (1) {
           label$13 : {
            label$14 : {
             if (!($474($6_1 & 255 | 0 | 0) | 0)) {
              break label$14
             }
             label$15 : while (1) {
              $6_1 = $1_1;
              $1_1 = $6_1 + 1 | 0;
              if ($474(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
               continue label$15
              }
              break label$15;
             };
             i64toi32_i32$0 = 0;
             $850($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
             label$16 : while (1) {
              label$17 : {
               label$18 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$18
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $1_1 = HEAPU8[$1_1 >> 0] | 0;
                break label$17;
               }
               $1_1 = $851($0_1 | 0) | 0;
              }
              if ($474($1_1 | 0) | 0) {
               continue label$16
              }
              break label$16;
             };
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$19 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
               $63_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                 $64_1 = 0
                } else {
                 $64_1 = 1
                }
                $65_1 = $64_1;
               } else {
                $65_1 = 0
               }
               $63_1 = $65_1;
              }
              if ($63_1) {
               break label$19
              }
              $1_1 = $1_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
             }
             i64toi32_i32$3 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $76$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $18$hi;
             i64toi32_i32$1 = $76$hi;
             i64toi32_i32$3 = i64toi32_i32$2;
             i64toi32_i32$2 = $18$hi;
             i64toi32_i32$0 = $18_1;
             i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $78$hi = i64toi32_i32$5;
             i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
             $83_1 = i64toi32_i32$3;
             $83$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $78$hi;
             i64toi32_i32$1 = i64toi32_i32$4;
             i64toi32_i32$3 = $83$hi;
             i64toi32_i32$0 = $83_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
             i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
             }
             $18_1 = i64toi32_i32$2;
             $18$hi = i64toi32_i32$4;
             break label$13;
            }
            label$20 : {
             label$21 : {
              label$22 : {
               label$23 : {
                if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                 break label$23
                }
                $6_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                if (($6_1 | 0) == (42 | 0)) {
                 break label$22
                }
                if (($6_1 | 0) != (37 | 0)) {
                 break label$21
                }
               }
               i64toi32_i32$4 = 0;
               $850($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
               label$24 : {
                label$25 : {
                 if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                  break label$25
                 }
                 label$26 : while (1) {
                  label$27 : {
                   label$28 : {
                    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($6_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$28
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                    $6_1 = HEAPU8[$6_1 >> 0] | 0;
                    break label$27;
                   }
                   $6_1 = $851($0_1 | 0) | 0;
                  }
                  if ($474($6_1 | 0) | 0) {
                   continue label$26
                  }
                  break label$26;
                 };
                 $1_1 = $1_1 + 1 | 0;
                 break label$24;
                }
                label$29 : {
                 $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($6_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$29
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                 $6_1 = HEAPU8[$6_1 >> 0] | 0;
                 break label$24;
                }
                $6_1 = $851($0_1 | 0) | 0;
               }
               label$30 : {
                if (($6_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
                 break label$30
                }
                label$31 : {
                 i64toi32_i32$5 = $0_1;
                 i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                 i64toi32_i32$5 = i64toi32_i32$4;
                 i64toi32_i32$4 = 0;
                 i64toi32_i32$0 = 0;
                 if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                  $66_1 = 1
                 } else {
                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                   if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                    $67_1 = 0
                   } else {
                    $67_1 = 1
                   }
                   $68_1 = $67_1;
                  } else {
                   $68_1 = 0
                  }
                  $66_1 = $68_1;
                 }
                 if ($66_1) {
                  break label$31
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                }
                if (($6_1 | 0) > (-1 | 0)) {
                 break label$2
                }
                $5_1 = 0;
                if ($7_1) {
                 break label$2
                }
                break label$4;
               }
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $143$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $18$hi;
               i64toi32_i32$1 = $143$hi;
               i64toi32_i32$0 = i64toi32_i32$5;
               i64toi32_i32$5 = $18$hi;
               i64toi32_i32$4 = $18_1;
               i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
               i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
               }
               $145$hi = i64toi32_i32$2;
               i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
               $151_1 = i64toi32_i32$0;
               $151$hi = i64toi32_i32$2;
               i64toi32_i32$2 = $145$hi;
               i64toi32_i32$1 = i64toi32_i32$3;
               i64toi32_i32$0 = $151$hi;
               i64toi32_i32$4 = $151_1;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
               i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
               }
               $18_1 = i64toi32_i32$5;
               $18$hi = i64toi32_i32$3;
               $6_1 = $1_1;
               break label$13;
              }
              $6_1 = $1_1 + 2 | 0;
              $9_1 = 0;
              break label$20;
             }
             label$32 : {
              if (!($852($6_1 | 0) | 0)) {
               break label$32
              }
              if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$32
              }
              $6_1 = $1_1 + 3 | 0;
              $9_1 = $883($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
              break label$20;
             }
             $6_1 = $1_1 + 1 | 0;
             $9_1 = HEAP32[$2_1 >> 2] | 0;
             $2_1 = $2_1 + 4 | 0;
            }
            $10_1 = 0;
            $1_1 = 0;
            label$33 : {
             if (!($852(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
              break label$33
             }
             label$34 : while (1) {
              $1_1 = (Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
              $11_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
              $6_1 = $6_1 + 1 | 0;
              if ($852($11_1 | 0) | 0) {
               continue label$34
              }
              break label$34;
             };
            }
            label$35 : {
             label$36 : {
              $12_1 = HEAPU8[$6_1 >> 0] | 0;
              if (($12_1 | 0) == (109 | 0)) {
               break label$36
              }
              $11_1 = $6_1;
              break label$35;
             }
             $11_1 = $6_1 + 1 | 0;
             $13_1 = 0;
             $10_1 = ($9_1 | 0) != (0 | 0);
             $12_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
             $14_1 = 0;
            }
            $6_1 = $11_1 + 1 | 0;
            $15_1 = 3;
            $5_1 = $10_1;
            label$37 : {
             label$38 : {
              switch (($12_1 & 255 | 0) + -65 | 0 | 0) {
              case 39:
               $209_1 = $11_1 + 2 | 0;
               $11_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
               $6_1 = $11_1 ? $209_1 : $6_1;
               $15_1 = $11_1 ? -2 : -1;
               break label$37;
              case 43:
               $219_1 = $11_1 + 2 | 0;
               $11_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
               $6_1 = $11_1 ? $219_1 : $6_1;
               $15_1 = $11_1 ? 3 : 1;
               break label$37;
              case 51:
              case 57:
               $15_1 = 1;
               break label$37;
              case 11:
               $15_1 = 2;
               break label$37;
              case 41:
               break label$37;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$38;
              default:
               break label$7;
              };
             }
             $15_1 = 0;
             $6_1 = $11_1;
            }
            $11_1 = HEAPU8[$6_1 >> 0] | 0;
            $12_1 = ($11_1 & 47 | 0 | 0) == (3 | 0);
            $5_1 = $12_1 ? 1 : $15_1;
            label$43 : {
             $16_1 = $12_1 ? $11_1 | 32 | 0 : $11_1;
             if (($16_1 | 0) == (91 | 0)) {
              break label$43
             }
             label$44 : {
              label$45 : {
               if (($16_1 | 0) == (110 | 0)) {
                break label$45
               }
               if (($16_1 | 0) != (99 | 0)) {
                break label$44
               }
               $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
               break label$43;
              }
              i64toi32_i32$3 = $18$hi;
              $884($9_1 | 0, $5_1 | 0, $18_1 | 0, i64toi32_i32$3 | 0);
              break label$13;
             }
             i64toi32_i32$3 = 0;
             $850($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
             label$46 : while (1) {
              label$47 : {
               label$48 : {
                $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$48
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                $11_1 = HEAPU8[$11_1 >> 0] | 0;
                break label$47;
               }
               $11_1 = $851($0_1 | 0) | 0;
              }
              if ($474($11_1 | 0) | 0) {
               continue label$46
              }
              break label$46;
             };
             $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$49 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
               $69_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                 $70_1 = 0
                } else {
                 $70_1 = 1
                }
                $71_1 = $70_1;
               } else {
                $71_1 = 0
               }
               $69_1 = $71_1;
              }
              if ($69_1) {
               break label$49
              }
              $11_1 = $11_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $11_1;
             }
             i64toi32_i32$4 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $281$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $18$hi;
             i64toi32_i32$1 = $281$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$2 = $18$hi;
             i64toi32_i32$3 = $18_1;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $283$hi = i64toi32_i32$5;
             i64toi32_i32$4 = $11_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
             $288_1 = i64toi32_i32$4;
             $288$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $283$hi;
             i64toi32_i32$1 = i64toi32_i32$0;
             i64toi32_i32$4 = $288$hi;
             i64toi32_i32$3 = $288_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $18_1 = i64toi32_i32$2;
             $18$hi = i64toi32_i32$0;
            }
            i64toi32_i32$1 = $1_1;
            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
            $19_1 = i64toi32_i32$1;
            $19$hi = i64toi32_i32$0;
            $850($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
            label$50 : {
             label$51 : {
              $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break label$51
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
              break label$50;
             }
             if (($851($0_1 | 0) | 0 | 0) < (0 | 0)) {
              break label$8
             }
            }
            label$52 : {
             i64toi32_i32$5 = $0_1;
             i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
             i64toi32_i32$5 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 0;
             if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
              $72_1 = 1
             } else {
              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
               if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                $73_1 = 0
               } else {
                $73_1 = 1
               }
               $74_1 = $73_1;
              } else {
               $74_1 = 0
              }
              $72_1 = $74_1;
             }
             if ($72_1) {
              break label$52
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
            }
            $11_1 = 16;
            label$53 : {
             label$54 : {
              label$55 : {
               label$56 : {
                label$57 : {
                 switch ($16_1 + -88 | 0 | 0) {
                 default:
                  $1_1 = $16_1 + -65 | 0;
                  if ($1_1 >>> 0 > 6 >>> 0) {
                   break label$53
                  }
                  if (!((1 << $1_1 | 0) & 113 | 0)) {
                   break label$53
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $873($3_1 + 8 | 0 | 0, $0_1 | 0, $5_1 | 0, 0 | 0);
                  i64toi32_i32$3 = $0_1;
                  i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                  $328_1 = i64toi32_i32$5;
                  $328$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                  $334_1 = i64toi32_i32$5;
                  $334$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = $334$hi;
                  i64toi32_i32$0 = $334_1;
                  i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                  i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                  $335$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $328$hi;
                  i64toi32_i32$1 = $328_1;
                  i64toi32_i32$3 = $335$hi;
                  i64toi32_i32$0 = i64toi32_i32$4;
                  if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                   break label$55
                  }
                  break label$9;
                 case 3:
                 case 11:
                 case 27:
                  label$63 : {
                   if (($16_1 | 16 | 0 | 0) != (115 | 0)) {
                    break label$63
                   }
                   $411($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                   if (($16_1 | 0) != (115 | 0)) {
                    break label$54
                   }
                   HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                   HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                   $75_1 = 0;
                   HEAP16[($3_1 + 42 | 0) >> 1] = $75_1;
                   HEAP16[($3_1 + 44 | 0) >> 1] = $75_1 >>> 16 | 0;
                   break label$54;
                  }
                  $15_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                  $11_1 = ($15_1 | 0) == (94 | 0);
                  $411($3_1 + 32 | 0 | 0, $11_1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  $12_1 = $11_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                  label$64 : {
                   label$65 : {
                    label$66 : {
                     label$67 : {
                      $6_1 = HEAPU8[($6_1 + ($11_1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($6_1 | 0) == (45 | 0)) {
                       break label$67
                      }
                      if (($6_1 | 0) == (93 | 0)) {
                       break label$66
                      }
                      $15_1 = ($15_1 | 0) != (94 | 0);
                      $6_1 = $12_1;
                      break label$64;
                     }
                     $15_1 = ($15_1 | 0) != (94 | 0);
                     HEAP8[($3_1 + 78 | 0) >> 0] = $15_1;
                     break label$65;
                    }
                    $15_1 = ($15_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 126 | 0) >> 0] = $15_1;
                   }
                   $6_1 = $12_1 + 1 | 0;
                  }
                  label$68 : while (1) {
                   label$69 : {
                    label$70 : {
                     $11_1 = HEAPU8[$6_1 >> 0] | 0;
                     if (($11_1 | 0) == (45 | 0)) {
                      break label$70
                     }
                     if (!$11_1) {
                      break label$8
                     }
                     if (($11_1 | 0) == (93 | 0)) {
                      break label$54
                     }
                     break label$69;
                    }
                    $11_1 = 45;
                    $17_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                    if (!$17_1) {
                     break label$69
                    }
                    if (($17_1 | 0) == (93 | 0)) {
                     break label$69
                    }
                    $12_1 = $6_1 + 1 | 0;
                    label$71 : {
                     label$72 : {
                      $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                      if ($6_1 >>> 0 < $17_1 >>> 0) {
                       break label$72
                      }
                      $11_1 = $17_1;
                      break label$71;
                     }
                     label$73 : while (1) {
                      $6_1 = $6_1 + 1 | 0;
                      HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $15_1;
                      $11_1 = HEAPU8[$12_1 >> 0] | 0;
                      if ($6_1 >>> 0 < $11_1 >>> 0) {
                       continue label$73
                      }
                      break label$73;
                     };
                    }
                    $6_1 = $12_1;
                   }
                   HEAP8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $15_1;
                   $6_1 = $6_1 + 1 | 0;
                   continue label$68;
                  };
                 case 23:
                  $11_1 = 8;
                  break label$56;
                 case 12:
                 case 29:
                  $11_1 = 10;
                  break label$56;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$53;
                 case 0:
                 case 24:
                 case 32:
                  break label$56;
                 case 17:
                  break label$57;
                 };
                }
                $11_1 = 0;
               }
               i64toi32_i32$1 = -1;
               i64toi32_i32$1 = $877($0_1 | 0, $11_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
               $19_1 = i64toi32_i32$1;
               $19$hi = i64toi32_i32$2;
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $434_1 = i64toi32_i32$2;
               $434$hi = i64toi32_i32$1;
               i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
               $440_1 = i64toi32_i32$2;
               $440$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               i64toi32_i32$2 = $440$hi;
               i64toi32_i32$3 = $440_1;
               i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
               i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
               i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
               $441$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $434$hi;
               i64toi32_i32$1 = $434_1;
               i64toi32_i32$0 = $441$hi;
               i64toi32_i32$3 = i64toi32_i32$5;
               if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                break label$9
               }
               label$74 : {
                if (($16_1 | 0) != (112 | 0)) {
                 break label$74
                }
                if (!$9_1) {
                 break label$74
                }
                i64toi32_i32$1 = $19$hi;
                HEAP32[$9_1 >> 2] = $19_1;
                break label$53;
               }
               i64toi32_i32$1 = $19$hi;
               $884($9_1 | 0, $5_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
               break label$53;
              }
              if (!$9_1) {
               break label$53
              }
              i64toi32_i32$3 = $8_1;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$1;
              $19$hi = i64toi32_i32$4;
              i64toi32_i32$3 = $3_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
              $20_1 = i64toi32_i32$4;
              $20$hi = i64toi32_i32$1;
              label$75 : {
               switch ($5_1 | 0) {
               case 0:
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$1 = $19$hi;
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$4 = $19$hi;
                HEAPF32[$9_1 >> 2] = Math_fround($878($20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$4 | 0));
                break label$53;
               case 1:
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$4 = $19$hi;
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$1 = $19$hi;
                HEAPF64[$9_1 >> 3] = +$879($20_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
                break label$53;
               case 2:
                break label$75;
               default:
                break label$53;
               };
              }
              i64toi32_i32$1 = $20$hi;
              i64toi32_i32$4 = $9_1;
              HEAP32[i64toi32_i32$4 >> 2] = $20_1;
              HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $19$hi;
              HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
              HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
              break label$53;
             }
             $12_1 = ($16_1 | 0) == (99 | 0);
             $15_1 = $12_1 ? $1_1 + 1 | 0 : 31;
             label$78 : {
              label$79 : {
               if (($5_1 | 0) != (1 | 0)) {
                break label$79
               }
               $11_1 = $9_1;
               label$80 : {
                if (!$10_1) {
                 break label$80
                }
                $11_1 = $483($15_1 << 2 | 0 | 0) | 0;
                if (!$11_1) {
                 break label$10
                }
               }
               i64toi32_i32$4 = $3_1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
               $1_1 = 0;
               $17_1 = ($10_1 | 0) != (0 | 0);
               label$81 : while (1) {
                $14_1 = $11_1;
                label$82 : {
                 label$83 : while (1) {
                  label$84 : {
                   label$85 : {
                    $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$85
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                    $11_1 = HEAPU8[$11_1 >> 0] | 0;
                    break label$84;
                   }
                   $11_1 = $851($0_1 | 0) | 0;
                  }
                  if (!(HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                   break label$82
                  }
                  HEAP8[($3_1 + 27 | 0) >> 0] = $11_1;
                  $11_1 = $880($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                  if (($11_1 | 0) == (-2 | 0)) {
                   continue label$83
                  }
                  $13_1 = 0;
                  if (($11_1 | 0) == (-1 | 0)) {
                   break label$8
                  }
                  label$86 : {
                   if (!$14_1) {
                    break label$86
                   }
                   HEAP32[($14_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                   $1_1 = $1_1 + 1 | 0;
                  }
                  if (($17_1 & ($1_1 | 0) == ($15_1 | 0) | 0 | 0) != (1 | 0)) {
                   continue label$83
                  }
                  break label$83;
                 };
                 $5_1 = 1;
                 $15_1 = $15_1 << 1 | 0 | 1 | 0;
                 $11_1 = $485($14_1 | 0, $15_1 << 2 | 0 | 0) | 0;
                 if ($11_1) {
                  continue label$81
                 }
                 break label$7;
                }
                break label$81;
               };
               $13_1 = 0;
               $15_1 = $14_1;
               if (!($881($3_1 + 296 | 0 | 0) | 0)) {
                break label$8
               }
               break label$78;
              }
              label$87 : {
               if (!$10_1) {
                break label$87
               }
               $1_1 = 0;
               $11_1 = $483($15_1 | 0) | 0;
               if (!$11_1) {
                break label$10
               }
               label$88 : while (1) {
                $14_1 = $11_1;
                label$89 : while (1) {
                 label$90 : {
                  label$91 : {
                   $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                   if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$91
                   }
                   HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                   $11_1 = HEAPU8[$11_1 >> 0] | 0;
                   break label$90;
                  }
                  $11_1 = $851($0_1 | 0) | 0;
                 }
                 label$92 : {
                  if (HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                   break label$92
                  }
                  $15_1 = 0;
                  $13_1 = $14_1;
                  break label$78;
                 }
                 HEAP8[($14_1 + $1_1 | 0) >> 0] = $11_1;
                 $1_1 = $1_1 + 1 | 0;
                 if (($1_1 | 0) != ($15_1 | 0)) {
                  continue label$89
                 }
                 break label$89;
                };
                $5_1 = 1;
                $15_1 = $15_1 << 1 | 0 | 1 | 0;
                $11_1 = $485($14_1 | 0, $15_1 | 0) | 0;
                if ($11_1) {
                 continue label$88
                }
                break label$88;
               };
               $13_1 = $14_1;
               $14_1 = 0;
               break label$7;
              }
              $1_1 = 0;
              label$93 : {
               if (!$9_1) {
                break label$93
               }
               label$94 : while (1) {
                label$95 : {
                 label$96 : {
                  $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($11_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                   break label$96
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                  $11_1 = HEAPU8[$11_1 >> 0] | 0;
                  break label$95;
                 }
                 $11_1 = $851($0_1 | 0) | 0;
                }
                label$97 : {
                 if (HEAPU8[(($11_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                  break label$97
                 }
                 $15_1 = 0;
                 $14_1 = $9_1;
                 $13_1 = $9_1;
                 break label$78;
                }
                HEAP8[($9_1 + $1_1 | 0) >> 0] = $11_1;
                $1_1 = $1_1 + 1 | 0;
                continue label$94;
               };
              }
              label$98 : while (1) {
               label$99 : {
                label$100 : {
                 $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$100
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                 $1_1 = HEAPU8[$1_1 >> 0] | 0;
                 break label$99;
                }
                $1_1 = $851($0_1 | 0) | 0;
               }
               if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                continue label$98
               }
               break label$98;
              };
              $14_1 = 0;
              $13_1 = 0;
              $15_1 = 0;
              $1_1 = 0;
             }
             $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$101 : {
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
               $76_1 = 1
              } else {
               if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $77_1 = 0
                } else {
                 $77_1 = 1
                }
                $78_1 = $77_1;
               } else {
                $78_1 = 0
               }
               $76_1 = $78_1;
              }
              if ($76_1) {
               break label$101
              }
              $11_1 = $11_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $11_1;
             }
             i64toi32_i32$0 = $0_1;
             i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $655_1 = i64toi32_i32$3;
             $655$hi = i64toi32_i32$4;
             i64toi32_i32$3 = $11_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
             $660_1 = i64toi32_i32$3;
             $660$hi = i64toi32_i32$4;
             i64toi32_i32$4 = $655$hi;
             i64toi32_i32$0 = $655_1;
             i64toi32_i32$3 = $660$hi;
             i64toi32_i32$1 = $660_1;
             i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
             i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $20_1 = i64toi32_i32$2;
             $20$hi = i64toi32_i32$5;
             if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
              break label$11
             }
             label$102 : {
              if (($16_1 | 0) != (99 | 0)) {
               break label$102
              }
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$4 = $20_1;
              i64toi32_i32$0 = $19$hi;
              i64toi32_i32$1 = $19_1;
              if ((i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
               break label$11
              }
             }
             label$103 : {
              if (!$10_1) {
               break label$103
              }
              HEAP32[$9_1 >> 2] = $14_1;
             }
             label$104 : {
              if ($12_1) {
               break label$104
              }
              label$105 : {
               if (!$15_1) {
                break label$105
               }
               HEAP32[($15_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
              }
              label$106 : {
               if ($13_1) {
                break label$106
               }
               $13_1 = 0;
               break label$104;
              }
              HEAP8[($13_1 + $1_1 | 0) >> 0] = 0;
             }
             $14_1 = $15_1;
            }
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
            $686$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $18$hi;
            i64toi32_i32$5 = $686$hi;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$4 = $18$hi;
            i64toi32_i32$0 = $18_1;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $688$hi = i64toi32_i32$2;
            i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
            $694_1 = i64toi32_i32$1;
            $694$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $688$hi;
            i64toi32_i32$5 = i64toi32_i32$3;
            i64toi32_i32$1 = $694$hi;
            i64toi32_i32$0 = $694_1;
            i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $18_1 = i64toi32_i32$4;
            $18$hi = i64toi32_i32$3;
            $7_1 = $7_1 + (($9_1 | 0) != (0 | 0)) | 0;
           }
           $1_1 = $6_1 + 1 | 0;
           $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           if ($6_1) {
            continue label$12
           }
           break label$2;
          };
         }
         $14_1 = $15_1;
         break label$9;
        }
        $5_1 = 1;
        $13_1 = 0;
        $14_1 = 0;
        break label$7;
       }
       $5_1 = $10_1;
       break label$3;
      }
      $5_1 = $10_1;
     }
     if ($7_1) {
      break label$3
     }
    }
    $7_1 = -1;
   }
   if (!$5_1) {
    break label$2
   }
   $484($13_1 | 0);
   $484($14_1 | 0);
  }
  label$107 : {
   if (!$4_1) {
    break label$107
   }
   $416($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $7_1 | 0;
 }
 
 function $883($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $1_1 = $0_1 + ($1_1 >>> 0 > 1 >>> 0 ? ($1_1 << 2 | 0) + -4 | 0 : 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 + 4 | 0;
  return HEAP32[$1_1 >> 2] | 0 | 0;
 }
 
 function $884($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $885($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
      break label$5
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$5
     }
     $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
     label$6 : while (1) {
      $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$2
      }
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $886($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $411($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 162;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $882($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $887($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $885($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $410($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $888($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $889() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$80($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $483(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 101132 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $483(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    HEAP32[((HEAP32[(0 + 101132 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(fimport$81(HEAP32[(0 + 101132 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 101132 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $470($0_1 | 0, 61 | 0) | 0;
   if (($1_1 | 0) != ($0_1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  $2_1 = 0;
  label$2 : {
   $3_1 = $1_1 - $0_1 | 0;
   if (HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0) {
    break label$2
   }
   $1_1 = HEAP32[(0 + 101132 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($473($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0) {
       break label$5
      }
      $4_1 = (HEAP32[$1_1 >> 2] | 0) + $3_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$3
      }
     }
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $2_1 = $4_1 + 1 | 0;
  }
  return $2_1 | 0;
 }
 
 function $891($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $890(68205 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = $890(Math_imul($0_1, 12) + 84960 | 0 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$4 : {
    $1_1 = $890(68237 | 0) | 0;
    if (!$1_1) {
     break label$4
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 68964;
  }
  $2_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
     if (!$3_1) {
      break label$6
     }
     if (($3_1 | 0) == (47 | 0)) {
      break label$6
     }
     $3_1 = 23;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (23 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $3_1 = $2_1;
  }
  $4_1 = 68964;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $2_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($2_1 | 0) == (46 | 0)) {
        break label$12
       }
       if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
        break label$12
       }
       $4_1 = $1_1;
       if (($2_1 | 0) != (67 | 0)) {
        break label$11
       }
      }
      if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
       break label$10
      }
     }
     if (!($888($4_1 | 0, 68964 | 0) | 0)) {
      break label$10
     }
     if ($888($4_1 | 0, 68027 | 0) | 0) {
      break label$9
     }
    }
    label$13 : {
     if ($0_1) {
      break label$13
     }
     $2_1 = 84868;
     if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break label$8
     }
    }
    return 0 | 0;
   }
   label$14 : {
    $2_1 = HEAP32[(0 + 101140 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$14
    }
    label$15 : while (1) {
     if (!($888($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
      break label$8
     }
     $2_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$15
     }
     break label$15;
    };
   }
   label$16 : {
    $2_1 = $483(36 | 0) | 0;
    if (!$2_1) {
     break label$16
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84872 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 84868 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $2_1 + 8 | 0;
    $410($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[(0 + 101140 | 0) >> 2] | 0;
    HEAP32[(0 + 101140 | 0) >> 2] = $2_1;
   }
   $2_1 = $0_1 | $2_1 | 0 ? $2_1 : 84868;
  }
  return $2_1 | 0;
 }
 
 function $892($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (101168 | 0) & (($0_1 | 0) != (101144 | 0) & (($0_1 | 0) != (84928 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (84904 | 0) | 0) | 0) | 0) | 0 | 0;
 }
 
 function $893($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $443(101136 | 0);
  $2_1 = $894($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $444(101136 | 0);
  return $2_1 | 0;
 }
 
 function $894($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $72_1 = 0, $78_1 = 0, $84_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     $5_1 = (1 << $4_1 | 0) & $0_1 | 0;
     label$4 : {
      label$5 : {
       if (!$2_1) {
        break label$5
       }
       if ($5_1) {
        break label$5
       }
       $5_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
       break label$4;
      }
      $5_1 = $891($4_1 | 0, ($5_1 ? $1_1 : 69625) | 0) | 0;
     }
     HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $5_1;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$2
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label$3
     }
     break label$3;
    };
    label$6 : {
     if ($892($2_1 | 0) | 0) {
      break label$6
     }
     $2_1 = 84904;
     if (!($446($3_1 + 8 | 0 | 0, 84904 | 0, 24 | 0) | 0)) {
      break label$1
     }
     $2_1 = 84928;
     if (!($446($3_1 + 8 | 0 | 0, 84928 | 0, 24 | 0) | 0)) {
      break label$1
     }
     $4_1 = 0;
     label$7 : {
      if (HEAPU8[(0 + 101192 | 0) >> 0] | 0) {
       break label$7
      }
      label$8 : while (1) {
       HEAP32[(($4_1 << 2 | 0) + 101144 | 0) >> 2] = $891($4_1 | 0, 69625 | 0) | 0;
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (6 | 0)) {
        continue label$8
       }
       break label$8;
      };
      HEAP8[(0 + 101192 | 0) >> 0] = 1;
      HEAP32[(0 + 101168 | 0) >> 2] = HEAP32[(0 + 101144 | 0) >> 2] | 0;
     }
     $2_1 = 101144;
     if (!($446($3_1 + 8 | 0 | 0, 101144 | 0, 24 | 0) | 0)) {
      break label$1
     }
     $2_1 = 101168;
     if (!($446($3_1 + 8 | 0 | 0, 101168 | 0, 24 | 0) | 0)) {
      break label$1
     }
     $2_1 = $483(24 | 0) | 0;
     if (!$2_1) {
      break label$2
     }
    }
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $72_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[$2_1 >> 2] = $72_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($3_1 + 8 | 0) + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $78_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $78_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = ($3_1 + 8 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $84_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $84_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $2_1 = 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $895($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $885($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
  return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
 }
 
 function $896($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($786() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($412() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($412() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $897($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $896($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $898($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$898(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $899($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $6_1 = 0;
  $411($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($900(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $6_1 = $415($0_1 | 0) | 0;
   }
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0_1 + 48 | 0) >> 2] = 80;
       HEAP32[($0_1 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
       break label$7;
      }
      $8_1 = 0;
      if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2_1 = -1;
     if ($506($0_1 | 0) | 0) {
      break label$5
     }
    }
    $2_1 = $900($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   }
   $4_1 = $7_1 & 32 | 0;
   label$9 : {
    if (!$8_1) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $3_1 ? $2_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
   $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
   if (!$6_1) {
    break label$1
   }
   $416($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $4_1 | 0;
 }
 
 function $900($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $15_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $17_1 = 0, $18_1 = 0, $14_1 = 0, $13_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $24_1 = 0, $10_1 = 0, $25_1 = 0, $25$hi = 0, $21_1 = 0, $23_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $8_1 = 0, $272_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $12_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $13_1 = $1_1;
       if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
        break label$4
       }
       $11_1 = $12_1 + $11_1 | 0;
       $12_1 = $13_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $14_1 = HEAPU8[$12_1 >> 0] | 0;
            if (!$14_1) {
             break label$10
            }
            label$11 : while (1) {
             label$12 : {
              label$13 : {
               label$14 : {
                $14_1 = $14_1 & 255 | 0;
                if ($14_1) {
                 break label$14
                }
                $1_1 = $12_1;
                break label$13;
               }
               if (($14_1 | 0) != (37 | 0)) {
                break label$12
               }
               $14_1 = $12_1;
               label$15 : while (1) {
                label$16 : {
                 if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                  break label$16
                 }
                 $1_1 = $14_1;
                 break label$13;
                }
                $12_1 = $12_1 + 1 | 0;
                $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                $1_1 = $14_1 + 2 | 0;
                $14_1 = $1_1;
                if (($15_1 | 0) == (37 | 0)) {
                 continue label$15
                }
                break label$15;
               };
              }
              $12_1 = $12_1 - $13_1 | 0;
              $14_1 = $11_1 ^ 2147483647 | 0;
              if (($12_1 | 0) > ($14_1 | 0)) {
               break label$4
              }
              label$17 : {
               if (!$0_1) {
                break label$17
               }
               $901($0_1 | 0, $13_1 | 0, $12_1 | 0);
              }
              if ($12_1) {
               continue label$5
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              $12_1 = $1_1 + 1 | 0;
              $16_1 = -1;
              label$18 : {
               if (!($852(HEAP8[($1_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$18
               }
               if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$18
               }
               $12_1 = $1_1 + 3 | 0;
               $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
               $10_1 = 1;
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $12_1;
              $17_1 = 0;
              label$19 : {
               label$20 : {
                $18_1 = HEAP8[$12_1 >> 0] | 0;
                $1_1 = $18_1 + -32 | 0;
                if ($1_1 >>> 0 <= 31 >>> 0) {
                 break label$20
                }
                $15_1 = $12_1;
                break label$19;
               }
               $17_1 = 0;
               $15_1 = $12_1;
               $1_1 = 1 << $1_1 | 0;
               if (!($1_1 & 75913 | 0)) {
                break label$19
               }
               label$21 : while (1) {
                $15_1 = $12_1 + 1 | 0;
                HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
                $17_1 = $1_1 | $17_1 | 0;
                $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                $1_1 = $18_1 + -32 | 0;
                if ($1_1 >>> 0 >= 32 >>> 0) {
                 break label$19
                }
                $12_1 = $15_1;
                $1_1 = 1 << $1_1 | 0;
                if ($1_1 & 75913 | 0) {
                 continue label$21
                }
                break label$21;
               };
              }
              label$22 : {
               label$23 : {
                if (($18_1 | 0) != (42 | 0)) {
                 break label$23
                }
                label$24 : {
                 label$25 : {
                  if (!($852(HEAP8[($15_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$25
                  }
                  if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$25
                  }
                  HEAP32[((((HEAP8[($15_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                  $18_1 = $15_1 + 3 | 0;
                  $19_1 = HEAP32[((((HEAP8[($15_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                  $10_1 = 1;
                  break label$24;
                 }
                 if ($10_1) {
                  break label$9
                 }
                 $18_1 = $15_1 + 1 | 0;
                 label$26 : {
                  if ($0_1) {
                   break label$26
                  }
                  HEAP32[($7_1 + 76 | 0) >> 2] = $18_1;
                  $10_1 = 0;
                  $19_1 = 0;
                  break label$22;
                 }
                 $12_1 = HEAP32[$2_1 >> 2] | 0;
                 HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                 $19_1 = HEAP32[$12_1 >> 2] | 0;
                 $10_1 = 0;
                }
                HEAP32[($7_1 + 76 | 0) >> 2] = $18_1;
                if (($19_1 | 0) > (-1 | 0)) {
                 break label$22
                }
                $19_1 = 0 - $19_1 | 0;
                $17_1 = $17_1 | 8192 | 0;
                break label$22;
               }
               $19_1 = $902($7_1 + 76 | 0 | 0) | 0;
               if (($19_1 | 0) < (0 | 0)) {
                break label$4
               }
               $18_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              }
              $12_1 = 0;
              $20_1 = -1;
              label$27 : {
               label$28 : {
                if ((HEAPU8[$18_1 >> 0] | 0 | 0) == (46 | 0)) {
                 break label$28
                }
                $1_1 = $18_1;
                $21_1 = 0;
                break label$27;
               }
               label$29 : {
                if ((HEAPU8[($18_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                 break label$29
                }
                label$30 : {
                 label$31 : {
                  if (!($852(HEAP8[($18_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$31
                  }
                  if ((HEAPU8[($18_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$31
                  }
                  HEAP32[((((HEAP8[($18_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                  $1_1 = $18_1 + 4 | 0;
                  $20_1 = HEAP32[((((HEAP8[($18_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                  break label$30;
                 }
                 if ($10_1) {
                  break label$9
                 }
                 $1_1 = $18_1 + 2 | 0;
                 label$32 : {
                  if ($0_1) {
                   break label$32
                  }
                  $20_1 = 0;
                  break label$30;
                 }
                 $15_1 = HEAP32[$2_1 >> 2] | 0;
                 HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                 $20_1 = HEAP32[$15_1 >> 2] | 0;
                }
                HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                $21_1 = ($20_1 ^ -1 | 0) >>> 31 | 0;
                break label$27;
               }
               HEAP32[($7_1 + 76 | 0) >> 2] = $18_1 + 1 | 0;
               $21_1 = 1;
               $20_1 = $902($7_1 + 76 | 0 | 0) | 0;
               $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              }
              label$33 : while (1) {
               $15_1 = $12_1;
               $22_1 = 28;
               $18_1 = $1_1;
               $12_1 = HEAP8[$18_1 >> 0] | 0;
               if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                break label$3
               }
               $1_1 = $18_1 + 1 | 0;
               $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 84975 | 0) >> 0] | 0;
               if (($12_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                continue label$33
               }
               break label$33;
              };
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              label$34 : {
               label$35 : {
                label$36 : {
                 if (($12_1 | 0) == (27 | 0)) {
                  break label$36
                 }
                 if (!$12_1) {
                  break label$3
                 }
                 label$37 : {
                  if (($16_1 | 0) < (0 | 0)) {
                   break label$37
                  }
                  HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                  i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $272_1 = i64toi32_i32$0;
                  i64toi32_i32$0 = $7_1;
                  HEAP32[($7_1 + 64 | 0) >> 2] = $272_1;
                  HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                  break label$35;
                 }
                 if (!$0_1) {
                  break label$6
                 }
                 $903($7_1 + 64 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                 break label$34;
                }
                if (($16_1 | 0) > (-1 | 0)) {
                 break label$3
                }
               }
               $12_1 = 0;
               if (!$0_1) {
                continue label$5
               }
              }
              $23_1 = $17_1 & -65537 | 0;
              $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
              $16_1 = 0;
              $24_1 = 65705;
              $22_1 = $9_1;
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           label$51 : {
                            label$52 : {
                             label$53 : {
                              $12_1 = HEAP8[$18_1 >> 0] | 0;
                              $12_1 = $15_1 ? (($12_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -33 | 0 : $12_1) : $12_1;
                              switch ($12_1 + -88 | 0 | 0) {
                              case 11:
                               break label$38;
                              case 9:
                              case 13:
                              case 14:
                              case 15:
                               break label$39;
                              case 27:
                               break label$44;
                              case 12:
                              case 17:
                               break label$47;
                              case 23:
                               break label$48;
                              case 0:
                              case 32:
                               break label$49;
                              case 24:
                               break label$50;
                              case 22:
                               break label$51;
                              case 29:
                               break label$52;
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 10:
                              case 16:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 25:
                              case 26:
                              case 28:
                              case 30:
                              case 31:
                               break label$7;
                              default:
                               break label$53;
                              };
                             }
                             $22_1 = $9_1;
                             label$54 : {
                              switch ($12_1 + -65 | 0 | 0) {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break label$39;
                              case 2:
                               break label$42;
                              case 1:
                              case 3:
                               break label$7;
                              default:
                               break label$54;
                              };
                             }
                             if (($12_1 | 0) == (83 | 0)) {
                              break label$43
                             }
                             break label$8;
                            }
                            $16_1 = 0;
                            $24_1 = 65705;
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$1;
                            $25$hi = i64toi32_i32$0;
                            break label$46;
                           }
                           $12_1 = 0;
                           label$55 : {
                            switch ($15_1 & 255 | 0 | 0) {
                            case 0:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 1:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 2:
                             i64toi32_i32$1 = $11_1;
                             i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                             i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                             HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                             continue label$5;
                            case 3:
                             HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                             continue label$5;
                            case 4:
                             HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                             continue label$5;
                            case 6:
                             HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                             continue label$5;
                            case 7:
                             break label$55;
                            default:
                             continue label$5;
                            };
                           }
                           i64toi32_i32$1 = $11_1;
                           i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                           i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                           HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                           continue label$5;
                          }
                          $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                          $17_1 = $17_1 | 8 | 0;
                          $12_1 = 120;
                         }
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $13_1 = $904(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                         $16_1 = 0;
                         $24_1 = 65705;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                          break label$45
                         }
                         if (!($17_1 & 8 | 0)) {
                          break label$45
                         }
                         $24_1 = ($12_1 >>> 4 | 0) + 65705 | 0;
                         $16_1 = 2;
                         break label$45;
                        }
                        $16_1 = 0;
                        $24_1 = 65705;
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        $13_1 = $905(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                        if (!($17_1 & 8 | 0)) {
                         break label$45
                        }
                        $12_1 = $9_1 - $13_1 | 0;
                        $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                        break label$45;
                       }
                       label$62 : {
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        $25_1 = i64toi32_i32$1;
                        $25$hi = i64toi32_i32$0;
                        i64toi32_i32$2 = i64toi32_i32$1;
                        i64toi32_i32$1 = -1;
                        i64toi32_i32$3 = -1;
                        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                         $33_1 = 1
                        } else {
                         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                           $34_1 = 0
                          } else {
                           $34_1 = 1
                          }
                          $35_1 = $34_1;
                         } else {
                          $35_1 = 0
                         }
                         $33_1 = $35_1;
                        }
                        if ($33_1) {
                         break label$62
                        }
                        i64toi32_i32$2 = $25$hi;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$0 = $25$hi;
                        i64toi32_i32$1 = $25_1;
                        i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                        $25_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                        $25$hi = i64toi32_i32$5;
                        i64toi32_i32$3 = $7_1;
                        HEAP32[($7_1 + 64 | 0) >> 2] = $25_1;
                        HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                        $16_1 = 1;
                        $24_1 = 65705;
                        break label$46;
                       }
                       label$63 : {
                        if (!($17_1 & 2048 | 0)) {
                         break label$63
                        }
                        $16_1 = 1;
                        $24_1 = 65706;
                        break label$46;
                       }
                       $16_1 = $17_1 & 1 | 0;
                       $24_1 = $16_1 ? 65707 : 65705;
                      }
                      i64toi32_i32$5 = $25$hi;
                      $13_1 = $906($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                     }
                     label$64 : {
                      if (!$21_1) {
                       break label$64
                      }
                      if (($20_1 | 0) < (0 | 0)) {
                       break label$4
                      }
                     }
                     $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                     label$65 : {
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $25_1 = i64toi32_i32$5;
                      $25$hi = i64toi32_i32$3;
                      i64toi32_i32$2 = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$1 = 0;
                      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                       break label$65
                      }
                      if ($20_1) {
                       break label$65
                      }
                      $13_1 = $9_1;
                      $22_1 = $13_1;
                      $20_1 = 0;
                      break label$7;
                     }
                     i64toi32_i32$2 = $25$hi;
                     $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                     $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                     break label$8;
                    }
                    $12_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    $13_1 = $12_1 ? $12_1 : 69227;
                    $12_1 = $895($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                    $22_1 = $13_1 + $12_1 | 0;
                    label$66 : {
                     if (($20_1 | 0) <= (-1 | 0)) {
                      break label$66
                     }
                     $17_1 = $23_1;
                     $20_1 = $12_1;
                     break label$7;
                    }
                    $17_1 = $23_1;
                    $20_1 = $12_1;
                    if (HEAPU8[$22_1 >> 0] | 0) {
                     break label$4
                    }
                    break label$7;
                   }
                   label$67 : {
                    if (!$20_1) {
                     break label$67
                    }
                    $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    break label$41;
                   }
                   $12_1 = 0;
                   $907($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                   break label$40;
                  }
                  HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
                  $14_1 = $7_1 + 8 | 0;
                  $20_1 = -1;
                 }
                 $12_1 = 0;
                 label$68 : {
                  label$69 : while (1) {
                   $15_1 = HEAP32[$14_1 >> 2] | 0;
                   if (!$15_1) {
                    break label$68
                   }
                   label$70 : {
                    $15_1 = $897($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                    $13_1 = ($15_1 | 0) < (0 | 0);
                    if ($13_1) {
                     break label$70
                    }
                    if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                     break label$70
                    }
                    $14_1 = $14_1 + 4 | 0;
                    $12_1 = $15_1 + $12_1 | 0;
                    if ($20_1 >>> 0 > $12_1 >>> 0) {
                     continue label$69
                    }
                    break label$68;
                   }
                   break label$69;
                  };
                  if ($13_1) {
                   break label$2
                  }
                 }
                 $22_1 = 61;
                 if (($12_1 | 0) < (0 | 0)) {
                  break label$3
                 }
                 $907($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                 label$71 : {
                  if ($12_1) {
                   break label$71
                  }
                  $12_1 = 0;
                  break label$40;
                 }
                 $15_1 = 0;
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 label$72 : while (1) {
                  $13_1 = HEAP32[$14_1 >> 2] | 0;
                  if (!$13_1) {
                   break label$40
                  }
                  $13_1 = $897($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                  $15_1 = $13_1 + $15_1 | 0;
                  if ($15_1 >>> 0 > $12_1 >>> 0) {
                   break label$40
                  }
                  $901($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                  $14_1 = $14_1 + 4 | 0;
                  if ($15_1 >>> 0 < $12_1 >>> 0) {
                   continue label$72
                  }
                  break label$72;
                 };
                }
                $907($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                continue label$5;
               }
               label$73 : {
                if (!$21_1) {
                 break label$73
                }
                if (($20_1 | 0) < (0 | 0)) {
                 break label$4
                }
               }
               $22_1 = 61;
               $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
               if (($12_1 | 0) >= (0 | 0)) {
                continue label$5
               }
               break label$3;
              }
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
              HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
              $20_1 = 1;
              $13_1 = $8_1;
              $22_1 = $9_1;
              $17_1 = $23_1;
              break label$7;
             }
             $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             $12_1 = $12_1 + 1 | 0;
             continue label$11;
            };
           }
           if ($0_1) {
            break label$1
           }
           if (!$10_1) {
            break label$6
           }
           $12_1 = 1;
           label$74 : {
            label$75 : while (1) {
             $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
             if (!$14_1) {
              break label$74
             }
             $903($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
             $11_1 = 1;
             $12_1 = $12_1 + 1 | 0;
             if (($12_1 | 0) != (10 | 0)) {
              continue label$75
             }
             break label$1;
            };
           }
           $11_1 = 1;
           if ($12_1 >>> 0 >= 10 >>> 0) {
            break label$1
           }
           label$76 : while (1) {
            if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
             break label$9
            }
            $11_1 = 1;
            $12_1 = $12_1 + 1 | 0;
            if (($12_1 | 0) == (10 | 0)) {
             break label$1
            }
            continue label$76;
           };
          }
          $22_1 = 28;
          break label$3;
         }
         $22_1 = $9_1;
        }
        $18_1 = $22_1 - $13_1 | 0;
        $20_1 = ($20_1 | 0) > ($18_1 | 0) ? $20_1 : $18_1;
        if (($20_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
         break label$4
        }
        $22_1 = 61;
        $15_1 = $16_1 + $20_1 | 0;
        $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
        if (($12_1 | 0) > ($14_1 | 0)) {
         break label$3
        }
        $907($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
        $901($0_1 | 0, $24_1 | 0, $16_1 | 0);
        $907($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
        $907($0_1 | 0, 48 | 0, $20_1 | 0, $18_1 | 0, 0 | 0);
        $901($0_1 | 0, $13_1 | 0, $18_1 | 0);
        $907($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
        continue label$5;
       }
       break label$5;
      };
      $11_1 = 0;
      break label$1;
     }
     $22_1 = 61;
    }
    HEAP32[($412() | 0) >> 2] = $22_1;
   }
   $11_1 = -1;
  }
  global$0 = $7_1 + 80 | 0;
  return $11_1 | 0;
 }
 
 function $901($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $507($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $902($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($852(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : while (1) {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = -1;
   label$3 : {
    if ($1_1 >>> 0 > 214748364 >>> 0) {
     break label$3
    }
    $3_1 = (HEAP8[$2_1 >> 0] | 0) + -48 | 0;
    $1_1 = Math_imul($1_1, 10);
    $3_1 = ($3_1 | 0) > ($1_1 ^ 2147483647 | 0 | 0) ? -1 : $3_1 + $1_1 | 0;
   }
   HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
   $1_1 = $3_1;
   if ($852(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
    continue label$2
   }
   break label$2;
  };
  return $3_1 | 0;
 }
 
 function $903($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $29_1 = 0, $37_1 = 0, $45_1 = 0, $55_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $97_1 = 0, $105_1 = 0, $115_1 = 0, $125_1 = 0, $133_1 = 0, $141_1 = 0;
  label$1 : {
   switch ($1_1 + -9 | 0 | 0) {
   case 0:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   case 1:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $55_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $97_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $97_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $115_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $125_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $141_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $904($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 85504 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $905($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $906($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3_1 = $2_1;
   if (!$3_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $907($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $3_1 = $2_1 - $3_1 | 0;
   $2_1 = $3_1 >>> 0 < 256 >>> 0;
   $411($5_1 | 0, $1_1 & 255 | 0 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : while (1) {
     $901($0_1 | 0, $5_1 | 0, 256 | 0);
     $3_1 = $3_1 + -256 | 0;
     if ($3_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $901($0_1 | 0, $5_1 | 0, $3_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $908($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $899($0_1 | 0, $1_1 | 0, $2_1 | 0, 163 | 0, 164 | 0) | 0 | 0;
 }
 
 function $909($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $18_1 = 0, $21_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $15_1 = 0, i64toi32_i32$4 = 0, $22_1 = 0, $23_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $17_1 = 0, $19_1 = 0, $8_1 = 0, $26_1 = 0.0, $24_1 = 0, $13_1 = 0, $24$hi = 0, $14_1 = 0, $16_1 = 0, $9_1 = 0, $20_1 = 0, $7_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $25$hi = 0, $48_1 = 0, $25_1 = 0, $167_1 = 0, $169$hi = 0, $171$hi = 0, $173_1 = 0, $173$hi = 0, $175$hi = 0, $179_1 = 0, $179$hi = 0, $388_1 = 0.0, $852_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $911(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46_1 = 0
      } else {
       $46_1 = 1
      }
      $47_1 = $46_1;
     } else {
      $47_1 = 0
     }
     $45_1 = $47_1;
    }
    if ($45_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 65715;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $911(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 65718;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 65721 : 65716;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $907($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $901($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $901($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 66828 : 68190) : $11_1 ? 67333 : 68249) | 0, 3 | 0);
    $907($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($10_1 | 0) > ($2_1 | 0) ? $10_1 : $2_1;
    break label$4;
   }
   $13_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$898(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $14_1 = $5_1 | 32 | 0;
       if (($14_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $14_1 = $5_1 | 32 | 0;
      if (($14_1 | 0) == (97 | 0)) {
       break label$6
      }
      $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $16_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
     $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
    $11_1 = $17_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $10_1 = 0;
     }
     HEAP32[$11_1 >> 2] = $10_1;
     $11_1 = $11_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($16_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $16_1;
      $10_1 = $11_1;
      $18_1 = $17_1;
      break label$13;
     }
     $18_1 = $17_1;
     $3_1 = $16_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $10_1 = $11_1 + -4 | 0;
       if ($10_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $167_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $169$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $169$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $171$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $173_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $173$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $171$hi;
        i64toi32_i32$1 = $48_1;
        i64toi32_i32$2 = $173$hi;
        i64toi32_i32$3 = $173_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $175$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $179_1 = i64toi32_i32$1;
        $179$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $175$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $179$hi;
        i64toi32_i32$3 = $179_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$167_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $10_1 = $24_1;
       if (!$10_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $10_1;
      }
      label$18 : {
       label$19 : while (1) {
        $10_1 = $11_1;
        if ($10_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $11_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$11_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $11_1 = $10_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $20_1 = ($14_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $11_1 = 0 - $3_1 | 0;
      $21_1 = ($11_1 | 0) < (9 | 0) ? $11_1 : 9;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $10_1 >>> 0) {
         break label$23
        }
        $11_1 = HEAP32[$18_1 >> 2] | 0;
        break label$22;
       }
       $22_1 = 1e9 >>> $21_1 | 0;
       $23_1 = (-1 << $21_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $11_1 = $18_1;
       label$24 : while (1) {
        $12_1 = HEAP32[$11_1 >> 2] | 0;
        HEAP32[$11_1 >> 2] = ($12_1 >>> $21_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($12_1 & $23_1 | 0, $22_1);
        $11_1 = $11_1 + 4 | 0;
        if ($11_1 >>> 0 < $10_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $11_1 = HEAP32[$18_1 >> 2] | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$10_1 >> 2] = $3_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $21_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $18_1 = $18_1 + (!$11_1 << 2 | 0) | 0;
      $11_1 = $20_1 ? $17_1 : $18_1;
      $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $11_1 + ($19_1 << 2 | 0) | 0 : $10_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $3_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $10_1 >>> 0) {
      break label$25
     }
     $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
     $11_1 = 10;
     $12_1 = HEAP32[$18_1 >> 2] | 0;
     if ($12_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $3_1 = $3_1 + 1 | 0;
      $11_1 = Math_imul($11_1, 10);
      if ($12_1 >>> 0 >= $11_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $3_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
     if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $12_1 = $11_1 + 9216 | 0;
     $22_1 = ($12_1 | 0) / (9 | 0) | 0;
     $21_1 = (($22_1 << 2 | 0) + (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $11_1 = 10;
     label$28 : {
      $12_1 = $12_1 - Math_imul($22_1, 9) | 0;
      if (($12_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $11_1 = Math_imul($11_1, 10);
       $12_1 = $12_1 + 1 | 0;
       if (($12_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $23_1 = $21_1 + 4 | 0;
     label$30 : {
      label$31 : {
       $12_1 = HEAP32[$21_1 >> 2] | 0;
       $19_1 = ($12_1 >>> 0) / ($11_1 >>> 0) | 0;
       $22_1 = $12_1 - Math_imul($19_1, $11_1) | 0;
       if ($22_1) {
        break label$31
       }
       if (($23_1 | 0) == ($10_1 | 0)) {
        break label$30
       }
      }
      label$32 : {
       label$33 : {
        if ($19_1 & 1 | 0) {
         break label$33
        }
        $1_1 = 9007199254740992.0;
        if (($11_1 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($21_1 >>> 0 <= $18_1 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($21_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1_1 = 9007199254740994.0;
      }
      $388_1 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
      $23_1 = $11_1 >>> 1 | 0;
      $26_1 = $22_1 >>> 0 < $23_1 >>> 0 ? .5 : ($22_1 | 0) == ($23_1 | 0) ? $388_1 : 1.5;
      label$34 : {
       if ($7_1) {
        break label$34
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $12_1 = $12_1 - $22_1 | 0;
      HEAP32[$21_1 >> 2] = $12_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $11_1 = $12_1 + $11_1 | 0;
      HEAP32[$21_1 >> 2] = $11_1;
      label$35 : {
       if ($11_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$21_1 >> 2] = 0;
        label$37 : {
         $21_1 = $21_1 + -4 | 0;
         if ($21_1 >>> 0 >= $18_1 >>> 0) {
          break label$37
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $11_1 = (HEAP32[$21_1 >> 2] | 0) + 1 | 0;
        HEAP32[$21_1 >> 2] = $11_1;
        if ($11_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
      $11_1 = 10;
      $12_1 = HEAP32[$18_1 >> 2] | 0;
      if ($12_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $3_1 = $3_1 + 1 | 0;
       $11_1 = Math_imul($11_1, 10);
       if ($12_1 >>> 0 >= $11_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $11_1 = $21_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      $11_1 = $10_1;
      $12_1 = $10_1 >>> 0 <= $18_1 >>> 0;
      if ($12_1) {
       break label$39
      }
      $10_1 = $11_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($14_1 | 0) == (103 | 0)) {
       break label$42
      }
      $21_1 = $4_1 & 8 | 0;
      break label$41;
     }
     $10_1 = $15_1 ? $15_1 : 1;
     $21_1 = ($10_1 | 0) > ($3_1 | 0) & ($3_1 | 0) > (-5 | 0) | 0;
     $15_1 = ($21_1 ? $3_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($21_1 ? -1 : -2) + $5_1 | 0;
     $21_1 = $4_1 & 8 | 0;
     if ($21_1) {
      break label$41
     }
     $10_1 = -9;
     label$43 : {
      if ($12_1) {
       break label$43
      }
      $21_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
      if (!$21_1) {
       break label$43
      }
      $12_1 = 10;
      $10_1 = 0;
      if (($21_1 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $22_1 = $10_1;
       $10_1 = $10_1 + 1 | 0;
       $12_1 = Math_imul($12_1, 10);
       if (!(($21_1 >>> 0) % ($12_1 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $10_1 = $22_1 ^ -1 | 0;
     }
     $12_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $21_1 = 0;
      $10_1 = ($12_1 + $10_1 | 0) + -9 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
      break label$41;
     }
     $21_1 = 0;
     $10_1 = (($3_1 + $12_1 | 0) + $10_1 | 0) + -9 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
    }
    $12_1 = -1;
    $22_1 = $15_1 | $21_1 | 0;
    if (($15_1 | 0) > (($22_1 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $23_1 = ($15_1 + (($22_1 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $20_1 = $5_1 & -33 | 0;
      if (($20_1 | 0) != (70 | 0)) {
       break label$47
      }
      if (($3_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
       break label$4
      }
      $10_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
      break label$46;
     }
     label$48 : {
      $10_1 = $3_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10_1 = $906(($3_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
      if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $19_1 = $10_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     $12_1 = -1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($3_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $13_1 - $19_1 | 0;
     if (($10_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
      break label$4
     }
    }
    $12_1 = -1;
    $10_1 = $10_1 + $23_1 | 0;
    if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $23_1 = $10_1 + $8_1 | 0;
    $907($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 | 0);
    $901($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $907($0_1 | 0, 48 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($20_1 | 0) != (70 | 0)) {
         break label$53
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $12_1 = $18_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $18_1;
        $18_1 = $12_1;
        label$54 : while (1) {
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $10_1 = $906(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($18_1 | 0) == ($12_1 | 0)) {
            break label$56
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$55
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $21_1;
         }
         $901($0_1 | 0, $10_1 | 0, $3_1 - $10_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $17_1 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$22_1) {
          break label$58
         }
         $901($0_1 | 0, 69179 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$52
        }
        if (($15_1 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $906(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         $901($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
         $10_1 = $15_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $11_1 >>> 0) {
          break label$51
         }
         $12_1 = ($15_1 | 0) > (9 | 0);
         $15_1 = $10_1;
         if ($12_1) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($15_1 | 0) < (0 | 0)) {
         break label$62
        }
        $22_1 = $11_1 >>> 0 > $18_1 >>> 0 ? $11_1 : $18_1 + 4 | 0;
        $17_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $11_1 = $18_1;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$5 = $11_1;
          i64toi32_i32$4 = HEAP32[$11_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $10_1 = $906(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$64
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $17_1;
         }
         label$65 : {
          label$66 : {
           if (($11_1 | 0) == ($18_1 | 0)) {
            break label$66
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          $901($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          if (!($15_1 | $21_1 | 0)) {
           break label$65
          }
          $901($0_1 | 0, 69179 | 0, 1 | 0);
         }
         $12_1 = $3_1 - $10_1 | 0;
         $901($0_1 | 0, $10_1 | 0, (($15_1 | 0) < ($12_1 | 0) ? $15_1 : $12_1) | 0);
         $15_1 = $15_1 - $12_1 | 0;
         $11_1 = $11_1 + 4 | 0;
         if ($11_1 >>> 0 >= $22_1 >>> 0) {
          break label$62
         }
         if (($15_1 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       $907($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $901($0_1 | 0, $19_1 | 0, $13_1 - $19_1 | 0 | 0);
       break label$50;
      }
      $10_1 = $15_1;
     }
     $907($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $907($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($23_1 | 0) > ($2_1 | 0) ? $23_1 : $2_1;
    break label$4;
   }
   $23_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $10_1 = 12 - $3_1 | 0;
    $26_1 = 16.0;
    label$69 : while (1) {
     $26_1 = $26_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$23_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$68;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$71 : {
    $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $852_1 = $10_1;
    $10_1 = $10_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $10_1 = $906(($852_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$0 | 0, $13_1 | 0) | 0;
    if (($10_1 | 0) != ($13_1 | 0)) {
     break label$71
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $10_1 = $6_1 + 15 | 0;
   }
   $21_1 = $8_1 | 2 | 0;
   $18_1 = $5_1 & 32 | 0;
   $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $22_1 = $10_1 + -2 | 0;
   HEAP8[$22_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
   $12_1 = $4_1 & 8 | 0;
   $11_1 = $6_1 + 16 | 0;
   label$72 : while (1) {
    $10_1 = $11_1;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$74
      }
      $11_1 = ~~$1_1;
      break label$73;
     }
     $11_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($11_1 + 85504 | 0) >> 0] | 0 | $18_1 | 0;
    $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
    label$75 : {
     $11_1 = $10_1 + 1 | 0;
     if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($12_1) {
       break label$76
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$76
      }
      if ($1_1 == 0.0) {
       break label$75
      }
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $11_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $12_1 = -1;
   $19_1 = $13_1 - $22_1 | 0;
   $10_1 = $21_1 + $19_1 | 0;
   if ((2147483645 - $10_1 | 0 | 0) < ($3_1 | 0)) {
    break label$4
   }
   label$77 : {
    label$78 : {
     if (!$3_1) {
      break label$78
     }
     $18_1 = $11_1 - ($6_1 + 16 | 0) | 0;
     if (($18_1 + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$78
     }
     $11_1 = $3_1 + 2 | 0;
     break label$77;
    }
    $18_1 = $11_1 - ($6_1 + 16 | 0) | 0;
    $11_1 = $18_1;
   }
   $10_1 = $10_1 + $11_1 | 0;
   $907($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $901($0_1 | 0, $23_1 | 0, $21_1 | 0);
   $907($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $901($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $907($0_1 | 0, 48 | 0, $11_1 - $18_1 | 0 | 0, 0 | 0, 0 | 0);
   $901($0_1 | 0, $22_1 | 0, $19_1 | 0);
   $907($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
   $12_1 = ($10_1 | 0) > ($2_1 | 0) ? $10_1 : $2_1;
  }
  global$0 = $6_1 + 560 | 0;
  return $12_1 | 0;
 }
 
 function $910($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $15$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0_1 >> 3] = +$879($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $911($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $912($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $5_1 = -1;
  HEAP32[($4_1 + 148 | 0) >> 2] = $1_1 ? $1_1 + -1 | 0 : 0;
  $0_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
  HEAP32[($4_1 + 144 | 0) >> 2] = $0_1;
  $4_1 = $411($4_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 165;
  HEAP32[($4_1 + 80 | 0) >> 2] = -1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $4_1 + 159 | 0;
  HEAP32[($4_1 + 84 | 0) >> 2] = $4_1 + 144 | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) > (-1 | 0)) {
     break label$2
    }
    HEAP32[($412() | 0) >> 2] = 61;
    break label$1;
   }
   HEAP8[$0_1 >> 0] = 0;
   $5_1 = $908($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  global$0 = $4_1 + 160 | 0;
  return $5_1 | 0;
 }
 
 function $913($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $6_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $5_1 | 0;
   $6_1 = $4_1 >>> 0 < $6_1 >>> 0 ? $4_1 : $6_1;
   if (!$6_1) {
    break label$1
   }
   $410(HEAP32[$3_1 >> 2] | 0 | 0, $5_1 | 0, $6_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + $6_1 | 0;
   $4_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $6_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
  }
  $6_1 = HEAP32[$3_1 >> 2] | 0;
  label$2 : {
   $4_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
   if (!$4_1) {
    break label$2
   }
   $410($6_1 | 0, $1_1 | 0, $4_1 | 0) | 0;
   $6_1 = (HEAP32[$3_1 >> 2] | 0) + $4_1 | 0;
   HEAP32[$3_1 >> 2] = $6_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $4_1 | 0;
  }
  HEAP8[$6_1 >> 0] = 0;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
  return $2_1 | 0;
 }
 
 function $914($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | ($852($0_1 | 0) | 0 | 0) != (0 | 0) | 0 | 0;
 }
 
 function $915($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $914($0_1 | 0) | 0 | 0;
 }
 
 function $916($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $886($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $917($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $912($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $918($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$1 : {
   $2_1 = $912(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $483($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$1
   }
   $4_1 = $912($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $919($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($892($0_1 | 0) | 0)) {
    break label$1
   }
   $484($0_1 | 0);
  }
 }
 
 function $920($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label$1
   }
   break label$1;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $921() {
  return 85520 | 0;
 }
 
 function $922() {
  return 87072 | 0;
 }
 
 function $923($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  label$1 : {
   $7_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$7_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $8_1 = $0_1 ? $3_1 : 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $3_1 = $896(($8_1 >>> 0 < 4 >>> 0 ? $5_1 + 12 | 0 : $0_1) | 0, HEAP32[$7_1 >> 2] | 0 | 0, 0 | 0) | 0;
     if (($3_1 | 0) != (-1 | 0)) {
      break label$3
     }
     $6_1 = -1;
     break label$1;
    }
    label$4 : {
     label$5 : {
      if ($0_1) {
       break label$5
      }
      $0_1 = 0;
      break label$4;
     }
     label$6 : {
      if ($8_1 >>> 0 > 3 >>> 0) {
       break label$6
      }
      if ($8_1 >>> 0 < $3_1 >>> 0) {
       break label$1
      }
      $410($0_1 | 0, $5_1 + 12 | 0 | 0, $3_1 | 0) | 0;
     }
     $8_1 = $8_1 - $3_1 | 0;
     $0_1 = $0_1 + $3_1 | 0;
    }
    label$7 : {
     if (HEAP32[$7_1 >> 2] | 0) {
      break label$7
     }
     $7_1 = 0;
     break label$1;
    }
    $6_1 = $3_1 + $6_1 | 0;
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$8 : {
   if (!$0_1) {
    break label$8
   }
   HEAP32[$1_1 >> 2] = $7_1;
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $924($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3_1) {
               break label$12
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
               break label$12
              }
              label$13 : {
               if ($0_1) {
                break label$13
               }
               $3_1 = $2_1;
               break label$10;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break label$11;
             }
             label$14 : {
              label$15 : {
               if (HEAP32[(HEAP32[(($786() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
                break label$15
               }
               if (!$0_1) {
                break label$14
               }
               if (!$2_1) {
                break label$1
               }
               $5_1 = $2_1;
               label$16 : {
                label$17 : while (1) {
                 $3_1 = HEAP8[$4_1 >> 0] | 0;
                 if (!$3_1) {
                  break label$16
                 }
                 HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                 $0_1 = $0_1 + 4 | 0;
                 $4_1 = $4_1 + 1 | 0;
                 $5_1 = $5_1 + -1 | 0;
                 if ($5_1) {
                  continue label$17
                 }
                 break label$1;
                };
               }
               HEAP32[$0_1 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
               break label$9
              }
              $3_1 = $2_1;
              $6_1 = 0;
              break label$7;
             }
             return $472($4_1 | 0) | 0 | 0;
            }
            $6_1 = 1;
            break label$7;
           }
           $6_1 = 0;
           break label$8;
          }
          $6_1 = 1;
         }
         label$18 : while (1) {
          label$19 : {
           switch ($6_1 | 0) {
           case 0:
            $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
            if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
             break label$6
            }
            $6_1 = $4_1 + 1 | 0;
            label$21 : {
             label$22 : {
              if ($5_1 & 33554432 | 0) {
               break label$22
              }
              $4_1 = $6_1;
              break label$21;
             }
             label$23 : {
              if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
               break label$23
              }
              $4_1 = $4_1 + -1 | 0;
              break label$4;
             }
             $6_1 = $4_1 + 2 | 0;
             label$24 : {
              if ($5_1 & 524288 | 0) {
               break label$24
              }
              $4_1 = $6_1;
              break label$21;
             }
             label$25 : {
              if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
               break label$25
              }
              $4_1 = $4_1 + -1 | 0;
              break label$4;
             }
             $4_1 = $4_1 + 3 | 0;
            }
            $3_1 = $3_1 + -1 | 0;
            $6_1 = 1;
            continue label$18;
           default:
            break label$19;
           };
          }
          label$26 : while (1) {
           $5_1 = HEAPU8[$4_1 >> 0] | 0;
           label$27 : {
            if ($4_1 & 3 | 0) {
             break label$27
            }
            if (($5_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$27
            }
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
             break label$27
            }
            label$28 : while (1) {
             $3_1 = $3_1 + -4 | 0;
             $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             $6_1 = $4_1 + 4 | 0;
             $4_1 = $6_1;
             if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
              continue label$28
             }
             break label$28;
            };
            $4_1 = $6_1;
           }
           label$29 : {
            $6_1 = $5_1 & 255 | 0;
            if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$29
            }
            $3_1 = $3_1 + -1 | 0;
            $4_1 = $4_1 + 1 | 0;
            continue label$26;
           }
           break label$26;
          };
          $6_1 = $6_1 + -194 | 0;
          if ($6_1 >>> 0 > 50 >>> 0) {
           break label$5
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = HEAP32[(($6_1 << 2 | 0) + 84640 | 0) >> 2] | 0;
          $6_1 = 0;
          continue label$18;
         };
        }
        label$30 : while (1) {
         label$31 : {
          switch ($6_1 | 0) {
          case 0:
           if (!$3_1) {
            break label$1
           }
           label$33 : {
            label$34 : while (1) {
             label$35 : {
              label$36 : {
               label$37 : {
                $6_1 = HEAPU8[$4_1 >> 0] | 0;
                $7_1 = $6_1 + -1 | 0;
                if ($7_1 >>> 0 <= 126 >>> 0) {
                 break label$37
                }
                $5_1 = $6_1;
                break label$36;
               }
               if ($4_1 & 3 | 0) {
                break label$35
               }
               if ($3_1 >>> 0 < 5 >>> 0) {
                break label$35
               }
               label$38 : {
                label$39 : while (1) {
                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                 if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                  break label$38
                 }
                 HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                 HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                 $0_1 = $0_1 + 16 | 0;
                 $4_1 = $4_1 + 4 | 0;
                 $3_1 = $3_1 + -4 | 0;
                 if ($3_1 >>> 0 > 4 >>> 0) {
                  continue label$39
                 }
                 break label$39;
                };
                $5_1 = HEAPU8[$4_1 >> 0] | 0;
               }
               $6_1 = $5_1 & 255 | 0;
               $7_1 = $6_1 + -1 | 0;
              }
              if ($7_1 >>> 0 > 126 >>> 0) {
               break label$33
              }
             }
             HEAP32[$0_1 >> 2] = $6_1;
             $0_1 = $0_1 + 4 | 0;
             $4_1 = $4_1 + 1 | 0;
             $3_1 = $3_1 + -1 | 0;
             if (!$3_1) {
              break label$1
             }
             continue label$34;
            };
           }
           $6_1 = $6_1 + -194 | 0;
           if ($6_1 >>> 0 > 50 >>> 0) {
            break label$5
           }
           $4_1 = $4_1 + 1 | 0;
           $5_1 = HEAP32[(($6_1 << 2 | 0) + 84640 | 0) >> 2] | 0;
           $6_1 = 1;
           continue label$30;
          default:
           break label$31;
          };
         }
         $7_1 = HEAPU8[$4_1 >> 0] | 0;
         $6_1 = $7_1 >>> 3 | 0;
         if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
          break label$6
         }
         $8_1 = $4_1 + 1 | 0;
         label$40 : {
          label$41 : {
           label$42 : {
            label$43 : {
             $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$43
             }
             $4_1 = $8_1;
             break label$42;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$41
            }
            $8_1 = $4_1 + 2 | 0;
            label$44 : {
             $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$44
             }
             $4_1 = $8_1;
             break label$42;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$41
            }
            $4_1 = $4_1 + 3 | 0;
            $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $6_1;
           $3_1 = $3_1 + -1 | 0;
           $0_1 = $0_1 + 4 | 0;
           break label$40;
          }
          HEAP32[($412() | 0) >> 2] = 25;
          $4_1 = $4_1 + -1 | 0;
          break label$3;
         }
         $6_1 = 0;
         continue label$30;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break label$4
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break label$4
      }
      label$45 : {
       if (!$0_1) {
        break label$45
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($412() | 0) >> 2] = 25;
     if (!$0_1) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $925($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $7_1 = 0, $10_1 = 0, $67_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $3_1 = $0_1 ? $3_1 : 256;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$6_1) {
      break label$3
     }
     if (!$3_1) {
      break label$3
     }
     label$4 : while (1) {
      $9_1 = $2_1 >>> 2 | 0;
      label$5 : {
       if ($2_1 >>> 0 > 131 >>> 0) {
        break label$5
       }
       if ($9_1 >>> 0 < $3_1 >>> 0) {
        break label$2
       }
      }
      label$6 : {
       $9_1 = $924($7_1 | 0, $5_1 + 12 | 0 | 0, ($9_1 >>> 0 < $3_1 >>> 0 ? $9_1 : $3_1) | 0, $4_1 | 0) | 0;
       if (($9_1 | 0) != (-1 | 0)) {
        break label$6
       }
       $8_1 = -1;
       $3_1 = 0;
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       break label$3;
      }
      $10_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0) ? 0 : $9_1;
      $3_1 = $3_1 - $10_1 | 0;
      $7_1 = $7_1 + ($10_1 << 2 | 0) | 0;
      $67_1 = $2_1 + $6_1 | 0;
      $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      $2_1 = $6_1 ? $67_1 - $6_1 | 0 : 0;
      $8_1 = $9_1 + $8_1 | 0;
      if (!$6_1) {
       break label$3
      }
      if ($3_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$6_1) {
     break label$1
    }
   }
   if (!$3_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $9_1 = $8_1;
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      label$10 : {
       $8_1 = $880($7_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
       if (($8_1 + 2 | 0) >>> 0 > 2 >>> 0) {
        break label$10
       }
       label$11 : {
        switch ($8_1 + 1 | 0 | 0) {
        case 1:
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
         break label$9;
        case 0:
         break label$1;
        default:
         break label$11;
        };
       }
       HEAP32[$4_1 >> 2] = 0;
       break label$9;
      }
      $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $8_1 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
      $9_1 = $9_1 + 1 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       break label$8
      }
     }
     $8_1 = $9_1;
     break label$1;
    }
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 - $8_1 | 0;
    $8_1 = $9_1;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  label$13 : {
   if (!$0_1) {
    break label$13
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $8_1 | 0;
 }
 
 function $926($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    $4_1 = $0_1 ? $0_1 : $3_1 + 12 | 0;
    label$4 : {
     $0_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = $0_1 << 24 >> 24;
     if (($5_1 | 0) < (0 | 0)) {
      break label$4
     }
     HEAP32[$4_1 >> 2] = $0_1;
     $1_1 = ($5_1 | 0) != (0 | 0);
     break label$1;
    }
    label$5 : {
     if (HEAP32[(HEAP32[(($786() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
      break label$5
     }
     HEAP32[$4_1 >> 2] = $5_1 & 57343 | 0;
     $1_1 = 1;
     break label$1;
    }
    $0_1 = $0_1 + -194 | 0;
    if ($0_1 >>> 0 > 50 >>> 0) {
     break label$3
    }
    $0_1 = HEAP32[(($0_1 << 2 | 0) + 84640 | 0) >> 2] | 0;
    label$6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break label$6
     }
     if (($0_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break label$3
     }
    }
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $5_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($0_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$7 : {
     $0_1 = $5_1 + -128 | 0 | ($0_1 << 6 | 0) | 0;
     if (($0_1 | 0) < (0 | 0)) {
      break label$7
     }
     HEAP32[$4_1 >> 2] = $0_1;
     $1_1 = 2;
     break label$1;
    }
    $2_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($2_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    label$8 : {
     $0_1 = $2_1 | ($0_1 << 6 | 0) | 0;
     if (($0_1 | 0) < (0 | 0)) {
      break label$8
     }
     HEAP32[$4_1 >> 2] = $0_1;
     $1_1 = 3;
     break label$1;
    }
    $1_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($1_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = $1_1 | ($0_1 << 6 | 0) | 0;
    $1_1 = 4;
    break label$1;
   }
   HEAP32[($412() | 0) >> 2] = 25;
   $1_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $927() {
  return (HEAP32[(HEAP32[(($786() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $928($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $880(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 101196) | 0) | 0 | 0;
 }
 
 function $929($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $786() | 0;
  $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[($1_1 + 96 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 97348 : $0_1;
  }
  return (($2_1 | 0) == (97348 | 0) ? -1 : $2_1) | 0;
 }
 
 function $930($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $931($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $14$hi;
  $3_1 = Math_fround($878($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $931($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  i64toi32_i32$0 = 0;
  $850($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $873($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $1_1 + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 60 | 0) >> 2] | 0) | 0) | 0;
  }
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $932($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $931($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $14$hi;
  $3_1 = +$879($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $933($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $4$hi = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $931($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $934($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($930($0_1 | 0, $1_1 | 0)));
 }
 
 function $935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$932($0_1 | 0, $1_1 | 0));
 }
 
 function $936($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $933($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $937($0_1) {
  $0_1 = $0_1 | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  return $1967($0_1 | 0) | 0 | 0;
 }
 
 function $939($0_1) {
  $0_1 = $0_1 | 0;
  $937($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $940($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = $1_1 + ($4_1 - $3_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $6_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $7_1 = HEAP8[$1_1 >> 0] | 0;
     $8_1 = HEAP8[$3_1 >> 0] | 0;
     if (($7_1 | 0) < ($8_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($8_1 | 0) >= ($7_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$3;
    };
   }
   $6_1 = ($5_1 | 0) != ($2_1 | 0);
  }
  return $6_1 | 0;
 }
 
 function $941($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $942($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $942($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $3($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $943($0_1 | 0, $1_1 | 0, $2_1 | 0);
  $5($0_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $943($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1723($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($741($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($742($4_1 | 0) | 0)) {
      break label$3
     }
     $297($0_1 | 0, $4_1 | 0);
     $5_1 = $298($0_1 | 0) | 0;
     break label$2;
    }
    $744($3_1 + 8 | 0 | 0, $292($0_1 | 0) | 0 | 0, ($743($4_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $745($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $746($0_1 | 0, $5_1 | 0);
    $747($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $748($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $299($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $299($5_1 | 0, $3_1 + 7 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $749($0_1 | 0);
  wasm2js_trap();
 }
 
 function $944($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $945($0_1) {
  $0_1 = $0_1 | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $946($0_1) {
  $0_1 = $0_1 | 0;
  $945($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $947($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $948($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $949($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $949($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $950($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $951($0_1 | 0, $1_1 | 0, $2_1 | 0);
  $952($0_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $950($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1726($1725($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $951($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1727($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1728($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1729($4_1 | 0) | 0)) {
      break label$3
     }
     $1327($0_1 | 0, $4_1 | 0);
     $5_1 = $1326($0_1 | 0) | 0;
     break label$2;
    }
    $1731($3_1 + 8 | 0 | 0, $1332($0_1 | 0) | 0 | 0, ($1730($4_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1732($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1733($0_1 | 0, $5_1 | 0);
    $1734($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1325($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1324($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $1324($5_1 | 0, $3_1 + 4 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1735($0_1 | 0);
  wasm2js_trap();
 }
 
 function $952($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $953($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $954($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($316($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $771($6_1 | 0, $3_1 | 0);
   $1_1 = $329($6_1 | 0) | 0;
   $1537($6_1 | 0) | 0;
   $771($6_1 | 0, $3_1 | 0);
   $3_1 = $955($6_1 | 0) | 0;
   $1537($6_1 | 0) | 0;
   $956($6_1 | 0, $3_1 | 0);
   $957($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($958($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1989($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $955($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101460 | 0) | 0 | 0;
 }
 
 function $956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $957($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $958($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $960($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 166;
  $9_1 = 0;
  $10_1 = $961($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $483($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $962($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        label$8 : {
         if ($541($0_1 | 0, $7_1 + 120 | 0 | 0) | 0) {
          break label$8
         }
         if ($8_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($541($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $332($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $963($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $333($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($52($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAPU8[($964($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $963($4_1 | 0, $17_1 << 24 >> 24 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 & 255 | 0 | 0) != ($17_1 & 255 | 0 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($52($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $965($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($966($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1976();
  wasm2js_trap();
 }
 
 function $959($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1510(HEAP32[$0_1 >> 2] | 0 | 0, $1477($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $960($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1939($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $961($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1934($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1935($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1935($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1936($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $963($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $964($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($51($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $965($0_1) {
  $0_1 = $0_1 | 0;
  $962($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $966($0_1) {
  $0_1 = $0_1 | 0;
  return !($52($0_1 | 0) | 0) | 0;
 }
 
 function $967($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $968($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $968($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $970($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $971($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($973($332($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $974($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    $0_1 = ($316($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if (($0_1 | 0) != (64 | 0)) {
      break label$3
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break label$1
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $970($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1049($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $971($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $771($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $955($3_1 + 8 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $1046($1_1 | 0) | 0;
  $1047($0_1 | 0, $1_1 | 0);
  $1537($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $972($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($326($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $973($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      $12_1 = $0_1 & 255 | 0;
      if ((HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0) == ($12_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0) != ($12_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($52($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($1006($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (22 | 0)) {
      break label$6
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[(88624 + $9_1 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[(88624 + $9_1 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $974($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0, $44_1 = 0, $44$hi = 0, $48_1 = 0, $48$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = $412() | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       i64toi32_i32$0 = $1940($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1004() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[$5_1 >> 2] = $6_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     $0_1 = 0;
     break label$1;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$0 = $1941() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $44_1 = i64toi32_i32$0;
    $44$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$3 = $44_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $17_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $18_1 = 0
      } else {
       $18_1 = 1
      }
      $19_1 = $18_1;
     } else {
      $19_1 = 0
     }
     $17_1 = $19_1;
    }
    if ($17_1) {
     break label$2
    }
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $547() | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $48_1 = i64toi32_i32$1;
    $48$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = $48$hi;
    i64toi32_i32$0 = $48_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $20_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $21_1 = 0
      } else {
       $21_1 = 1
      }
      $22_1 = $21_1;
     } else {
      $22_1 = 0
     }
     $20_1 = $22_1;
    }
    if ($20_1) {
     break label$2
    }
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $7$hi;
    $0_1 = $7_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    if (($7$hi | 0) < (i64toi32_i32$2 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break label$8
    }
    $0_1 = $547() | 0;
    break label$1;
   }
   $0_1 = $1941() | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $975($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = $52($0_1 | 0) | 0;
  label$1 : {
   if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
    break label$1
   }
   if (!$4_1) {
    break label$1
   }
   $1299($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $51($0_1 | 0) | 0;
   $5_1 = $2_1 + ($52($0_1 | 0) | 0) | 0;
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $0_1 = HEAP8[$2_1 >> 0] | 0;
      if ($1_1 >>> 0 >= $4_1 >>> 0) {
       break label$3
      }
      label$5 : {
       if (($0_1 | 0) < (1 | 0)) {
        break label$5
       }
       if (($0_1 | 0) >= ($1190() | 0 | 0)) {
        break label$5
       }
       if ((HEAP32[$1_1 >> 2] | 0 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
        break label$2
       }
      }
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + (($5_1 - $2_1 | 0 | 0) > (1 | 0)) | 0;
      continue label$4;
     };
    }
    if (($0_1 | 0) < (1 | 0)) {
     break label$1
    }
    if (($0_1 | 0) >= ($1190() | 0 | 0)) {
     break label$1
    }
    if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $976($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $977($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $977($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $970($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $971($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($973($332($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $978($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $978($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $6_1 = 0, $43_1 = 0, $43$hi = 0, $45$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = $412() | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       i64toi32_i32$0 = $1940($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1004() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[$5_1 >> 2] = $6_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     i64toi32_i32$1 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $1943() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $43_1 = i64toi32_i32$1;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = $43$hi;
    i64toi32_i32$3 = $43_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$2
    }
    i64toi32_i32$2 = $1944() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $45$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = $45$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    if ((i64toi32_i32$0 | 0) > ($7$hi | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$8
    }
    i64toi32_i32$1 = $1944() | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $1943() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $979($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $980($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $980($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $970($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $971($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($973($332($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $981($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $981($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = $412() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $1947($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1004() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1948() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1948() | 0;
    break label$1;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $982($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $983($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $983($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $970($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $971($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($973($332($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $984($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $984($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = $412() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $1947($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1004() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1374() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1374() | 0;
    break label$1;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $985($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $986($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $986($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $970($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $971($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($973($332($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $987($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $987($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = $412() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $1947($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1004() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($752() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $752() | 0;
    break label$1;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $988($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $989($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $989($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $970($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $971($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($973($332($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $990($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $990($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $7_1 = 0, $53$hi = 0, $59$hi = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = $412() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $1947($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $1004() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $1950() | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $53$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $53$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$3 = $8_1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $8_1 >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    i64toi32_i32$2 = $1950() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $8_1 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $8$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $59$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
   i64toi32_i32$5 = $59$hi;
   $17_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ? $17_1 : i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $8$hi;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $991($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $992($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $992($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $993($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $2_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
  $1_1 = $972($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($52($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $52($2_1 | 0) | 0;
     $646($2_1 | 0, ($52($2_1 | 0) | 0) << 1 | 0 | 0);
     $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
     $1_1 = $972($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($994($332($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($995($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($2_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $993($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $771($5_1 + 8 | 0 | 0, $1_1 | 0);
  $1003($329($5_1 + 8 | 0 | 0) | 0 | 0, 88624 | 0, 88624 + 32 | 0 | 0, $2_1 | 0) | 0;
  $1_1 = $955($5_1 + 8 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $1045($1_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $1046($1_1 | 0) | 0;
  $1047($0_1 | 0, $1_1 | 0);
  $1537($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $994($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($52($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($52($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($1048($11_1 | 0, $11_1 + 32 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (31 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[(88624 + $11_1 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      switch (($11_1 & -2 | 0) + -22 | 0 | 0) {
      case 2:
       label$9 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      case 0:
       HEAP8[$2_1 >> 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0_1 = $5_1 & 95 | 0;
     if (($0_1 | 0) != (HEAPU8[$2_1 >> 0] | 0 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($52($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (21 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $995($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $4_1 = $412() | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = 0;
      $6_1 = Math_fround($1952($0_1 | 0, $3_1 + 12 | 0 | 0));
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      if (!$0_1) {
       break label$3
      }
      $7_1 = Math_fround(0.0);
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$2
      }
      $7_1 = $6_1;
      if (($0_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$2_1 >> 2] = 4;
     $6_1 = Math_fround(0.0);
     break label$1;
    }
    HEAP32[$4_1 >> 2] = $5_1;
    $7_1 = Math_fround(0.0);
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $6_1 = $7_1;
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($6_1);
 }
 
 function $996($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $997($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $997($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $993($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $2_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
  $1_1 = $972($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($52($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $52($2_1 | 0) | 0;
     $646($2_1 | 0, ($52($2_1 | 0) | 0) << 1 | 0 | 0);
     $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
     $1_1 = $972($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($994($332($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$998($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($2_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $998($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0.0, $7_1 = 0.0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $4_1 = $412() | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = 0;
      $6_1 = +$1953($0_1 | 0, $3_1 + 12 | 0 | 0);
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      if (!$0_1) {
       break label$3
      }
      $7_1 = 0.0;
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$2
      }
      $7_1 = $6_1;
      if (($0_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$2_1 >> 2] = 4;
     $6_1 = 0.0;
     break label$1;
    }
    HEAP32[$4_1 >> 2] = $5_1;
    $7_1 = 0.0;
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $6_1 = $7_1;
  }
  global$0 = $3_1 + 16 | 0;
  return +$6_1;
 }
 
 function $999($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1000($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1000($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $126_1 = 0;
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 280 | 0) >> 2] = $1_1;
  $993($6_1 + 224 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 239 | 0 | 0, $6_1 + 238 | 0 | 0);
  $2_1 = $57($6_1 + 208 | 0 | 0) | 0;
  $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
  $1_1 = $972($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($52($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $52($2_1 | 0) | 0;
     $646($2_1 | 0, ($52($2_1 | 0) | 0) << 1 | 0 | 0);
     $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
     $1_1 = $972($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 204 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($994($332($6_1 + 280 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP8[($6_1 + 239 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 238 | 0) >> 0] | 0 | 0, $6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 280 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 224 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $1001($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $975($6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($541($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
  $1989($2_1 | 0) | 0;
  $1989($6_1 + 224 | 0 | 0) | 0;
  global$0 = $6_1 + 288 | 0;
  return $1_1 | 0;
 }
 
 function $1001($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, i64toi32_i32$2 = 0, $9_1 = 0, $9$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      $5_1 = $412() | 0;
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = 0;
      $1954($4_1 + 8 | 0 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
      i64toi32_i32$2 = $4_1 + 16 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$0;
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$1_1) {
       break label$3
      }
      i64toi32_i32$0 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$2
      }
      i64toi32_i32$0 = $8$hi;
      $9_1 = $8_1;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      $10_1 = $7_1;
      $10$hi = i64toi32_i32$0;
      if (($1_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$3_1 >> 2] = 4;
     i64toi32_i32$0 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$0;
     break label$1;
    }
    HEAP32[$5_1 >> 2] = $6_1;
    i64toi32_i32$0 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = 4;
   i64toi32_i32$0 = $9$hi;
   $8_1 = $9_1;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   $7_1 = $10_1;
   $7$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1002($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $7_1 = $57($6_1 + 208 | 0 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $3_1 | 0);
  $1003($329($6_1 + 16 | 0 | 0) | 0 | 0, 88624 | 0, 88624 + 26 | 0 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
  $1_1 = $972($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($52($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $52($2_1 | 0) | 0;
     $646($2_1 | 0, ($52($2_1 | 0) | 0) << 1 | 0 | 0);
     $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
     $1_1 = $972($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($973($332($6_1 + 264 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $333($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $646($2_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $63($2_1 | 0) | 0;
  $3_1 = $1004() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($1005($1_1 | 0, $3_1 | 0, 66662 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($541($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1989($2_1 | 0) | 0;
  $1989($7_1 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $1003($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1004() {
  var $0_1 = 0;
  label$1 : {
   if (!(HEAPU8[(0 + 101364 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101360 | 0) >> 2] | 0 | 0;
  }
  $0_1 = $893(2147483647 | 0, 68343 | 0, 0 | 0) | 0;
  HEAP8[(0 + 101364 | 0) >> 0] = 1;
  HEAP32[(0 + 101360 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1005($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $3_1 = $1007($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $1_1 = $886($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1008($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1006($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $929(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1008($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $929($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1009($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($316($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $771($6_1 | 0, $3_1 | 0);
   $1_1 = $602($6_1 | 0) | 0;
   $1537($6_1 | 0) | 0;
   $771($6_1 | 0, $3_1 | 0);
   $3_1 = $1010($6_1 | 0) | 0;
   $1537($6_1 | 0) | 0;
   $1011($6_1 | 0, $3_1 | 0);
   $1012($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($1013($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $2007($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1010($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101468 | 0) | 0 | 0;
 }
 
 function $1011($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1012($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1013($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $1014($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 166;
  $9_1 = 0;
  $10_1 = $961($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $483($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $962($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        label$8 : {
         if ($603($0_1 | 0, $7_1 + 120 | 0 | 0) | 0) {
          break label$8
         }
         if ($8_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($603($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $604($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $1015($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $606($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($1016($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAP32[($1017($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $1015($4_1 | 0, $17_1 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 | 0) != ($17_1 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($1016($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $965($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($1018($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1014($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1955($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1015($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1016($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1153($0_1 | 0) | 0)) {
    break label$1
   }
   return $1154($0_1 | 0) | 0 | 0;
  }
  return $1155($0_1 | 0) | 0 | 0;
 }
 
 function $1017($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1151($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1018($0_1) {
  $0_1 = $0_1 | 0;
  return !($1016($0_1 | 0) | 0) | 0;
 }
 
 function $1019($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1020($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1020($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $1021($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1022($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1023($604($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $974($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $2_1 | 0;
 }
 
 function $1021($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1054($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1022($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $771($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $1010($3_1 + 8 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $1051($1_1 | 0) | 0;
  $1052($0_1 | 0, $1_1 | 0);
  $1537($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1023($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      if ((HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($52($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($1044($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (92 | 0)) {
     break label$1
    }
    $6_1 = $9_1 >> 2 | 0;
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($6_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (88 | 0)) {
      break label$6
     }
     $9_1 = HEAP32[$3_1 >> 2] | 0;
     if (($9_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($9_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($9_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $9_1 + 1 | 0;
     HEAP8[$9_1 >> 0] = HEAPU8[(88624 + $6_1 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[(88624 + $6_1 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1024($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1025($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1025($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $1021($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1022($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1023($604($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $978($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $2_1 | 0;
 }
 
 function $1026($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1027($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1027($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $1021($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1022($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1023($604($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $981($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $2_1 | 0;
 }
 
 function $1028($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1029($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1029($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $1021($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1022($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1023($604($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $984($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $2_1 | 0;
 }
 
 function $1030($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1031($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1031($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $1021($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1022($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1023($604($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $987($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $2_1 | 0;
 }
 
 function $1032($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1033($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1033($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $969($3_1 | 0) | 0;
  $0_1 = $1021($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1022($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
  $2_1 = $972($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($2_1 + ($52($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $52($3_1 | 0) | 0;
     $646($3_1 | 0, ($52($3_1 | 0) | 0) << 1 | 0 | 0);
     $646($3_1 | 0, $645($3_1 | 0) | 0 | 0);
     $2_1 = $972($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($1023($604($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $990($2_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $975($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1989($3_1 | 0) | 0;
  $1989($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $2_1 | 0;
 }
 
 function $1034($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1035($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1035($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $1036($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $2_1 = $57($6_1 + 184 | 0 | 0) | 0;
  $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
  $1_1 = $972($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($52($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $52($2_1 | 0) | 0;
     $646($2_1 | 0, ($52($2_1 | 0) | 0) << 1 | 0 | 0);
     $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
     $1_1 = $972($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1037($604($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($995($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $975($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1989($2_1 | 0) | 0;
  $1989($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $1036($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $771($5_1 + 8 | 0 | 0, $1_1 | 0);
  $1043($602($5_1 + 8 | 0 | 0) | 0 | 0, 88624 | 0, 88624 + 32 | 0 | 0, $2_1 | 0) | 0;
  $1_1 = $1010($5_1 + 8 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $1050($1_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $1051($1_1 | 0) | 0;
  $1052($0_1 | 0, $1_1 | 0);
  $1537($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1037($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($52($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $1_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($52($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($1053($11_1 | 0, $11_1 + 128 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (124 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[(88624 + ($11_1 >> 2 | 0) | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      label$7 : {
       $0_1 = $11_1 & -5 | 0;
       if (($0_1 | 0) == (88 | 0)) {
        break label$7
       }
       if (($0_1 | 0) != (96 | 0)) {
        break label$6
       }
       label$8 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$8
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = 80;
      break label$5;
     }
     $0_1 = $5_1 & 95 | 0;
     if (($0_1 | 0) != (HEAPU8[$2_1 >> 0] | 0 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($52($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (84 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1038($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1039($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1039($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $1036($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $2_1 = $57($6_1 + 184 | 0 | 0) | 0;
  $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
  $1_1 = $972($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($52($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $52($2_1 | 0) | 0;
     $646($2_1 | 0, ($52($2_1 | 0) | 0) << 1 | 0 | 0);
     $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
     $1_1 = $972($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1037($604($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$998($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $975($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1989($2_1 | 0) | 0;
  $1989($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $1040($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1041($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $1041($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $126_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 368 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $1_1;
  $1036($6_1 + 216 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $2_1 = $57($6_1 + 200 | 0 | 0) | 0;
  $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
  $1_1 = $972($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0) != ($1_1 + ($52($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $52($2_1 | 0) | 0;
     $646($2_1 | 0, ($52($2_1 | 0) | 0) << 1 | 0 | 0);
     $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
     $1_1 = $972($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 196 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1037($604($6_1 + 376 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 196 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 376 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($52($6_1 + 216 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $1001($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $975($6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($603($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 376 | 0) >> 2] | 0;
  $1989($2_1 | 0) | 0;
  $1989($6_1 + 216 | 0 | 0) | 0;
  global$0 = $6_1 + 384 | 0;
  return $1_1 | 0;
 }
 
 function $1042($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $7_1 = $57($6_1 + 208 | 0 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $3_1 | 0);
  $1043($602($6_1 + 16 | 0 | 0) | 0 | 0, 88624 | 0, 88624 + 26 | 0 | 0, $6_1 + 224 | 0 | 0) | 0;
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $57($6_1 + 192 | 0 | 0) | 0;
  $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
  $1_1 = $972($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if ($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($52($2_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $3_1 = $52($2_1 | 0) | 0;
     $646($2_1 | 0, ($52($2_1 | 0) | 0) << 1 | 0 | 0);
     $646($2_1 | 0, $645($2_1 | 0) | 0 | 0);
     $1_1 = $972($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($1023($604($6_1 + 344 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $606($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $646($2_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $63($2_1 | 0) | 0;
  $3_1 = $1004() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($1005($1_1 | 0, $3_1 | 0, 66662 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($603($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1989($2_1 | 0) | 0;
  $1989($7_1 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $1_1 | 0;
 }
 
 function $1043($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1044($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1045($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1046($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1047($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1048($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1049($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 88624 | 0;
 }
 
 function $1050($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1051($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1052($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1053($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1054($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $771($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1043($602($3_1 + 8 | 0 | 0) | 0 | 0, 88624 | 0, 88624 + 26 | 0 | 0, $2_1 | 0) | 0;
  $1537($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1055($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($316($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $771($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $955($5_1 + 24 | 0 | 0) | 0;
   $1537($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $956($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $957($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $1056($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1057($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($1058($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1989($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP8[($1059($5_1 + 16 | 0 | 0) | 0) >> 0] | 0;
    $561($560($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1060($5_1 + 16 | 0 | 0) | 0;
    $562($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1056($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1061($1_1 + 8 | 0 | 0, $0_1 | 0, $326($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1057($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1061($1_1 + 8 | 0 | 0, $0_1 | 0, ($326($0_1 | 0) | 0) + ($52($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1058($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1062($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1059($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1060($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1061($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1062($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1288($0_1 | 0) | 0 | 0) == ($1288($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1063($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1064($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 67017 | 0) | 0 | 0;
 }
 
 function $1064($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = 37;
  HEAP32[($6_1 + 76 | 0) >> 2] = 0;
  $1065($6_1 + 72 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $316($2_1 | 0) | 0 | 0);
  $5_1 = $1004() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 59 | 0) + ($1066($6_1 + 59 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 72 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1067($6_1 + 59 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $2_1 | 0);
  $1068($6_1 + 59 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 16 | 0 | 0);
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $318($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 80 | 0;
  return $2_1 | 0;
 }
 
 function $1065($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (!($3_1 & 2048 | 0)) {
    break label$1
   }
   $4_1 = $3_1 & 74 | 0;
   if (($4_1 | 0) == (8 | 0)) {
    break label$1
   }
   if (($4_1 | 0) == (64 | 0)) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($3_1 & 512 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break label$6
    }
    $1_1 = 111;
    break label$5;
   }
   label$7 : {
    if (($1_1 | 0) != (8 | 0)) {
     break label$7
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break label$5;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $1066($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $4_1 = $1007($5_1 | 0, $5_1 + 12 | 0 | 0) | 0;
  $2_1 = $912($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1008($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1067($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = ($316($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break label$1
   }
   return $1_1 | 0;
  }
  label$2 : {
   if (($2_1 | 0) != (16 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     switch ($2_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break label$2
   }
   if (($2_1 | 0) != (48 | 0)) {
    break label$2
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break label$2
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1068($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $329($6_1 | 0) | 0;
  $6_1 = $955($6_1 | 0) | 0;
  $1047($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($966($7_1 | 0) | 0)) {
     break label$2
    }
    $1003($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $330($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $330($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $10_1 = $330($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1117($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1046($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $1117($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($972($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($972($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
     HEAP8[$10_1 >> 0] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($52($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $330($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $1989($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1069($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1070($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66988 | 0) | 0 | 0;
 }
 
 function $1070($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 37;
  HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  $1065($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $316($2_1 | 0) | 0 | 0);
  $5_1 = $1004() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 80 | 0) + ($1066($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1067($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $2_1 | 0);
  $1068($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 16 | 0 | 0);
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $318($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $1071($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1072($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 67017 | 0) | 0 | 0;
 }
 
 function $1072($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = 37;
  HEAP32[($6_1 + 76 | 0) >> 2] = 0;
  $1065($6_1 + 72 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $316($2_1 | 0) | 0 | 0);
  $5_1 = $1004() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 59 | 0) + ($1066($6_1 + 59 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 72 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1067($6_1 + 59 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $2_1 | 0);
  $1068($6_1 + 59 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 16 | 0 | 0);
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $318($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 80 | 0;
  return $2_1 | 0;
 }
 
 function $1073($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1074($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66988 | 0) | 0 | 0;
 }
 
 function $1074($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 37;
  HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  $1065($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $316($2_1 | 0) | 0 | 0);
  $5_1 = $1004() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 80 | 0) + ($1066($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1067($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $2_1 | 0);
  $1068($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 16 | 0 | 0);
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $318($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $1075($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return $1076($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 69625 | 0) | 0 | 0;
 }
 
 function $1076($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 208 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 200 | 0) >> 2] = 37;
  HEAP32[($6_1 + 204 | 0) >> 2] = 0;
  $7_1 = $1077($6_1 + 200 | 0 | 1 | 0 | 0, $5_1 | 0, $316($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 156 | 0) >> 2] = $6_1 + 160 | 0;
  $5_1 = $1004() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $8_1 = $1078($2_1 | 0) | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
    $5_1 = $1066($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
   $5_1 = $1066($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 80 | 0) >> 2] = 166;
  $9_1 = $1079($6_1 + 144 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  $10_1 = $6_1 + 160 | 0;
  $8_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($5_1 | 0) < (30 | 0)) {
     break label$4
    }
    $5_1 = $1004() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $8_1 = $1078($2_1 | 0) | 0;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$6_1 >> 2] = $8_1;
      $5_1 = $1080($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
     $5_1 = $1080($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    }
    if (($5_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $1081($9_1 | 0, HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
   }
   $7_1 = $8_1 + $5_1 | 0;
   $11_1 = $1067($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = 166;
   $8_1 = $1079($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) != ($6_1 + 160 | 0 | 0)) {
      break label$8
     }
     $5_1 = $6_1 + 80 | 0;
     break label$7;
    }
    $5_1 = $483($5_1 << 1 | 0 | 0) | 0;
    if (!$5_1) {
     break label$3
    }
    $1081($8_1 | 0, $5_1 | 0);
    $10_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
   }
   $771($6_1 + 56 | 0 | 0, $2_1 | 0);
   $1082($10_1 | 0, $11_1 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 56 | 0 | 0);
   $1537($6_1 + 56 | 0 | 0) | 0;
   $2_1 = $318($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1083($8_1 | 0) | 0;
   $1083($9_1 | 0) | 0;
   global$0 = $6_1 + 208 | 0;
   return $2_1 | 0;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1077($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($2_1 & 1024 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   $3_1 = $2_1 & 260 | 0;
   if (($3_1 | 0) == (260 | 0)) {
    break label$3
   }
   $5_1 = 10798;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
  }
  $4_1 = $2_1 & 16384 | 0;
  label$4 : {
   label$5 : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break label$4
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (($3_1 | 0) == (256 | 0)) {
      break label$8
     }
     if (($3_1 | 0) != (4 | 0)) {
      break label$7
     }
     $1_1 = $4_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $4_1 ? 69 : 101;
    break label$6;
   }
   label$9 : {
    if (($3_1 | 0) != (260 | 0)) {
     break label$9
    }
    $1_1 = $4_1 ? 65 : 97;
    break label$6;
   }
   $1_1 = $4_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return ($3_1 | 0) != (260 | 0) | 0;
 }
 
 function $1078($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1079($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1243($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1080($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $3_1 = $1007($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $1_1 = $918($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $1008($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1081($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1260($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1260($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1261($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1082($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $329($6_1 | 0) | 0;
  $9_1 = $955($6_1 | 0) | 0;
  $1047($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $330($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $330($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $330($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($915(HEAP8[$6_1 >> 0] | 0 | 0, $1004() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($853(HEAP8[$6_1 >> 0] | 0 | 0, $1004() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($966($7_1 | 0) | 0)) {
     break label$8
    }
    $1003($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break label$7;
   }
   $1117($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1046($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $1117($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($972($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($972($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($52($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $330($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : while (1) {
   label$13 : {
    label$14 : {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$14
     }
     $11_1 = HEAPU8[$6_1 >> 0] | 0;
     if (($11_1 | 0) != (46 | 0)) {
      break label$13
     }
     $11_1 = $1045($9_1 | 0) | 0;
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $11_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $1003($8_1 | 0, $6_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $6_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $1989($7_1 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $11_1 = $330($8_1 | 0, $11_1 << 24 >> 24 | 0) | 0;
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
   HEAP8[$12_1 >> 0] = $11_1;
   $6_1 = $6_1 + 1 | 0;
   continue label$12;
  };
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  $1081($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1084($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $4$hi;
  return $1085($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 68222 | 0) | 0 | 0;
 }
 
 function $1085($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0;
  $7_1 = global$0 - 256 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 248 | 0) >> 2] = 37;
  HEAP32[($7_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $1077($7_1 + 248 | 0 | 1 | 0 | 0, $6_1 | 0, $316($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($7_1 + 204 | 0) >> 2] = $7_1 + 208 | 0;
  $6_1 = $1004() | 0;
  label$1 : {
   label$2 : {
    if (!$8_1) {
     break label$2
    }
    $9_1 = $1078($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
    $6_1 = $1066($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $1066($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = 166;
  $10_1 = $1079($7_1 + 192 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
  $11_1 = $7_1 + 208 | 0;
  $9_1 = $11_1;
  label$3 : {
   label$4 : {
    if (($6_1 | 0) < (30 | 0)) {
     break label$4
    }
    $6_1 = $1004() | 0;
    label$5 : {
     label$6 : {
      if (!$8_1) {
       break label$6
      }
      $9_1 = $1078($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = $9_1;
      $6_1 = $1080($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $1080($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
    }
    if (($6_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $1081($10_1 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
   }
   $8_1 = $9_1 + $6_1 | 0;
   $12_1 = $1067($9_1 | 0, $8_1 | 0, $2_1 | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = 166;
   $9_1 = $1079($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) != ($7_1 + 208 | 0 | 0)) {
      break label$8
     }
     $6_1 = $7_1 + 128 | 0;
     break label$7;
    }
    $6_1 = $483($6_1 << 1 | 0 | 0) | 0;
    if (!$6_1) {
     break label$3
    }
    $1081($9_1 | 0, $6_1 | 0);
    $11_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
   }
   $771($7_1 + 104 | 0 | 0, $2_1 | 0);
   $1082($11_1 | 0, $12_1 | 0, $8_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 104 | 0 | 0);
   $1537($7_1 + 104 | 0 | 0) | 0;
   $2_1 = $318($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1083($9_1 | 0) | 0;
   $1083($10_1 | 0) | 0;
   global$0 = $7_1 + 256 | 0;
   return $2_1 | 0;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1086($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $6_1 = $1004() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1066($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, 66662 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $1067($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $771($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $329($5_1 + 16 | 0 | 0) | 0;
  $1537($5_1 + 16 | 0 | 0) | 0;
  $1003($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $318($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $1087($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($316($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $771($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $1010($5_1 + 24 | 0 | 0) | 0;
   $1537($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $1011($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $1012($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $1088($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1089($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($1090($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $2007($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP32[($1091($5_1 + 16 | 0 | 0) | 0) >> 2] | 0;
    $624($623($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1092($5_1 + 16 | 0 | 0) | 0;
    $625($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1088($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1094($1_1 + 8 | 0 | 0, $0_1 | 0, $1093($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1089($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1094($1_1 + 8 | 0 | 0, $0_1 | 0, ($1093($0_1 | 0) | 0) + (($1016($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1090($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1095($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1091($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1092($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1093($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1153($0_1 | 0) | 0)) {
    break label$1
   }
   return $1323($0_1 | 0) | 0 | 0;
  }
  return $1326($0_1 | 0) | 0 | 0;
 }
 
 function $1094($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1095($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1354($0_1 | 0) | 0 | 0) == ($1354($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1096($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1097($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 67017 | 0) | 0 | 0;
 }
 
 function $1097($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 152 | 0) >> 2] = 37;
  HEAP32[($6_1 + 156 | 0) >> 2] = 0;
  $1065($6_1 + 152 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $316($2_1 | 0) | 0 | 0);
  $5_1 = $1004() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 139 | 0) + ($1066($6_1 + 139 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 152 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1067($6_1 + 139 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $2_1 | 0);
  $1098($6_1 + 139 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 16 | 0 | 0);
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $1099($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 160 | 0;
  return $2_1 | 0;
 }
 
 function $1098($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $602($6_1 | 0) | 0;
  $6_1 = $1010($6_1 | 0) | 0;
  $1052($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($966($7_1 | 0) | 0)) {
     break label$2
    }
    $1043($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $764($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $764($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $10_1 = $764($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1117($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1051($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $1119($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($972($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($972($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
     HEAP32[$10_1 >> 2] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($52($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $764($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1989($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1099($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   $8_1 = $320($4_1 | 0) | 0;
   $7_1 = 0;
   label$3 : {
    $9_1 = $2_1 - $1_1 | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = $9_1 >>> 2 | 0;
    if (($626($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0 | 0) != ($9_1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    $7_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
    $1_1 = ($8_1 | 0) > ($7_1 | 0) ? $8_1 - $7_1 | 0 : 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$4
    }
    $7_1 = $1115($6_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
    $8_1 = $626($0_1 | 0, $1116($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    $2007($7_1 | 0) | 0;
    $7_1 = 0;
    if (($8_1 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   label$5 : {
    $1_1 = $3_1 - $2_1 | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$5
    }
    $7_1 = 0;
    $1_1 = $1_1 >>> 2 | 0;
    if (($626($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $324($4_1 | 0, 0 | 0) | 0;
   $7_1 = $0_1;
  }
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $1100($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1101($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66988 | 0) | 0 | 0;
 }
 
 function $1101($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $1065($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $316($2_1 | 0) | 0 | 0);
  $5_1 = $1004() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 224 | 0) + ($1066($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1067($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $2_1 | 0);
  $1098($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 16 | 0 | 0);
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $1099($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1102($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1103($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 67017 | 0) | 0 | 0;
 }
 
 function $1103($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 152 | 0) >> 2] = 37;
  HEAP32[($6_1 + 156 | 0) >> 2] = 0;
  $1065($6_1 + 152 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $316($2_1 | 0) | 0 | 0);
  $5_1 = $1004() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 139 | 0) + ($1066($6_1 + 139 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 152 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $1067($6_1 + 139 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $2_1 | 0);
  $1098($6_1 + 139 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 16 | 0 | 0);
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $1099($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 160 | 0;
  return $2_1 | 0;
 }
 
 function $1104($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $1105($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 66988 | 0) | 0 | 0;
 }
 
 function $1105($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $1065($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $316($2_1 | 0) | 0 | 0);
  $5_1 = $1004() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 224 | 0) + ($1066($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $1067($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $771($6_1 + 16 | 0 | 0, $2_1 | 0);
  $1098($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 16 | 0 | 0);
  $1537($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $1099($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $1106($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return $1107($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 69625 | 0) | 0 | 0;
 }
 
 function $1107($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = 37;
  HEAP32[($6_1 + 380 | 0) >> 2] = 0;
  $7_1 = $1077($6_1 + 376 | 0 | 1 | 0 | 0, $5_1 | 0, $316($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 332 | 0) >> 2] = $6_1 + 336 | 0;
  $5_1 = $1004() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $8_1 = $1078($2_1 | 0) | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
    $5_1 = $1066($6_1 + 336 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 376 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
   $5_1 = $1066($6_1 + 336 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 376 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 80 | 0) >> 2] = 166;
  $9_1 = $1079($6_1 + 320 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  $10_1 = $6_1 + 336 | 0;
  $8_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($5_1 | 0) < (30 | 0)) {
     break label$4
    }
    $5_1 = $1004() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $8_1 = $1078($2_1 | 0) | 0;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$6_1 >> 2] = $8_1;
      $5_1 = $1080($6_1 + 332 | 0 | 0, $5_1 | 0, $6_1 + 376 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
     $5_1 = $1080($6_1 + 332 | 0 | 0, $5_1 | 0, $6_1 + 376 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    }
    if (($5_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $1081($9_1 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
   }
   $7_1 = $8_1 + $5_1 | 0;
   $11_1 = $1067($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = 166;
   $8_1 = $1108($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0) != ($6_1 + 336 | 0 | 0)) {
      break label$8
     }
     $5_1 = $6_1 + 80 | 0;
     break label$7;
    }
    $5_1 = $483($5_1 << 3 | 0 | 0) | 0;
    if (!$5_1) {
     break label$3
    }
    $1109($8_1 | 0, $5_1 | 0);
    $10_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
   }
   $771($6_1 + 56 | 0 | 0, $2_1 | 0);
   $1110($10_1 | 0, $11_1 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 56 | 0 | 0);
   $1537($6_1 + 56 | 0 | 0) | 0;
   $2_1 = $1099($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1111($8_1 | 0) | 0;
   $1083($9_1 | 0) | 0;
   global$0 = $6_1 + 384 | 0;
   return $2_1 | 0;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1108($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1305($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1380($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1380($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1381($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1110($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $602($6_1 | 0) | 0;
  $9_1 = $1010($6_1 | 0) | 0;
  $1052($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $764($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $764($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $764($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($915(HEAP8[$6_1 >> 0] | 0 | 0, $1004() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($853(HEAP8[$6_1 >> 0] | 0 | 0, $1004() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($966($7_1 | 0) | 0)) {
     break label$8
    }
    $1043($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break label$7;
   }
   $1117($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1051($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $1119($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($972($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($972($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
     HEAP32[$12_1 >> 2] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($52($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $764($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     label$15 : {
      $11_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($11_1 | 0) == (46 | 0)) {
       break label$15
      }
      $11_1 = $764($8_1 | 0, $11_1 << 24 >> 24 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $11_1;
      $6_1 = $6_1 + 1 | 0;
      continue label$14;
     }
     break label$14;
    };
    $12_1 = $1050($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $11_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $11_1;
    HEAP32[$14_1 >> 2] = $12_1;
    $6_1 = $6_1 + 1 | 0;
    break label$12;
   }
   $11_1 = HEAP32[$5_1 >> 2] | 0;
  }
  $1043($8_1 | 0, $6_1 | 0, $2_1 | 0, $11_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $6_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1989($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1111($0_1) {
  $0_1 = $0_1 | 0;
  $1109($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1112($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $4$hi;
  return $1113($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 68222 | 0) | 0 | 0;
 }
 
 function $1113($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0;
  $7_1 = global$0 - 432 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 424 | 0) >> 2] = 37;
  HEAP32[($7_1 + 428 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $1077($7_1 + 424 | 0 | 1 | 0 | 0, $6_1 | 0, $316($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($7_1 + 380 | 0) >> 2] = $7_1 + 384 | 0;
  $6_1 = $1004() | 0;
  label$1 : {
   label$2 : {
    if (!$8_1) {
     break label$2
    }
    $9_1 = $1078($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
    $6_1 = $1066($7_1 + 384 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 424 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $1066($7_1 + 384 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 424 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = 166;
  $10_1 = $1079($7_1 + 368 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
  $11_1 = $7_1 + 384 | 0;
  $9_1 = $11_1;
  label$3 : {
   label$4 : {
    if (($6_1 | 0) < (30 | 0)) {
     break label$4
    }
    $6_1 = $1004() | 0;
    label$5 : {
     label$6 : {
      if (!$8_1) {
       break label$6
      }
      $9_1 = $1078($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = $9_1;
      $6_1 = $1080($7_1 + 380 | 0 | 0, $6_1 | 0, $7_1 + 424 | 0 | 0, $7_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $1080($7_1 + 380 | 0 | 0, $6_1 | 0, $7_1 + 424 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
    }
    if (($6_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $1081($10_1 | 0, HEAP32[($7_1 + 380 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   }
   $8_1 = $9_1 + $6_1 | 0;
   $12_1 = $1067($9_1 | 0, $8_1 | 0, $2_1 | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = 166;
   $9_1 = $1108($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($7_1 + 380 | 0) >> 2] | 0 | 0) != ($7_1 + 384 | 0 | 0)) {
      break label$8
     }
     $6_1 = $7_1 + 128 | 0;
     break label$7;
    }
    $6_1 = $483($6_1 << 3 | 0 | 0) | 0;
    if (!$6_1) {
     break label$3
    }
    $1109($9_1 | 0, $6_1 | 0);
    $11_1 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   }
   $771($7_1 + 104 | 0 | 0, $2_1 | 0);
   $1110($11_1 | 0, $12_1 | 0, $8_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 104 | 0 | 0);
   $1537($7_1 + 104 | 0 | 0) | 0;
   $2_1 = $1099($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1111($9_1 | 0) | 0;
   $1083($10_1 | 0) | 0;
   global$0 = $7_1 + 432 | 0;
   return $2_1 | 0;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1114($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $6_1 = $1004() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1066($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, 66662 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $1067($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $771($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $602($5_1 + 16 | 0 | 0) | 0;
  $1537($5_1 + 16 | 0 | 0) | 0;
  $1043($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $1099($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $1115($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $950($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $2017($0_1 | 0, $1_1 | 0, $2_1 | 0);
  $952($0_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1116($0_1) {
  $0_1 = $0_1 | 0;
  return $736($1093($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1117($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1118($0_1 | 0, $1_1 | 0);
 }
 
 function $1118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1756($0_1 | 0, $1_1 | 0);
 }
 
 function $1119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1120($0_1 | 0, $1_1 | 0);
 }
 
 function $1120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1759($0_1 | 0, $1_1 | 0);
 }
 
 function $1121($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $771($8_1 + 8 | 0 | 0, $3_1 | 0);
  $2_1 = $329($8_1 + 8 | 0 | 0) | 0;
  $1537($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($1_1) {
     break label$1
    }
    label$3 : {
     if ($541($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($1122($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $1_1 = $6_1 + 1 | 0;
       if (($1_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $1122($2_1 | 0, HEAP8[$1_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $1_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 2 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $1122($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $1_1 + 2 | 0;
       break label$4;
      }
      label$8 : {
       if (!($542($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($542($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if ($541($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
         break label$4
        }
        if (!($542($2_1 | 0, 1 | 0, $332($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $333($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($963($2_1 | 0, $332($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($963($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 1 | 0;
       $333($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($541($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $1122($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1123($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1124($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $5_1 = $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1125($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $51($6_1 | 0) | 0 | 0, ($51($6_1 | 0) | 0) + ($52($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1126($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $771($6_1 | 0, $3_1 | 0);
  $1_1 = $329($6_1 | 0) | 0;
  $1537($6_1 | 0) | 0;
  $1127($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1127($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($958($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1128($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $771($6_1 | 0, $3_1 | 0);
  $1_1 = $329($6_1 | 0) | 0;
  $1537($6_1 | 0) | 0;
  $1129($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1129($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($958($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1130($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $771($6_1 | 0, $3_1 | 0);
  $1_1 = $329($6_1 | 0) | 0;
  $1537($6_1 | 0) | 0;
  $1131($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1131($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : ($5_1 | 0) < (100 | 0) ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
  }
 }
 
 function $1132($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  $1_1 = 0;
  $6_1 = 6;
  label$1 : {
   label$2 : {
    if ($541($0_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $6_1 = 4;
    $7_1 = $332($0_1 | 0) | 0;
    if (!($542($3_1 | 0, 64 | 0, $7_1 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1122($3_1 | 0, $7_1 | 0, 0 | 0) | 0;
    label$3 : {
     label$4 : while (1) {
      $333($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if ($541($0_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
       break label$3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break label$3
      }
      $6_1 = $332($0_1 | 0) | 0;
      if (!($542($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
       break label$1
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($1122($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label$4;
     };
    }
    $6_1 = 2;
    if (!($541($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $6_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1133($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $155_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $771($8_1 + 8 | 0 | 0, $3_1 | 0);
  $9_1 = $329($8_1 + 8 | 0 | 0) | 0;
  $1537($8_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1127($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1129($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $51($6_1 | 0) | 0 | 0, ($51($6_1 | 0) | 0) + ($52($6_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $1134($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623865125;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623728933;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 7:
       $1135($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $1136($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $1137($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $1138($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $1139($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $1140($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $1141($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $14_1 = 0;
       $15_1 = HEAPU8[($14_1 + 88664 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 88665 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 88666 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 88667 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 15 | 0) >> 0] = $15_1;
       HEAP8[($8_1 + 16 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($8_1 + 17 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($8_1 + 18 | 0) >> 0] = $15_1 >>> 24 | 0;
       $13_1 = 0;
       i64toi32_i32$0 = HEAPU8[($13_1 + 88657 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 88658 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 88659 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 88660 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($13_1 + 88661 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 88662 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 88663 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 88664 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $155_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $155_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 19 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP8[($8_1 + 12 | 0) >> 0] = HEAPU8[(0 + 88672 | 0) >> 0] | 0;
       $16_1 = 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAPU8[($16_1 + 88668 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 88669 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 88670 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 88671 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 13 | 0 | 0) | 0;
       break label$2;
      case 18:
       $1142($0_1 | 0, $5_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[($8_1 + 8 | 0) >> 2] = 624576549;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 54:
       $1143($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1121($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $51($6_1 | 0) | 0 | 0, ($51($6_1 | 0) | 0) + ($52($6_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $1131($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $1144($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $1145($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1134($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1135($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1136($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1137($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1138($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $3_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   $3_1 = $3_1 + -1 | 0;
   if ($3_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($5_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $3_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
 }
 
 function $1139($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1140($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if ($541($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$1
    }
    if (!($542($4_1 | 0, 1 | 0, $332($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $333($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($541($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1141($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($52($0_1 | 0) | 0 | 0) != (0 - ($52($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $4_1 = $958($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   if (($4_1 | 0) != ($0_1 | 0)) {
    break label$2
   }
   if (($5_1 | 0) != (12 | 0)) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
    break label$3
   }
   if (($5_1 | 0) > (11 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
  }
 }
 
 function $1142($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1143($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1144($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1132($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
  }
 }
 
 function $1145($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($541($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($1122($4_1 | 0, $332($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($541($333($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1146($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $771($8_1 + 8 | 0 | 0, $3_1 | 0);
  $2_1 = $602($8_1 + 8 | 0 | 0) | 0;
  $1537($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($1_1) {
     break label$1
    }
    label$3 : {
     if ($603($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($1147($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $1_1 = $6_1 + 4 | 0;
       if (($1_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $1147($2_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $1_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 8 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $1147($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $1_1 + 8 | 0;
       break label$4;
      }
      label$8 : {
       if (!($605($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 4 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($605($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if ($603($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
         break label$4
        }
        if (!($605($2_1 | 0, 1 | 0, $604($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $606($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($1015($2_1 | 0, $604($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($1015($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 4 | 0;
       $606($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($603($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $1147($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1148($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1149($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88856 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88860 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88848 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88852 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88840 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88844 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88832 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88836 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $1150($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1151($6_1 | 0) | 0 | 0, ($1151($6_1 | 0) | 0) + (($1016($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1151($0_1) {
  $0_1 = $0_1 | 0;
  return $735($1152($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1152($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1153($0_1 | 0) | 0)) {
    break label$1
   }
   return $1237($0_1 | 0) | 0 | 0;
  }
  return $1763($0_1 | 0) | 0 | 0;
 }
 
 function $1153($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1235($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1154($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1235($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1155($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1235($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
 }
 
 function $1156($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $771($6_1 | 0, $3_1 | 0);
  $1_1 = $602($6_1 | 0) | 0;
  $1537($6_1 | 0) | 0;
  $1157($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1157($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1013($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1158($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $771($6_1 | 0, $3_1 | 0);
  $1_1 = $602($6_1 | 0) | 0;
  $1537($6_1 | 0) | 0;
  $1159($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1159($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($1013($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1160($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $771($6_1 | 0, $3_1 | 0);
  $1_1 = $602($6_1 | 0) | 0;
  $1537($6_1 | 0) | 0;
  $1161($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1161($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : ($5_1 | 0) < (100 | 0) ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
  }
 }
 
 function $1162($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  $1_1 = 0;
  $6_1 = 6;
  label$1 : {
   label$2 : {
    if ($603($0_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $6_1 = 4;
    $7_1 = $604($0_1 | 0) | 0;
    if (!($605($3_1 | 0, 64 | 0, $7_1 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1147($3_1 | 0, $7_1 | 0, 0 | 0) | 0;
    label$3 : {
     label$4 : while (1) {
      $606($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if ($603($0_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
       break label$3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break label$3
      }
      $6_1 = $604($0_1 | 0) | 0;
      if (!($605($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
       break label$1
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($1147($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label$4;
     };
    }
    $6_1 = 2;
    if (!($603($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $6_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1163($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $72_1 = 0, $75_1 = 0, $77_1 = 0, $79_1 = 0, $93_1 = 0, $96_1 = 0, $98_1 = 0, $100_1 = 0, $183_1 = 0, $185_1 = 0, $206_1 = 0, $209_1 = 0, $211_1 = 0, $213_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $771($8_1 | 0, $3_1 | 0);
  $9_1 = $602($8_1 | 0) | 0;
  $1537($8_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1157($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1159($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1151($6_1 | 0) | 0 | 0, ($1151($6_1 | 0) | 0) + (($1016($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $1164($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88712 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88716 | 0) >> 2] | 0;
       $72_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $72_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88704 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88708 | 0) >> 2] | 0;
       $75_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $75_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88696 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88700 | 0) >> 2] | 0;
       $77_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $77_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88688 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88692 | 0) >> 2] | 0;
       $79_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $79_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88744 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88748 | 0) >> 2] | 0;
       $93_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $93_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88736 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88740 | 0) >> 2] | 0;
       $96_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $96_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88728 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88732 | 0) >> 2] | 0;
       $98_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $98_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88720 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88724 | 0) >> 2] | 0;
       $100_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $100_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 7:
       $1165($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $1166($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $1167($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $1168($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $1169($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $1170($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $1171($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $6_1 = $410($8_1 | 0, 88752 | 0, 44 | 0) | 0;
       HEAP32[($6_1 + 56 | 0) >> 2] = $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $6_1 + 44 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 88816 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88808 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88812 | 0) >> 2] | 0;
       $183_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $183_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88800 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88804 | 0) >> 2] | 0;
       $185_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $185_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break label$2;
      case 18:
       $1172($0_1 | 0, $5_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88856 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88860 | 0) >> 2] | 0;
       $206_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $206_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88848 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88852 | 0) >> 2] | 0;
       $209_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $209_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88840 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88844 | 0) >> 2] | 0;
       $211_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $211_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88832 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88836 | 0) >> 2] | 0;
       $213_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $213_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 54:
       $1173($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1151($6_1 | 0) | 0 | 0, ($1151($6_1 | 0) | 0) + (($1016($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $1161($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $1174($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $1175($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $1164($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1165($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1166($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1167($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1168($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $3_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   $3_1 = $3_1 + -1 | 0;
   if ($3_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($5_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $3_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
 }
 
 function $1169($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1170($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if ($603($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$1
    }
    if (!($605($4_1 | 0, 1 | 0, $604($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $606($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($603($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1171($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($1016($0_1 | 0) | 0 | 0) != (0 - ($1016($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $4_1 = $1013($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   if (($4_1 | 0) != ($0_1 | 0)) {
    break label$2
   }
   if (($5_1 | 0) != (12 | 0)) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
    break label$3
   }
   if (($5_1 | 0) > (11 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
  }
 }
 
 function $1172($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1173($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($5_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1174($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1162($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
  }
 }
 
 function $1175($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($603($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($1147($4_1 | 0, $604($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($603($606($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1176($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $1177($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $0_1 = $1178($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $0_1 | 0;
 }
 
 function $1177($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   $1179($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + (fimport$82($1_1 | 0, $1180($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1178($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1181($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAPU8[$0_1 >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[$1_1 >> 0] = $2_1;
 }
 
 function $1180($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1181($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1765($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1767($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1766($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1768($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1769($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1770($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1182($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $1183($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $0_1 = $1184($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $0_1 | 0;
 }
 
 function $1183($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $1177($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  label$1 : {
   $0_1 = $1186($1_1 | 0, $6_1 + 12 | 0 | 0, $1185($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break label$1
   }
   $1187($6_1 | 0);
   wasm2js_trap();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $1184($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1188($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1186($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $1007($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $3_1 = $924($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1008($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1187($0_1) {
  $0_1 = $0_1 | 0;
  fimport$79();
  wasm2js_trap();
 }
 
 function $1188($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1777($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1779($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1778($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1780($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1781($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1782($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1189($0_1) {
  $0_1 = $0_1 | 0;
  return $1190() | 0 | 0;
 }
 
 function $1190() {
  return $1191() | 0 | 0;
 }
 
 function $1191() {
  return 127 | 0;
 }
 
 function $1192($0_1) {
  $0_1 = $0_1 | 0;
  return $1190() | 0 | 0;
 }
 
 function $1193($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $57($0_1 | 0) | 0;
 }
 
 function $1194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $57($0_1 | 0) | 0;
 }
 
 function $1195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $57($0_1 | 0) | 0;
 }
 
 function $1196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $322($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1197($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  return $1190() | 0 | 0;
 }
 
 function $1201($0_1) {
  $0_1 = $0_1 | 0;
  return $1190() | 0 | 0;
 }
 
 function $1202($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $57($0_1 | 0) | 0;
 }
 
 function $1203($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $57($0_1 | 0) | 0;
 }
 
 function $1204($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $57($0_1 | 0) | 0;
 }
 
 function $1205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $322($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1206($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1209($0_1) {
  $0_1 = $0_1 | 0;
  return $1210() | 0 | 0;
 }
 
 function $1210() {
  return $1211() | 0 | 0;
 }
 
 function $1211() {
  return 2147483647 | 0;
 }
 
 function $1212($0_1) {
  $0_1 = $0_1 | 0;
  return $1210() | 0 | 0;
 }
 
 function $1213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $57($0_1 | 0) | 0;
 }
 
 function $1214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1215($0_1 | 0) | 0;
 }
 
 function $1215($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $950($0_1 | 0, $1_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $952($0_1 | 0);
  $1216($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1216($0_1) {
  $0_1 = $0_1 | 0;
  $1789($0_1 | 0);
 }
 
 function $1217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1215($0_1 | 0) | 0;
 }
 
 function $1218($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1115($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1219($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1222($0_1) {
  $0_1 = $0_1 | 0;
  return $1210() | 0 | 0;
 }
 
 function $1223($0_1) {
  $0_1 = $0_1 | 0;
  return $1210() | 0 | 0;
 }
 
 function $1224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $57($0_1 | 0) | 0;
 }
 
 function $1225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1215($0_1 | 0) | 0;
 }
 
 function $1226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1215($0_1 | 0) | 0;
 }
 
 function $1227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1115($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1228($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1229($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $27_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1233($1232($1_1 | 0) | 0 | 0);
  $0_1 = $1234($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($1153($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $1235($1_1 | 0) | 0;
    $3_1 = $1236($0_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $27_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[i64toi32_i32$0 >> 2] = $27_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $2013($0_1 | 0, $735($1237($1_1 | 0) | 0 | 0) | 0 | 0, $1154($1_1 | 0) | 0 | 0);
  }
  $952($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1232($0_1) {
  $0_1 = $0_1 | 0;
  return $1744($0_1 | 0) | 0 | 0;
 }
 
 function $1233($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1234($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1790($1725($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1235($0_1) {
  $0_1 = $0_1 | 0;
  return $1755($0_1 | 0) | 0 | 0;
 }
 
 function $1236($0_1) {
  $0_1 = $0_1 | 0;
  return $1746($0_1 | 0) | 0 | 0;
 }
 
 function $1237($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1235($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1238($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 288 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 167;
  $1_1 = $1079($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $771($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $329($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  label$1 : {
   if (!($1240($7_1 + 280 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $316($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 68960 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 68961 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 68962 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 68963 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 68957 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 68958 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 68959 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 68960 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 68953 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 68954 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 68955 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 68956 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $1003($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 166;
   $8_1 = $1079($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $4_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1241($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break label$3
     }
     $1081($8_1 | 0, $483(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1241($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1241($8_1 | 0) | 0)) {
      break label$2
     }
     $4_1 = $1241($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 143 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$4_1 >> 0] = 45;
     $4_1 = $4_1 + 1 | 0;
    }
    $2_1 = $1241($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($2_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$4_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($916($7_1 + 16 | 0 | 0, 67367 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $1083($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($1048($7_1 + 118 | 0 | 0, $1242($7_1 + 118 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue label$6;
     };
    }
    $1187($7_1 | 0);
    wasm2js_trap();
   }
   $1976();
   wasm2js_trap();
  }
  label$8 : {
   if (!($541($7_1 + 280 | 0 | 0, $7_1 + 272 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 280 | 0) >> 2] | 0;
  $1537($7_1 + 144 | 0 | 0) | 0;
  $1083($1_1 | 0) | 0;
  global$0 = $7_1 + 288 | 0;
  return $2_1 | 0;
 }
 
 function $1239($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1240($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0, $376_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($541($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    $0_1 = 0;
    break label$1;
   }
   HEAP32[($11_1 + 104 | 0) >> 2] = 167;
   $12_1 = $1244($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 104 | 0 | 0) | 0;
   $10_1 = $1245($12_1 | 0) | 0;
   HEAP32[($11_1 + 132 | 0) >> 2] = $10_1;
   HEAP32[($11_1 + 128 | 0) >> 2] = $10_1 + 400 | 0;
   $13_1 = $57($11_1 + 104 | 0 | 0) | 0;
   $14_1 = $57($11_1 + 88 | 0 | 0) | 0;
   $15_1 = $57($11_1 + 72 | 0 | 0) | 0;
   $16_1 = $57($11_1 + 56 | 0 | 0) | 0;
   $17_1 = $57($11_1 + 40 | 0 | 0) | 0;
   $1246($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 119 | 0 | 0, $11_1 + 118 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 36 | 0 | 0);
   HEAP32[$9_1 >> 2] = $1241($8_1 | 0) | 0;
   $18_1 = $4_1 & 512 | 0;
   $19_1 = $18_1 >>> 9 | 0;
   $3_1 = 0;
   $1_1 = 0;
   label$3 : while (1) {
    $2_1 = $1_1;
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        if (($3_1 | 0) == (4 | 0)) {
         break label$7
        }
        if ($541($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
         break label$7
        }
        $10_1 = 0;
        $1_1 = $2_1;
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             switch (HEAP8[(($11_1 + 120 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
             case 1:
              if (($3_1 | 0) == (3 | 0)) {
               break label$5
              }
              label$14 : {
               if (!($542($7_1 | 0, 1 | 0, $332($0_1 | 0) | 0 | 0) | 0)) {
                break label$14
               }
               $1247($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
               $2000($17_1 | 0, $1248($11_1 + 24 | 0 | 0) | 0 | 0);
               break label$11;
              }
              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
              $0_1 = 0;
              break label$6;
             case 3:
              break label$10;
             case 0:
              break label$12;
             case 4:
              break label$8;
             case 2:
              break label$9;
             default:
              break label$4;
             };
            }
            if (($3_1 | 0) == (3 | 0)) {
             break label$5
            }
           }
           label$15 : while (1) {
            if ($541($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
             break label$5
            }
            if (!($542($7_1 | 0, 1 | 0, $332($0_1 | 0) | 0 | 0) | 0)) {
             break label$5
            }
            $1247($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
            $2000($17_1 | 0, $1248($11_1 + 24 | 0 | 0) | 0 | 0);
            continue label$15;
           };
          }
          label$16 : {
           if (!($52($15_1 | 0) | 0)) {
            break label$16
           }
           if ((($332($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($972($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
            break label$16
           }
           $333($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 0;
           $1_1 = ($52($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
           break label$4;
          }
          label$17 : {
           if (!($52($16_1 | 0) | 0)) {
            break label$17
           }
           if ((($332($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($972($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
            break label$17
           }
           $333($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 1;
           $1_1 = ($52($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
           break label$4;
          }
          label$18 : {
           if (!($52($15_1 | 0) | 0)) {
            break label$18
           }
           if (!($52($16_1 | 0) | 0)) {
            break label$18
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break label$6;
          }
          label$19 : {
           if ($52($15_1 | 0) | 0) {
            break label$19
           }
           if (!($52($16_1 | 0) | 0)) {
            break label$5
           }
          }
          HEAP8[$6_1 >> 0] = !($52($16_1 | 0) | 0);
          break label$5;
         }
         label$20 : {
          if ($2_1) {
           break label$20
          }
          if ($3_1 >>> 0 < 2 >>> 0) {
           break label$20
          }
          $1_1 = 0;
          if (($19_1 | (($3_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) | 0 | 0) != (1 | 0)) {
           break label$4
          }
         }
         HEAP32[($11_1 + 16 | 0) >> 2] = $1056($14_1 | 0) | 0;
         $10_1 = $1249($11_1 + 24 | 0 | 0, $11_1 + 16 | 0 | 0, 0 | 0) | 0;
         label$21 : {
          if (!$3_1) {
           break label$21
          }
          if ((HEAPU8[(($3_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
           break label$21
          }
          label$22 : {
           label$23 : while (1) {
            HEAP32[($11_1 + 16 | 0) >> 2] = $1057($14_1 | 0) | 0;
            if (!($1250($10_1 | 0, $11_1 + 16 | 0 | 0) | 0)) {
             break label$22
            }
            if (!($542($7_1 | 0, 1 | 0, HEAP8[($1251($10_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
             break label$22
            }
            $1252($10_1 | 0) | 0;
            continue label$23;
           };
          }
          HEAP32[($11_1 + 16 | 0) >> 2] = $1056($14_1 | 0) | 0;
          label$24 : {
           $1_1 = $1253($10_1 | 0, $11_1 + 16 | 0 | 0) | 0;
           if ($1_1 >>> 0 > ($52($17_1 | 0) | 0) >>> 0) {
            break label$24
           }
           HEAP32[($11_1 + 16 | 0) >> 2] = $1057($17_1 | 0) | 0;
           if ($1255($1254($11_1 + 16 | 0 | 0, $1_1 | 0) | 0 | 0, $1057($17_1 | 0) | 0 | 0, $1056($14_1 | 0) | 0 | 0) | 0) {
            break label$21
           }
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $1056($14_1 | 0) | 0;
          HEAP32[$10_1 >> 2] = HEAP32[($1249($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
         label$25 : {
          label$26 : while (1) {
           HEAP32[($11_1 + 8 | 0) >> 2] = $1057($14_1 | 0) | 0;
           if (!($1250($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
            break label$25
           }
           if ($541($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$25
           }
           if ((($332($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1251($11_1 + 16 | 0 | 0) | 0) >> 0] | 0 | 0)) {
            break label$25
           }
           $333($0_1 | 0) | 0;
           $1252($11_1 + 16 | 0 | 0) | 0;
           continue label$26;
          };
         }
         if (!$18_1) {
          break label$5
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1057($14_1 | 0) | 0;
         if (!($1250($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
          break label$5
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$6;
        }
        label$27 : {
         label$28 : while (1) {
          if ($541($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$27
          }
          label$29 : {
           label$30 : {
            $1_1 = $332($0_1 | 0) | 0;
            if (!($542($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
             break label$30
            }
            label$31 : {
             $4_1 = HEAP32[$9_1 >> 2] | 0;
             if (($4_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
              break label$31
             }
             $1256($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
             $4_1 = HEAP32[$9_1 >> 2] | 0;
            }
            HEAP32[$9_1 >> 2] = $4_1 + 1 | 0;
            HEAP8[$4_1 >> 0] = $1_1;
            $10_1 = $10_1 + 1 | 0;
            break label$29;
           }
           if (!($52($13_1 | 0) | 0)) {
            break label$27
           }
           if (!$10_1) {
            break label$27
           }
           if (($1_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 118 | 0) >> 0] | 0) & 255 | 0 | 0)) {
            break label$27
           }
           label$32 : {
            $1_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
             break label$32
            }
            $1257($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 132 | 0) >> 2] = $1_1 + 4 | 0;
           HEAP32[$1_1 >> 2] = $10_1;
           $10_1 = 0;
          }
          $333($0_1 | 0) | 0;
          continue label$28;
         };
        }
        label$33 : {
         $376_1 = $1245($12_1 | 0) | 0;
         $1_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
         if (($376_1 | 0) == ($1_1 | 0)) {
          break label$33
         }
         if (!$10_1) {
          break label$33
         }
         label$34 : {
          if (($1_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
           break label$34
          }
          $1257($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
          $1_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 132 | 0) >> 2] = $1_1 + 4 | 0;
         HEAP32[$1_1 >> 2] = $10_1;
        }
        label$35 : {
         if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$36 : {
          label$37 : {
           if ($541($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$37
           }
           if ((($332($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 119 | 0) >> 0] | 0 | 0)) {
            break label$36
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
         }
         label$38 : while (1) {
          $333($0_1 | 0) | 0;
          if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
           break label$35
          }
          label$39 : {
           label$40 : {
            if ($541($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
             break label$40
            }
            if ($542($7_1 | 0, 64 | 0, $332($0_1 | 0) | 0 | 0) | 0) {
             break label$39
            }
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break label$6;
          }
          label$41 : {
           if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
            break label$41
           }
           $1256($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
          }
          $10_1 = $332($0_1 | 0) | 0;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $1_1 + 1 | 0;
          HEAP8[$1_1 >> 0] = $10_1;
          HEAP32[($11_1 + 36 | 0) >> 2] = (HEAP32[($11_1 + 36 | 0) >> 2] | 0) + -1 | 0;
          continue label$38;
         };
        }
        $1_1 = $2_1;
        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1241($8_1 | 0) | 0 | 0)) {
         break label$4
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$6;
       }
       label$42 : {
        if (!$2_1) {
         break label$42
        }
        $10_1 = 1;
        label$43 : while (1) {
         if ($10_1 >>> 0 >= ($52($2_1 | 0) | 0) >>> 0) {
          break label$42
         }
         label$44 : {
          label$45 : {
           if ($541($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$45
           }
           if ((($332($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($964($2_1 | 0, $10_1 | 0) | 0) >> 0] | 0 | 0)) {
            break label$44
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
         }
         $333($0_1 | 0) | 0;
         $10_1 = $10_1 + 1 | 0;
         continue label$43;
        };
       }
       $0_1 = 1;
       if (($1245($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $0_1 = 0;
       HEAP32[($11_1 + 24 | 0) >> 2] = 0;
       $975($13_1 | 0, $1245($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 24 | 0 | 0);
       label$46 : {
        if (!(HEAP32[($11_1 + 24 | 0) >> 2] | 0)) {
         break label$46
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        break label$6;
       }
       $0_1 = 1;
      }
      $1989($17_1 | 0) | 0;
      $1989($16_1 | 0) | 0;
      $1989($15_1 | 0) | 0;
      $1989($14_1 | 0) | 0;
      $1989($13_1 | 0) | 0;
      $1258($12_1 | 0) | 0;
      break label$1;
     }
     $1_1 = $2_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $11_1 + 560 | 0;
  return $0_1 | 0;
 }
 
 function $1241($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1259($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1242($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $1243($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1956($0_1 | 0, $1_1 | 0) | 0;
  $779($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1244($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1267($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1245($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1268($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1246($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $1_1 = $1269($1_1 | 0) | 0;
    $1270($10_1 | 0, $1_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1271($10_1 | 0, $1_1 | 0);
    $62($8_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
    $1272($10_1 | 0, $1_1 | 0);
    $62($7_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
    HEAP8[$3_1 >> 0] = $1273($1_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $1274($1_1 | 0) | 0;
    $1275($10_1 | 0, $1_1 | 0);
    $62($5_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
    $1276($10_1 | 0, $1_1 | 0);
    $62($6_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
    $1_1 = $1277($1_1 | 0) | 0;
    break label$1;
   }
   $1_1 = $1278($1_1 | 0) | 0;
   $1279($10_1 | 0, $1_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1280($10_1 | 0, $1_1 | 0);
   $62($8_1 | 0, $10_1 | 0) | 0;
   $1989($10_1 | 0) | 0;
   $1281($10_1 | 0, $1_1 | 0);
   $62($7_1 | 0, $10_1 | 0) | 0;
   $1989($10_1 | 0) | 0;
   HEAP8[$3_1 >> 0] = $1282($1_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $1283($1_1 | 0) | 0;
   $1284($10_1 | 0, $1_1 | 0);
   $62($5_1 | 0, $10_1 | 0) | 0;
   $1989($10_1 | 0) | 0;
   $1285($10_1 | 0, $1_1 | 0);
   $62($6_1 | 0, $10_1 | 0) | 0;
   $1989($10_1 | 0) | 0;
   $1_1 = $1286($1_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $1_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1287($0_1 | 0, ($336(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1248($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1249($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1288($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1289($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1251($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1252($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1290($0_1 | 0) | 0) - ($1288($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $1254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1292($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1255($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1291($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1256($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1293($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1241($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($752() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $752() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1241($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (167 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1241($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $485($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (167 | 0)) {
     break label$6
    }
    $1294($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 166;
   $4_1 = $1079($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1295($0_1 | 0, $4_1 | 0) | 0;
   $1083($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1241($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1241($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1257($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1296($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1245($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($752() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $752() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1245($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (167 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1245($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $485($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (167 | 0)) {
     break label$6
    }
    $1297($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 166;
   $4_1 = $1244($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1298($0_1 | 0, $4_1 | 0) | 0;
   $1258($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1245($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1245($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1258($0_1) {
  $0_1 = $0_1 | 0;
  $1300($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1259($0_1) {
  $0_1 = $0_1 | 0;
  return $1957($0_1 | 0) | 0 | 0;
 }
 
 function $1260($0_1) {
  $0_1 = $0_1 | 0;
  return $1958($0_1 | 0) | 0 | 0;
 }
 
 function $1261($0_1) {
  $0_1 = $0_1 | 0;
  return $780($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1262($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 167;
  $8_1 = $1079($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $771($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $329($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1240($7_1 + 152 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $316($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break label$1
   }
   $1263($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $2000($6_1 | 0, $330($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $330($1_1 | 0, 48 | 0) | 0;
   $2_1 = $1241($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $4_1 = $3_1 + -1 | 0;
   $1_1 = $1_1 & 255 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break label$3
     }
     if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 1 | 0;
     continue label$4;
    };
   }
   $1264($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($541($7_1 + 152 | 0 | 0, $7_1 + 144 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 152 | 0) >> 2] | 0;
  $1537($7_1 + 16 | 0 | 0) | 0;
  $1083($8_1 | 0) | 0;
  global$0 = $7_1 + 160 | 0;
  return $2_1 | 0;
 }
 
 function $1263($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $638($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($10($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $293($0_1 | 0) | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = 0;
    $299($2_1 | 0, $1_1 + 15 | 0 | 0);
    $748($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $298($0_1 | 0) | 0;
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $299($2_1 | 0, $1_1 + 14 | 0 | 0);
   $297($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1264($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $52($0_1 | 0) | 0;
  $5_1 = $645($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $740($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if ($1265($0_1 | 0, $1_1 | 0) | 0) {
     break label$2
    }
    label$3 : {
     if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
      break label$3
     }
     $1991($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
    }
    $5_1 = ($326($0_1 | 0) | 0) + $4_1 | 0;
    label$4 : {
     label$5 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      $299($5_1 | 0, $1_1 | 0);
      $1_1 = $1_1 + 1 | 0;
      $5_1 = $5_1 + 1 | 0;
      continue label$5;
     };
    }
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $299($5_1 | 0, $3_1 + 15 | 0 | 0);
    $1266($0_1 | 0, $6_1 + $4_1 | 0 | 0);
    break label$1;
   }
   $1_1 = $641($3_1 | 0, $1_1 | 0, $2_1 | 0, $292($0_1 | 0) | 0 | 0) | 0;
   $1998($0_1 | 0, $51($1_1 | 0) | 0 | 0, $52($1_1 | 0) | 0 | 0) | 0;
   $1989($1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (($51($0_1 | 0) | 0) >>> 0 > $1_1 >>> 0) {
    break label$1
   }
   $2_1 = (($51($0_1 | 0) | 0) + ($52($0_1 | 0) | 0) | 0) >>> 0 >= $1_1 >>> 0;
  }
  return $2_1 | 0;
 }
 
 function $1266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($10($0_1 | 0) | 0)) {
    break label$1
   }
   $748($0_1 | 0, $1_1 | 0);
   return;
  }
  $297($0_1 | 0, $1_1 | 0);
 }
 
 function $1267($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1959($0_1 | 0, $1_1 | 0) | 0;
  $779($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1268($0_1) {
  $0_1 = $0_1 | 0;
  return $1963($0_1 | 0) | 0 | 0;
 }
 
 function $1269($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101288 | 0) | 0 | 0;
 }
 
 function $1270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1272($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1273($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1274($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1275($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1277($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1278($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101280 | 0) | 0 | 0;
 }
 
 function $1279($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1282($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1283($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1286($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1287($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $1288($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1290($0_1 | 0) | 0 | 0) == ($1288($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1290($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1291($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $1_1 = $1058($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    if (!($1791($3_1 | 0, $1059($3_1 + 24 | 0 | 0) | 0 | 0, $1059($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $1060($3_1 + 24 | 0 | 0) | 0;
    $1060($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $1_1 ^ 1 | 0 | 0;
 }
 
 function $1292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1792($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1293($0_1) {
  $0_1 = $0_1 | 0;
  return $1261($0_1 | 0) | 0 | 0;
 }
 
 function $1294($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1260($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1260($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1081($0_1 | 0, $1294($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1293($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1261($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1296($0_1) {
  $0_1 = $0_1 | 0;
  return $1961($0_1 | 0) | 0 | 0;
 }
 
 function $1297($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1960($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1960($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1300($0_1 | 0, $1297($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1296($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1961($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1660($0_1 | 0, $1_1 | 0);
 }
 
 function $1300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1960($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1960($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1961($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1301($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 608 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 167;
  $1_1 = $1108($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $771($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $602($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  label$1 : {
   if (!($1302($7_1 + 616 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $316($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 68960 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 68961 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 68962 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 68963 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 68957 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 68958 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 68959 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 68960 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 68953 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 68954 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 68955 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 68956 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $1043($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 166;
   $8_1 = $1079($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $4_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1303($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break label$3
     }
     $1081($8_1 | 0, $483((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1303($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1241($8_1 | 0) | 0)) {
      break label$2
     }
     $4_1 = $1241($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 191 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$4_1 >> 0] = 45;
     $4_1 = $4_1 + 1 | 0;
    }
    $2_1 = $1303($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($2_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$4_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($916($7_1 + 16 | 0 | 0, 67367 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $1083($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($1053($7_1 + 128 | 0 | 0, $1304($7_1 + 128 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + 4 | 0;
      continue label$6;
     };
    }
    $1187($7_1 | 0);
    wasm2js_trap();
   }
   $1976();
   wasm2js_trap();
  }
  label$8 : {
   if (!($603($7_1 + 616 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 616 | 0) >> 2] | 0;
  $1537($7_1 + 192 | 0 | 0) | 0;
  $1111($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $2_1 | 0;
 }
 
 function $1302($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0, $368_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($603($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    $0_1 = 0;
    break label$1;
   }
   HEAP32[($11_1 + 96 | 0) >> 2] = 167;
   $12_1 = $1244($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 96 | 0 | 0) | 0;
   $10_1 = $1245($12_1 | 0) | 0;
   HEAP32[($11_1 + 132 | 0) >> 2] = $10_1;
   HEAP32[($11_1 + 128 | 0) >> 2] = $10_1 + 400 | 0;
   $13_1 = $57($11_1 + 96 | 0 | 0) | 0;
   $14_1 = $1215($11_1 + 80 | 0 | 0) | 0;
   $15_1 = $1215($11_1 + 64 | 0 | 0) | 0;
   $16_1 = $1215($11_1 + 48 | 0 | 0) | 0;
   $17_1 = $1215($11_1 + 32 | 0 | 0) | 0;
   $1306($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 116 | 0 | 0, $11_1 + 112 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 28 | 0 | 0);
   HEAP32[$9_1 >> 2] = $1303($8_1 | 0) | 0;
   $18_1 = $4_1 & 512 | 0;
   $19_1 = $18_1 >>> 9 | 0;
   $3_1 = 0;
   $1_1 = 0;
   label$3 : while (1) {
    $2_1 = $1_1;
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        if (($3_1 | 0) == (4 | 0)) {
         break label$7
        }
        if ($603($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
         break label$7
        }
        $10_1 = 0;
        $1_1 = $2_1;
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             switch (HEAP8[(($11_1 + 120 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
             case 1:
              if (($3_1 | 0) == (3 | 0)) {
               break label$5
              }
              label$14 : {
               if (!($605($7_1 | 0, 1 | 0, $604($0_1 | 0) | 0 | 0) | 0)) {
                break label$14
               }
               $1307($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
               $2018($17_1 | 0, $1308($11_1 + 16 | 0 | 0) | 0 | 0);
               break label$11;
              }
              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
              $0_1 = 0;
              break label$6;
             case 3:
              break label$10;
             case 0:
              break label$12;
             case 4:
              break label$8;
             case 2:
              break label$9;
             default:
              break label$4;
             };
            }
            if (($3_1 | 0) == (3 | 0)) {
             break label$5
            }
           }
           label$15 : while (1) {
            if ($603($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
             break label$5
            }
            if (!($605($7_1 | 0, 1 | 0, $604($0_1 | 0) | 0 | 0) | 0)) {
             break label$5
            }
            $1307($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
            $2018($17_1 | 0, $1308($11_1 + 16 | 0 | 0) | 0 | 0);
            continue label$15;
           };
          }
          label$16 : {
           if (!($1016($15_1 | 0) | 0)) {
            break label$16
           }
           if (($604($0_1 | 0) | 0 | 0) != (HEAP32[($1309($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
            break label$16
           }
           $606($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 0;
           $1_1 = ($1016($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
           break label$4;
          }
          label$17 : {
           if (!($1016($16_1 | 0) | 0)) {
            break label$17
           }
           if (($604($0_1 | 0) | 0 | 0) != (HEAP32[($1309($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
            break label$17
           }
           $606($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 1;
           $1_1 = ($1016($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
           break label$4;
          }
          label$18 : {
           if (!($1016($15_1 | 0) | 0)) {
            break label$18
           }
           if (!($1016($16_1 | 0) | 0)) {
            break label$18
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break label$6;
          }
          label$19 : {
           if ($1016($15_1 | 0) | 0) {
            break label$19
           }
           if (!($1016($16_1 | 0) | 0)) {
            break label$5
           }
          }
          HEAP8[$6_1 >> 0] = !($1016($16_1 | 0) | 0);
          break label$5;
         }
         label$20 : {
          if ($2_1) {
           break label$20
          }
          if ($3_1 >>> 0 < 2 >>> 0) {
           break label$20
          }
          $1_1 = 0;
          if (($19_1 | (($3_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) | 0 | 0) != (1 | 0)) {
           break label$4
          }
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1088($14_1 | 0) | 0;
         $10_1 = $1310($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
         label$21 : {
          if (!$3_1) {
           break label$21
          }
          if ((HEAPU8[(($3_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
           break label$21
          }
          label$22 : {
           label$23 : while (1) {
            HEAP32[($11_1 + 8 | 0) >> 2] = $1089($14_1 | 0) | 0;
            if (!($1311($10_1 | 0, $11_1 + 8 | 0 | 0) | 0)) {
             break label$22
            }
            if (!($605($7_1 | 0, 1 | 0, HEAP32[($1312($10_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
             break label$22
            }
            $1313($10_1 | 0) | 0;
            continue label$23;
           };
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $1088($14_1 | 0) | 0;
          label$24 : {
           $1_1 = $1314($10_1 | 0, $11_1 + 8 | 0 | 0) | 0;
           if ($1_1 >>> 0 > ($1016($17_1 | 0) | 0) >>> 0) {
            break label$24
           }
           HEAP32[($11_1 + 8 | 0) >> 2] = $1089($17_1 | 0) | 0;
           if ($1316($1315($11_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0, $1089($17_1 | 0) | 0 | 0, $1088($14_1 | 0) | 0 | 0) | 0) {
            break label$21
           }
          }
          HEAP32[$11_1 >> 2] = $1088($14_1 | 0) | 0;
          HEAP32[$10_1 >> 2] = HEAP32[($1310($11_1 + 8 | 0 | 0, $11_1 | 0, 0 | 0) | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
         label$25 : {
          label$26 : while (1) {
           HEAP32[$11_1 >> 2] = $1089($14_1 | 0) | 0;
           if (!($1311($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
            break label$25
           }
           if ($603($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$25
           }
           if (($604($0_1 | 0) | 0 | 0) != (HEAP32[($1312($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
            break label$25
           }
           $606($0_1 | 0) | 0;
           $1313($11_1 + 8 | 0 | 0) | 0;
           continue label$26;
          };
         }
         if (!$18_1) {
          break label$5
         }
         HEAP32[$11_1 >> 2] = $1089($14_1 | 0) | 0;
         if (!($1311($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
          break label$5
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$6;
        }
        label$27 : {
         label$28 : while (1) {
          if ($603($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$27
          }
          label$29 : {
           label$30 : {
            $1_1 = $604($0_1 | 0) | 0;
            if (!($605($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
             break label$30
            }
            label$31 : {
             $4_1 = HEAP32[$9_1 >> 2] | 0;
             if (($4_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
              break label$31
             }
             $1317($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
             $4_1 = HEAP32[$9_1 >> 2] | 0;
            }
            HEAP32[$9_1 >> 2] = $4_1 + 4 | 0;
            HEAP32[$4_1 >> 2] = $1_1;
            $10_1 = $10_1 + 1 | 0;
            break label$29;
           }
           if (!($52($13_1 | 0) | 0)) {
            break label$27
           }
           if (!$10_1) {
            break label$27
           }
           if (($1_1 | 0) != (HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0)) {
            break label$27
           }
           label$32 : {
            $1_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
             break label$32
            }
            $1257($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 132 | 0) >> 2] = $1_1 + 4 | 0;
           HEAP32[$1_1 >> 2] = $10_1;
           $10_1 = 0;
          }
          $606($0_1 | 0) | 0;
          continue label$28;
         };
        }
        label$33 : {
         $368_1 = $1245($12_1 | 0) | 0;
         $1_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
         if (($368_1 | 0) == ($1_1 | 0)) {
          break label$33
         }
         if (!$10_1) {
          break label$33
         }
         label$34 : {
          if (($1_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
           break label$34
          }
          $1257($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
          $1_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 132 | 0) >> 2] = $1_1 + 4 | 0;
         HEAP32[$1_1 >> 2] = $10_1;
        }
        label$35 : {
         if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$36 : {
          label$37 : {
           if ($603($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$37
           }
           if (($604($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0)) {
            break label$36
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
         }
         label$38 : while (1) {
          $606($0_1 | 0) | 0;
          if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
           break label$35
          }
          label$39 : {
           label$40 : {
            if ($603($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
             break label$40
            }
            if ($605($7_1 | 0, 64 | 0, $604($0_1 | 0) | 0 | 0) | 0) {
             break label$39
            }
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break label$6;
          }
          label$41 : {
           if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
            break label$41
           }
           $1317($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
          }
          $10_1 = $604($0_1 | 0) | 0;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $1_1 + 4 | 0;
          HEAP32[$1_1 >> 2] = $10_1;
          HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 28 | 0) >> 2] | 0) + -1 | 0;
          continue label$38;
         };
        }
        $1_1 = $2_1;
        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1303($8_1 | 0) | 0 | 0)) {
         break label$4
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$6;
       }
       label$42 : {
        if (!$2_1) {
         break label$42
        }
        $10_1 = 1;
        label$43 : while (1) {
         if ($10_1 >>> 0 >= ($1016($2_1 | 0) | 0) >>> 0) {
          break label$42
         }
         label$44 : {
          label$45 : {
           if ($603($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$45
           }
           if (($604($0_1 | 0) | 0 | 0) == (HEAP32[($1017($2_1 | 0, $10_1 | 0) | 0) >> 2] | 0 | 0)) {
            break label$44
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$6;
         }
         $606($0_1 | 0) | 0;
         $10_1 = $10_1 + 1 | 0;
         continue label$43;
        };
       }
       $0_1 = 1;
       if (($1245($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $0_1 = 0;
       HEAP32[($11_1 + 16 | 0) >> 2] = 0;
       $975($13_1 | 0, $1245($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
       label$46 : {
        if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
         break label$46
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        break label$6;
       }
       $0_1 = 1;
      }
      $2007($17_1 | 0) | 0;
      $2007($16_1 | 0) | 0;
      $2007($15_1 | 0) | 0;
      $2007($14_1 | 0) | 0;
      $1989($13_1 | 0) | 0;
      $1258($12_1 | 0) | 0;
      break label$1;
     }
     $1_1 = $2_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $11_1 + 560 | 0;
  return $0_1 | 0;
 }
 
 function $1303($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1318($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1304($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $1305($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1964($0_1 | 0, $1_1 | 0) | 0;
  $779($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1306($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $1_1 = $1334($1_1 | 0) | 0;
    $1335($10_1 | 0, $1_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1336($10_1 | 0, $1_1 | 0);
    $1337($8_1 | 0, $10_1 | 0) | 0;
    $2007($10_1 | 0) | 0;
    $1338($10_1 | 0, $1_1 | 0);
    $1337($7_1 | 0, $10_1 | 0) | 0;
    $2007($10_1 | 0) | 0;
    HEAP32[$3_1 >> 2] = $1339($1_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $1340($1_1 | 0) | 0;
    $1341($10_1 | 0, $1_1 | 0);
    $62($5_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
    $1342($10_1 | 0, $1_1 | 0);
    $1337($6_1 | 0, $10_1 | 0) | 0;
    $2007($10_1 | 0) | 0;
    $1_1 = $1343($1_1 | 0) | 0;
    break label$1;
   }
   $1_1 = $1344($1_1 | 0) | 0;
   $1345($10_1 | 0, $1_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1346($10_1 | 0, $1_1 | 0);
   $1337($8_1 | 0, $10_1 | 0) | 0;
   $2007($10_1 | 0) | 0;
   $1347($10_1 | 0, $1_1 | 0);
   $1337($7_1 | 0, $10_1 | 0) | 0;
   $2007($10_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $1348($1_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $1349($1_1 | 0) | 0;
   $1350($10_1 | 0, $1_1 | 0);
   $62($5_1 | 0, $10_1 | 0) | 0;
   $1989($10_1 | 0) | 0;
   $1351($10_1 | 0, $1_1 | 0);
   $1337($6_1 | 0, $10_1 | 0) | 0;
   $2007($10_1 | 0) | 0;
   $1_1 = $1352($1_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $1_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1307($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1353($0_1 | 0, $613(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1308($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1093($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1310($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1354($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1311($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1355($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1312($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1313($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1356($0_1 | 0) | 0) - ($1354($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1358($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1316($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1357($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1359($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1303($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($752() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $752() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1303($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (167 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1303($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $485($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (167 | 0)) {
     break label$6
    }
    $1360($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 166;
   $4_1 = $1108($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1361($0_1 | 0, $4_1 | 0) | 0;
   $1111($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1303($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1303($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1318($0_1) {
  $0_1 = $0_1 | 0;
  return $1965($0_1 | 0) | 0 | 0;
 }
 
 function $1319($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 432 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 167;
  $8_1 = $1108($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $771($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $602($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1302($7_1 + 440 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $316($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$1
   }
   $1320($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $2018($6_1 | 0, $764($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $764($1_1 | 0, 48 | 0) | 0;
   $2_1 = $1303($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $4_1 = $3_1 + -4 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break label$3
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 4 | 0;
     continue label$4;
    };
   }
   $1321($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($603($7_1 + 440 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
  $1537($7_1 + 16 | 0 | 0) | 0;
  $1111($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $2_1 | 0;
 }
 
 function $1320($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1322($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($1153($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $1323($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $1324($2_1 | 0, $1_1 + 12 | 0 | 0);
    $1325($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $1326($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $1324($2_1 | 0, $1_1 + 8 | 0 | 0);
   $1327($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1321($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1016($0_1 | 0) | 0;
  $5_1 = $1328($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1329($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if ($1330($0_1 | 0, $1_1 | 0) | 0) {
     break label$2
    }
    label$3 : {
     if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
      break label$3
     }
     $2009($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
    }
    $5_1 = ($1093($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0;
    label$4 : {
     label$5 : while (1) {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      $1324($5_1 | 0, $1_1 | 0);
      $1_1 = $1_1 + 4 | 0;
      $5_1 = $5_1 + 4 | 0;
      continue label$5;
     };
    }
    HEAP32[$3_1 >> 2] = 0;
    $1324($5_1 | 0, $3_1 | 0);
    $1331($0_1 | 0, $6_1 + $4_1 | 0 | 0);
    break label$1;
   }
   $1_1 = $1333($3_1 | 0, $1_1 | 0, $2_1 | 0, $1332($0_1 | 0) | 0 | 0) | 0;
   $2016($0_1 | 0, $1151($1_1 | 0) | 0 | 0, $1016($1_1 | 0) | 0 | 0) | 0;
   $2007($1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1322($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1323($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1236($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1324($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $1325($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1236($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1326($0_1) {
  $0_1 = $0_1 | 0;
  return $1740($1236($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1236($0_1 | 0) | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | $1_1 | 0;
  $0_1 = $1236($0_1 | 0) | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
 }
 
 function $1328($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if (!($1153($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($1754($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1793($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (($1151($0_1 | 0) | 0) >>> 0 > $1_1 >>> 0) {
    break label$1
   }
   $2_1 = (($1151($0_1 | 0) | 0) + (($1016($0_1 | 0) | 0) << 2 | 0) | 0) >>> 0 >= $1_1 >>> 0;
  }
  return $2_1 | 0;
 }
 
 function $1331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($1153($0_1 | 0) | 0)) {
    break label$1
   }
   $1325($0_1 | 0, $1_1 | 0);
   return;
  }
  $1327($0_1 | 0, $1_1 | 0);
 }
 
 function $1332($0_1) {
  $0_1 = $0_1 | 0;
  return $1742($0_1 | 0) | 0 | 0;
 }
 
 function $1333($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $1794($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1795($3_1 | 0, $1_1 | 0, $2_1 | 0);
  $952($3_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1334($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101304 | 0) | 0 | 0;
 }
 
 function $1335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1337($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1362($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1339($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1340($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1343($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1344($0_1) {
  $0_1 = $0_1 | 0;
  return $959($0_1 | 0, 101296 | 0) | 0 | 0;
 }
 
 function $1345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1348($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1349($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1352($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1353($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1354($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1356($0_1 | 0) | 0 | 0) == ($1354($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1356($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1357($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $1_1 = $1090($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    if (!($1797($3_1 | 0, $1091($3_1 + 24 | 0 | 0) | 0 | 0, $1091($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $1092($3_1 + 24 | 0 | 0) | 0;
    $1092($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $1_1 ^ 1 | 0 | 0;
 }
 
 function $1358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1798($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1359($0_1) {
  $0_1 = $0_1 | 0;
  return $1381($0_1 | 0) | 0 | 0;
 }
 
 function $1360($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1380($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1380($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1361($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1109($0_1 | 0, $1360($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1359($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1381($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!($1153($0_1 | 0) | 0)) {
    break label$1
   }
   $1752($1332($0_1 | 0) | 0 | 0, $1323($0_1 | 0) | 0 | 0, $1754($0_1 | 0) | 0 | 0);
  }
  $1799($0_1 | 0, $1_1 | 0);
  $3_1 = $1236($1_1 | 0) | 0;
  $0_1 = $1236($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1327($1_1 | 0, 0 | 0);
  $0_1 = $1326($1_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1324($0_1 | 0, $2_1 + 12 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1363($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 464 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 348 | 0) >> 2] = $7_1 + 352 | 0;
  $8_1 = $917($7_1 + 352 | 0 | 0, 100 | 0, 67361 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 166;
  $9_1 = 0;
  $10_1 = $1079($7_1 + 232 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 166;
  $11_1 = $1079($7_1 + 224 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  $12_1 = $7_1 + 240 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $1004() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1080($7_1 + 348 | 0 | 0, $8_1 | 0, 67361 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break label$1
    }
    $1081($10_1 | 0, HEAP32[($7_1 + 348 | 0) >> 2] | 0 | 0);
    $1081($11_1 | 0, $483($8_1 | 0) | 0 | 0);
    if ($1364($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1241($11_1 | 0) | 0;
   }
   $771($7_1 + 216 | 0 | 0, $3_1 | 0);
   $13_1 = $329($7_1 + 216 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
   $1003($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 348 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $57($7_1 + 192 | 0 | 0) | 0;
   $14_1 = $57($7_1 + 176 | 0 | 0) | 0;
   $16_1 = $57($7_1 + 160 | 0 | 0) | 0;
   $1365($2_1 | 0, $9_1 | 0, $7_1 + 216 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 207 | 0 | 0, $7_1 + 206 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 166;
   $17_1 = $1079($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (((($52($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($52($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 1 | 0;
     break label$4;
    }
    $18_1 = ((($52($16_1 | 0) | 0) + ($52($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $1081($17_1 | 0, $483($18_1 | 0) | 0 | 0);
    $2_1 = $1241($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1366($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $316($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 208 | 0 | 0, HEAP8[($7_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 206 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $318($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1083($17_1 | 0) | 0;
   $1989($16_1 | 0) | 0;
   $1989($14_1 | 0) | 0;
   $1989($15_1 | 0) | 0;
   $1537($7_1 + 216 | 0 | 0) | 0;
   $1083($11_1 | 0) | 0;
   $1083($10_1 | 0) | 0;
   global$0 = $7_1 + 464 | 0;
   return $8_1 | 0;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1364($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1367($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1365($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $2_1 = $1269($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1270($10_1 | 0, $2_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1271($10_1 | 0, $2_1 | 0);
      $62($8_1 | 0, $10_1 | 0) | 0;
      $1989($10_1 | 0) | 0;
      break label$3;
     }
     $1368($10_1 | 0, $2_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1272($10_1 | 0, $2_1 | 0);
     $62($8_1 | 0, $10_1 | 0) | 0;
     $1989($10_1 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $1273($2_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $1274($2_1 | 0) | 0;
    $1275($10_1 | 0, $2_1 | 0);
    $62($6_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
    $1276($10_1 | 0, $2_1 | 0);
    $62($7_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
    $2_1 = $1277($2_1 | 0) | 0;
    break label$1;
   }
   $2_1 = $1278($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1279($10_1 | 0, $2_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1280($10_1 | 0, $2_1 | 0);
     $62($8_1 | 0, $10_1 | 0) | 0;
     $1989($10_1 | 0) | 0;
     break label$5;
    }
    $1369($10_1 | 0, $2_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1281($10_1 | 0, $2_1 | 0);
    $62($8_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
   }
   HEAP8[$4_1 >> 0] = $1282($2_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $1283($2_1 | 0) | 0;
   $1284($10_1 | 0, $2_1 | 0);
   $62($6_1 | 0, $10_1 | 0) | 0;
   $1989($10_1 | 0) | 0;
   $1285($10_1 | 0, $2_1 | 0);
   $62($7_1 | 0, $10_1 | 0) | 0;
   $1989($10_1 | 0) | 0;
   $2_1 = $1286($2_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $2_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1366($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($17_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($52($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 8 | 0) >> 2] = $1370($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1373($1371($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $1372($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($18_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAP8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $330($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 3:
      if ($966($13_1 | 0) | 0) {
       break label$6
      }
      $18_1 = HEAPU8[($964($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 2:
      $18_1 = $966($12_1 | 0) | 0;
      if (!$16_1) {
       break label$6
      }
      if ($18_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $1373($1370($12_1 | 0) | 0 | 0, $1372($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $7_1 | 0;
    $18_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($542($6_1 | 0, 64 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
       break label$12
      }
      $18_1 = $18_1 + 1 | 0;
      continue label$13;
     };
    }
    $19_1 = $14_1;
    label$14 : {
     if (($19_1 | 0) < (1 | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : while (1) {
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       if (!$19_1) {
        break label$15
       }
       $18_1 = $18_1 + -1 | 0;
       $21_1 = HEAPU8[$18_1 >> 0] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
       HEAP8[$22_1 >> 0] = $21_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if ($19_1) {
        break label$18
       }
       $22_1 = 0;
       break label$17;
      }
      $22_1 = $330($6_1 | 0, 48 | 0) | 0;
     }
     label$19 : {
      label$20 : while (1) {
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP8[$21_1 >> 0] = $22_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$20;
      };
     }
     HEAP8[$21_1 >> 0] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $18_1 = $330($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($966($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $1374() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($964($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label$25 : while (1) {
      if (($18_1 | 0) == ($4_1 | 0)) {
       break label$21
      }
      label$26 : {
       label$27 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break label$27
        }
        $22_1 = $19_1;
        break label$26;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       HEAP8[$21_1 >> 0] = $10_1;
       $22_1 = 0;
       label$28 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($52($11_1 | 0) | 0) >>> 0) {
         break label$28
        }
        $23_1 = $19_1;
        break label$26;
       }
       label$29 : {
        if ((HEAPU8[($964($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1190() | 0) & 255 | 0 | 0)) {
         break label$29
        }
        $23_1 = $1374() | 0;
        break label$26;
       }
       $23_1 = HEAP8[($964($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
      }
      $18_1 = $18_1 + -1 | 0;
      $19_1 = HEAPU8[$18_1 >> 0] | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
      HEAP8[$21_1 >> 0] = $19_1;
      $19_1 = $22_1 + 1 | 0;
      continue label$25;
     };
    }
    $1117($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1367($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1259($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1370($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1391($1_1 + 8 | 0 | 0, $0_1 | 0, $311($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1371($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1393($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1372($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1391($1_1 + 8 | 0 | 0, $0_1 | 0, ($311($0_1 | 0) | 0) + ($52($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1373($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1390($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1374() {
  return $1392() | 0 | 0;
 }
 
 function $1375($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  $771($6_1 + 184 | 0 | 0, $3_1 | 0);
  $7_1 = $329($6_1 + 184 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($52($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAPU8[($964($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($330($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $57($6_1 + 160 | 0 | 0) | 0;
  $10_1 = $57($6_1 + 144 | 0 | 0) | 0;
  $11_1 = $57($6_1 + 128 | 0 | 0) | 0;
  $1365($2_1 | 0, $8_1 | 0, $6_1 + 184 | 0 | 0, $6_1 + 176 | 0 | 0, $6_1 + 175 | 0 | 0, $6_1 + 174 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 166;
  $12_1 = $1079($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($52($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $52($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (((($52($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($52($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ((($52($11_1 | 0) | 0) + ($52($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $1081($12_1 | 0, $483($13_1 | 0) | 0 | 0);
   $2_1 = $1241($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1976();
   wasm2js_trap();
  }
  $1366($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $316($3_1 | 0) | 0 | 0, $51($5_1 | 0) | 0 | 0, ($51($5_1 | 0) | 0) + ($52($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 175 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 174 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $318($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1083($12_1 | 0) | 0;
  $1989($11_1 | 0) | 0;
  $1989($10_1 | 0) | 0;
  $1989($9_1 | 0) | 0;
  $1537($6_1 + 184 | 0 | 0) | 0;
  global$0 = $6_1 + 192 | 0;
  return $5_1 | 0;
 }
 
 function $1376($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 1072 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 956 | 0) >> 2] = $7_1 + 960 | 0;
  $8_1 = $917($7_1 + 960 | 0 | 0, 100 | 0, 67361 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 166;
  $9_1 = 0;
  $10_1 = $1079($7_1 + 536 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 166;
  $11_1 = $1108($7_1 + 528 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  $12_1 = $7_1 + 544 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $1004() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1080($7_1 + 956 | 0 | 0, $8_1 | 0, 67361 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break label$1
    }
    $1081($10_1 | 0, HEAP32[($7_1 + 956 | 0) >> 2] | 0 | 0);
    $1109($11_1 | 0, $483($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($1377($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1303($11_1 | 0) | 0;
   }
   $771($7_1 + 520 | 0 | 0, $3_1 | 0);
   $13_1 = $602($7_1 + 520 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
   $1043($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 956 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $57($7_1 + 488 | 0 | 0) | 0;
   $14_1 = $1215($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $1215($7_1 + 456 | 0 | 0) | 0;
   $1378($2_1 | 0, $9_1 | 0, $7_1 + 520 | 0 | 0, $7_1 + 512 | 0 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 452 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 166;
   $17_1 = $1108($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (((($1016($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($1016($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0) + 1 | 0;
     break label$4;
    }
    $18_1 = ((($1016($16_1 | 0) | 0) + ($1016($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $1109($17_1 | 0, $483($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $1303($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1379($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $316($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 512 | 0 | 0, HEAP32[($7_1 + 508 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 504 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0);
   $8_1 = $1099($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1111($17_1 | 0) | 0;
   $2007($16_1 | 0) | 0;
   $2007($14_1 | 0) | 0;
   $1989($15_1 | 0) | 0;
   $1537($7_1 + 520 | 0 | 0) | 0;
   $1111($11_1 | 0) | 0;
   $1083($10_1 | 0) | 0;
   global$0 = $7_1 + 1072 | 0;
   return $8_1 | 0;
  }
  $1976();
  wasm2js_trap();
 }
 
 function $1377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1382($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1378($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $2_1 = $1334($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1335($10_1 | 0, $2_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1336($10_1 | 0, $2_1 | 0);
      $1337($8_1 | 0, $10_1 | 0) | 0;
      $2007($10_1 | 0) | 0;
      break label$3;
     }
     $1383($10_1 | 0, $2_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1338($10_1 | 0, $2_1 | 0);
     $1337($8_1 | 0, $10_1 | 0) | 0;
     $2007($10_1 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $1339($2_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $1340($2_1 | 0) | 0;
    $1341($10_1 | 0, $2_1 | 0);
    $62($6_1 | 0, $10_1 | 0) | 0;
    $1989($10_1 | 0) | 0;
    $1342($10_1 | 0, $2_1 | 0);
    $1337($7_1 | 0, $10_1 | 0) | 0;
    $2007($10_1 | 0) | 0;
    $2_1 = $1343($2_1 | 0) | 0;
    break label$1;
   }
   $2_1 = $1344($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1345($10_1 | 0, $2_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1346($10_1 | 0, $2_1 | 0);
     $1337($8_1 | 0, $10_1 | 0) | 0;
     $2007($10_1 | 0) | 0;
     break label$5;
    }
    $1384($10_1 | 0, $2_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1347($10_1 | 0, $2_1 | 0);
    $1337($8_1 | 0, $10_1 | 0) | 0;
    $2007($10_1 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = $1348($2_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $1349($2_1 | 0) | 0;
   $1350($10_1 | 0, $2_1 | 0);
   $62($6_1 | 0, $10_1 | 0) | 0;
   $1989($10_1 | 0) | 0;
   $1351($10_1 | 0, $2_1 | 0);
   $1337($7_1 | 0, $10_1 | 0) | 0;
   $2007($10_1 | 0) | 0;
   $2_1 = $1352($2_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $2_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1379($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $19_1 = 0, $21_1 = 0, $23_1 = 0, $22_1 = 0, $24_1 = 0, $15_1 = 0, $18_1 = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = $7_1 << 2 | 0;
  $18_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($18_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($1016($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 8 | 0) >> 2] = $1385($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1388($1386($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $1387($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $7_1 = $3_1 & 176 | 0;
     if (($7_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($7_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAP8[($8_1 + $18_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $7_1 = $764($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break label$6;
     case 3:
      if ($1018($13_1 | 0) | 0) {
       break label$6
      }
      $7_1 = HEAP32[($1017($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break label$6;
     case 2:
      $7_1 = $1018($12_1 | 0) | 0;
      if (!$16_1) {
       break label$6
      }
      if ($7_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $1388($1385($12_1 | 0) | 0 | 0, $1387($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $17_1 | 0;
    $7_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($7_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($605($6_1 | 0, 64 | 0, HEAP32[$7_1 >> 2] | 0 | 0) | 0)) {
       break label$12
      }
      $7_1 = $7_1 + 4 | 0;
      continue label$13;
     };
    }
    label$14 : {
     if (($14_1 | 0) < (1 | 0)) {
      break label$14
     }
     $19_1 = HEAP32[$2_1 >> 2] | 0;
     $21_1 = $14_1;
     label$15 : {
      label$16 : while (1) {
       if ($7_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       if (!$21_1) {
        break label$15
       }
       $7_1 = $7_1 + -4 | 0;
       $22_1 = HEAP32[$7_1 >> 2] | 0;
       $23_1 = $19_1 + 4 | 0;
       HEAP32[$2_1 >> 2] = $23_1;
       HEAP32[$19_1 >> 2] = $22_1;
       $21_1 = $21_1 + -1 | 0;
       $19_1 = $23_1;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if ($21_1) {
        break label$18
       }
       $23_1 = 0;
       break label$17;
      }
      $23_1 = $764($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
     }
     label$19 : {
      label$20 : while (1) {
       $22_1 = $19_1 + 4 | 0;
       if (($21_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP32[$19_1 >> 2] = $23_1;
       $21_1 = $21_1 + -1 | 0;
       $19_1 = $22_1;
       continue label$20;
      };
     }
     HEAP32[$2_1 >> 2] = $22_1;
     HEAP32[$19_1 >> 2] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($7_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $19_1 = $764($6_1 | 0, 48 | 0) | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      $7_1 = $21_1 + 4 | 0;
      HEAP32[$2_1 >> 2] = $7_1;
      HEAP32[$21_1 >> 2] = $19_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($966($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $1374() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($964($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label$25 : {
      label$26 : while (1) {
       if (($7_1 | 0) == ($4_1 | 0)) {
        break label$25
       }
       label$27 : {
        label$28 : {
         if (($19_1 | 0) == ($23_1 | 0)) {
          break label$28
         }
         $22_1 = $19_1;
         break label$27;
        }
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
        HEAP32[$21_1 >> 2] = $10_1;
        $22_1 = 0;
        label$29 : {
         $24_1 = $24_1 + 1 | 0;
         if ($24_1 >>> 0 < ($52($11_1 | 0) | 0) >>> 0) {
          break label$29
         }
         $23_1 = $19_1;
         break label$27;
        }
        label$30 : {
         if ((HEAPU8[($964($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1190() | 0) & 255 | 0 | 0)) {
          break label$30
         }
         $23_1 = $1374() | 0;
         break label$27;
        }
        $23_1 = HEAP8[($964($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
       }
       $7_1 = $7_1 + -4 | 0;
       $19_1 = HEAP32[$7_1 >> 2] | 0;
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
       HEAP32[$21_1 >> 2] = $19_1;
       $19_1 = $22_1 + 1 | 0;
       continue label$26;
      };
     }
     $7_1 = HEAP32[$2_1 >> 2] | 0;
    }
    $1119($20_1 | 0, $7_1 | 0);
   }
   $18_1 = $18_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1380($0_1) {
  $0_1 = $0_1 | 0;
  return $1966($0_1 | 0) | 0 | 0;
 }
 
 function $1381($0_1) {
  $0_1 = $0_1 | 0;
  return $780($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1382($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1318($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1383($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1385($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1395($1_1 + 8 | 0 | 0, $0_1 | 0, $1152($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1396($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1387($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1395($1_1 + 8 | 0 | 0, $0_1 | 0, ($1152($0_1 | 0) | 0) + (($1016($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1388($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1394($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1389($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 496 | 0;
  global$0 = $6_1;
  $771($6_1 + 488 | 0 | 0, $3_1 | 0);
  $7_1 = $602($6_1 + 488 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($1016($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAP32[($1017($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($764($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $57($6_1 + 456 | 0 | 0) | 0;
  $10_1 = $1215($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $1215($6_1 + 424 | 0 | 0) | 0;
  $1378($2_1 | 0, $8_1 | 0, $6_1 + 488 | 0 | 0, $6_1 + 480 | 0 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 420 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 166;
  $12_1 = $1108($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($1016($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $1016($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 420 | 0) >> 2] | 0;
    $13_1 = (((($1016($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($1016($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ((($1016($11_1 | 0) | 0) + ($1016($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $1109($12_1 | 0, $483($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $1303($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1976();
   wasm2js_trap();
  }
  $1379($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $316($3_1 | 0) | 0 | 0, $1151($5_1 | 0) | 0 | 0, ($1151($5_1 | 0) | 0) + (($1016($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 480 | 0 | 0, HEAP32[($6_1 + 476 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 472 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0);
  $5_1 = $1099($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1111($12_1 | 0) | 0;
  $2007($11_1 | 0) | 0;
  $2007($10_1 | 0) | 0;
  $1989($9_1 | 0) | 0;
  $1537($6_1 + 488 | 0 | 0) | 0;
  global$0 = $6_1 + 496 | 0;
  return $5_1 | 0;
 }
 
 function $1390($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1801($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $705($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $704($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = $1802($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $707($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1803($0_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1391($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1392() {
  return -1 | 0;
 }
 
 function $1393($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1394($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1814($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $723($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $722($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = $1815($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $725($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1816($0_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1395($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1397($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $1398($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $1399($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1400($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $1401($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1231($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $1402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1403($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 89968 + 8 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1004() | 0 | 0)) {
    break label$1
   }
   $919(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1404($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 88864 + 8 | 0;
  $0_1 = $1406($1_1 + 8 | 0 | 0, 30 | 0) | 0;
  $2($1_1 + 152 | 0 | 0, 68343 | 0) | 0;
  $1407($0_1 | 0);
  $1408();
  $1409($1_1 | 0, 102688 | 0);
  $1410();
  $1411($1_1 | 0, 102696 | 0);
  $1412();
  $1413($1_1 | 0, 102704 | 0);
  $1414();
  $1415($1_1 | 0, 102720 | 0);
  $1416();
  $1417($1_1 | 0, 102728 | 0);
  $1418();
  $1419($1_1 | 0, 102736 | 0);
  $1420();
  $1421($1_1 | 0, 102752 | 0);
  $1422();
  $1423($1_1 | 0, 102760 | 0);
  $1424();
  $1425($1_1 | 0, 102768 | 0);
  $1426();
  $1427($1_1 | 0, 102776 | 0);
  $1428();
  $1429($1_1 | 0, 102784 | 0);
  $1430();
  $1431($1_1 | 0, 102808 | 0);
  $1432();
  $1433($1_1 | 0, 102840 | 0);
  $1434();
  $1435($1_1 | 0, 102848 | 0);
  $1436();
  $1437($1_1 | 0, 102856 | 0);
  $1438();
  $1439($1_1 | 0, 102864 | 0);
  $1440();
  $1441($1_1 | 0, 102872 | 0);
  $1442();
  $1443($1_1 | 0, 102880 | 0);
  $1444();
  $1445($1_1 | 0, 102888 | 0);
  $1446();
  $1447($1_1 | 0, 102896 | 0);
  $1448();
  $1449($1_1 | 0, 102904 | 0);
  $1450();
  $1451($1_1 | 0, 102912 | 0);
  $1452();
  $1453($1_1 | 0, 102920 | 0);
  $1454();
  $1455($1_1 | 0, 102928 | 0);
  $1456();
  $1457($1_1 | 0, 102936 | 0);
  $1458();
  $1459($1_1 | 0, 102952 | 0);
  $1460();
  $1461($1_1 | 0, 102968 | 0);
  $1462();
  $1463($1_1 | 0, 102984 | 0);
  $1464();
  $1465($1_1 | 0, 103e3 | 0);
  $1466();
  $1467($1_1 | 0, 103008 | 0);
  return $1_1 | 0;
 }
 
 function $1405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1468($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90344 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1406($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1469($0_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
  $1470($0_1 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1471($0_1 | 0, $1_1 | 0);
   $1472($0_1 | 0, $1_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1407($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1473($0_1 | 0) | 0;
  $1474($0_1 | 0);
  $1475($0_1 | 0, $1_1 | 0);
  $1476($0_1 | 0);
 }
 
 function $1408() {
  $1479(102688 | 0, 1 | 0) | 0;
 }
 
 function $1409($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101200 | 0) | 0 | 0);
 }
 
 function $1410() {
  $1480(102696 | 0, 1 | 0) | 0;
 }
 
 function $1411($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101208 | 0) | 0 | 0);
 }
 
 function $1412() {
  $1565(102704 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $1413($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101404 | 0) | 0 | 0);
 }
 
 function $1414() {
  $1481(102720 | 0, 1 | 0) | 0;
 }
 
 function $1415($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101396 | 0) | 0 | 0);
 }
 
 function $1416() {
  $1482(102728 | 0, 1 | 0) | 0;
 }
 
 function $1417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101412 | 0) | 0 | 0);
 }
 
 function $1418() {
  $1585(102736 | 0, 1 | 0) | 0;
 }
 
 function $1419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101420 | 0) | 0 | 0);
 }
 
 function $1420() {
  $1483(102752 | 0, 1 | 0) | 0;
 }
 
 function $1421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101428 | 0) | 0 | 0);
 }
 
 function $1422() {
  $1484(102760 | 0, 1 | 0) | 0;
 }
 
 function $1423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101444 | 0) | 0 | 0);
 }
 
 function $1424() {
  $1485(102768 | 0, 1 | 0) | 0;
 }
 
 function $1425($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101436 | 0) | 0 | 0);
 }
 
 function $1426() {
  $1486(102776 | 0, 1 | 0) | 0;
 }
 
 function $1427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101452 | 0) | 0 | 0);
 }
 
 function $1428() {
  $1640(102784 | 0, 1 | 0) | 0;
 }
 
 function $1429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101460 | 0) | 0 | 0);
 }
 
 function $1430() {
  $1641(102808 | 0, 1 | 0) | 0;
 }
 
 function $1431($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101468 | 0) | 0 | 0);
 }
 
 function $1432() {
  $1487(102840 | 0, 1 | 0) | 0;
 }
 
 function $1433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101216 | 0) | 0 | 0);
 }
 
 function $1434() {
  $1488(102848 | 0, 1 | 0) | 0;
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101224 | 0) | 0 | 0);
 }
 
 function $1436() {
  $1489(102856 | 0, 1 | 0) | 0;
 }
 
 function $1437($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101232 | 0) | 0 | 0);
 }
 
 function $1438() {
  $1490(102864 | 0, 1 | 0) | 0;
 }
 
 function $1439($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101240 | 0) | 0 | 0);
 }
 
 function $1440() {
  $1491(102872 | 0, 1 | 0) | 0;
 }
 
 function $1441($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101280 | 0) | 0 | 0);
 }
 
 function $1442() {
  $1492(102880 | 0, 1 | 0) | 0;
 }
 
 function $1443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101288 | 0) | 0 | 0);
 }
 
 function $1444() {
  $1493(102888 | 0, 1 | 0) | 0;
 }
 
 function $1445($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101296 | 0) | 0 | 0);
 }
 
 function $1446() {
  $1494(102896 | 0, 1 | 0) | 0;
 }
 
 function $1447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101304 | 0) | 0 | 0);
 }
 
 function $1448() {
  $1495(102904 | 0, 1 | 0) | 0;
 }
 
 function $1449($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101312 | 0) | 0 | 0);
 }
 
 function $1450() {
  $1496(102912 | 0, 1 | 0) | 0;
 }
 
 function $1451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101320 | 0) | 0 | 0);
 }
 
 function $1452() {
  $1497(102920 | 0, 1 | 0) | 0;
 }
 
 function $1453($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101328 | 0) | 0 | 0);
 }
 
 function $1454() {
  $1498(102928 | 0, 1 | 0) | 0;
 }
 
 function $1455($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101336 | 0) | 0 | 0);
 }
 
 function $1456() {
  $1499(102936 | 0, 1 | 0) | 0;
 }
 
 function $1457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101248 | 0) | 0 | 0);
 }
 
 function $1458() {
  $1500(102952 | 0, 1 | 0) | 0;
 }
 
 function $1459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101256 | 0) | 0 | 0);
 }
 
 function $1460() {
  $1501(102968 | 0, 1 | 0) | 0;
 }
 
 function $1461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101264 | 0) | 0 | 0);
 }
 
 function $1462() {
  $1502(102984 | 0, 1 | 0) | 0;
 }
 
 function $1463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101272 | 0) | 0 | 0);
 }
 
 function $1464() {
  $1503(103e3 | 0, 1 | 0) | 0;
 }
 
 function $1465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101344 | 0) | 0 | 0);
 }
 
 function $1466() {
  $1504(103008 | 0, 1 | 0) | 0;
 }
 
 function $1467($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1478($0_1 | 0, $1_1 | 0, $1477(101352 | 0) | 0 | 0);
 }
 
 function $1468($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 95504 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1469($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1827($0_1 | 0, $1_1 | 0) | 0;
  $1828($1_1 + 8 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1470($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1471($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1829($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1830($0_1 | 0);
   wasm2js_trap();
  }
  $1831($2_1 + 8 | 0 | 0, $1523($0_1 | 0) | 0 | 0, $1_1 | 0);
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  HEAP32[($1832($0_1 | 0) | 0) >> 2] = $1_1 + ($3_1 << 2 | 0) | 0;
  $1833($0_1 | 0, 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1472($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1834($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($4_1 | 0)) {
     break label$2
    }
    $1835($3_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return;
   }
   $1837($1523($0_1 | 0) | 0 | 0, $1836($1_1 | 0) | 0 | 0);
   $1_1 = $1_1 + 4 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   continue label$1;
  };
 }
 
 function $1473($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1474($0_1) {
  $0_1 = $0_1 | 0;
  $1859($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1475($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1845($0_1 | 0, $1844($0_1 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + (($1524($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + (($1473($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1476($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1477($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 168;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1541($0_1 | 0, $1540($1_1 + 16 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 32 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $1478($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1507($1_1 | 0);
  $4_1 = $1511($3_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   $1_1 = $0_1 + 8 | 0;
   if (($1473($1_1 | 0) | 0) >>> 0 > $2_1 >>> 0) {
    break label$1
   }
   $1514($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($1506($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break label$2
   }
   $1515(HEAP32[($1506($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $1516($4_1 | 0) | 0;
  HEAP32[($1506($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $1512($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91452 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1480($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91484 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1566($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90400 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1482($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1586($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90548 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1586($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90696 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1484($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1586($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90928 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1485($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1586($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 90812 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1586($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91044 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1487($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91516 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1488($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91760 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 91972 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1490($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 92204 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1914($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 93188 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1492($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1914($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 93336 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1914($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 93452 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1494($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1914($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 93568 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1495($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1915($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 93684 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1496($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1916($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 93848 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1917($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 94012 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1918($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 94176 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = $1919($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 92404 + 8 | 0;
  HEAP32[$0_1 >> 2] = 92404 + 56 | 0;
  return $1_1 | 0;
 }
 
 function $1500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = $1920($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 92668 + 8 | 0;
  HEAP32[$0_1 >> 2] = 92668 + 56 | 0;
  return $1_1 | 0;
 }
 
 function $1501($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  $1921($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 92904 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  $1921($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 93060 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1922($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 94340 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1922($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 94460 + 8 | 0;
  return $1_1 | 0;
 }
 
 function $1505() {
  label$1 : {
   if (!(HEAPU8[(0 + 101376 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101372 | 0) >> 2] | 0 | 0;
  }
  $1508() | 0;
  HEAP8[(0 + 101376 | 0) >> 0] = 1;
  HEAP32[(0 + 101372 | 0) >> 2] = 101368;
  return 101368 | 0;
 }
 
 function $1506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1507($0_1) {
  $0_1 = $0_1 | 0;
  $1509($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $1508() {
  $1532();
  HEAP32[(0 + 101368 | 0) >> 2] = 103016;
  return 101368 | 0;
 }
 
 function $1509($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1530($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $675();
   wasm2js_trap();
  }
  return HEAP32[($1531($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1513($0_1 | 0, $2_1 + 12 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1512($0_1) {
  $0_1 = $0_1 | 0;
  $1517($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $1513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1923($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1514($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $1473($0_1 | 0) | 0;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1527($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  label$2 : {
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$2
   }
   $1528($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $1515($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $1520($0_1 + 4 | 0 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  }
  return ($1_1 | 0) == (-1 | 0) | 0;
 }
 
 function $1516($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1529($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1529($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1517($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1529($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1529($0_1 | 0) | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1924($1_1 | 0);
  }
 }
 
 function $1518($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 88864 + 8 | 0;
  $1_1 = $0_1 + 8 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= ($1473($1_1 | 0) | 0) >>> 0) {
     break label$1
    }
    label$3 : {
     if (!(HEAP32[($1506($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break label$3
     }
     $1515(HEAP32[($1506($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  $1989($0_1 + 152 | 0 | 0) | 0;
  $1519($1_1 | 0) | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1519($0_1) {
  $0_1 = $0_1 | 0;
  $1521($0_1 | 0);
  $1522($0_1 | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1474($0_1 | 0);
   $1525($1523($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1524($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1520($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1521($0_1) {
  $0_1 = $0_1 | 0;
  $1845($0_1 | 0, $1844($0_1 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + (($1524($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + (($1473($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + (($1524($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1522($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1523($0_1) {
  $0_1 = $0_1 | 0;
  return $1842($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1524($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1855($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1525($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1871($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1526($0_1) {
  $0_1 = $0_1 | 0;
  $1518($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1527($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((((HEAP32[($1832($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $1472($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $1523($0_1 | 0) | 0;
   $3_1 = $1873($2_1 + 8 | 0 | 0, $1863($0_1 | 0, ($1473($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $1473($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $1874($3_1 | 0, $1_1 | 0);
   $1875($0_1 | 0, $3_1 | 0);
   $1876($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1864($0_1 | 0, $1_1 | 0);
  $2_1 = $1473($0_1 | 0) | 0;
  $1859($0_1 | 0, $1_1 | 0);
  $1475($0_1 | 0, $2_1 | 0);
 }
 
 function $1529($0_1) {
  $0_1 = $0_1 | 0;
  return $1925($0_1 | 0) | 0 | 0;
 }
 
 function $1530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = $0_1 + 8 | 0;
   if (($1473($0_1 | 0) | 0) >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = (HEAP32[($1531($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1531($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1532() {
  $1404(103016 | 0, 1 | 0) | 0;
 }
 
 function $1533() {
  $1536(101380 | 0, $1505() | 0 | 0) | 0;
  return 101380 | 0;
 }
 
 function $1534() {
  label$1 : {
   if (!(HEAPU8[(0 + 101388 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101384 | 0) >> 2] | 0 | 0;
  }
  $1533() | 0;
  HEAP8[(0 + 101388 | 0) >> 0] = 1;
  HEAP32[(0 + 101384 | 0) >> 2] = 101380;
  return 101380 | 0;
 }
 
 function $1535($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1534() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1507($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1507($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1537($0_1) {
  $0_1 = $0_1 | 0;
  $1515(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1538($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1530(HEAP32[$0_1 >> 2] | 0 | 0, $1477($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1539($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1549() | 0;
 }
 
 function $1540($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1545($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$1
   }
   $1971($0_1 | 0, $1547($2_1 | 0, $1546($2_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0) | 0 | 0, 169 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1542($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $446($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1543($0_1) {
  $0_1 = $0_1 | 0;
  $938($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1544($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $1545($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1546($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1926($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1548($0_1) {
  $0_1 = $0_1 | 0;
  $1927($0_1 | 0);
 }
 
 function $1549() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 101392 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 101392 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1550($0_1) {
  $0_1 = $0_1 | 0;
  $938($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1551($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $3_1 = ((HEAP32[(($2_1 << 2 | 0) + 88944 | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1552($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     if ($5_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $4_1 = HEAP32[(($5_1 << 2 | 0) + 88944 | 0) >> 2] | 0;
    }
    HEAP32[$3_1 >> 2] = $4_1;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1553($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     if ($4_1 >>> 0 > 127 >>> 0) {
      break label$2
     }
     if (!((HEAP32[(($4_1 << 2 | 0) + 88944 | 0) >> 2] | 0) & $1_1 | 0)) {
      break label$2
     }
     $3_1 = $2_1;
    }
    return $3_1 | 0;
   }
   $2_1 = $2_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1554($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    label$3 : {
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     if ($4_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     if (!((HEAP32[(($4_1 << 2 | 0) + 88944 | 0) >> 2] | 0) & $1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 4 | 0;
     continue label$2;
    }
    break label$2;
   };
   $3_1 = $2_1;
  }
  return $3_1 | 0;
 }
 
 function $1555($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1556() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1556() {
  return HEAP32[($921() | 0) >> 2] | 0 | 0;
 }
 
 function $1557($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1556() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1559() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1559() {
  return HEAP32[($922() | 0) >> 2] | 0 | 0;
 }
 
 function $1560($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1559() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1562($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1563($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 >> 24 | 0;
 }
 
 function $1564($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1565($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $1566($1405($0_1 | 0, $3_1 | 0) | 0 | 0) | 0;
  HEAP8[($3_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 88884 + 8 | 0;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 88944;
  }
  return $3_1 | 0;
 }
 
 function $1566($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1567($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 88884 + 8 | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 255 | 0)) {
    break label$1
   }
   $1980($1_1 | 0);
  }
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1568($0_1) {
  $0_1 = $0_1 | 0;
  $1567($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1556() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 << 24 >> 24 | 0;
 }
 
 function $1570($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1556() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1571($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1559() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 << 24 >> 24 | 0;
 }
 
 function $1572($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1559() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1573($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1574($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1575($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) < (0 | 0) ? $2_1 : $1_1) | 0;
 }
 
 function $1576($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) < (0 | 0) ? $3_1 : $5_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1577($0_1) {
  $0_1 = $0_1 | 0;
  $938($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1578($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1579($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1580($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1581($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1582($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1583($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $4_1 = HEAP32[($673($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1584($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1586($1405($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 89968 + 8 | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $1004() | 0;
  return $1_1 | 0;
 }
 
 function $1586($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1587($0_1) {
  $0_1 = $0_1 | 0;
  $1403($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1588($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      $10_1 = 1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $11_1 = $1589($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           switch ($11_1 + 1 | 0 | 0) {
           case 0:
            break label$12;
           case 1:
            break label$6;
           default:
            break label$11;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label$13 : {
           label$14 : while (1) {
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$13
            }
            $9_1 = $1590($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            if (($9_1 | 0) == (-1 | 0)) {
             break label$13
            }
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue label$14;
           };
          }
          HEAP32[$4_1 >> 2] = $2_1;
          break label$10;
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$8
         }
         label$15 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$15
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label$4;
         }
         $9_1 = $1590($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) != (-1 | 0)) {
          break label$9
         }
        }
        $10_1 = 2;
        break label$6;
       }
       $2_1 = $8_1 + 4 | 0;
       label$16 : {
        if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
         break label$16
        }
        $10_1 = 1;
        break label$6;
       }
       label$17 : {
        label$18 : while (1) {
         if (!$9_1) {
          break label$17
         }
         $5_1 = HEAPU8[$2_1 >> 0] | 0;
         $10_1 = HEAP32[$7_1 >> 2] | 0;
         HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
         HEAP8[$10_1 >> 0] = $5_1;
         $9_1 = $9_1 + -1 | 0;
         $2_1 = $2_1 + 1 | 0;
         continue label$18;
        };
       }
       $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = $2_1;
       label$19 : while (1) {
        label$20 : {
         if (($9_1 | 0) != ($3_1 | 0)) {
          break label$20
         }
         $9_1 = $3_1;
         break label$5;
        }
        if (!(HEAP32[$9_1 >> 2] | 0)) {
         break label$5
        }
        $9_1 = $9_1 + 4 | 0;
        continue label$19;
       };
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $10_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $10_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1589($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $1007($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $4_1 = $923($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1008($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1590($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1007($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $896($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1008($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1591($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $10_1 = $1592($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break label$12
           }
           label$13 : {
            label$14 : while (1) {
             HEAP32[$7_1 >> 2] = $5_1;
             if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
              break label$13
             }
             $6_1 = 1;
             label$15 : {
              label$16 : {
               label$17 : {
                $5_1 = $1593($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
                switch ($5_1 + 2 | 0 | 0) {
                case 2:
                 break label$15;
                case 1:
                 break label$17;
                case 0:
                 break label$9;
                default:
                 break label$16;
                };
               }
               HEAP32[$4_1 >> 2] = $2_1;
               break label$11;
              }
              $6_1 = $5_1;
             }
             $2_1 = $2_1 + $6_1 | 0;
             $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
             continue label$14;
            };
           }
           HEAP32[$4_1 >> 2] = $2_1;
           break label$7;
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          label$18 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break label$18
           }
           $9_1 = $3_1;
           continue label$4;
          }
          if (!($1593($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break label$10
          }
         }
         $9_1 = 2;
         break label$6;
        }
        HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label$19 : while (1) {
         label$20 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$20
          }
          $9_1 = $3_1;
          break label$5;
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          break label$5
         }
         $9_1 = $9_1 + 1 | 0;
         continue label$19;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1592($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $1007($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $4_1 = $925($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1008($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1593($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $1007($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $3_1 = $880($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1008($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1594($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $6_1 = 2;
  label$1 : {
   $2_1 = $1590($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($2_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $6_1 = 1;
   $2_1 = $2_1 + -1 | 0;
   if ($2_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break label$1
   }
   $6_1 = $5_1 + 12 | 0;
   label$2 : while (1) {
    label$3 : {
     if ($2_1) {
      break label$3
     }
     $6_1 = 0;
     break label$1;
    }
    $0_1 = HEAPU8[$6_1 >> 0] | 0;
    $1_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $1_1 + 1 | 0;
    HEAP8[$1_1 >> 0] = $0_1;
    $2_1 = $2_1 + -1 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1595($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = -1;
  label$1 : {
   if ($1596(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
    break label$1
   }
   label$2 : {
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ($0_1) {
     break label$2
    }
    return 1 | 0;
   }
   $1_1 = ($1597($0_1 | 0) | 0 | 0) == (1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $1596($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1007($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $926($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1008($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1597($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1007($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $927() | 0;
  $1008($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1598($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1599($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break label$1
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $7_1 = 1;
    label$3 : {
     label$4 : {
      $8_1 = $1600($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      switch ($8_1 + 2 | 0 | 0) {
      case 0:
      case 1:
       break label$1;
      case 2:
       break label$3;
      default:
       break label$4;
      };
     }
     $7_1 = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function $1600($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1007($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $928($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $1008($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1601($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return $1597($0_1 | 0) | 0 | 0;
 }
 
 function $1602($0_1) {
  $0_1 = $0_1 | 0;
  $938($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1603($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $1604($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1604($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $7_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($0_1 >>> 0 < $1_1 >>> 0) {
       break label$5
      }
      $7_1 = 0;
      break label$1;
     }
     $7_1 = 2;
     $3_1 = HEAPU16[$0_1 >> 1] | 0;
     if ($3_1 >>> 0 > $6_1 >>> 0) {
      break label$1
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break label$8
        }
        $7_1 = 1;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1;
        break label$7;
       }
       label$9 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break label$9
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (2 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$10 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break label$10
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$11 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break label$11
        }
        $7_1 = 1;
        if (($1_1 - $0_1 | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $8_1 = HEAPU16[($0_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break label$6
        }
        if (($4_1 - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $7_1 = $3_1 & 960 | 0;
        if ((($7_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $0_1 + 2 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        $7_1 = ($7_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$0_1 >> 0] = $7_1 >>> 2 | 0 | 240 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($7_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break label$1
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $0_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $0_1;
      continue label$4;
     }
     break label$4;
    };
    return 2 | 0;
   }
   return 1 | 0;
  }
  return $7_1 | 0;
 }
 
 function $1605($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $1606($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1606($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $183_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $0_1 + 3 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       if ($3_1 >>> 0 >= $1_1 >>> 0) {
        break label$5
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if ($7_1 >>> 0 >= $4_1 >>> 0) {
        break label$5
       }
       $8_1 = 2;
       $0_1 = HEAPU8[$3_1 >> 0] | 0;
       if ($0_1 >>> 0 > $6_1 >>> 0) {
        break label$2
       }
       label$7 : {
        label$8 : {
         if (($0_1 << 24 >> 24 | 0) < (0 | 0)) {
          break label$8
         }
         HEAP16[$7_1 >> 1] = $0_1;
         $0_1 = $3_1 + 1 | 0;
         break label$7;
        }
        if ($0_1 >>> 0 < 194 >>> 0) {
         break label$2
        }
        label$9 : {
         if ($0_1 >>> 0 > 223 >>> 0) {
          break label$9
         }
         if (($1_1 - $3_1 | 0 | 0) < (2 | 0)) {
          break label$3
         }
         $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $0_1 = $9_1 & 63 | 0 | (($0_1 << 6 | 0) & 1984 | 0) | 0;
         if ($0_1 >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$7_1 >> 1] = $0_1;
         $0_1 = $3_1 + 2 | 0;
         break label$7;
        }
        label$10 : {
         if ($0_1 >>> 0 > 239 >>> 0) {
          break label$10
         }
         if (($1_1 - $3_1 | 0 | 0) < (3 | 0)) {
          break label$3
         }
         $10_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
         $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         label$11 : {
          label$12 : {
           label$13 : {
            if (($0_1 | 0) == (237 | 0)) {
             break label$13
            }
            if (($0_1 | 0) != (224 | 0)) {
             break label$12
            }
            if (($9_1 & 224 | 0 | 0) == (160 | 0)) {
             break label$11
            }
            break label$4;
           }
           if (($9_1 & 224 | 0 | 0) == (128 | 0)) {
            break label$11
           }
           break label$4;
          }
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
           break label$4
          }
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $0_1 = ($9_1 & 63 | 0) << 6 | 0 | ($0_1 << 12 | 0) | 0 | ($10_1 & 63 | 0) | 0;
         if (($0_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$7_1 >> 1] = $0_1;
         $0_1 = $3_1 + 3 | 0;
         break label$7;
        }
        if ($0_1 >>> 0 > 244 >>> 0) {
         break label$2
        }
        $8_1 = 1;
        if (($1_1 - $3_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $10_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
        $9_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        label$14 : {
         label$15 : {
          switch ($0_1 + -240 | 0 | 0) {
          case 0:
           if ((($3_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
            break label$2
           }
           break label$14;
          case 4:
           if (($3_1 & 240 | 0 | 0) != (128 | 0)) {
            break label$2
           }
           break label$14;
          default:
           break label$15;
          };
         }
         if (($3_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
         }
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($4_1 - $7_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $8_1 = 2;
        $0_1 = $0_1 & 7 | 0;
        $11_1 = $9_1 << 6 | 0;
        $10_1 = $10_1 & 63 | 0;
        if ((($3_1 << 12 | 0) & 258048 | 0 | ($0_1 << 18 | 0) | 0 | ($11_1 & 4032 | 0) | 0 | $10_1 | 0) >>> 0 > $6_1 >>> 0) {
         break label$4
        }
        $183_1 = $0_1 << 8 | 0;
        $0_1 = $3_1 << 2 | 0;
        HEAP16[$7_1 >> 1] = ($183_1 | ($0_1 & 192 | 0) | 0 | ($0_1 & 60 | 0) | 0 | (($9_1 >>> 4 | 0) & 3 | 0) | 0) + 16320 | 0 | 55296 | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 2 | 0;
        HEAP16[($7_1 + 2 | 0) >> 1] = $11_1 & 960 | 0 | $10_1 | 0 | 56320 | 0;
        $0_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
       }
       HEAP32[$2_1 >> 2] = $0_1;
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 2 | 0;
       continue label$6;
      };
     }
     $8_1 = $3_1 >>> 0 < $1_1 >>> 0;
    }
    return $8_1 | 0;
   }
   return 1 | 0;
  }
  return 2 | 0;
 }
 
 function $1607($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1608($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1609($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1610($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1611($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1611($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = $0_1 + ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($4_1 >>> 0 > $3_1 >>> 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (($4_1 << 24 >> 24 | 0) < (0 | 0)) {
       break label$5
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $7_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($8_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
        break label$2
       }
       $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($7_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       $5_1 = $5_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       break label$4;
      }
      if (($8_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($8_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($7_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 3 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1612($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1613($0_1) {
  $0_1 = $0_1 | 0;
  $938($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1614($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $1604($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1615($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $1606($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1616($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1617($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1618($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1619($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1611($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1620($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1621($0_1) {
  $0_1 = $0_1 | 0;
  $938($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1622($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $1623($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1623($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $0_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : while (1) {
    label$4 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$4
     }
     $0_1 = 0;
     break label$1;
    }
    $0_1 = 2;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1 >>> 0 > $6_1 >>> 0) {
     break label$1
    }
    if (($3_1 & -2048 | 0 | 0) == (55296 | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if ($3_1 >>> 0 > 127 >>> 0) {
        break label$7
       }
       $0_1 = 1;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1;
       break label$6;
      }
      label$8 : {
       if ($3_1 >>> 0 > 2047 >>> 0) {
        break label$8
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (2 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      $0_1 = HEAP32[$5_1 >> 2] | 0;
      $7_1 = $4_1 - $0_1 | 0;
      label$9 : {
       if ($3_1 >>> 0 > 65535 >>> 0) {
        break label$9
       }
       if (($7_1 | 0) < (3 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      if (($7_1 | 0) < (4 | 0)) {
       break label$5
      }
      HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = $3_1 >>> 18 | 0 | 240 | 0;
      $0_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = ($3_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $0_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $0_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
      HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
     }
     $3_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     continue label$3;
    }
    break label$3;
   };
   return 1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1624($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $1625($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1625($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $8_1 = 0, $12_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $0_1 + 3 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$4
      }
      $8_1 = HEAP32[$5_1 >> 2] | 0;
      if ($8_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      $7_1 = HEAP8[$0_1 >> 0] | 0;
      $3_1 = $7_1 & 255 | 0;
      label$6 : {
       label$7 : {
        if (($7_1 | 0) < (0 | 0)) {
         break label$7
        }
        label$8 : {
         if ($3_1 >>> 0 > $6_1 >>> 0) {
          break label$8
         }
         $7_1 = 1;
         break label$6;
        }
        return 2 | 0;
       }
       $9_1 = 2;
       if ($7_1 >>> 0 < -62 >>> 0) {
        break label$3
       }
       label$9 : {
        if ($7_1 >>> 0 > -33 >>> 0) {
         break label$9
        }
        if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
         break label$2
        }
        $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $7_1 = 2;
        $9_1 = 2;
        $3_1 = $10_1 & 63 | 0 | (($3_1 << 6 | 0) & 1984 | 0) | 0;
        if ($3_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       label$10 : {
        if ($7_1 >>> 0 > -17 >>> 0) {
         break label$10
        }
        if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($3_1 | 0) == (237 | 0)) {
            break label$13
           }
           if (($3_1 | 0) != (224 | 0)) {
            break label$12
           }
           if (($10_1 & 224 | 0 | 0) == (160 | 0)) {
            break label$11
           }
           break label$3;
          }
          if (($10_1 & 224 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$3;
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$3
         }
        }
        if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $7_1 = 3;
        $3_1 = ($10_1 & 63 | 0) << 6 | 0 | (($3_1 << 12 | 0) & 61440 | 0) | 0 | ($11_1 & 63 | 0) | 0;
        if ($3_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       if ($7_1 >>> 0 > -12 >>> 0) {
        break label$3
       }
       if (($1_1 - $0_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $12_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
       label$14 : {
        label$15 : {
         switch ($3_1 + -240 | 0 | 0) {
         case 0:
          if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$14
          }
          break label$3;
         case 4:
          if (($10_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$14
          }
          break label$3;
         default:
          break label$15;
         };
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
       }
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       if (($12_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       $7_1 = 4;
       $3_1 = ($10_1 & 63 | 0) << 12 | 0 | (($3_1 << 18 | 0) & 1835008 | 0) | 0 | (($11_1 << 6 | 0) & 4032 | 0) | 0 | ($12_1 & 63 | 0) | 0;
       if ($3_1 >>> 0 > $6_1 >>> 0) {
        break label$3
       }
      }
      HEAP32[$8_1 >> 2] = $3_1;
      HEAP32[$2_1 >> 2] = $0_1 + $7_1 | 0;
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
      continue label$5;
     };
    }
    $9_1 = $0_1 >>> 0 < $1_1 >>> 0;
   }
   return $9_1 | 0;
  }
  return 1 | 0;
 }
 
 function $1626($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1627($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1628($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1629($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1630($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1630($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = $0_1 + ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAP8[$5_1 >> 0] | 0;
    $7_1 = $4_1 & 255 | 0;
    label$4 : {
     label$5 : {
      if (($4_1 | 0) < (0 | 0)) {
       break label$5
      }
      $4_1 = 1;
      if ($7_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      break label$2;
     }
     if ($4_1 >>> 0 < -62 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > -33 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      $4_1 = 2;
      if (($8_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      break label$2;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > -17 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $9_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($7_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($7_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($8_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > -12 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $10_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $9_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($9_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($9_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       $4_1 = 4;
       if ((($9_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($10_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       break label$4;
      }
      if (($8_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     $4_1 = 3;
     if ((($8_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $5_1 + $4_1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1631($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1632($0_1) {
  $0_1 = $0_1 | 0;
  $938($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1633($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $1623($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1634($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $2_1 = $1625($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1635($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1636($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1637($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1638($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1630($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1639($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1640($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($1_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$1_1 >> 2] = 90016 + 8 | 0;
  $57($1_1 + 12 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1641($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1405($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 46;
  HEAP32[($1_1 + 12 | 0) >> 2] = 44;
  HEAP32[$1_1 >> 2] = 90056 + 8 | 0;
  $57($1_1 + 16 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1642($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 90016 + 8 | 0;
  $1989($0_1 + 12 | 0 | 0) | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1643($0_1) {
  $0_1 = $0_1 | 0;
  $1642($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1644($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 90056 + 8 | 0;
  $1989($0_1 + 16 | 0 | 0) | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1645($0_1) {
  $0_1 = $0_1 | 0;
  $1644($0_1 | 0) | 0;
  $1979($0_1 | 0);
 }
 
 function $1646($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $1647($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1648($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $1649($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1650($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $6($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $1651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $6($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $1652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2($0_1 | 0, 67392 | 0) | 0;
 }
 
 function $1653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1654($0_1 | 0, 90096 | 0) | 0;
 }
 
 function $1654($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = $950($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  $2012($0_1 | 0, $1_1 | 0, $1655($1_1 | 0) | 0 | 0);
  $952($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1655($0_1) {
  $0_1 = $0_1 | 0;
  return $920($0_1 | 0) | 0 | 0;
 }
 
 function $1656($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2($0_1 | 0, 67413 | 0) | 0;
 }
 
 function $1657($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1654($0_1 | 0, 90116 | 0) | 0;
 }
 
 function $1658($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1659($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1659($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1997($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1660($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1910($0_1 | 0, $1_1 | 0);
 }
 
 function $1661($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 101480 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101476 | 0) >> 2] | 0 | 0;
  }
  $1662();
  HEAP8[(0 + 101480 | 0) >> 0] = 1;
  HEAP32[(0 + 101476 | 0) >> 2] = 101664;
  return 101664 | 0;
 }
 
 function $1662() {
  label$1 : {
   if (HEAPU8[(0 + 101832 | 0) >> 0] | 0) {
    break label$1
   }
   $404(170 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101832 | 0) >> 0] = 1;
  }
  $1658(101664 | 0, 65671 | 0) | 0;
  $1658(101676 | 0, 65678 | 0) | 0;
  $1658(101688 | 0, 65644 | 0) | 0;
  $1658(101700 | 0, 65652 | 0) | 0;
  $1658(101712 | 0, 65635 | 0) | 0;
  $1658(101724 | 0, 65685 | 0) | 0;
  $1658(101736 | 0, 65662 | 0) | 0;
  $1658(101748 | 0, 66669 | 0) | 0;
  $1658(101760 | 0, 66750 | 0) | 0;
  $1658(101772 | 0, 67397 | 0) | 0;
  $1658(101784 | 0, 67804 | 0) | 0;
  $1658(101796 | 0, 65825 | 0) | 0;
  $1658(101808 | 0, 67050 | 0) | 0;
  $1658(101820 | 0, 66188 | 0) | 0;
 }
 
 function $1663($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 101832;
  label$1 : while (1) {
   $1_1 = $1989($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (101664 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1664($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 101488 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101484 | 0) >> 2] | 0 | 0;
  }
  $1665();
  HEAP8[(0 + 101488 | 0) >> 0] = 1;
  HEAP32[(0 + 101484 | 0) >> 2] = 101840;
  return 101840 | 0;
 }
 
 function $1665() {
  label$1 : {
   if (HEAPU8[(0 + 102008 | 0) >> 0] | 0) {
    break label$1
   }
   $404(171 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 102008 | 0) >> 0] = 1;
  }
  $1667(101840 | 0, 94548 | 0) | 0;
  $1667(101852 | 0, 94576 | 0) | 0;
  $1667(101864 | 0, 94604 | 0) | 0;
  $1667(101876 | 0, 94636 | 0) | 0;
  $1667(101888 | 0, 94676 | 0) | 0;
  $1667(101900 | 0, 94712 | 0) | 0;
  $1667(101912 | 0, 94740 | 0) | 0;
  $1667(101924 | 0, 94776 | 0) | 0;
  $1667(101936 | 0, 94792 | 0) | 0;
  $1667(101948 | 0, 94808 | 0) | 0;
  $1667(101960 | 0, 94824 | 0) | 0;
  $1667(101972 | 0, 94840 | 0) | 0;
  $1667(101984 | 0, 94856 | 0) | 0;
  $1667(101996 | 0, 94872 | 0) | 0;
 }
 
 function $1666($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 102008;
  label$1 : while (1) {
   $1_1 = $2007($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (101840 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1667($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1698($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1668($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 101496 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101492 | 0) >> 2] | 0 | 0;
  }
  $1669();
  HEAP8[(0 + 101496 | 0) >> 0] = 1;
  HEAP32[(0 + 101492 | 0) >> 2] = 102016;
  return 102016 | 0;
 }
 
 function $1669() {
  label$1 : {
   if (HEAPU8[(0 + 102304 | 0) >> 0] | 0) {
    break label$1
   }
   $404(172 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 102304 | 0) >> 0] = 1;
  }
  $1658(102016 | 0, 65578 | 0) | 0;
  $1658(102028 | 0, 65569 | 0) | 0;
  $1658(102040 | 0, 67147 | 0) | 0;
  $1658(102052 | 0, 66991 | 0) | 0;
  $1658(102064 | 0, 65692 | 0) | 0;
  $1658(102076 | 0, 67484 | 0) | 0;
  $1658(102088 | 0, 65586 | 0) | 0;
  $1658(102100 | 0, 65891 | 0) | 0;
  $1658(102112 | 0, 66564 | 0) | 0;
  $1658(102124 | 0, 66547 | 0) | 0;
  $1658(102136 | 0, 66555 | 0) | 0;
  $1658(102148 | 0, 66574 | 0) | 0;
  $1658(102160 | 0, 66832 | 0) | 0;
  $1658(102172 | 0, 67855 | 0) | 0;
  $1658(102184 | 0, 66613 | 0) | 0;
  $1658(102196 | 0, 66364 | 0) | 0;
  $1658(102208 | 0, 65692 | 0) | 0;
  $1658(102220 | 0, 66673 | 0) | 0;
  $1658(102232 | 0, 66862 | 0) | 0;
  $1658(102244 | 0, 67195 | 0) | 0;
  $1658(102256 | 0, 66649 | 0) | 0;
  $1658(102268 | 0, 66108 | 0) | 0;
  $1658(102280 | 0, 65821 | 0) | 0;
  $1658(102292 | 0, 67823 | 0) | 0;
 }
 
 function $1670($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 102304;
  label$1 : while (1) {
   $1_1 = $1989($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (102016 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1671($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 101504 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101500 | 0) >> 2] | 0 | 0;
  }
  $1672();
  HEAP8[(0 + 101504 | 0) >> 0] = 1;
  HEAP32[(0 + 101500 | 0) >> 2] = 102320;
  return 102320 | 0;
 }
 
 function $1672() {
  label$1 : {
   if (HEAPU8[(0 + 102608 | 0) >> 0] | 0) {
    break label$1
   }
   $404(173 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 102608 | 0) >> 0] = 1;
  }
  $1667(102320 | 0, 94888 | 0) | 0;
  $1667(102332 | 0, 94920 | 0) | 0;
  $1667(102344 | 0, 94956 | 0) | 0;
  $1667(102356 | 0, 94980 | 0) | 0;
  $1667(102368 | 0, 95004 | 0) | 0;
  $1667(102380 | 0, 95020 | 0) | 0;
  $1667(102392 | 0, 95040 | 0) | 0;
  $1667(102404 | 0, 95060 | 0) | 0;
  $1667(102416 | 0, 95088 | 0) | 0;
  $1667(102428 | 0, 95128 | 0) | 0;
  $1667(102440 | 0, 95160 | 0) | 0;
  $1667(102452 | 0, 95196 | 0) | 0;
  $1667(102464 | 0, 95232 | 0) | 0;
  $1667(102476 | 0, 95248 | 0) | 0;
  $1667(102488 | 0, 95264 | 0) | 0;
  $1667(102500 | 0, 95280 | 0) | 0;
  $1667(102512 | 0, 95004 | 0) | 0;
  $1667(102524 | 0, 95296 | 0) | 0;
  $1667(102536 | 0, 95312 | 0) | 0;
  $1667(102548 | 0, 95328 | 0) | 0;
  $1667(102560 | 0, 95344 | 0) | 0;
  $1667(102572 | 0, 95360 | 0) | 0;
  $1667(102584 | 0, 95376 | 0) | 0;
  $1667(102596 | 0, 95392 | 0) | 0;
 }
 
 function $1673($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 102608;
  label$1 : while (1) {
   $1_1 = $2007($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (102320 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1674($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 101512 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101508 | 0) >> 2] | 0 | 0;
  }
  $1675();
  HEAP8[(0 + 101512 | 0) >> 0] = 1;
  HEAP32[(0 + 101508 | 0) >> 2] = 102624;
  return 102624 | 0;
 }
 
 function $1675() {
  label$1 : {
   if (HEAPU8[(0 + 102648 | 0) >> 0] | 0) {
    break label$1
   }
   $404(174 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 102648 | 0) >> 0] = 1;
  }
  $1658(102624 | 0, 68202 | 0) | 0;
  $1658(102636 | 0, 68194 | 0) | 0;
 }
 
 function $1676($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 102648;
  label$1 : while (1) {
   $1_1 = $1989($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (102624 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1677($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 101520 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[(0 + 101516 | 0) >> 2] | 0 | 0;
  }
  $1678();
  HEAP8[(0 + 101520 | 0) >> 0] = 1;
  HEAP32[(0 + 101516 | 0) >> 2] = 102656;
  return 102656 | 0;
 }
 
 function $1678() {
  label$1 : {
   if (HEAPU8[(0 + 102680 | 0) >> 0] | 0) {
    break label$1
   }
   $404(175 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 102680 | 0) >> 0] = 1;
  }
  $1667(102656 | 0, 95408 | 0) | 0;
  $1667(102668 | 0, 95420 | 0) | 0;
 }
 
 function $1679($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 102680;
  label$1 : while (1) {
   $1_1 = $2007($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (102656 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1680($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101536 | 0) >> 0] | 0) {
    break label$1
   }
   $2(101524 | 0, 65696 | 0) | 0;
   $404(176 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101536 | 0) >> 0] = 1;
  }
  return 101524 | 0;
 }
 
 function $1681($0_1) {
  $0_1 = $0_1 | 0;
  $1989(101524 | 0) | 0;
 }
 
 function $1682($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101552 | 0) >> 0] | 0) {
    break label$1
   }
   $1654(101540 | 0, 90140 | 0) | 0;
   $404(177 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101552 | 0) >> 0] = 1;
  }
  return 101540 | 0;
 }
 
 function $1683($0_1) {
  $0_1 = $0_1 | 0;
  $2007(101540 | 0) | 0;
 }
 
 function $1684($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101568 | 0) >> 0] | 0) {
    break label$1
   }
   $2(101556 | 0, 68092 | 0) | 0;
   $404(178 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101568 | 0) >> 0] = 1;
  }
  return 101556 | 0;
 }
 
 function $1685($0_1) {
  $0_1 = $0_1 | 0;
  $1989(101556 | 0) | 0;
 }
 
 function $1686($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101584 | 0) >> 0] | 0) {
    break label$1
   }
   $1654(101572 | 0, 90176 | 0) | 0;
   $404(179 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101584 | 0) >> 0] = 1;
  }
  return 101572 | 0;
 }
 
 function $1687($0_1) {
  $0_1 = $0_1 | 0;
  $2007(101572 | 0) | 0;
 }
 
 function $1688($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101600 | 0) >> 0] | 0) {
    break label$1
   }
   $2(101588 | 0, 68006 | 0) | 0;
   $404(180 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101600 | 0) >> 0] = 1;
  }
  return 101588 | 0;
 }
 
 function $1689($0_1) {
  $0_1 = $0_1 | 0;
  $1989(101588 | 0) | 0;
 }
 
 function $1690($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101616 | 0) >> 0] | 0) {
    break label$1
   }
   $1654(101604 | 0, 90212 | 0) | 0;
   $404(181 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101616 | 0) >> 0] = 1;
  }
  return 101604 | 0;
 }
 
 function $1691($0_1) {
  $0_1 = $0_1 | 0;
  $2007(101604 | 0) | 0;
 }
 
 function $1692($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101632 | 0) >> 0] | 0) {
    break label$1
   }
   $2(101620 | 0, 66653 | 0) | 0;
   $404(182 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101632 | 0) >> 0] = 1;
  }
  return 101620 | 0;
 }
 
 function $1693($0_1) {
  $0_1 = $0_1 | 0;
  $1989(101620 | 0) | 0;
 }
 
 function $1694($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 101648 | 0) >> 0] | 0) {
    break label$1
   }
   $1654(101636 | 0, 90296 | 0) | 0;
   $404(183 | 0, 0 | 0, 65536 | 0) | 0;
   HEAP8[(0 + 101648 | 0) >> 0] = 1;
  }
  return 101636 | 0;
 }
 
 function $1695($0_1) {
  $0_1 = $0_1 | 0;
  $2007(101636 | 0) | 0;
 }
 
 function $1696($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1697($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1004() | 0 | 0)) {
    break label$1
   }
   $919(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1698($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2015($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1699($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1700($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1701($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1702($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1703($0_1) {
  $0_1 = $0_1 | 0;
  $1704($0_1 + 8 | 0 | 0) | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1704($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1705($0_1) {
  $0_1 = $0_1 | 0;
  $1979($1703($0_1 | 0) | 0 | 0);
 }
 
 function $1706($0_1) {
  $0_1 = $0_1 | 0;
  $1707($0_1 + 8 | 0 | 0) | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1707($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1708($0_1) {
  $0_1 = $0_1 | 0;
  $1979($1706($0_1 | 0) | 0 | 0);
 }
 
 function $1709($0_1) {
  $0_1 = $0_1 | 0;
  $1979($1710($0_1 | 0) | 0 | 0);
 }
 
 function $1710($0_1) {
  $0_1 = $0_1 | 0;
  $1697($0_1 + 8 | 0 | 0) | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1711($0_1) {
  $0_1 = $0_1 | 0;
  $1979($1712($0_1 | 0) | 0 | 0);
 }
 
 function $1712($0_1) {
  $0_1 = $0_1 | 0;
  $1697($0_1 + 8 | 0 | 0) | 0;
  return $938($0_1 | 0) | 0 | 0;
 }
 
 function $1713($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1714($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1715($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1716($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1717($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1718($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1719($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1720($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1721($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1722($0_1) {
  $0_1 = $0_1 | 0;
  $1979($938($0_1 | 0) | 0 | 0);
 }
 
 function $1723($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1724($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1725($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1726($0_1) {
  $0_1 = $0_1 | 0;
  return $1736($0_1 | 0) | 0 | 0;
 }
 
 function $1727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1738($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1728($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1739($1232($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($752() | 0) >>> 1 | 0) >>> 0) | 0) + -16 | 0 | 0;
 }
 
 function $1729($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 2 >>> 0 | 0;
 }
 
 function $1730($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = $1743($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1731($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1741($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1733($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1236($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1734($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1236($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $1236($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $1735($0_1) {
  $0_1 = $0_1 | 0;
  $753(67266 | 0);
  wasm2js_trap();
 }
 
 function $1736($0_1) {
  $0_1 = $0_1 | 0;
  return $1737($0_1 | 0) | 0 | 0;
 }
 
 function $1737($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1738($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1739($0_1) {
  $0_1 = $0_1 | 0;
  return ($752() | 0) >>> 2 | 0 | 0;
 }
 
 function $1740($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1739($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $757();
   wasm2js_trap();
  }
  return $758($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1742($0_1) {
  $0_1 = $0_1 | 0;
  return $1747($0_1 | 0) | 0 | 0;
 }
 
 function $1743($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 3 | 0) & -4 | 0 | 0;
 }
 
 function $1744($0_1) {
  $0_1 = $0_1 | 0;
  return $1745($0_1 | 0) | 0 | 0;
 }
 
 function $1745($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1746($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1747($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1748($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1749($0_1 | 0, $327($326($0_1 | 0) | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
 }
 
 function $1749($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1266($0_1 | 0, $2_1 | 0);
  $1751($0_1 | 0, $2_1 | 0);
  HEAP8[($3_1 + 15 | 0) >> 0] = 0;
  $299($1_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1750($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1751($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1752($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1753($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1753($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $304($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1754($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1235($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1755($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1757($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1758(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $1758($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1179($0_1 | 0, $1_1 | 0);
 }
 
 function $1759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1760($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1761(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $1761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1762($0_1 | 0, $1_1 | 0);
 }
 
 function $1762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $1763($0_1) {
  $0_1 = $0_1 | 0;
  return $1764($1235($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1764($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1765($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1771($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1766($0_1) {
  $0_1 = $0_1 | 0;
  return $1773($0_1 | 0) | 0 | 0;
 }
 
 function $1767($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $3_1 = HEAP8[$1_1 >> 0] | 0;
    $561($560($4_1 + 8 | 0 | 0) | 0 | 0, $3_1 | 0) | 0;
    $1_1 = $1_1 + 1 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
    $562($4_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $1772($0_1 | 0, $4_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1768($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1774($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1775($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1770($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1772($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1771($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $704($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $704($2_1 | 0) | 0;
  $1776($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1772($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1773($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $707($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1775($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1776($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1777($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1783($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1778($0_1) {
  $0_1 = $0_1 | 0;
  return $1785($0_1 | 0) | 0 | 0;
 }
 
 function $1779($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    $624($623($4_1 + 8 | 0 | 0) | 0 | 0, $3_1 | 0) | 0;
    $1_1 = $1_1 + 4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
    $625($4_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $1784($0_1 | 0, $4_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1780($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1786($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1781($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1787($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1782($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1784($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1783($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $722($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $722($2_1 | 0) | 0;
  $1788($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1784($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1785($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1786($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $725($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1787($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1788($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1789($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1236($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
 }
 
 function $1790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1791($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAPU8[$1_1 >> 0] | 0 | 0) == (HEAPU8[$2_1 >> 0] | 0 | 0) | 0;
 }
 
 function $1792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1794($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1796($1725($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1795($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1329($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1728($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1729($4_1 | 0) | 0)) {
      break label$3
     }
     $1327($0_1 | 0, $4_1 | 0);
     $5_1 = $1326($0_1 | 0) | 0;
     break label$2;
    }
    $1731($3_1 + 8 | 0 | 0, $1332($0_1 | 0) | 0 | 0, ($1730($4_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1732($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1733($0_1 | 0, $5_1 | 0);
    $1734($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1325($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1324($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $1324($5_1 | 0, $3_1 + 4 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1735($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1797($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1798($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1799($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1800($0_1 | 0, $1_1 | 0);
 }
 
 function $1800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1332($1_1 | 0) | 0;
  $1332($0_1 | 0) | 0;
 }
 
 function $1801($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1804($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1806($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1803($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1805($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1804($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1807($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1807($2_1 | 0) | 0;
  $715($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1805($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1806($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1812($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1807($0_1) {
  $0_1 = $0_1 | 0;
  return $1808($0_1 | 0) | 0 | 0;
 }
 
 function $1808($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1809($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1809($0_1) {
  $0_1 = $0_1 | 0;
  return $1810($0_1 | 0) | 0 | 0;
 }
 
 function $1810($0_1) {
  $0_1 = $0_1 | 0;
  return $1811(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1811($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $14($1290($1_1 + 8 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1813($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1813($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1371($2_1 + 8 | 0 | 0, $1_1 - ($1809($2_1 + 8 | 0 | 0) | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1814($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1817($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1815($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1819($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1816($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1818($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1817($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1820($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1820($2_1 | 0) | 0;
  $733($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1818($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1825($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1820($0_1) {
  $0_1 = $0_1 | 0;
  return $1821($0_1 | 0) | 0 | 0;
 }
 
 function $1821($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1822($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1822($0_1) {
  $0_1 = $0_1 | 0;
  return $1823($0_1 | 0) | 0 | 0;
 }
 
 function $1823($0_1) {
  $0_1 = $0_1 | 0;
  return $1824(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1824($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $735($1356($1_1 + 8 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1825($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1826($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1826($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1386($2_1 + 8 | 0 | 0, ($1_1 - ($1822($2_1 + 8 | 0 | 0) | 0) | 0) >> 2 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1827($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1828($0_1) {
  $0_1 = $0_1 | 0;
  return $1838($0_1 | 0) | 0 | 0;
 }
 
 function $1829($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $1840($1839($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $547() | 0;
  $0_1 = HEAP32[($673($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1830($0_1) {
  $0_1 = $0_1 | 0;
  $753(66389 | 0);
  wasm2js_trap();
 }
 
 function $1831($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1841($1_1 | 0, $2_1 | 0, 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1832($0_1) {
  $0_1 = $0_1 | 0;
  return $1843($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1833($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1845($0_1 | 0, $1844($0_1 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + (($1524($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + (($1524($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1844($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0);
 }
 
 function $1834($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1835($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1836($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1837($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1858($1_1 | 0) | 0;
 }
 
 function $1838($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1839($0_1) {
  $0_1 = $0_1 | 0;
  return $1847($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1840($0_1) {
  $0_1 = $0_1 | 0;
  return $1846($0_1 | 0) | 0 | 0;
 }
 
 function $1841($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 30 >>> 0) {
     break label$2
    }
    if ((HEAPU8[($0_1 + 120 | 0) >> 0] | 0) & 255 | 0) {
     break label$2
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
    break label$1;
   }
   $0_1 = $1850($1849($3_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1842($0_1) {
  $0_1 = $0_1 | 0;
  return $1853($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1843($0_1) {
  $0_1 = $0_1 | 0;
  return $1854($0_1 | 0) | 0 | 0;
 }
 
 function $1844($0_1) {
  $0_1 = $0_1 | 0;
  return $1836(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1845($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $1846($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1847($0_1) {
  $0_1 = $0_1 | 0;
  return $1848($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1848($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1849($0_1) {
  $0_1 = $0_1 | 0;
  return $1851($0_1 | 0) | 0 | 0;
 }
 
 function $1850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1852($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $757();
   wasm2js_trap();
  }
  return $758($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1851($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1852($0_1) {
  $0_1 = $0_1 | 0;
  return ($752() | 0) >>> 2 | 0 | 0;
 }
 
 function $1853($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1854($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1855($0_1) {
  $0_1 = $0_1 | 0;
  return $1856($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1856($0_1) {
  $0_1 = $0_1 | 0;
  return $1857($0_1 | 0) | 0 | 0;
 }
 
 function $1857($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1858($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1859($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + -4 | 0;
    $1860($1523($0_1 | 0) | 0 | 0, $1836($2_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $1860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1861($1_1 | 0);
 }
 
 function $1861($0_1) {
  $0_1 = $0_1 | 0;
  $1862($0_1 | 0);
 }
 
 function $1862($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = $1829($0_1 | 0) | 0;
   if ($3_1 >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $1524($0_1 | 0) | 0;
    if ($1_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
    $3_1 = HEAP32[($772($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $1830($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1865($0_1) {
  $0_1 = $0_1 | 0;
  return $1868($0_1 | 0) | 0 | 0;
 }
 
 function $1866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1870($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1867($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1869($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1868($0_1) {
  $0_1 = $0_1 | 0;
  return $1836($0_1 | 0) | 0 | 0;
 }
 
 function $1869($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1870($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1836($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1871($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) != ($0_1 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 120 | 0) >> 0] = 0;
    break label$1;
   }
   $1872($1849($3_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1872($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $304($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1873($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $1877($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    HEAP32[$0_1 >> 2] = 0;
    $1_1 = 0;
    break label$1;
   }
   $1831($4_1 | 0, $1878($0_1 | 0) | 0 | 0, $1_1 | 0);
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $5_1;
   $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  $3_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($1879($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1880($2_1 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $1837($1878($0_1 | 0) | 0 | 0, $1836(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue label$2;
   };
  }
  $1881($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $1521($0_1 | 0);
  $3_1 = $1523($0_1 | 0) | 0;
  $4_1 = $1882($2_1 + 16 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = $1882($2_1 + 8 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  $6_1 = $1882($2_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $1883($3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $1884($2_1 + 24 | 0 | 0) | 0;
  $1885($0_1 | 0, $1_1 + 4 | 0 | 0);
  $1885($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $1885($1832($0_1 | 0) | 0 | 0, $1879($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $1833($0_1 | 0, $1473($0_1 | 0) | 0 | 0);
  $1476($0_1 | 0);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1876($0_1) {
  $0_1 = $0_1 | 0;
  $1886($0_1 | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1525($1878($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1887($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1877($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1827($0_1 | 0, $1_1 | 0) | 0;
  $1888($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1878($0_1) {
  $0_1 = $0_1 | 0;
  return $1889($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1879($0_1) {
  $0_1 = $0_1 | 0;
  return $1890($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1880($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1881($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1882($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1883($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $1892($1_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $1884($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1885($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $1886($0_1) {
  $0_1 = $0_1 | 0;
  $1904($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $1887($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1905($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1888($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1889($0_1) {
  $0_1 = $0_1 | 0;
  return $1891($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1890($0_1) {
  $0_1 = $0_1 | 0;
  return $1854($0_1 | 0) | 0 | 0;
 }
 
 function $1891($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1892($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1893($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1893($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1895($4_1 + 24 | 0 | 0, $1894($1_1 | 0) | 0 | 0, $1894($2_1 | 0) | 0 | 0, $1894($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = $1896($1_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1896($3_1 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  $1897($0_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1894($0_1) {
  $0_1 = $0_1 | 0;
  return $1900($0_1 | 0) | 0 | 0;
 }
 
 function $1895($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $23_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $2_1 = $1865($1884($4_1 + 24 | 0 | 0) | 0 | 0) | 0;
  $1_1 = $1865($1884($4_1 + 16 | 0 | 0) | 0 | 0) | 0;
  $23_1 = $1_1;
  $1_1 = ($1865($1884($4_1 + 8 | 0 | 0) | 0 | 0) | 0) + ($1_1 - $2_1 | 0) | 0;
  $1898($4_1 | 0, $23_1 | 0, $2_1 | 0, $1_1 | 0);
  $1899($0_1 | 0, $4_1 + 16 | 0 | 0, $1882($4_1 | 0, $1866($1884($4_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0) | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1896($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1902($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1897($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1901($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1898($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $2_1 - $1_1 | 0;
  $1_1 = $505($3_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1 + $5_1 | 0;
  $1867($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1899($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1903($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1900($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1901($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1903($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1904($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1906($0_1 | 0, $1_1 | 0);
 }
 
 function $1905($0_1) {
  $0_1 = $0_1 | 0;
  return $1907($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1906($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $1878($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $1860($2_1 | 0, $1836($3_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
 }
 
 function $1907($0_1) {
  $0_1 = $0_1 | 0;
  return $1857($0_1 | 0) | 0 | 0;
 }
 
 function $1908($0_1) {
  $0_1 = $0_1 | 0;
  $1909(67266 | 0);
  wasm2js_trap();
 }
 
 function $1909($0_1) {
  $0_1 = $0_1 | 0;
  fimport$79();
  wasm2js_trap();
 }
 
 function $1910($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1911($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1911($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1912(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $1912($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $637($0_1 | 0, $1_1 | 0);
 }
 
 function $1913($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1331($0_1 | 0, $2_1 | 0);
  $1696($0_1 | 0, $2_1 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  $1324($1_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1914($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1915($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1916($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1917($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1918($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1919($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 95432 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1920($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 95468 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1921($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $1004() | 0;
  return $0_1 | 0;
 }
 
 function $1922($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1923($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1924($0_1) {
  $0_1 = $0_1 | 0;
  $1515($0_1 | 0) | 0;
 }
 
 function $1925($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1926($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1928($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1927($0_1) {
  $0_1 = $0_1 | 0;
  $1929($0_1 | 0);
 }
 
 function $1928($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1929($0_1) {
  $0_1 = $0_1 | 0;
  $1931($1930(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $1930($0_1) {
  $0_1 = $0_1 | 0;
  return $1933($0_1 | 0) | 0 | 0;
 }
 
 function $1931($0_1) {
  $0_1 = $0_1 | 0;
  $1932($0_1 | 0);
 }
 
 function $1932($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = (HEAP32[$0_1 >> 2] | 0) + ($1_1 >> 1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $0_1 | 0) >> 2] | 0;
  }
  FUNCTION_TABLE[$0_1 | 0]($2_1);
 }
 
 function $1933($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1934($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1937($0_1 | 0, $1_1 | 0) | 0;
  $779($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1935($0_1) {
  $0_1 = $0_1 | 0;
  return $1938($0_1 | 0) | 0 | 0;
 }
 
 function $1936($0_1) {
  $0_1 = $0_1 | 0;
  return $780($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1937($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1938($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1940($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $477($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1941() {
  return $1942() | 0 | 0;
 }
 
 function $1942() {
  return -2147483648 | 0;
 }
 
 function $1943() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1945() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1944() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1946() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1945() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0 | 0;
 }
 
 function $1946() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1 | 0;
 }
 
 function $1947($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $475($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1948() {
  return $1949() | 0 | 0;
 }
 
 function $1949() {
  return 65535 | 0;
 }
 
 function $1950() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1951() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1951() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1 | 0;
 }
 
 function $1952($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($934($0_1 | 0, $1_1 | 0, $1004() | 0 | 0)));
 }
 
 function $1953($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$935($0_1 | 0, $1_1 | 0, $1004() | 0 | 0));
 }
 
 function $1954($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $936($3_1 | 0, $1_1 | 0, $2_1 | 0, $1004() | 0 | 0);
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1955($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1957($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1958($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1959($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1960($0_1) {
  $0_1 = $0_1 | 0;
  return $1962($0_1 | 0) | 0 | 0;
 }
 
 function $1961($0_1) {
  $0_1 = $0_1 | 0;
  return $780($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1962($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1963($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1964($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1965($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1966($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1967($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1968($0_1) {
  $0_1 = $0_1 | 0;
  wasm2js_trap();
 }
 
 function $1969($0_1) {
  $0_1 = $0_1 | 0;
  return $439($0_1 | 0) | 0 | 0;
 }
 
 function $1970($0_1) {
  $0_1 = $0_1 | 0;
  return $440($0_1 | 0) | 0 | 0;
 }
 
 function $1971($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1969(103184 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    $1972(103208 | 0, 103184 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$3
   }
   $1973($0_1 | 0);
   $1970(103184 | 0) | 0;
   FUNCTION_TABLE[$2_1 | 0]($1_1);
   $1969(103184 | 0) | 0;
   $1974($0_1 | 0);
   $1970(103184 | 0) | 0;
   $1975(103208 | 0) | 0;
   return;
  }
  $1970(103184 | 0) | 0;
 }
 
 function $1972($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $441($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1973($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $1974($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $1975($0_1) {
  $0_1 = $0_1 | 0;
  return $442($0_1 | 0) | 0 | 0;
 }
 
 function $1976() {
  fimport$79();
  wasm2js_trap();
 }
 
 function $1977($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $0_1 = $483($1_1 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    label$3 : {
     $0_1 = $2030() | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[$0_1 | 0]();
     continue label$2;
    }
    break label$2;
   };
   fimport$79();
   wasm2js_trap();
  }
  return $0_1 | 0;
 }
 
 function $1978($0_1) {
  $0_1 = $0_1 | 0;
  return $1977($0_1 | 0) | 0 | 0;
 }
 
 function $1979($0_1) {
  $0_1 = $0_1 | 0;
  $484($0_1 | 0);
 }
 
 function $1980($0_1) {
  $0_1 = $0_1 | 0;
  $1979($0_1 | 0);
 }
 
 function $1981($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $1_1 >>> 0 > 4 >>> 0 ? $1_1 : 4;
  $0_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1982($2_1 | 0, $0_1 | 0) | 0;
    if ($3_1) {
     break label$1
    }
    $1_1 = $2030() | 0;
    if (!$1_1) {
     break label$1
    }
    FUNCTION_TABLE[$1_1 | 0]();
    continue label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $1982($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $488($2_1 + 12 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1983($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1984($0_1 | 0);
 }
 
 function $1984($0_1) {
  $0_1 = $0_1 | 0;
  $484($0_1 | 0);
 }
 
 function $1985($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = -1;
    if ($506($0_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == ($3_1 | 0)) {
     break label$3
    }
    $3_1 = $1_1 & 255 | 0;
    if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break label$1;
   }
   $3_1 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1986($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1988($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1987($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $741($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $326($0_1 | 0) | 0;
   label$2 : {
    if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
     break label$2
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[$8_1 >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($743(HEAP32[($772($8_1 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $744($8_1 | 0, $292($0_1 | 0) | 0 | 0, $9_1 | 0);
   $9_1 = HEAP32[$8_1 >> 2] | 0;
   $745($9_1 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
   $638($0_1 | 0);
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $523($327($9_1 | 0) | 0 | 0, $327($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    if (!$6_1) {
     break label$4
    }
    $523(($327($9_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   $7_1 = $5_1 + $4_1 | 0;
   $2_1 = $3_1 - $7_1 | 0;
   label$5 : {
    if (($3_1 | 0) == ($7_1 | 0)) {
     break label$5
    }
    $523((($327($9_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($327($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $2_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$6
    }
    $295($292($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $746($0_1 | 0, $9_1 | 0);
   $747($0_1 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $2_1 | 0;
   $748($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 12 | 0) >> 0] = 0;
   $299($9_1 + $4_1 | 0 | 0, $8_1 + 12 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $749($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1988($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $505($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1989($0_1) {
  $0_1 = $0_1 | 0;
  $1990($0_1 | 0);
  label$1 : {
   if (!($10($0_1 | 0) | 0)) {
    break label$1
   }
   $295($292($0_1 | 0) | 0 | 0, $293($0_1 | 0) | 0 | 0, $294($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1990($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1991($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $741($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $326($0_1 | 0) | 0;
   label$2 : {
    if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
     break label$2
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[$7_1 >> 2] = $2_1 + $1_1 | 0;
    $8_1 = ($743(HEAP32[($772($7_1 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $744($7_1 | 0, $292($0_1 | 0) | 0 | 0, $8_1 | 0);
   $8_1 = HEAP32[$7_1 >> 2] | 0;
   $745($8_1 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
   $638($0_1 | 0);
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $523($327($8_1 | 0) | 0 | 0, $327($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    $2_1 = $5_1 + $4_1 | 0;
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
    $523((($327($8_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($327($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
   }
   label$5 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$5
    }
    $295($292($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $746($0_1 | 0, $8_1 | 0);
   $747($0_1 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $749($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1992($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP8[($3_1 + 15 | 0) >> 0] = $2_1;
  $1993($0_1 | 0, $1_1 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1993($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2019($0_1 | 0, $1750($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1994($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($741($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($742($2_1 | 0) | 0)) {
      break label$3
     }
     $297($0_1 | 0, $2_1 | 0);
     $4_1 = $298($0_1 | 0) | 0;
     break label$2;
    }
    $744($3_1 + 8 | 0 | 0, $292($0_1 | 0) | 0 | 0, ($743($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $745($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $746($0_1 | 0, $4_1 | 0);
    $747($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $748($0_1 | 0, $2_1 | 0);
   }
   $523($327($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $299($4_1 + $2_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $749($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1995($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($742($2_1 | 0) | 0)) {
      break label$3
     }
     $4_1 = $298($0_1 | 0) | 0;
     $297($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if (($741($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $744($3_1 + 8 | 0 | 0, $292($0_1 | 0) | 0 | 0, ($743($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $745($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $746($0_1 | 0, $4_1 | 0);
    $747($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $748($0_1 | 0, $2_1 | 0);
   }
   $523($327($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $749($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1996($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = $645($0_1 | 0) | 0;
   if ($3_1 >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $3_1 = $327($326($0_1 | 0) | 0 | 0) | 0;
   $1986($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $1749($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $4_1 = $52($0_1 | 0) | 0;
  $1987($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1997($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1996($0_1 | 0, $1_1 | 0, $4($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1998($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $645($0_1 | 0) | 0;
    $5_1 = $52($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $327($326($0_1 | 0) | 0 | 0) | 0;
    $523($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1266($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $299($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break label$1;
   }
   $1987($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1999($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($741($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($742($1_1 | 0) | 0)) {
      break label$3
     }
     $297($0_1 | 0, $1_1 | 0);
     $4_1 = $298($0_1 | 0) | 0;
     break label$2;
    }
    $744($3_1 + 8 | 0 | 0, $292($0_1 | 0) | 0 | 0, ($743($1_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $745($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $746($0_1 | 0, $4_1 | 0);
    $747($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $748($0_1 | 0, $1_1 | 0);
   }
   $1992($327($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $299($4_1 + $1_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $749($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2000($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = $10($0_1 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 10;
    $1_1 = $197($0_1 | 0) | 0;
    break label$1;
   }
   $4_1 = ($294($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $15($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     $1991($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $326($0_1 | 0) | 0;
     break label$4;
    }
    $326($0_1 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $4_1 = $298($0_1 | 0) | 0;
    $297($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$3;
   }
   $4_1 = $293($0_1 | 0) | 0;
   $748($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + $1_1 | 0;
  $299($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $299($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2001($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $4_1 = $645($0_1 | 0) | 0;
   $5_1 = $52($0_1 | 0) | 0;
   $6_1 = $5_1 + $1_1 | 0;
   label$2 : {
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $1991($0_1 | 0, $4_1 | 0, $6_1 - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $4_1 = $326($0_1 | 0) | 0;
   $1992(($327($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1266($0_1 | 0, $6_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $299($4_1 + $6_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2002($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   $2_1 = $52($0_1 | 0) | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   if (($4_1 | 0) == (-1 | 0)) {
    break label$1
   }
   HEAP32[$5_1 >> 2] = $2_1 - $1_1 | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($673($5_1 + 12 | 0 | 0, $5_1 | 0) | 0) >> 2] | 0;
   label$2 : {
    $1_1 = $1542(($51($0_1 | 0) | 0) + $1_1 | 0 | 0, $3_1 | 0, HEAP32[($673($5_1 + 4 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
    if ($1_1) {
     break label$2
    }
    $1_1 = -1;
    $0_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     break label$2
    }
    $1_1 = $0_1 >>> 0 > $4_1 >>> 0;
   }
   global$0 = $5_1 + 16 | 0;
   return $1_1 | 0;
  }
  $1908($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2003($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $52($0_1 | 0) | 0;
   if ($3_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $2001($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $1748($0_1 | 0, $1_1 | 0);
 }
 
 function $2004($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2006($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2005($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1728($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $1093($0_1 | 0) | 0;
   label$2 : {
    if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
     break label$2
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[$8_1 >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($1730(HEAP32[($772($8_1 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $1731($8_1 | 0, $1332($0_1 | 0) | 0 | 0, $9_1 | 0);
   $9_1 = HEAP32[$8_1 >> 2] | 0;
   $1732($9_1 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
   $1322($0_1 | 0);
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $583($736($9_1 | 0) | 0 | 0, $736($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    if (!$6_1) {
     break label$4
    }
    $583(($736($9_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   $7_1 = $5_1 + $4_1 | 0;
   $2_1 = $3_1 - $7_1 | 0;
   label$5 : {
    if (($3_1 | 0) == ($7_1 | 0)) {
     break label$5
    }
    $3_1 = $4_1 << 2 | 0;
    $583((($736($9_1 | 0) | 0) + $3_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($736($10_1 | 0) | 0) + $3_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $2_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$6
    }
    $1752($1332($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1733($0_1 | 0, $9_1 | 0);
   $1734($0_1 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $2_1 | 0;
   $1325($0_1 | 0, $4_1 | 0);
   HEAP32[($8_1 + 12 | 0) >> 2] = 0;
   $1324($9_1 + ($4_1 << 2 | 0) | 0 | 0, $8_1 + 12 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1735($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2006($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $505($0_1 | 0, $1_1 | 0, $2_1 << 2 | 0 | 0) | 0 | 0;
 }
 
 function $2007($0_1) {
  $0_1 = $0_1 | 0;
  $2008($0_1 | 0);
  label$1 : {
   if (!($1153($0_1 | 0) | 0)) {
    break label$1
   }
   $1752($1332($0_1 | 0) | 0 | 0, $1323($0_1 | 0) | 0 | 0, $1754($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $2008($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2009($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1728($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $1093($0_1 | 0) | 0;
   label$2 : {
    if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
     break label$2
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[$7_1 >> 2] = $2_1 + $1_1 | 0;
    $8_1 = ($1730(HEAP32[($772($7_1 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $1731($7_1 | 0, $1332($0_1 | 0) | 0 | 0, $8_1 | 0);
   $8_1 = HEAP32[$7_1 >> 2] | 0;
   $1732($8_1 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
   $1322($0_1 | 0);
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    $583($736($8_1 | 0) | 0 | 0, $736($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$4 : {
    $2_1 = $5_1 + $4_1 | 0;
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
    $4_1 = $4_1 << 2 | 0;
    $583((($736($8_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($736($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
   }
   label$5 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$5
    }
    $1752($1332($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1733($0_1 | 0, $8_1 | 0);
   $1734($0_1 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1735($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2010($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2011($0_1 | 0, $1_1 | 0, $3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2011($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2020($0_1 | 0, $1750($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $2012($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1728($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1729($2_1 | 0) | 0)) {
      break label$3
     }
     $1327($0_1 | 0, $2_1 | 0);
     $4_1 = $1326($0_1 | 0) | 0;
     break label$2;
    }
    $1731($3_1 + 8 | 0 | 0, $1332($0_1 | 0) | 0 | 0, ($1730($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1732($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1733($0_1 | 0, $4_1 | 0);
    $1734($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1325($0_1 | 0, $2_1 | 0);
   }
   $583($736($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $1324($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1735($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2013($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1729($2_1 | 0) | 0)) {
      break label$3
     }
     $4_1 = $1326($0_1 | 0) | 0;
     $1327($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if (($1728($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $1731($3_1 + 8 | 0 | 0, $1332($0_1 | 0) | 0 | 0, ($1730($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1732($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1733($0_1 | 0, $4_1 | 0);
    $1734($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1325($0_1 | 0, $2_1 | 0);
   }
   $583($736($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1735($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2014($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = $1328($0_1 | 0) | 0;
   if ($3_1 >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $3_1 = $736($1093($0_1 | 0) | 0 | 0) | 0;
   $2004($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $1913($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $4_1 = $1016($0_1 | 0) | 0;
  $2005($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $2015($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2014($0_1 | 0, $1_1 | 0, $1655($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $2016($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1328($0_1 | 0) | 0;
    $5_1 = $1016($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $736($1093($0_1 | 0) | 0 | 0) | 0;
    $583($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1331($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1324($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break label$1;
   }
   $2005($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $2017($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1728($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1729($1_1 | 0) | 0)) {
      break label$3
     }
     $1327($0_1 | 0, $1_1 | 0);
     $4_1 = $1326($0_1 | 0) | 0;
     break label$2;
    }
    $1731($3_1 + 8 | 0 | 0, $1332($0_1 | 0) | 0 | 0, ($1730($1_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1732($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1733($0_1 | 0, $4_1 | 0);
    $1734($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1325($0_1 | 0, $1_1 | 0);
   }
   $2010($736($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $1324($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1735($0_1 | 0);
  wasm2js_trap();
 }
 
 function $2018($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = $1153($0_1 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 1;
    $1_1 = $1155($0_1 | 0) | 0;
    break label$1;
   }
   $4_1 = ($1754($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $1154($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     $2009($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1093($0_1 | 0) | 0;
     break label$4;
    }
    $1093($0_1 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $4_1 = $1326($0_1 | 0) | 0;
    $1327($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$3;
   }
   $4_1 = $1323($0_1 | 0) | 0;
   $1325($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $1324($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $1324($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2019($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!$1_1) {
     break label$1
    }
    HEAP8[$0_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
    $1_1 = $1_1 + -1 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $2020($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!$1_1) {
     break label$1
    }
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    $1_1 = $1_1 + -1 | 0;
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $2021($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$79();
  wasm2js_trap();
 }
 
 function $2022($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $2023($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2023($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    if (($2_1 & -1073741825 | 0 | 0) != (HEAP32[(($786() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $1985($1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  return $2024($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2024($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = $1_1 + 76 | 0;
   if (!($2025($2_1 | 0) | 0)) {
    break label$1
   }
   $415($1_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = $0_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $0_1;
    break label$2;
   }
   $3_1 = $1985($1_1 | 0, $3_1 | 0) | 0;
  }
  label$4 : {
   if (!(($2026($2_1 | 0) | 0) & 1073741824 | 0)) {
    break label$4
   }
   $2027($2_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $2025($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $2026($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $2027($0_1) {
  $0_1 = $0_1 | 0;
  $438($0_1 | 0, 1 | 0) | 0;
 }
 
 function $2028($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[(0 + 83864 | 0) >> 2] | 0;
  $508(69460 | 0, 11 | 0, 1 | 0, $3_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $908($3_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $2022(10 | 0, $3_1 | 0) | 0;
  fimport$79();
  wasm2js_trap();
 }
 
 function $2029($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $2030() {
  return $2029(103256 | 0) | 0 | 0;
 }
 
 function $2031() {
  return 0 | 0;
 }
 
 function $2032() {
  $2028(69422 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function $2033($0_1) {
  $0_1 = $0_1 | 0;
  return $2066($0_1 | 0) | 0 | 0;
 }
 
 function $2034($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2035($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $2036($0_1) {
  $0_1 = $0_1 | 0;
  $1979($2033($0_1 | 0) | 0 | 0);
 }
 
 function $2037($0_1) {
  $0_1 = $0_1 | 0;
  $1979($2033($0_1 | 0) | 0 | 0);
 }
 
 function $2038($0_1) {
  $0_1 = $0_1 | 0;
  $1979($2033($0_1 | 0) | 0 | 0);
 }
 
 function $2039($0_1) {
  $0_1 = $0_1 | 0;
  $1979($2033($0_1 | 0) | 0 | 0);
 }
 
 function $2040($0_1) {
  $0_1 = $0_1 | 0;
  $1979($2033($0_1 | 0) | 0 | 0);
 }
 
 function $2041($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2042($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $2042($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($888($2043($0_1 | 0) | 0 | 0, $2043($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $2043($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $2044($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($2042($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $2045($1_1 | 0, 95596 | 0, 95644 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $411($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $2045($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  i64toi32_i32$1 = $4_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 55 | 0;
  i64toi32_i32$0 = 0;
  $9_1 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $9_1;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $9_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $9_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $9_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $0_1 = $0_1 + $5_1 | 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!($2042($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $3_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $3_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $3_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $3_1 | 0;
 }
 
 function $2046($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $2047($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2046($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $2048($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2046($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $2049($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = $2050(HEAP32[$2_1 >> 2] | 0 | 0, $5_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $2050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
 }
 
 function $2051($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2046($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $2049($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   $0_1 = $0_1 + 24 | 0;
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   if ($0_1 >>> 0 >= $4_1 >>> 0) {
    break label$2
   }
   label$3 : while (1) {
    $2049($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $2052($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 24 | 0) {
     break label$2
    }
    $3_1 = 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $2045($1_1 | 0, 95596 | 0, 95692 | 0, 0 | 0) | 0;
    if (!$4_1) {
     break label$1
    }
    $3_1 = ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
   }
   $3_1 = $2042($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $2053($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($2042($1_1 | 0, 95960 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 1;
    break label$1;
   }
   label$3 : {
    if (!($2052($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
     break label$3
    }
    $4_1 = 1;
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $4_1 = 0;
    $1_1 = $2045($1_1 | 0, 95596 | 0, 95740 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    label$5 : {
     $5_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($5_1 & ($6_1 ^ -1 | 0) | 0) & 7 | 0) {
     break label$1
    }
    if ((($5_1 ^ -1 | 0) & $6_1 | 0) & 96 | 0) {
     break label$1
    }
    $4_1 = 1;
    if ($2042(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$1
    }
    label$6 : {
     if (!($2042(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 95948 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$1
     }
     $4_1 = !($2045($1_1 | 0, 95596 | 0, 95792 | 0, 0 | 0) | 0);
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    $4_1 = 0;
    label$7 : {
     $6_1 = $2045($5_1 | 0, 95596 | 0, 95740 | 0, 0 | 0) | 0;
     if (!$6_1) {
      break label$7
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $2054($6_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $4_1 = 0;
    label$8 : {
     $6_1 = $2045($5_1 | 0, 95596 | 0, 95852 | 0, 0 | 0) | 0;
     if (!$6_1) {
      break label$8
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $2055($6_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $4_1 = 0;
    $0_1 = $2045($5_1 | 0, 95596 | 0, 95644 | 0, 0 | 0) | 0;
    if (!$0_1) {
     break label$1
    }
    $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = 0;
    $1_1 = $2045($1_1 | 0, 95596 | 0, 95644 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $411($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = 1;
    HEAP32[($3_1 + 20 | 0) >> 2] = -1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
    label$9 : {
     $1_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     if (($1_1 | 0) != (1 | 0)) {
      break label$9
     }
     if (!(HEAP32[$2_1 >> 2] | 0)) {
      break label$9
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    }
    $4_1 = ($1_1 | 0) == (1 | 0);
    break label$1;
   }
   $4_1 = 0;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $2054($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     return 0 | 0;
    }
    $2_1 = 0;
    $1_1 = $2045($1_1 | 0, 95596 | 0, 95740 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if (!($2042(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     return 1 | 0;
    }
    if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     $0_1 = $2045($3_1 | 0, 95596 | 0, 95740 | 0, 0 | 0) | 0;
     if (!$0_1) {
      break label$5
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   $2_1 = 0;
   $0_1 = $2045($3_1 | 0, 95596 | 0, 95852 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = $2055($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $2055($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = $2045($1_1 | 0, 95596 | 0, 95852 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
    break label$1
   }
   $2_1 = 0;
   if (!($2042(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = $2042(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $2056($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break label$3
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if (($4_1 | 0) != (1 | 0)) {
      break label$1
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break label$4
     }
     label$5 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $2057($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $2058($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2057($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($2042($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $2059($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $6_1 = $0_1 + 16 | 0;
   $2060($6_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   $5_1 = $0_1 + 24 | 0;
   $8_1 = $6_1 + ($8_1 << 3 | 0) | 0;
   if ($5_1 >>> 0 >= $8_1 >>> 0) {
    break label$2
   }
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $2060($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $2060($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $2060($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $2059($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = $2050(HEAP32[$3_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $2060($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = $2050(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $2061($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2057($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($2042($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $2062($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $2057($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($2042($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $2063($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2056($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $2059($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   $12_1 = $0_1 + 24 | 0;
   $7_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   if ($12_1 >>> 0 >= $7_1 >>> 0) {
    break label$2
   }
   label$3 : while (1) {
    $8_1 = $8_1 & 1 | 0;
    $6_1 = $6_1 & 1 | 0;
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $2059($12_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $12_1 = $12_1 + 8 | 0;
    if ($12_1 >>> 0 < $7_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $2064($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2056($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $2065($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($2042($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $2056($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $2066($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $2067() {
  return global$0 | 0;
 }
 
 function $2068($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $2069($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $2070() {
  return global$0 | 0;
 }
 
 function $2071() {
  global$2 = 65536;
  global$1 = (0 + 15 | 0) & -16 | 0;
 }
 
 function $2072() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $2073() {
  return global$2 | 0;
 }
 
 function $2074() {
  return global$1 | 0;
 }
 
 function $2075($0_1) {
  $0_1 = $0_1 | 0;
  global$3 = $0_1;
 }
 
 function $2076() {
  return global$3 | 0;
 }
 
 function $2077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 103260 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[103260 >> 2] = $0_1;
   HEAP32[(0 + 103264 | 0) >> 2] = $1_1;
  }
 }
 
 function $2078($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = 0;
  $5_1 = (HEAP32[(0 + 103268 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 103268 | 0) >> 2] = $5_1;
  HEAP32[$0_1 >> 2] = $5_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $6_1 = $2_1 + ($4_1 << 3 | 0) | 0;
     if (HEAP32[$6_1 >> 2] | 0) {
      break label$3
     }
     HEAP32[$6_1 >> 2] = $5_1;
     $4_1 = $2_1 + ($4_1 << 3 | 0) | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = 0;
     $2075($3_1 | 0);
     return $2_1 | 0;
    }
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $4_1 = $3_1 << 1 | 0;
  $3_1 = $2078($0_1 | 0, $1_1 | 0, $485($2_1 | 0, $3_1 << 4 | 0 | 8 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
  $2075($4_1 | 0);
  return $3_1 | 0;
 }
 
 function $2079($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2080($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $2081($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $2082($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $2083($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $2084($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $2079($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $2075($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $2085($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $2080($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $2086($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $2081($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2087($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $2082($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2088($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $2083($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2089($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = $3$hi;
  $9_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12_1 = $18_1;
  i64toi32_i32$1 = $4$hi;
  $14_1 = $4_1;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$83($5_1 | 0, $6_1 | 0, $7_1 | 0, $9_1 | 0, $12_1 | 0, $14_1 | 0, $19_1 | 0);
 }
 
 function $2090($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$84($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38_1;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140_1 = $45_1;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140_1;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46_1;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144_1 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47_1;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144_1;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151_1;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48_1;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, $18, $20, $36, $30, $31, $32, $77, $80, $88, $90, $92, $94, $97, $103, $106, $114, $115, $119, $120, $33, $58, $60, $125, $129, $133, $162, $168, $227, $238, $239, $233, $258, $148, $16, $23, $2032, $274, $275, $364, $365, $366, $372, $373, $374, $375, $361, $362, $363, $402, $423, $424, $425, $427, $418, $511, $512, $514, $515, $516, $518, $519, $520, $521, $528, $529, $530, $531, $532, $534, $536, $535, $537, $552, $554, $553, $555, $565, $568, $566, $569, $567, $570, $573, $574, $576, $577, $578, $579, $580, $581, $582, $587, $589, $591, $592, $593, $595, $597, $596, $598, $617, $619, $618, $620, $193, $693, $654, $694, $648, $649, $651, $662, $667, $692, $681, $684, $687, $689, $671, $677, $678, $509, $510, $571, $572, $181, $695, $194, $696, $195, $697, $45, $698, $286, $699, $775, $776, $781, $782, $796, $817, $819, $820, $821, $823, $824, $828, $829, $830, $831, $832, $833, $834, $836, $838, $839, $842, $843, $844, $846, $847, $887, $909, $910, $913, $484, $1239, $1539, $1548, $1663, $1666, $1670, $1673, $1676, $1679, $1681, $1683, $1685, $1687, $1689, $1691, $1693, $1695, $1518, $1526, $1544, $1567, $1568, $1569, $1570, $1571, $1572, $1573, $1574, $1575, $1576, $1403, $1587, $1588, $1591, $1594, $1595, $1598, $1599, $1601, $1642, $1643, $1646, $1648, $1650, $1652, $1656, $1644, $1645, $1647, $1649, $1651, $1653, $1657, $938, $1543, $1550, $1551, $1552, $1553, $1554, $1555, $1557, $1558, $1560, $1561, $1562, $1563, $1564, $1577, $1578, $1579, $1580, $1581, $1582, $1583, $1584, $1602, $1603, $1605, $1607, $1608, $1609, $1610, $1612, $1613, $1614, $1615, $1616, $1617, $1618, $1619, $1620, $1621, $1622, $1624, $1626, $1627, $1628, $1629, $1631, $1632, $1633, $1634, $1635, $1636, $1637, $1638, $1639, $937, $939, $940, $941, $944, $945, $946, $947, $948, $953, $1699, $954, $967, $976, $979, $982, $985, $988, $991, $996, $999, $1002, $1700, $1009, $1019, $1024, $1026, $1028, $1030, $1032, $1034, $1038, $1040, $1042, $1701, $1055, $1063, $1069, $1071, $1073, $1075, $1084, $1086, $1702, $1087, $1096, $1100, $1102, $1104, $1106, $1112, $1114, $1703, $1705, $1123, $1124, $1125, $1126, $1128, $1130, $1133, $1661, $1668, $1674, $1688, $1692, $1680, $1684, $1706, $1708, $1148, $1149, $1150, $1156, $1158, $1160, $1163, $1664, $1671, $1677, $1690, $1694, $1682, $1686, $1710, $1709, $1176, $1712, $1711, $1182, $1713, $1189, $1192, $1193, $1194, $1195, $1196, $1197, $1198, $1199, $1714, $1200, $1201, $1202, $1203, $1204, $1205, $1206, $1207, $1208, $1715, $1209, $1212, $1213, $1214, $1217, $1218, $1219, $1220, $1221, $1716, $1222, $1223, $1224, $1225, $1226, $1227, $1228, $1229, $1230, $1717, $1238, $1262, $1718, $1301, $1319, $1719, $1363, $1375, $1720, $1376, $1389, $1721, $1397, $1398, $1399, $1722, $1400, $1401, $1402, $1967, $1968, $2033, $2036, $2034, $2035, $2041, $2037, $2044, $2065, $2062, $2047, $2038, $2064, $2061, $2048, $2039, $2063, $2058, $2051, $2040, $2053]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "__main_argc_argv": $61, 
  "stbi_load": $347, 
  "stbi_image_free": $345, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "free": $484, 
  "stbi_load_from_memory": $350, 
  "malloc": $483, 
  "__getTypeName": $399, 
  "_embind_initialize_bindings": $400, 
  "__errno_location": $412, 
  "fflush": $420, 
  "setThrew": $2077, 
  "saveSetjmp": $2078, 
  "setTempRet0": $2075, 
  "getTempRet0": $2076, 
  "emscripten_stack_init": $2071, 
  "emscripten_stack_get_free": $2072, 
  "emscripten_stack_get_base": $2073, 
  "emscripten_stack_get_end": $2074, 
  "stackSave": $2067, 
  "stackRestore": $2068, 
  "stackAlloc": $2069, 
  "emscripten_stack_get_current": $2070, 
  "dynCall_jiji": $2084, 
  "dynCall_viijii": $2085, 
  "dynCall_iiiiij": $2086, 
  "dynCall_iiiiijj": $2087, 
  "dynCall_iiiiiijj": $2088
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// include: runtime_strings.js


// runtime_strings.js: String related runtime functions that are part of both
// MINIMAL_RUNTIME and regular runtime.

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
 * array that contains uint8 values, returns a copy of that string as a
 * Javascript String object.
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on
  // null terminator by itself.  Also, use the length info to avoid running tiny
  // strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation,
  // so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  }
  var str = '';
  // If building with TextDecoder, we have already computed the string length
  // above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
    }

    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
  return str;
}

/**
 * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
 * emscripten HEAP, returns a copy of that string as a Javascript String object.
 *
 * @param {number} ptr
 * @param {number=} maxBytesToRead - An optional length that specifies the
 *   maximum number of bytes to read. You can omit this parameter to scan the
 *   string until the first \0 byte. If maxBytesToRead is passed, and the string
 *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
 *   string will cut short at that byte index (i.e. maxBytesToRead will not
 *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
 *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
 *   JS JIT optimizations off, so it is worth to consider consistently using one
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

/**
 * Copies the given Javascript String object 'str' to the given byte array at
 * address 'outIdx', encoded in UTF8 form and null-terminated. The copy will
 * require at most str.length*4+1 bytes of space in the HEAP.  Use the function
 * lengthBytesUTF8 to compute the exact number of bytes (excluding null
 * terminator) that this function will write.
 *
 * @param {string} str - The Javascript string to copy.
 * @param {ArrayBufferView|Array<number>} heap - The array to copy to. Each
 *                                               index in this array is assumed
 *                                               to be one 8-byte element.
 * @param {number} outIdx - The starting offset in the array to begin the copying.
 * @param {number} maxBytesToWrite - The maximum number of bytes this function
 *                                   can write to the array.  This count should
 *                                   include the null terminator, i.e. if
 *                                   maxBytesToWrite=1, only the null terminator
 *                                   will be written and nothing else.
 *                                   maxBytesToWrite=0 does not write any bytes
 *                                   to the output, not even the null
 *                                   terminator.
 * @return {number} The number of bytes written, EXCLUDING the null terminator.
 */
function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
  // undefined and false each don't write out any bytes.
  if (!(maxBytesToWrite > 0))
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
    // and https://www.ietf.org/rfc/rfc2279.txt
    // and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

/**
 * Copies the given Javascript String object 'str' to the emscripten HEAP at
 * address 'outPtr', null-terminated and encoded in UTF8 form. The copy will
 * require at most str.length*4+1 bytes of space in the HEAP.
 * Use the function lengthBytesUTF8 to compute the exact number of bytes
 * (excluding null terminator) that this function will write.
 *
 * @return {number} The number of bytes written, EXCLUDING the null terminator.
 */
function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

/**
 * Returns the number of bytes the given Javascript string takes if encoded as a
 * UTF8 byte array, EXCLUDING the null terminator byte.
 *
 * @param {string} str - JavaScript string to operator on
 * @return {number} Length, in bytes, of the UTF8 encoded string.
 */
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i); // possibly a lead surrogate
    if (c <= 0x7F) {
      len++;
    } else if (c <= 0x7FF) {
      len += 2;
    } else if (c >= 0xD800 && c <= 0xDFFF) {
      len += 4; ++i;
    } else {
      len += 3;
    }
  }
  return len;
}

// end include: runtime_strings.js
// Memory management

var HEAP,
/** @type {!ArrayBuffer} */
  buffer,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STACK_SIZE = 65536;
if (Module['STACK_SIZE']) assert(STACK_SIZE === Module['STACK_SIZE'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;legacyModuleProp('INITIAL_MEMORY', 'INITIAL_MEMORY');

assert(INITIAL_MEMORY >= STACK_SIZE, 'INITIAL_MEMORY should be larger than STACK_SIZE, was ' + INITIAL_MEMORY + '! (STACK_SIZE=' + STACK_SIZE + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with the (separate) address-zero check
  // below.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x2135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten at ' + ptrToString(max) + ', expected hex dwords 0x89BACDFE and 0x2135467, but received ' + ptrToString(cookie2) + ' ' + ptrToString(cookie1));
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function keepRuntimeAlive() {
  return noExitRuntime;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
if (!Module["noFSInit"] && !FS.init.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
/** @param {boolean=} fixedasm */
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'asmjs.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "both async and sync fetching of the wasm failed";
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');

  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming == 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        // Avoid instantiateStreaming() on Node.js environment for now, as while
        // Node.js v18.1.0 implements it, it does not have a full fetch()
        // implementation yet.
        //
        // Reference:
        //   https://github.com/emscripten-core/emscripten/pull/16917
        !ENVIRONMENT_IS_NODE &&
        typeof fetch == 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        // Suppress closure warning here since the upstream definition for
        // instantiateStreaming only allows Promise<Repsponse> rather than
        // an actual Response.
        // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
        /** @suppress {checkTypes} */
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  // Also pthreads and wasm workers initialize the wasm instance through this path.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
        return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};





  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }

  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': return HEAP8[((ptr)>>0)];
        case 'i8': return HEAP8[((ptr)>>0)];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': return HEAP32[((ptr)>>2)];
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return HEAPF64[((ptr)>>3)];
        case '*': return HEAPU32[((ptr)>>2)];
        default: abort('invalid type for getValue: ' + type);
      }
      return null;
    }

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        if (ASSERTIONS) {
          assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
        }
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }

  function ptrToString(ptr) {
      return '0x' + ptr.toString(16).padStart(8, '0');
    }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
      if (type.endsWith('*')) type = '*';
      switch (type) {
        case 'i1': HEAP8[((ptr)>>0)] = value; break;
        case 'i8': HEAP8[((ptr)>>0)] = value; break;
        case 'i16': HEAP16[((ptr)>>1)] = value; break;
        case 'i32': HEAP32[((ptr)>>2)] = value; break;
        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr)>>2)] = value; break;
        case 'double': HEAPF64[((ptr)>>3)] = value; break;
        case '*': HEAPU32[((ptr)>>2)] = value; break;
        default: abort('invalid type for setValue: ' + type);
      }
    }

  function warnOnce(text) {
      if (!warnOnce.shown) warnOnce.shown = {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var PATH = {isAbs:(path) => path.charAt(0) === '/',splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:(path) => {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },join:function() {
        var paths = Array.prototype.slice.call(arguments);
        return PATH.normalize(paths.join('/'));
      },join2:(l, r) => {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return () => { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return () => crypto_module['randomBytes'](1)[0];
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return () => abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
    }
  
  var PATH_FS = {resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:(from, to) => {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  /** @type {function(string, boolean=, number=)} */
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
  }
  var TTY = {ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },fsync:function(stream) {
          stream.tty.ops.fsync(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, -1);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().includes('EOF')) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },fsync:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },fsync:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function zeroMemory(address, size) {
      HEAPU8.fill(0, address, address + size);
      return address;
    }
  
  function alignMemory(size, alignment) {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    }
  function mmapAlloc(size) {
      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
    }
  var MEMFS = {ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  /** @param {boolean=} noRunDep */
  function asyncLoad(url, onload, onerror, noRunDep) {
      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
      readAsync(url, (arrayBuffer) => {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep) removeRunDependency(dep);
      }, (event) => {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      });
      if (dep) addRunDependency(dep);
    }
  
  var ERRNO_MESSAGES = {0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES = {};
  
  function withStackSave(f) {
      var stack = stackSave();
      var ret = f();
      stackRestore(stack);
      return ret;
    }
  function demangle(func) {
      warnOnce('warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling');
      return func;
    }
  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }
  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path, opts = {}) => {
        path = PATH_FS.resolve(path);
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        opts = Object.assign(defaults, opts)
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the absolute path
        var parts = path.split('/').filter((p) => !!p);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:(node) => {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:(parentid, name) => {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:(node) => {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:(node) => {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:(parent, name) => {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:(parent, name, mode, rdev) => {
        assert(typeof parent == 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:(node) => {
        FS.hashRemoveNode(node);
      },isRoot:(node) => {
        return node === node.parent;
      },isMountpoint:(node) => {
        return !!node.mounted;
      },isFile:(mode) => {
        return (mode & 61440) === 32768;
      },isDir:(mode) => {
        return (mode & 61440) === 16384;
      },isLink:(mode) => {
        return (mode & 61440) === 40960;
      },isChrdev:(mode) => {
        return (mode & 61440) === 8192;
      },isBlkdev:(mode) => {
        return (mode & 61440) === 24576;
      },isFIFO:(mode) => {
        return (mode & 61440) === 4096;
      },isSocket:(mode) => {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:(str) => {
        var flags = FS.flagModes[str];
        if (typeof flags == 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:(flag) => {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:(node, perms) => {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:(dir) => {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:(dir, name) => {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:(dir, name, isdir) => {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:(node, flags) => {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:(fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:(fd) => FS.streams[fd],createStream:(stream, fd_start, fd_end) => {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function() {
            this.shared = { };
          };
          FS.FSStream.prototype = {};
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              /** @this {FS.FSStream} */
              get: function() { return this.node; },
              /** @this {FS.FSStream} */
              set: function(val) { this.node = val; }
            },
            isRead: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 1024); }
            },
            flags: {
              /** @this {FS.FSStream} */
              get: function() { return this.shared.flags; },
              /** @this {FS.FSStream} */
              set: function(val) { this.shared.flags = val; },
            },
            position : {
              /** @this {FS.FSStream} */
              get: function() { return this.shared.position; },
              /** @this {FS.FSStream} */
              set: function(val) { this.shared.position = val; },
            },
          });
        }
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:(fd) => {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:(stream) => {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:() => {
          throw new FS.ErrnoError(70);
        }},major:(dev) => ((dev) >> 8),minor:(dev) => ((dev) & 0xff),makedev:(ma, mi) => ((ma) << 8 | (mi)),registerDevice:(dev, ops) => {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:(dev) => FS.devices[dev],getMounts:(mount) => {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:(populate, callback) => {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:(type, opts, mountpoint) => {
        if (typeof type == 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:(mountpoint) => {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:(parent, name) => {
        return parent.node_ops.lookup(parent, name);
      },mknod:(path, mode, dev) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:(path, mode) => {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:(path, mode) => {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:(path, mode) => {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:(path, mode, dev) => {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:(oldpath, newpath) => {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:(old_path, new_path) => {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:(path) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:(path) => {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:(path) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:(path) => {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:(path, dontFollow) => {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:(path) => {
        return FS.stat(path, true);
      },chmod:(path, mode, dontFollow) => {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:(path, mode) => {
        FS.chmod(path, mode, true);
      },fchmod:(fd, mode) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:(path, uid, gid, dontFollow) => {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:(path, uid, gid) => {
        FS.chown(path, uid, gid, true);
      },fchown:(fd, uid, gid) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:(path, len) => {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:(fd, len) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:(path, atime, mtime) => {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:(path, flags, mode) => {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path == 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },close:(stream) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:(stream) => {
        return stream.fd === null;
      },llseek:(stream, offset, whence) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:(stream, buffer, offset, length, position) => {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:(stream, buffer, offset, length, position, canOwn) => {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:(stream, offset, length) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:(stream, length, position, prot, flags) => {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },msync:(stream, buffer, offset, length, mmapFlags) => {
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:(stream) => 0,ioctl:(stream, cmd, arg) => {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:(path, opts = {}) => {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:(path, data, opts = {}) => {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:() => FS.currentPath,chdir:(path) => {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:() => {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:() => {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:() => {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: () => {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: (parent, name) => {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:() => {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:() => {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach((code) => {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:() => {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:(input, output, error) => {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:() => {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        _fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:(canRead, canWrite) => {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:(path, dontResolveLastLink) => {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },analyzePath:(path, dontResolveLastLink) => {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:(parent, path, canRead, canWrite) => {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:(parent, name, properties, canRead, canWrite) => {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:(parent, name, data, canRead, canWrite, canOwn) => {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:(parent, name, input, output) => {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: (stream) => {
            stream.seekable = false;
          },
          close: (stream) => {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: (stream, buffer, offset, length, pos /* ignored */) => {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: (stream, buffer, offset, length, pos) => {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:(obj) => {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:(parent, name, url, canRead, canWrite) => {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (from, to) => {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            }
            return intArrayFromString(xhr.responseText || '', true);
          };
          var lazyArray = this;
          lazyArray.setDataGetter((chunkNum) => {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr: ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {
            if (onerror) onerror();
            removeRunDependency(dep);
          })) {
            return;
          }
          finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          asyncLoad(url, (byteArray) => processData(byteArray), onerror);
        } else {
          processData(url);
        }
      },indexedDB:() => {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:() => {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(paths, onload, onerror) => {
        onload = onload || (() => {});
        onerror = onerror || (() => {});
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = () => {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = () => {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach((path) => {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = () => { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = () => { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:(paths, onload, onerror) => {
        onload = onload || (() => {});
        onerror = onerror || (() => {});
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = () => {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach((path) => {
            var getRequest = files.get(path);
            getRequest.onsuccess = () => {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = () => { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:() => {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:() => {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:() => {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:() => {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:() => {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:() => {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS = {DEFAULT_POLLMASK:5,calculateAt:function(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAPU32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble=Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(64))>>2)] = (atime % 1000) * 1000;
        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble=Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(80))>>2)] = (mtime % 1000) * 1000;
        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble=Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(96))>>2)] = (ctime % 1000) * 1000;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(104))>>2)] = tempI64[0],HEAP32[(((buf)+(108))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      }};
  function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.createStream(stream, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 5:
        /* case 5: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 6:
        case 7:
        /* case 6: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 7: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fcntl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return -e.errno;
  }
  }

  function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: return -28; // not supported
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return -e.errno;
  }
  }

  function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      var mode = varargs ? SYSCALLS.get() : 0;
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return -e.errno;
  }
  }

  var char_0 = 48;
  
  var char_9 = 57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
        return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return '_' + name;
      }
      return name;
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  
  var emval_handle_array = [{},{value:undefined},{value:null},{value:true},{value:false}];
  
  var emval_free_list = [];
  
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
  
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
          this.stack = this.toString() + '\n' +
              stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
        if (this.message === undefined) {
          return this.name;
        } else {
          return this.name + ': ' + this.message;
        }
      };
  
      return errorClass;
    }
  var BindingError = undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          ++count;
        }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          return emval_handle_array[i];
        }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  var Emval = {toValue:(handle) => {
        if (!handle) {
            throwBindingError('Cannot use deleted val. handle = ' + handle);
        }
        return emval_handle_array[handle].value;
      },toHandle:(value) => {
        switch (value) {
          case undefined: return 1;
          case null: return 2;
          case true: return 3;
          case false: return 4;
          default:{
            var handle = emval_free_list.length ?
                emval_free_list.pop() :
                emval_handle_array.length;
  
            emval_handle_array[handle] = {refcount: 1, value: value};
            return handle;
          }
        }
      }};
  
  var PureVirtualError = undefined;
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes = undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
          rv.push(registeredInstances[k]);
        }
      }
      return rv;
    }
  
  var deletionQueue = [];
  function flushPendingDeletes() {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
      }
    }
  
  var delayFunction = undefined;
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances = {};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  function registerInheritedInstance(class_, ptr, instance) {
      ptr = getBasestPointer(class_, ptr);
      if (registeredInstances.hasOwnProperty(ptr)) {
          throwBindingError('Tried to register registered instance: ' + ptr);
      } else {
          registeredInstances[ptr] = instance;
      }
    }
  
  var registeredTypes = {};
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  
  function unregisterInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      if (registeredInstances.hasOwnProperty(ptr)) {
          delete registeredInstances[ptr];
      } else {
          throwBindingError('Tried to unregister unregistered instance: ' + ptr);
      }
    }
  
  function detachFinalizer(handle) {}
  
  var finalizationRegistry = false;
  
  function runDestructor($$) {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
        runDestructor($$);
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
        return ptr;
      }
      if (undefined === desiredClass.baseClass) {
        return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null;
      }
      return desiredClass.downcast(rv);
    }
  
  var registeredPointers = {};
  
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  var InternalError = undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
        $$: {
            value: record,
        },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance['clone']();
        } else {
          // else, just increment reference count on existing object
          // it already has a reference to the smart pointer
          var rv = registeredInstance['clone']();
          this.destructor(ptr);
          return rv;
        }
      }
  
      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr,
          });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this,
            ptr: ptr,
          });
        }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr,
        });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
        });
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationRegistry) {
        attachFinalizer = (handle) => handle;
        return handle;
      }
      // If the running environment has a FinalizationRegistry (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationRegistry
      // at run-time, not build-time.
      finalizationRegistry = new FinalizationRegistry((info) => {
        console.warn(info.leakWarning.stack.replace(/^Error: /, ''));
        releaseClassHandle(info.$$);
      });
      attachFinalizer = (handle) => {
        var $$ = handle.$$;
        var hasSmartPtr = !!$$.smartPtr;
        if (hasSmartPtr) {
          // We should not call the destructor on raw pointers in case other code expects the pointee to live
          var info = { $$: $$ };
          // Create a warning as an Error instance in advance so that we can store
          // the current stacktrace and point to it when / if a leak is detected.
          // This is more useful than the empty stacktrace of `FinalizationRegistry`
          // callback.
          var cls = $$.ptrType.registeredClass;
          info.leakWarning = new Error("Embind found a leaked C++ instance " + cls.name + " <" + ptrToString($$.ptr) + ">.\n" +
          "We'll free it automatically in this case, but this functionality is not reliable across various environments.\n" +
          "Make sure to invoke .delete() manually once you're done with the instance instead.\n" +
          "Originally allocated"); // `.stack` will add "at ..." after this sentence
          if ('captureStackTrace' in Error) {
            Error.captureStackTrace(info.leakWarning, RegisteredPointer_fromWireType);
          }
          finalizationRegistry.register(handle, info, handle);
        }
        return handle;
      };
      detachFinalizer = (handle) => finalizationRegistry.unregister(handle);
      return attachFinalizer(handle);
    }
  function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {
      constructorName = readLatin1String(constructorName);
      wrapperType = requireRegisteredType(wrapperType, 'wrapper');
      properties = Emval.toValue(properties);
  
      var arraySlice = [].slice;
  
      var registeredClass = wrapperType.registeredClass;
      var wrapperPrototype = registeredClass.instancePrototype;
      var baseClass = registeredClass.baseClass;
      var baseClassPrototype = baseClass.instancePrototype;
      var baseConstructor = registeredClass.baseClass.constructor;
      var ctor = createNamedFunction(constructorName, function() {
        registeredClass.baseClass.pureVirtualFunctions.forEach(function(name) {
            if (this[name] === baseClassPrototype[name]) {
                throw new PureVirtualError('Pure virtual function ' + name + ' must be implemented in JavaScript');
            }
        }.bind(this));
  
        Object.defineProperty(this, '__parent', {
            value: wrapperPrototype
        });
        this["__construct"].apply(this, arraySlice.call(arguments));
      });
  
      // It's a little nasty that we're modifying the wrapper prototype here.
  
      wrapperPrototype["__construct"] = function __construct() {
        if (this === wrapperPrototype) {
          throwBindingError("Pass correct 'this' to __construct");
        }
  
        var inner = baseConstructor["implement"].apply(
          undefined,
          [this].concat(arraySlice.call(arguments)));
        detachFinalizer(inner);
        var $$ = inner.$$;
        inner["notifyOnDestruction"]();
        $$.preservePointerOnDelete = true;
        Object.defineProperties(this, { $$: {
            value: $$
        }});
        attachFinalizer(this);
        registerInheritedInstance(registeredClass, $$.ptr, this);
      };
  
      wrapperPrototype["__destruct"] = function __destruct() {
        if (this === wrapperPrototype) {
          throwBindingError("Pass correct 'this' to __destruct");
        }
  
        detachFinalizer(this);
        unregisterInheritedInstance(registeredClass, this.$$.ptr);
      };
  
      ctor.prototype = Object.create(wrapperPrototype);
      for (var p in properties) {
        ctor.prototype[p] = properties[p];
      }
      return Emval.toHandle(ctor);
    }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  var awaitingDependencies = {};
  
  var typeDependencies = {};
  
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach((dt, i) => {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(() => {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options = {}) {
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach((cb) => cb());
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
        return false;
      }
      if (!(other instanceof ClassHandle)) {
        return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
      } else {
        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
          $$: {
            value: shallowCopyInternalPointer(this.$$),
          }
        }));
  
        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
          // TODO This check can be removed in -O3 level "unsafe" optimizations.
          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
              throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
          }
          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
          throwBindingError("Cannot register public name '" + name + "' twice");
        }
  
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
      }
      else {
        Module[name] = value;
        if (undefined !== numArguments) {
          Module[name].numArguments = numArguments;
        }
      }
    }
  
  /** @constructor */
  function RegisteredClass(name,
                               constructor,
                               instancePrototype,
                               rawDestructor,
                               baseClass,
                               getActualType,
                               upcast,
                               downcast) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
  
        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr;
        } else {
          return 0;
        }
      }
  
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
          throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
  
        switch (this.sharingPolicy) {
          case 0: // NONE
            // no upcasting
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
            }
            break;
  
          case 1: // INTRUSIVE
            ptr = handle.$$.smartPtr;
            break;
  
          case 2: // BY_EMVAL
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle['clone']();
              ptr = this.rawShare(
                ptr,
                Emval.toHandle(function() {
                  clonedHandle['delete']();
                })
              );
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break;
  
          default:
            throwBindingError('Unsupporting sharing policy');
        }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAP32[((pointer)>>2)]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
        this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
        handle['delete']();
      }
    }
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
          this['toWireType'] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      }
      else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - dynCall function not found for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module['dynCall_' + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  
  var wasmTableMirror = [];
  function getWasmTableEntry(funcPtr) {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");
      return func;
    }
  /** @param {Object=} args */
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(getWasmTableEntry(ptr), 'missing table entry in dynCall: ' + ptr);
      var rtn = getWasmTableEntry(ptr).apply(null, args);
      return rtn;
    }
  function getDynCaller(sig, ptr) {
      assert(sig.includes('j') || sig.includes('p'), 'getDynCaller should only be called with i64 sigs')
      var argCache = [];
      return function() {
        argCache.length = 0;
        Object.assign(argCache, arguments);
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return getWasmTableEntry(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp != "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError = undefined;
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return;
        }
        if (registeredTypes[type]) {
          return;
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_class(rawType,
                                     rawPointerType,
                                     rawConstPointerType,
                                     baseClassRawType,
                                     getActualTypeSignature,
                                     getActualType,
                                     upcastSignature,
                                     upcast,
                                     downcastSignature,
                                     downcast,
                                     name,
                                     destructorSignature,
                                     rawDestructor) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
          base = base[0];
  
          var baseClass;
          var basePrototype;
          if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
          } else {
            basePrototype = ClassHandle.prototype;
          }
  
          var constructor = createNamedFunction(legalFunctionName, function() {
            if (Object.getPrototypeOf(this) !== instancePrototype) {
              throw new BindingError("Use 'new' to construct " + name);
            }
            if (undefined === registeredClass.constructor_body) {
              throw new BindingError(name + " has no accessible constructor");
            }
            var body = registeredClass.constructor_body[arguments.length];
            if (undefined === body) {
              throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
            }
            return body.apply(this, arguments);
          });
  
          var instancePrototype = Object.create(basePrototype, {
            constructor: { value: constructor },
          });
  
          constructor.prototype = instancePrototype;
  
          var registeredClass = new RegisteredClass(name,
                                                    constructor,
                                                    instancePrototype,
                                                    rawDestructor,
                                                    baseClass,
                                                    getActualType,
                                                    upcast,
                                                    downcast);
  
          var referenceConverter = new RegisteredPointer(name,
                                                         registeredClass,
                                                         true,
                                                         false,
                                                         false);
  
          var pointerConverter = new RegisteredPointer(name + '*',
                                                       registeredClass,
                                                       false,
                                                       false,
                                                       false);
  
          var constPointerConverter = new RegisteredPointer(name + ' const*',
                                                            registeredClass,
                                                            false,
                                                            true,
                                                            false);
  
          registeredPointers[rawType] = {
            pointerType: pointerConverter,
            constPointerType: constPointerConverter
          };
  
          replacePublicSymbol(legalFunctionName, constructor);
  
          return [referenceConverter, pointerConverter, constPointerConverter];
        }
      );
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
      /*
       * Previously, the following line was just:
       *   function dummy() {};
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even
       * though at creation, the 'dummy' has the correct constructor name.  Thus,
       * objects created with IMVU.new would show up in the debugger as 'dummy',
       * which isn't very helpful.  Using IMVU.createNamedFunction addresses the
       * issue.  Doublely-unfortunately, there's no way to write a test for this
       * behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
          needsDestructorStack = true;
          break;
        }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
        invokerFnBody += "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for (var i = 0; i < argCount - 2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
      } else {
        for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
          var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
            args1.push(paramName+"_dtor");
            args2.push(argTypes[i].destructorFunction);
          }
        }
      }
  
      if (returns) {
        invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                         "return ret;\n";
      } else {
      }
  
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          // TODO(https://github.com/emscripten-core/emscripten/issues/17310):
          // Find a way to hoist the `>> 2` or `>> 3` out of this loop.
          array.push(HEAPU32[(((firstElement)+(i * 4))>>2)]);
      }
      return array;
    }
  function __embind_register_class_class_function(rawClassType,
                                                    methodName,
                                                    argCount,
                                                    rawArgTypesAddr,
                                                    invokerSignature,
                                                    rawInvoker,
                                                    fn) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
  
        function unboundTypesHandler() {
          throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }
  
        if (methodName.startsWith("@@")) {
          methodName = Symbol[methodName.substring(2)];
        }
  
        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
          // This is the first function to be registered with this name.
          unboundTypesHandler.argCount = argCount-1;
          proto[methodName] = unboundTypesHandler;
        } else {
          // There was an existing function with the same name registered. Set up
          // a function overload routing table.
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }
  
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          // Replace the initial unbound-types-handler stub with the proper
          // function. If multiple overloads are registered, the function handlers
          // go into an overload table.
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
          if (undefined === proto[methodName].overloadTable) {
            func.argCount = argCount-1;
            proto[methodName] = func;
          } else {
            proto[methodName].overloadTable[argCount-1] = func;
          }
          return [];
        });
        return [];
      });
    }

  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;
  
        if (undefined === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = () => {
          throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };
  
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          // Insert empty slot for context type (argTypes[1]).
          argTypes.splice(1, 0, null);
          classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
          return [];
        });
        return [];
      });
    }

  function __embind_register_class_function(rawClassType,
                                              methodName,
                                              argCount,
                                              rawArgTypesAddr, // [ReturnType, ThisType, Args...]
                                              invokerSignature,
                                              rawInvoker,
                                              context,
                                              isPureVirtual) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
  
        if (methodName.startsWith("@@")) {
          methodName = Symbol[methodName.substring(2)];
        }
  
        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }
  
        function unboundTypesHandler() {
          throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }
  
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
          // This is the first overload to be registered, OR we are replacing a
          // function in the base class with a function in the derived class.
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          // There was an existing function with the same name registered. Set up
          // a function overload routing table.
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }
  
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
          // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
          // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
          if (undefined === proto[methodName].overloadTable) {
            // Set argCount in case an overload is registered later
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }
  
          return [];
        });
        return [];
      });
    }

  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
        emval_handle_array[handle] = undefined;
        emval_free_list.push(handle);
      }
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
          var rv = Emval.toValue(handle);
          __emval_decref(handle);
          return rv;
        },
        'toWireType': function(destructors, value) {
          return Emval.toHandle(value);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: null, // This type does not need a destructor
  
        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
      });
    }

  function embindRepr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
           return value;
        },
        'toWireType': function(destructors, value) {
          if (typeof value != "number" && typeof value != "boolean") {
            throw new TypeError('Cannot convert "' + embindRepr(value) + '" to ' + this.name);
          }
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': floatReadValueFromPointer(name, shift),
        destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come
      // out as 'i32 -1'. Always treat those as max u32.
      if (maxRange === -1) {
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = (value) => value;
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = (value) => (value << bitshift) >>> bitshift;
      }
  
      var isUnsignedType = (name.includes('unsigned'));
      var checkAssertions = (value, toTypeName) => {
        if (typeof value != "number" && typeof value != "boolean") {
          throw new TypeError('Cannot convert "' + embindRepr(value) + '" to ' + toTypeName);
        }
        if (value < minRange || value > maxRange) {
          throw new TypeError('Passing a number "' + embindRepr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
        }
      }
      var toWireType;
      if (isUnsignedType) {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          return value >>> 0;
        }
      } else {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        }
      }
      registerType(primitiveType, {
        name: name,
        'fromWireType': fromWireType,
        'toWireType': toWireType,
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle]; // in elements
        var data = heap[handle + 1]; // byte offset into emscripten heap
        return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': decodeMemoryView,
        'argPackAdvance': 8,
        'readValueFromPointer': decodeMemoryView,
      }, {
        ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
          var length = HEAPU32[((value)>>2)];
          var payload = value + 4;
  
          var str;
          if (stdStringIsUTF8) {
            var decodeStartPtr = payload;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = payload + i;
              if (i == length || HEAPU8[currentBytePtr] == 0) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[payload + i]);
            }
            str = a.join('');
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': function(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
  
          var length;
          var valueIsOfTypeString = (typeof value == 'string');
  
          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
            throwBindingError('Cannot pass non-string to std::string');
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            length = lengthBytesUTF8(value);
          } else {
            length = value.length;
          }
  
          // assumes 4-byte alignment
          var base = _malloc(4 + length + 1);
          var ptr = base + 4;
          HEAPU32[((base)>>2)] = length;
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(ptr);
                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + i] = value[i];
              }
            }
          }
  
          if (destructors !== null) {
            destructors.push(_free, base);
          }
          return base;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
  function UTF16ToString(ptr, maxBytesToRead) {
      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.
      // Also, use the length info to avoid running tiny strings through
      // TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
  
      if (endPtr - ptr > 32 && UTF16Decoder)
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  
      // Fallback: decode without UTF16Decoder
      var str = '';
  
      // If maxBytesToRead is not passed explicitly, it will be undefined, and the
      // for-loop's condition will always evaluate to true. The loop is then
      // terminated on the first null char.
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
        if (codeUnit == 0) break;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can
        // pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
      }
  
      return str;
    }
  
  function stringToUTF16(str, outPtr, maxBytesToWrite) {
      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)] = 0;
      return outPtr - startPtr;
    }
  
  function lengthBytesUTF16(str) {
      return str.length*2;
    }
  
  function UTF32ToString(ptr, maxBytesToRead) {
      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
      var i = 0;
  
      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    }
  
  function stringToUTF32(str, outPtr, maxBytesToWrite) {
      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)] = 0;
      return outPtr - startPtr;
    }
  
  function lengthBytesUTF32(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
  
      return len;
    }
  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        getHeap = () => HEAPU16;
        shift = 1;
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        getHeap = () => HEAPU32;
        shift = 2;
      }
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
          // Code mostly taken from _embind_register_std_string fromWireType
          var length = HEAPU32[value >> 2];
          var HEAP = getHeap();
          var str;
  
          var decodeStartPtr = value + 4;
          // Looping here to support possible embedded '0' bytes
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;
            if (i == length || HEAP[currentBytePtr >> shift] == 0) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + charSize;
            }
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': function(destructors, value) {
          if (!(typeof value == 'string')) {
            throwBindingError('Cannot pass non-string to C++ string type ' + name);
          }
  
          // assumes 4-byte alignment
          var length = lengthBytesUTF(value);
          var ptr = _malloc(4 + length + charSize);
          HEAPU32[ptr >> 2] = length >> shift;
  
          encodeString(value, ptr + 4, length + charSize);
  
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  var nowIsMonotonic = true;;
  function __emscripten_get_now_is_monotonic() {
      return nowIsMonotonic;
    }

  function emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAPU32[((destructorsRef)>>2)] = Emval.toHandle(destructors);
      return destructors;
    }
  
  var emval_symbols = {};
  function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
        return readLatin1String(address);
      }
      return symbol;
    }
  
  var emval_methodCallers = [];
  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = Emval.toValue(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  function emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  function emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(HEAPU32[(((argTypes)+(i * POINTER_SIZE))>>2)],
                                     "parameter " + i);
      }
      return a;
    }
  
  var emval_registeredMethods = [];
  function __emval_get_method_caller(argCount, argTypes) {
      var types = emval_lookupTypes(argCount, argTypes);
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
      var returnId = emval_registeredMethods[signatureName];
      if (returnId !== undefined) {
        return returnId;
      }
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        params.push("argType" + i);
        args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      returnId = emval_addMethodCaller(invokerFunction);
      emval_registeredMethods[signatureName] = returnId;
      return returnId;
    }

  function __emval_incref(handle) {
      if (handle > 4) {
        emval_handle_array[handle].refcount += 1;
      }
    }

  function _abort() {
      abort('native code called abort()');
    }

  function _emscripten_date_now() {
      return Date.now();
    }

  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = () => {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else _emscripten_get_now = () => performance.now();
  ;

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function getHeapMax() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ' + HEAP8.length + ', (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _emscripten_run_script(ptr) {
      eval(UTF8ToString(ptr));
    }

  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      checkStackCookie();
      if (e instanceof WebAssembly.RuntimeError) {
        if (_emscripten_stack_get_current() <= 0) {
          err('Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to ' + STACK_SIZE + ')');
        }
      }
      quit_(1, e);
    }
  function callUserCallback(func) {
      if (ABORT) {
        err('user callback triggered after runtime exited or application aborted.  Ignoring.');
        return;
      }
      try {
        func();
      } catch (e) {
        handleException(e);
      }
    }
  
  /** @param {number=} timeout */
  function safeSetTimeout(func, timeout) {
      
      return setTimeout(function() {
        
        callUserCallback(func);
      }, timeout);
    }
  var Browser = {mainLoop:{running:false,scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          // Incrementing this signals the previous main loop that it's now become old, and it must return.
          Browser.mainLoop.currentlyRunningMainloop++;
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          // do not set timing and call scheduler, we will do it on the next lines
          setMainLoop(func, 0, false, Browser.mainLoop.arg, true);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          callUserCallback(func);
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          err("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? err("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject == 'undefined') {
          err("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = () => {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = /** @type {!HTMLCanvasElement} */ (document.createElement('canvas'));
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            preloadedImages[name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = (event) => {
            out('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            preloadedAudios[name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            preloadedAudios[name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', () => finish(audio), false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              err('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      (() => {});
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   (() => {}); // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", (ev) => {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },handledByPreloadPlugin:function(byteArray, fullname, finish, onerror) {
        // Ensure plugins are ready.
        Browser.init();
  
        var handled = false;
        Module['preloadPlugins'].forEach(function(plugin) {
          if (handled) return;
          if (plugin['canHandle'](fullname)) {
            plugin['handle'](byteArray, fullname, finish, onerror);
            handled = true;
          }
        });
        return handled;
      },createContext:function(/** @type {HTMLCanvasElement} */ canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: (typeof WebGL2RenderingContext != 'undefined') ? 2 : 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL != 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx == 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer == 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas == 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? () => canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? () => canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) : null);
  
        canvasContainer.requestFullscreen();
      },requestFullScreen:function() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame == 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeSetTimeout:function(func, timeout) {
        // Legacy function, this is used by the SDL2 port so we need to keep it
        // around at least until that is updated.
        // See https://github.com/libsdl-org/SDL/pull/6304
        return safeSetTimeout(func, timeout);
      },safeRequestAnimationFrame:function(func) {
        
        return Browser.requestAnimationFrame(function() {
          
          callUserCallback(func);
        });
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if (!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch (event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX != 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY != 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX != 'undefined') && (typeof scrollY != 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        err('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (!Browser.mainLoop.running) {
        
        Browser.mainLoop.running = true;
      }
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate == 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          /** @param {Event} event */
          var Browser_setImmediate_messageHandler = (event) => {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          };
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = /** @type{function(function(): ?, ...?): number} */(function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          })
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _proc_exit(code) {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        if (Module['onExit']) Module['onExit'](code);
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    }
  /** @param {boolean|number=} implicit */
  function exitJS(status, implicit) {
      EXITSTATUS = status;
  
      checkUnflushedContent();
  
      // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
      if (keepRuntimeAlive() && !implicit) {
        var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
        err(msg);
      }
  
      _proc_exit(status);
    }
  var _exit = exitJS;
  function maybeExit() {
    }
  
    /**
     * @param {number=} arg
     * @param {boolean=} noSetTiming
     */
  function setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming) {
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = browserIterationFunc;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
      function checkIsRunning() {
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) {
          
          maybeExit();
          return false;
        }
        return true;
      }
  
      // We create the loop runner here but it is not actually running until
      // _emscripten_set_main_loop_timing is called (which might happen a
      // later time).  This member signifies that the current runner has not
      // yet been started so that we can call runtimeKeepalivePush when it
      // gets it timing set for the first time.
      Browser.mainLoop.running = false;
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          out('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (!checkIsRunning()) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (!checkIsRunning()) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          warnOnce('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (!checkIsRunning()) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL == 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    }
  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
      var browserIterationFunc = getWasmTableEntry(func);
      setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop);
    }

  var ENV = {};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  
  /** @param {boolean=} dontAddNull */
  function writeAsciiToMemory(str, buffer, dontAddNull) {
      for (var i = 0; i < str.length; ++i) {
        assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
        HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
      }
      // Null-terminate the pointer to the HEAP.
      if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
    }
  function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAPU32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAPU32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    }


  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  function doReadv(stream, iov, iovcnt, offset) {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8,ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
      }
      return ret;
    }
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return e.errno;
  }
  }

  function convertI32PairToI53Checked(lo, hi) {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    }
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  try {
  
      var offset = convertI32PairToI53Checked(offset_low, offset_high); if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  function doWritev(stream, iov, iovcnt, offset) {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8,ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
      }
      return ret;
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
    return e.errno;
  }
  }

  function __webgl_enable_ANGLE_instanced_arrays(ctx) {
      // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('ANGLE_instanced_arrays');
      if (ext) {
        ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
        ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
        ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        return 1;
      }
    }
  
  function __webgl_enable_OES_vertex_array_object(ctx) {
      // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('OES_vertex_array_object');
      if (ext) {
        ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
        ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
        ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
        ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        return 1;
      }
    }
  
  function __webgl_enable_WEBGL_draw_buffers(ctx) {
      // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('WEBGL_draw_buffers');
      if (ext) {
        ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        return 1;
      }
    }
  
  function __webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(ctx) {
      // Closure is expected to be allowed to minify the '.dibvbi' property, so not accessing it quoted.
      return !!(ctx.dibvbi = ctx.getExtension('WEBGL_draw_instanced_base_vertex_base_instance'));
    }
  
  function __webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(ctx) {
      // Closure is expected to be allowed to minify the '.mdibvbi' property, so not accessing it quoted.
      return !!(ctx.mdibvbi = ctx.getExtension('WEBGL_multi_draw_instanced_base_vertex_base_instance'));
    }
  
  function __webgl_enable_WEBGL_multi_draw(ctx) {
      // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
      return !!(ctx.multiDrawWebgl = ctx.getExtension('WEBGL_multi_draw'));
    }
  var GL = {counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:[],offscreenCanvases:{},queries:[],samplers:[],transformFeedbacks:[],syncs:[],stringCache:{},stringiCache:{},unpackAlignment:4,recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(/** @type {HTMLCanvasElement} */ canvas, webGLContextAttributes) {
  
        // BUG: Workaround Safari WebGL issue: After successfully acquiring WebGL context on a canvas,
        // calling .getContext() will always return that context independent of which 'webgl' or 'webgl2'
        // context version was passed. See https://bugs.webkit.org/show_bug.cgi?id=222758 and
        // https://github.com/emscripten-core/emscripten/issues/13295.
        // TODO: Once the bug is fixed and shipped in Safari, adjust the Safari version field in above check.
        if (!canvas.getContextSafariWebGL2Fixed) {
          canvas.getContextSafariWebGL2Fixed = canvas.getContext;
          /** @type {function(this:HTMLCanvasElement, string, (Object|null)=): (Object|null)} */
          function fixedGetContext(ver, attrs) {
            var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
            return ((ver == 'webgl') == (gl instanceof WebGLRenderingContext)) ? gl : null;
          }
          canvas.getContext = fixedGetContext;
        }
  
        var ctx = 
          (webGLContextAttributes.majorVersion > 1)
          ?
            canvas.getContext("webgl2", webGLContextAttributes)
          :
          (canvas.getContext("webgl", webGLContextAttributes)
            // https://caniuse.com/#feat=webgl
            );
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        // without pthreads a context is just an integer ID
        var handle = GL.getNewId(GL.contexts);
  
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault == 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents == 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        // Extensions that are only available in WebGL 1 (the calls will be no-ops if called on a WebGL 2 context active)
        __webgl_enable_ANGLE_instanced_arrays(GLctx);
        __webgl_enable_OES_vertex_array_object(GLctx);
        __webgl_enable_WEBGL_draw_buffers(GLctx);
        // Extensions that are available from WebGL >= 2 (no-op if called on a WebGL 1 context active)
        __webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(GLctx);
        __webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(GLctx);
  
        // On WebGL 2, EXT_disjoint_timer_query is replaced with an alternative
        // that's based on core APIs, and exposes only the queryCounterEXT()
        // entrypoint.
        if (context.version >= 2) {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query_webgl2");
        }
  
        // However, Firefox exposes the WebGL 1 version on WebGL 2 as well and
        // thus we look for the WebGL 1 version again if the WebGL 2 version
        // isn't present. https://bugzilla.mozilla.org/show_bug.cgi?id=1328882
        if (context.version < 2 || !GLctx.disjointTimerQueryExt)
        {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        }
  
        __webgl_enable_WEBGL_multi_draw(GLctx);
  
        // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        var exts = GLctx.getSupportedExtensions() || [];
        exts.forEach(function(ext) {
          // WEBGL_lose_context, WEBGL_debug_renderer_info and WEBGL_debug_shaders are not enabled by default.
          if (!ext.includes('lose_context') && !ext.includes('debug')) {
            // Call .getExtension() to enable that extension permanently.
            GLctx.getExtension(ext);
          }
        });
      }};
  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _glBufferData(target, size, data, usage) {
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        // If size is zero, WebGL would interpret uploading the whole input arraybuffer (starting from given offset), which would
        // not make sense in WebAssembly, so avoid uploading if size is zero. However we must still call bufferData to establish a
        // backing storage of zero bytes.
        if (data && size) {
          GLctx.bufferData(target, HEAPU8, usage, data, size);
        } else {
          GLctx.bufferData(target, size, usage);
        }
      } else {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
      }
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      // Store additional information needed for each shader program:
      program.name = id;
      // Lazy cache results of glGetProgramiv(GL_ACTIVE_UNIFORM_MAX_LENGTH/GL_ACTIVE_ATTRIBUTE_MAX_LENGTH/GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)
      program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
      program.uniformIdCounter = 1;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
  
      return id;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)] = id;
      }
    }
  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      program = GL.programs[program];
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(program);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)] = log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        if (!program.maxUniformLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/); ++i) {
            program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (!program.maxAttributeLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/); ++i) {
            program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (!program.maxUniformBlockNameLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/); ++i) {
            program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getProgramParameter(program, pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        HEAP32[((p)>>2)] = logLength;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        HEAP32[((p)>>2)] = sourceLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  /** @suppress {checkTypes} */
  function jstoi_q(str) {
      return parseInt(str);
    }
  
  /** @noinline */
  function webglGetLeftBracePos(name) {
      return name.slice(-1) == ']' && name.lastIndexOf('[');
    }
  function webglPrepareUniformLocationsBeforeFirstUse(program) {
      var uniformLocsById = program.uniformLocsById, // Maps GLuint -> WebGLUniformLocation
        uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, // Maps name -> [uniform array length, GLuint]
        i, j;
  
      // On the first time invocation of glGetUniformLocation on this shader program:
      // initialize cache data structures and discover which uniforms are arrays.
      if (!uniformLocsById) {
        // maps GLint integer locations to WebGLUniformLocations
        program.uniformLocsById = uniformLocsById = {};
        // maps integer locations back to uniform name strings, so that we can lazily fetch uniform array locations
        program.uniformArrayNamesById = {};
  
        for (i = 0; i < GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/); ++i) {
          var u = GLctx.getActiveUniform(program, i);
          var nm = u.name;
          var sz = u.size;
          var lb = webglGetLeftBracePos(nm);
          var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
  
          // Assign a new location.
          var id = program.uniformIdCounter;
          program.uniformIdCounter += sz;
          // Eagerly get the location of the uniformArray[0] base element.
          // The remaining indices >0 will be left for lazy evaluation to
          // improve performance. Those may never be needed to fetch, if the
          // application fills arrays always in full starting from the first
          // element of the array.
          uniformSizeAndIdsByName[arrayName] = [sz, id];
  
          // Store placeholder integers in place that highlight that these
          // >0 index locations are array indices pending population.
          for(j = 0; j < sz; ++j) {
            uniformLocsById[id] = j;
            program.uniformArrayNamesById[id++] = arrayName;
          }
        }
      }
    }
  function _glGetUniformLocation(program, name) {
  
      name = UTF8ToString(name);
  
      if (program = GL.programs[program]) {
        webglPrepareUniformLocationsBeforeFirstUse(program);
        var uniformLocsById = program.uniformLocsById; // Maps GLuint -> WebGLUniformLocation
        var arrayIndex = 0;
        var uniformBaseName = name;
  
        // Invariant: when populating integer IDs for uniform locations, we must maintain the precondition that
        // arrays reside in contiguous addresses, i.e. for a 'vec4 colors[10];', colors[4] must be at location colors[0]+4.
        // However, user might call glGetUniformLocation(program, "colors") for an array, so we cannot discover based on the user
        // input arguments whether the uniform we are dealing with is an array. The only way to discover which uniforms are arrays
        // is to enumerate over all the active uniforms in the program.
        var leftBrace = webglGetLeftBracePos(name);
  
        // If user passed an array accessor "[index]", parse the array index off the accessor.
        if (leftBrace > 0) {
          arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0; // "index]", coerce parseInt(']') with >>>0 to treat "foo[]" as "foo[0]" and foo[-1] as unsigned out-of-bounds.
          uniformBaseName = name.slice(0, leftBrace);
        }
  
        // Have we cached the location of this uniform before?
        var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName]; // A pair [array length, GLint of the uniform location]
  
        // If an uniform with this name exists, and if its index is within the array limits (if it's even an array),
        // query the WebGLlocation, or return an existing cached location.
        if (sizeAndId && arrayIndex < sizeAndId[0]) {
          arrayIndex += sizeAndId[1]; // Add the base location of the uniform to the array index offset.
          if ((uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name))) {
            return arrayIndex;
          }
        }
      }
      else {
        // N.b. we are currently unable to distinguish between GL program IDs that never existed vs GL program IDs that have been deleted,
        // so report GL_INVALID_VALUE in both cases.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
      }
      return -1;
    }

  function _glLinkProgram(program) {
      program = GL.programs[program];
      GLctx.linkProgram(program);
      // Invalidate earlier computed uniform->ID mappings, those have now become stale
      program.uniformLocsById = 0; // Mark as null-like so that glGetUniformLocation() knows to populate this again.
      program.uniformSizeAndIdsByName = {};
  
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function __colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
        // 0x1903 /* GL_RED */ - 0x1902: 1,
        26917: 2,
        26918: 2,
        // 0x8D94 /* GL_RED_INTEGER */ - 0x1902: 1,
        29846: 3,
        29847: 4
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
      if (type == 0) return HEAP8;
  
      if (type == 1) return HEAPU8;
  
      if (type == 2) return HEAP16;
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        || type == 28520
        || type == 30779
        || type == 30782
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }
  function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = heapObjectForWebGLType(type);
      var shift = heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }
  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.version >= 2) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels) {
          var heap = heapObjectForWebGLType(type);
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function webglGetUniformLocation(location) {
      var p = GLctx.currentProgram;
  
      if (p) {
        var webglLoc = p.uniformLocsById[location];
        // p.uniformLocsById[location] stores either an integer, or a WebGLUniformLocation.
  
        // If an integer, we have not yet bound the location, so do it now. The integer value specifies the array index
        // we should bind to.
        if (typeof webglLoc == 'number') {
          p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? '[' + webglLoc + ']' : ''));
        }
        // Else an already cached WebGLUniformLocation, return it.
        return webglLoc;
      } else {
        GL.recordError(0x502/*GL_INVALID_OPERATION*/);
      }
    }
  function _glUniform1i(location, v0) {
      GLctx.uniform1i(webglGetUniformLocation(location), v0);
    }

  var miniTempWebGLFloatBuffers = [];
  function _glUniformMatrix4fv(location, count, transpose, value) {
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        count && GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, HEAPF32, value>>2, count*16);
        return;
      }
  
      if (count <= 18) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[16*count-1];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 16 * count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2, (value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, view);
    }

  function _glUseProgram(program) {
      program = GL.programs[program];
      GLctx.useProgram(program);
      // Record the currently active program so that we can access the uniform
      // mapping table of that program.
      GLctx.currentProgram = program;
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  /** @constructor */
  function GLFW_Window(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      }
  
  function allocateUTF8(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8Array(str, HEAP8, ret, size);
      return ret;
    }
  var GLFW = {WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 96; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        getWasmTableEntry(GLFW.active.charFunc)(GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
        if (repeat) status = 2; // GLFW_REPEAT
        getWasmTableEntry(GLFW.active.keyFunc)(GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        getWasmTableEntry(GLFW.active.cursorPosFunc)(GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        getWasmTableEntry(GLFW.active.cursorEnterFunc)(GLFW.active.id, 1);
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        getWasmTableEntry(GLFW.active.cursorEnterFunc)(GLFW.active.id, 0);
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
        getWasmTableEntry(GLFW.active.mouseButtonFunc)(GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
        var sx = 0;
        var sy = delta;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
        } else {
          sx = event.deltaX;
        }
  
        getWasmTableEntry(GLFW.active.scrollFunc)(GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
        getWasmTableEntry(GLFW.active.windowSizeFunc)(GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        getWasmTableEntry(GLFW.active.framebufferSizeFunc)(GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:[],lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                out('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocateUTF8(gamepad.id),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: _malloc(gamepad.buttons.length),
                  axes: _malloc(gamepad.axes.length*4),
                };
  
                if (GLFW.joystickFunc) {
                  getWasmTableEntry(GLFW.joystickFunc)(joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                HEAP8[((data.buttons + i)>>0)] = gamepad.buttons[i].pressed;
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                HEAPF32[((data.axes + i*4)>>2)] = gamepad.axes[i];
              }
            } else {
              if (GLFW.joys[joy]) {
                out('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  getWasmTableEntry(GLFW.joystickFunc)(joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.keyFunc;
        win.keyFunc = cbfun;
        return prevcbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.charFunc;
        win.charFunc = cbfun;
        return prevcbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.mouseButtonFunc;
        win.mouseButtonFunc = cbfun;
        return prevcbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.cursorPosFunc;
        win.cursorPosFunc = cbfun;
        return prevcbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.scrollFunc;
        win.scrollFunc = cbfun;
        return prevcbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.dropFunc;
        win.dropFunc = cbfun;
        return prevcbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = _malloc(event.dataTransfer.files.length*4);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = (e) => {
            if (reader.readyState != 2) { // not DONE
              ++written;
              out('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              getWasmTableEntry(GLFW.active.dropFunc)(GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocateUTF8(path);
          filenamesArray.push(filename);
          HEAPU32[((filenames + i*4)>>2)] = filename;
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowSizeFunc;
        win.windowSizeFunc = cbfun;
  
        return prevcbfun;
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowCloseFunc;
        win.windowCloseFunc = cbfun;
        return prevcbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowRefreshFunc;
        win.windowRefreshFunc = cbfun;
        return prevcbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch (mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch (value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                out("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                out("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            out("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            out("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            out("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        HEAPF64[((x)>>3)] = Browser.mouseX;
        HEAPF64[((y)>>3)] = Browser.mouseY;
      },getMousePos:function(winid, x, y) {
        HEAP32[((x)>>2)] = Browser.mouseX;
        HEAP32[((y)>>2)] = Browser.mouseY;
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        if (x) {
          HEAP32[((x)>>2)] = wx;
        }
  
        if (y) {
          HEAP32[((y)>>2)] = wy;
        }
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        if (width) {
          HEAP32[((width)>>2)] = ww;
        }
  
        if (height) {
          HEAP32[((height)>>2)] = wh;
        }
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            Browser.requestFullscreen();
          } else {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
        getWasmTableEntry(win.windowSizeFunc)(win.id, width, height);
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++) {
          // no-op
        }
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          Browser.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++) {
          // no-op
        }
        var useWebGL = GLFW.hints[0x00022001] > 0; // Use WebGL when we are told to based on GLFW_CLIENT_API
        if (i == GLFW.windows.length) {
          if (useWebGL) {
            var contextAttributes = {
              antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
              depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
              stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
              alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS
            }
            Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
          } else {
            Browser.init();
          }
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx && useWebGL) return 0;
  
        // Get non alive id
        var win = new GLFW_Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          getWasmTableEntry(win.windowCloseFunc)(win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};
  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwGetCurrentContext() {
      return GLFW.active ? GLFW.active.id : 0;
    }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  function _glfwGetMouseButton(winid, button) {
      return GLFW.getMouseButton(winid, button);
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("touchmove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("touchstart", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("touchcancel", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener("touchend", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push((width, height) => {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwPollEvents() {}

  function _glfwSetCursorPosCallback(winid, cbfun) {
      return GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("touchmove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("touchstart", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("touchcancel", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener("touchend", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  var __MONTH_DAYS_LEAP = [31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR = [31,28,31,30,31,30,31,31,30,31,30,31];
  function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  
  function writeArrayToMemory(array, buffer) {
      assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
      HEAP8.set(array, buffer);
    }
  function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value == 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            }
            return thisDate.getFullYear();
          }
          return thisDate.getFullYear()-1;
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          }
          return 'PM';
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          var days = date.tm_yday + 7 - date.tm_wday;
          return leadingNulls(Math.floor(days / 7), 2);
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7 ) / 7);
          // If 1 Jan is just 1-3 days past Monday, the previous week
          // is also in this year.
          if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {
            val++;
          }
          if (!val) {
            val = 52;
            // If 31 December of prev year a Thursday, or Friday of a
            // leap year, then the prev year has 53 weeks.
            var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;
            if (dec31 == 4 || (dec31 == 5 && __isLeapYear(date.tm_year%400-1))) {
              val++;
            }
          } else if (val == 53) {
            // If 1 January is not a Thursday, and not a Wednesday of a
            // leap year, then this year has only 52 weeks.
            var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;
            if (jan1 != 4 && (jan1 != 3 || !__isLeapYear(date.tm_year)))
              val = 1;
          }
          return leadingNulls(val, 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          var days = date.tm_yday + 7 - ((date.tm_wday + 6) % 7);
          return leadingNulls(Math.floor(days / 7), 2);
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
  
      // Replace %% with a pair of NULLs (which cannot occur in a C string), then
      // re-inject them after processing.
      pattern = pattern.replace(/%%/g, '\0\0')
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.includes(rule)) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      pattern = pattern.replace(/\0\0/g, '%')
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  function _strftime_l(s, maxsize, format, tm, loc) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }



  function allocateUTF8OnStack(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8Array(str, HEAP8, ret, size);
      return ret;
    }


  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_unlink"] = FS.unlink;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createDevice"] = FS.createDevice;;
ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };;
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_emval();;
PureVirtualError = Module['PureVirtualError'] = extendError(Error, 'PureVirtualError');;
embind_init_charCodes();
init_embind();;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;

      // exports
      Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) { Browser.requestFullscreen(lockPointer, resizeCanvas) };
      Module["requestFullScreen"] = function Module_requestFullScreen() { Browser.requestFullScreen() };
      Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
      Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
      Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
      Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
      Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() };
      Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
      var preloadedImages = {};
      var preloadedAudios = {};;
var GLctx;;
var miniTempWebGLFloatBuffersStorage = new Float32Array(288);
  for (/**@suppress{duplicate}*/var i = 0; i < 288; ++i) {
  miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i+1);
  }
  ;
var ASSERTIONS = true;

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var asmLibraryArg = {
  "__assert_fail": ___assert_fail,
  "__syscall_fcntl64": ___syscall_fcntl64,
  "__syscall_ioctl": ___syscall_ioctl,
  "__syscall_openat": ___syscall_openat,
  "_embind_create_inheriting_constructor": __embind_create_inheriting_constructor,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_class_function": __embind_register_class_class_function,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "_emscripten_get_now_is_monotonic": __emscripten_get_now_is_monotonic,
  "_emval_call_void_method": __emval_call_void_method,
  "_emval_decref": __emval_decref,
  "_emval_get_method_caller": __emval_get_method_caller,
  "_emval_incref": __emval_incref,
  "abort": _abort,
  "emscripten_date_now": _emscripten_date_now,
  "emscripten_get_now": _emscripten_get_now,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "emscripten_run_script": _emscripten_run_script,
  "emscripten_set_main_loop": _emscripten_set_main_loop,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "glActiveTexture": _glActiveTexture,
  "glAttachShader": _glAttachShader,
  "glBindBuffer": _glBindBuffer,
  "glBindTexture": _glBindTexture,
  "glBindVertexArray": _glBindVertexArray,
  "glBufferData": _glBufferData,
  "glClear": _glClear,
  "glClearColor": _glClearColor,
  "glCompileShader": _glCompileShader,
  "glCreateProgram": _glCreateProgram,
  "glCreateShader": _glCreateShader,
  "glDeleteShader": _glDeleteShader,
  "glDrawArrays": _glDrawArrays,
  "glEnable": _glEnable,
  "glEnableVertexAttribArray": _glEnableVertexAttribArray,
  "glGenBuffers": _glGenBuffers,
  "glGenTextures": _glGenTextures,
  "glGenVertexArrays": _glGenVertexArrays,
  "glGenerateMipmap": _glGenerateMipmap,
  "glGetProgramInfoLog": _glGetProgramInfoLog,
  "glGetProgramiv": _glGetProgramiv,
  "glGetShaderInfoLog": _glGetShaderInfoLog,
  "glGetShaderiv": _glGetShaderiv,
  "glGetUniformLocation": _glGetUniformLocation,
  "glLinkProgram": _glLinkProgram,
  "glShaderSource": _glShaderSource,
  "glTexImage2D": _glTexImage2D,
  "glTexParameteri": _glTexParameteri,
  "glUniform1i": _glUniform1i,
  "glUniformMatrix4fv": _glUniformMatrix4fv,
  "glUseProgram": _glUseProgram,
  "glVertexAttribPointer": _glVertexAttribPointer,
  "glViewport": _glViewport,
  "glfwCreateWindow": _glfwCreateWindow,
  "glfwGetCurrentContext": _glfwGetCurrentContext,
  "glfwGetKey": _glfwGetKey,
  "glfwGetMouseButton": _glfwGetMouseButton,
  "glfwGetTime": _glfwGetTime,
  "glfwInit": _glfwInit,
  "glfwMakeContextCurrent": _glfwMakeContextCurrent,
  "glfwPollEvents": _glfwPollEvents,
  "glfwSetCursorPosCallback": _glfwSetCursorPosCallback,
  "glfwSetWindowShouldClose": _glfwSetWindowShouldClose,
  "glfwSwapBuffers": _glfwSwapBuffers,
  "glfwTerminate": _glfwTerminate,
  "glfwWindowHint": _glfwWindowHint,
  "memory": wasmMemory,
  "strftime_l": _strftime_l
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _main = Module["_main"] = createExportWrapper("__main_argc_argv");

/** @type {function(...*):?} */
var _stbi_load = Module["_stbi_load"] = createExportWrapper("stbi_load");

/** @type {function(...*):?} */
var _stbi_image_free = Module["_stbi_image_free"] = createExportWrapper("stbi_image_free");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _stbi_load_from_memory = Module["_stbi_load_from_memory"] = createExportWrapper("stbi_load_from_memory");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var __embind_initialize_bindings = Module["__embind_initialize_bindings"] = createExportWrapper("_embind_initialize_bindings");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var _saveSetjmp = Module["_saveSetjmp"] = createExportWrapper("saveSetjmp");

/** @type {function(...*):?} */
var setTempRet0 = Module["setTempRet0"] = createExportWrapper("setTempRet0");

/** @type {function(...*):?} */
var getTempRet0 = Module["getTempRet0"] = createExportWrapper("getTempRet0");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
  return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_get_current = Module["_emscripten_stack_get_current"] = function() {
  return (_emscripten_stack_get_current = Module["_emscripten_stack_get_current"] = Module["asm"]["emscripten_stack_get_current"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii");

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij");

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj");

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj");





// === Auto-generated postamble setup entry stuff ===

Module["run"] = run;
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
var unexportedRuntimeSymbols = [
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'FS_createFolder',
  'FS_createLink',
  'getLEB',
  'getFunctionTables',
  'alignFunctionTables',
  'registerFunctions',
  'prettyPrint',
  'getCompilerSetting',
  'out',
  'err',
  'callMain',
  'abort',
  'keepRuntimeAlive',
  'wasmMemory',
  'stackAlloc',
  'stackSave',
  'stackRestore',
  'getTempRet0',
  'setTempRet0',
  'writeStackCookie',
  'checkStackCookie',
  'intArrayFromBase64',
  'tryParseAsDataURI',
  'ptrToString',
  'zeroMemory',
  'stringToNewUTF8',
  'exitJS',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'emscripten_realloc_buffer',
  'ENV',
  'ERRNO_CODES',
  'ERRNO_MESSAGES',
  'setErrNo',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'DNS',
  'getHostByName',
  'Protocols',
  'Sockets',
  'getRandomDevice',
  'warnOnce',
  'traverseStack',
  'UNWIND_CACHE',
  'convertPCtoSourceLocation',
  'readEmAsmArgsArray',
  'readEmAsmArgs',
  'runEmAsmFunction',
  'runMainThreadEmAsm',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asmjsMangle',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertI32PairToI53Checked',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'freeTableIndexes',
  'functionsInTableMap',
  'getEmptyTableSlot',
  'updateTableMap',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'intArrayFromString',
  'intArrayToString',
  'AsciiToString',
  'stringToAscii',
  'UTF16Decoder',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'writeStringToMemory',
  'writeArrayToMemory',
  'writeAsciiToMemory',
  'SYSCALLS',
  'getSocketFromFD',
  'getSocketAddress',
  'JSEvents',
  'registerKeyEventCallback',
  'specialHTMLTargets',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'demangle',
  'demangleAll',
  'jsStackTrace',
  'stackTrace',
  'ExitStatus',
  'getEnvStrings',
  'checkWasiClock',
  'doReadv',
  'doWritev',
  'dlopenMissingError',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'exception_addRef',
  'exception_decRef',
  'Browser',
  'setMainLoop',
  'wget',
  'FS',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  '_setNetworkCallback',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'GL',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'AL',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'SDL',
  'SDL_gfx',
  'GLUT',
  'EGL',
  'GLFW_Window',
  'GLFW',
  'GLEW',
  'IDBStore',
  'runAndAbortIfError',
  'emscriptenWebGLGetIndexed',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'InternalError',
  'BindingError',
  'UnboundTypeError',
  'PureVirtualError',
  'init_embind',
  'throwInternalError',
  'throwBindingError',
  'throwUnboundTypeError',
  'ensureOverloadTable',
  'exposePublicSymbol',
  'replacePublicSymbol',
  'extendError',
  'createNamedFunction',
  'embindRepr',
  'registeredInstances',
  'getBasestPointer',
  'registerInheritedInstance',
  'unregisterInheritedInstance',
  'getInheritedInstance',
  'getInheritedInstanceCount',
  'getLiveInheritedInstances',
  'registeredTypes',
  'awaitingDependencies',
  'typeDependencies',
  'registeredPointers',
  'registerType',
  'whenDependentTypesAreResolved',
  'embind_charCodes',
  'embind_init_charCodes',
  'readLatin1String',
  'getTypeName',
  'heap32VectorToArray',
  'requireRegisteredType',
  'getShiftFromSize',
  'integerReadValueFromPointer',
  'enumReadValueFromPointer',
  'floatReadValueFromPointer',
  'simpleReadValueFromPointer',
  'runDestructors',
  'new_',
  'craftInvokerFunction',
  'embind__requireFunction',
  'tupleRegistrations',
  'structRegistrations',
  'genericPointerToWireType',
  'constNoSmartPtrRawPointerToWireType',
  'nonConstNoSmartPtrRawPointerToWireType',
  'init_RegisteredPointer',
  'RegisteredPointer',
  'RegisteredPointer_getPointee',
  'RegisteredPointer_destructor',
  'RegisteredPointer_deleteObject',
  'RegisteredPointer_fromWireType',
  'runDestructor',
  'releaseClassHandle',
  'finalizationRegistry',
  'detachFinalizer_deps',
  'detachFinalizer',
  'attachFinalizer',
  'makeClassHandle',
  'init_ClassHandle',
  'ClassHandle',
  'ClassHandle_isAliasOf',
  'throwInstanceAlreadyDeleted',
  'ClassHandle_clone',
  'ClassHandle_delete',
  'deletionQueue',
  'ClassHandle_isDeleted',
  'ClassHandle_deleteLater',
  'flushPendingDeletes',
  'delayFunction',
  'setDelayFunction',
  'RegisteredClass',
  'shallowCopyInternalPointer',
  'downcastPointer',
  'upcastPointer',
  'validateThis',
  'char_0',
  'char_9',
  'makeLegalFunctionName',
  'emval_handle_array',
  'emval_free_list',
  'emval_symbols',
  'init_emval',
  'count_emval_handles',
  'get_first_emval',
  'getStringOrSymbol',
  'Emval',
  'emval_newers',
  'craftEmvalAllocator',
  'emval_get_global',
  'emval_lookupTypes',
  'emval_allocateDestructors',
  'emval_methodCallers',
  'emval_addMethodCaller',
  'emval_registeredMethods',
];
unexportedRuntimeSymbols.forEach(unexportedRuntimeSymbol);
var missingLibrarySymbols = [
  'stringToNewUTF8',
  'emscripten_realloc_buffer',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'getHostByName',
  'traverseStack',
  'convertPCtoSourceLocation',
  'readEmAsmArgs',
  'runEmAsmFunction',
  'runMainThreadEmAsm',
  'jstoi_s',
  'listenOnce',
  'autoResumeAudioContext',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'asmjsMangle',
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'AsciiToString',
  'stringToAscii',
  'writeStringToMemory',
  'getSocketFromFD',
  'getSocketAddress',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'jsStackTrace',
  'stackTrace',
  'checkWasiClock',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'ExceptionInfo',
  'exception_addRef',
  'exception_decRef',
  '_setNetworkCallback',
  'emscriptenWebGLGet',
  'emscriptenWebGLGetUniform',
  'emscriptenWebGLGetVertexAttrib',
  'writeGLArray',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'runAndAbortIfError',
  'emscriptenWebGLGetIndexed',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'enumReadValueFromPointer',
  'validateThis',
  'craftEmvalAllocator',
  'emval_get_global',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)


var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];

  args = args || [];
  args.unshift(thisProgram);

  var argc = args.length;
  var argv = stackAlloc((argc + 1) * 4);
  var argv_ptr = argv >> 2;
  args.forEach((arg) => {
    HEAP32[argv_ptr++] = allocateUTF8OnStack(arg);
  });
  HEAP32[argv_ptr] = 0;

  try {

    var ret = entryFunction(argc, argv);

    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as
    // execution is asynchronously handed off to a pthread.
    // if we're not running an evented main loop, it's time to exit
    exitJS(ret, /* implicit = */ true);
    return ret;
  }
  catch (e) {
    return handleException(e);
  }
}

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;

run();





